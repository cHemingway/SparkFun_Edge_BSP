
bin/edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 61 d3 00 00 59 d3 00 00 fd c6 00 00     ....a...Y.......
    c010:	fd c6 00 00 fd c6 00 00 fd c6 00 00 00 00 00 00     ................
	...
    c02c:	5d d3 00 00 5d d3 00 00 00 00 00 00 5d d3 00 00     ]...].......]...
    c03c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c04c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c05c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c06c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 c9 d3 00 00     ]...]...].......
    c07c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 85 d4 00 00     ]...]...].......
    c08c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c09c:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c0ac:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c0bc:	5d d3 00 00 5d d3 00 00 5d d3 00 00 5d d3 00 00     ]...]...]...]...
    c0cc:	5d d3 00 00                                         ]...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23e:	f1a4 0401 	sub.w	r4, r4, #1
    c242:	d1e9      	bne.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c518:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c51c:	2100      	movs	r1, #0
{
    c51e:	b08c      	sub	sp, #48	; 0x30
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c520:	4608      	mov	r0, r1
    c522:	f001 fd45 	bl	dfb0 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c526:	4862      	ldr	r0, [pc, #392]	; (c6b0 <main+0x198>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c528:	4c62      	ldr	r4, [pc, #392]	; (c6b4 <main+0x19c>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c52a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; c6ec <main+0x1d4>
            acceleration_mg[0] =
    c52e:	4f62      	ldr	r7, [pc, #392]	; (c6b8 <main+0x1a0>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c530:	f001 fd0a 	bl	df48 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c534:	f001 fd32 	bl	df9c <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c538:	f001 fa86 	bl	da48 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c53c:	f001 faec 	bl	db18 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c540:	4b5e      	ldr	r3, [pc, #376]	; (c6bc <main+0x1a4>)
    c542:	681d      	ldr	r5, [r3, #0]
    c544:	202e      	movs	r0, #46	; 0x2e
    c546:	4629      	mov	r1, r5
    c548:	f001 feb2 	bl	e2b0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c54c:	4629      	mov	r1, r5
    c54e:	2025      	movs	r0, #37	; 0x25
    c550:	f001 feae 	bl	e2b0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c554:	4629      	mov	r1, r5
    c556:	202c      	movs	r0, #44	; 0x2c
    c558:	f001 feaa 	bl	e2b0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c55c:	4629      	mov	r1, r5
    c55e:	202f      	movs	r0, #47	; 0x2f
    c560:	f001 fea6 	bl	e2b0 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c564:	4b56      	ldr	r3, [pc, #344]	; (c6c0 <main+0x1a8>)
    c566:	200e      	movs	r0, #14
    c568:	6819      	ldr	r1, [r3, #0]
    c56a:	f001 fea1 	bl	e2b0 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c56e:	4b55      	ldr	r3, [pc, #340]	; (c6c4 <main+0x1ac>)
    c570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c574:	2220      	movs	r2, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c576:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c578:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c57a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c582:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c584:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c586:	f000 fee1 	bl	d34c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c58a:	484f      	ldr	r0, [pc, #316]	; (c6c8 <main+0x1b0>)
    c58c:	f000 fec2 	bl	d314 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c590:	4a4e      	ldr	r2, [pc, #312]	; (c6cc <main+0x1b4>)
    c592:	494f      	ldr	r1, [pc, #316]	; (c6d0 <main+0x1b8>)
    c594:	484f      	ldr	r0, [pc, #316]	; (c6d4 <main+0x1bc>)
    c596:	f000 febd 	bl	d314 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c59a:	484f      	ldr	r0, [pc, #316]	; (c6d8 <main+0x1c0>)
    c59c:	f000 feba 	bl	d314 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c5a0:	484e      	ldr	r0, [pc, #312]	; (c6dc <main+0x1c4>)
    c5a2:	f001 fa2d 	bl	da00 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c5a6:	f001 f8b7 	bl	d718 <initAccelerometer>
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c5aa:	4601      	mov	r1, r0
    c5ac:	484c      	ldr	r0, [pc, #304]	; (c6e0 <main+0x1c8>)
    c5ae:	f000 feb1 	bl	d314 <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c5b2:	f000 ffcb 	bl	d54c <initADC>
    enableAdcInterrupts();
    c5b6:	f000 ffe9 	bl	d58c <enableAdcInterrupts>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5ba:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c5bc:	2601      	movs	r6, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5be:	aa0b      	add	r2, sp, #44	; 0x2c
    c5c0:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c5c2:	960b      	str	r6, [sp, #44]	; 0x2c
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5c4:	f001 ffb4 	bl	e530 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c5c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5ca:	a90a      	add	r1, sp, #40	; 0x28
    c5cc:	4620      	mov	r0, r4
        if( pin14Val == 0 ){ break; }
    c5ce:	2d00      	cmp	r5, #0
    c5d0:	d059      	beq.n	c686 <main+0x16e>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5d2:	f001 f9f1 	bl	d9b8 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c5d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5da:	b9b3      	cbnz	r3, c60a <main+0xf2>
        lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);      
    c5dc:	a90a      	add	r1, sp, #40	; 0x28
    c5de:	4620      	mov	r0, r4
    c5e0:	f001 f91c 	bl	d81c <lis2dh12_temp_data_ready_get>
        if (reg.byte)    
    c5e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d0e6      	beq.n	c5ba <main+0xa2>
            memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
    c5ec:	4d3d      	ldr	r5, [pc, #244]	; (c6e4 <main+0x1cc>)
    c5ee:	2300      	movs	r3, #0
    c5f0:	802b      	strh	r3, [r5, #0]
            lis2dh12_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
    c5f2:	4629      	mov	r1, r5
    c5f4:	4620      	mov	r0, r4
    c5f6:	f001 f921 	bl	d83c <lis2dh12_temperature_raw_get>
            lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature.i16bit);
    c5fa:	f9b5 0000 	ldrsh.w	r0, [r5]
    c5fe:	f001 f8ff 	bl	d800 <lis2dh12_from_lsb_hr_to_celsius>
            temperature_degC =
    c602:	4b39      	ldr	r3, [pc, #228]	; (c6e8 <main+0x1d0>)
    c604:	ed83 0a00 	vstr	s0, [r3]
    {
    c608:	e7d7      	b.n	c5ba <main+0xa2>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c60a:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c60c:	4937      	ldr	r1, [pc, #220]	; (c6ec <main+0x1d4>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c60e:	f8c8 3000 	str.w	r3, [r8]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c612:	4620      	mov	r0, r4
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c614:	f8a8 3004 	strh.w	r3, [r8, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c618:	f001 f9de 	bl	d9d8 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c61c:	f9b8 0000 	ldrsh.w	r0, [r8]
    c620:	f001 f8e8 	bl	d7f4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c624:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
            acceleration_mg[0] =
    c628:	ed87 0a00 	vstr	s0, [r7]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c62c:	f001 f8e2 	bl	d7f4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c630:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
            acceleration_mg[1] =
    c634:	ed87 0a01 	vstr	s0, [r7, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c638:	f001 f8dc 	bl	d7f4 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c63c:	4b2c      	ldr	r3, [pc, #176]	; (c6f0 <main+0x1d8>)
            acceleration_mg[2] =
    c63e:	ed87 0a02 	vstr	s0, [r7, #8]
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c642:	6838      	ldr	r0, [r7, #0]
    c644:	681d      	ldr	r5, [r3, #0]
            acceleration_mg[2] =
    c646:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c64a:	f7ff febd 	bl	c3c8 <__aeabi_f2d>
    c64e:	4b26      	ldr	r3, [pc, #152]	; (c6e8 <main+0x1d0>)
    c650:	9506      	str	r5, [sp, #24]
    c652:	4682      	mov	sl, r0
    c654:	6818      	ldr	r0, [r3, #0]
    c656:	468b      	mov	fp, r1
    c658:	f7ff feb6 	bl	c3c8 <__aeabi_f2d>
    c65c:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
    c660:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c664:	ee10 0a10 	vmov	r0, s0
    c668:	f7ff feae 	bl	c3c8 <__aeabi_f2d>
    c66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c670:	6878      	ldr	r0, [r7, #4]
    c672:	f7ff fea9 	bl	c3c8 <__aeabi_f2d>
    c676:	4652      	mov	r2, sl
    c678:	e9cd 0100 	strd	r0, r1, [sp]
    c67c:	465b      	mov	r3, fp
    c67e:	481d      	ldr	r0, [pc, #116]	; (c6f4 <main+0x1dc>)
    c680:	f000 fe48 	bl	d314 <am_util_stdio_printf>
    c684:	e7aa      	b.n	c5dc <main+0xc4>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c686:	4b1c      	ldr	r3, [pc, #112]	; (c6f8 <main+0x1e0>)
    c688:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c68c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c68e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c692:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c696:	2020      	movs	r0, #32
    c698:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c69a:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c69c:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c69e:	f001 fa05 	bl	daac <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c6a2:	4630      	mov	r0, r6
    c6a4:	f002 fe76 	bl	f394 <am_hal_sysctrl_sleep>
}
    c6a8:	4628      	mov	r0, r5
    c6aa:	b00c      	add	sp, #48	; 0x30
    c6ac:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    c6b0:	000101cc 	.word	0x000101cc
    c6b4:	100012fc 	.word	0x100012fc
    c6b8:	100012ec 	.word	0x100012ec
    c6bc:	00010340 	.word	0x00010340
    c6c0:	000101d0 	.word	0x000101d0
    c6c4:	40010094 	.word	0x40010094
    c6c8:	0000fe38 	.word	0x0000fe38
    c6cc:	0000fe54 	.word	0x0000fe54
    c6d0:	0000fe60 	.word	0x0000fe60
    c6d4:	0000fe6c 	.word	0x0000fe6c
    c6d8:	0000fe84 	.word	0x0000fe84
    c6dc:	0000feb0 	.word	0x0000feb0
    c6e0:	0000fec0 	.word	0x0000fec0
    c6e4:	100012e8 	.word	0x100012e8
    c6e8:	100012dc 	.word	0x100012dc
    c6ec:	100012e0 	.word	0x100012e0
    c6f0:	10001160 	.word	0x10001160
    c6f4:	0000fee4 	.word	0x0000fee4
    c6f8:	4001009c 	.word	0x4001009c

0000c6fc <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6fc:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6fe:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c702:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c704:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c708:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c70c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c710:	f000 f806 	bl	c720 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c714:	bd01      	pop	{r0, pc}
    c716:	bf00      	nop

0000c718 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c718:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c71a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c71c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c71e:	4770      	bx	lr

0000c720 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c720:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c722:	2300      	movs	r3, #0
{
    c724:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c726:	e9cd 3300 	strd	r3, r3, [sp]
    c72a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c72e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c732:	4a27      	ldr	r2, [pc, #156]	; (c7d0 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c734:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c736:	6813      	ldr	r3, [r2, #0]
    c738:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c73c:	b2db      	uxtb	r3, r3
    c73e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c742:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c744:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c748:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c74e:	0c1b      	lsrs	r3, r3, #16
    c750:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c754:	6913      	ldr	r3, [r2, #16]
    c756:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c758:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c75c:	0792      	lsls	r2, r2, #30
{
    c75e:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c760:	d430      	bmi.n	c7c4 <am_util_faultisr_collect_data+0xa4>
    c762:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c766:	4619      	mov	r1, r3
    c768:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c76a:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76c:	f7ff ffd4 	bl	c718 <getStackedReg>
    c770:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c772:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c774:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c776:	f7ff ffcf 	bl	c718 <getStackedReg>
    c77a:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c77c:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c77e:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c780:	f7ff ffca 	bl	c718 <getStackedReg>
    c784:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c786:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c788:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c78a:	f7ff ffc5 	bl	c718 <getStackedReg>
    c78e:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c790:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c792:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c794:	f7ff ffc0 	bl	c718 <getStackedReg>
    c798:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c79a:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79c:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c79e:	f7ff ffbb 	bl	c718 <getStackedReg>
    c7a2:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7a4:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7a6:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7a8:	f7ff ffb6 	bl	c718 <getStackedReg>
    c7ac:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7ae:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b0:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7b2:	f7ff ffb1 	bl	c718 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7b6:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7b8:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7ba:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7bc:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7be:	f002 fc9d 	bl	f0fc <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c7c2:	e7fe      	b.n	c7c2 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7c4:	4601      	mov	r1, r0
    c7c6:	2006      	movs	r0, #6
    c7c8:	f7ff ffa6 	bl	c718 <getStackedReg>
    c7cc:	4602      	mov	r2, r0
    c7ce:	e7ca      	b.n	c766 <am_util_faultisr_collect_data+0x46>
    c7d0:	e000ed28 	.word	0xe000ed28

0000c7d4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c7d4:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c7d6:	460d      	mov	r5, r1
    c7d8:	2600      	movs	r6, #0
    c7da:	ea55 0306 	orrs.w	r3, r5, r6
    c7de:	d046      	beq.n	c86e <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7e0:	0842      	lsrs	r2, r0, #1
    c7e2:	0883      	lsrs	r3, r0, #2
    c7e4:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c7e8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c7ec:	18d2      	adds	r2, r2, r3
    c7ee:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c7f2:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c7f6:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c7fa:	0914      	lsrs	r4, r2, #4
    c7fc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c800:	1912      	adds	r2, r2, r4
    c802:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c806:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c80a:	0a14      	lsrs	r4, r2, #8
    c80c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c810:	1912      	adds	r2, r2, r4
    c812:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c816:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c81a:	0c14      	lsrs	r4, r2, #16
    c81c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c820:	1912      	adds	r2, r2, r4
    c822:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c826:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c82a:	18d2      	adds	r2, r2, r3
    c82c:	4634      	mov	r4, r6
    c82e:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c832:	08d3      	lsrs	r3, r2, #3
    c834:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c838:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c83a:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c83c:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c840:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c844:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c846:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c84a:	18e4      	adds	r4, r4, r3
    c84c:	eb42 0505 	adc.w	r5, r2, r5
    c850:	1924      	adds	r4, r4, r4
    c852:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c854:	1b00      	subs	r0, r0, r4
    c856:	eb61 0105 	sbc.w	r1, r1, r5
    c85a:	0900      	lsrs	r0, r0, #4
    c85c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c860:	18c0      	adds	r0, r0, r3
    c862:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c866:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c86a:	bc70      	pop	{r4, r5, r6}
    c86c:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c86e:	0883      	lsrs	r3, r0, #2
    c870:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c874:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c878:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c87c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c880:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c882:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c884:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c888:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c88c:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c890:	2100      	movs	r1, #0
}
    c892:	bc70      	pop	{r4, r5, r6}
    c894:	4770      	bx	lr
    c896:	bf00      	nop

0000c898 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c89c:	b08b      	sub	sp, #44	; 0x2c
    c89e:	f10d 080c 	add.w	r8, sp, #12
    c8a2:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c8a4:	f04f 0b00 	mov.w	fp, #0
    c8a8:	e049      	b.n	c93e <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c8aa:	eb12 020e 	adds.w	r2, r2, lr
    c8ae:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c8b2:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c8b6:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c8ba:	eb12 020e 	adds.w	r2, r2, lr
    c8be:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c8c2:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c8c6:	0a13      	lsrs	r3, r2, #8
    c8c8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c8cc:	18d2      	adds	r2, r2, r3
    c8ce:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c8d2:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c8d6:	0c13      	lsrs	r3, r2, #16
    c8d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c8dc:	18d2      	adds	r2, r2, r3
    c8de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c8e2:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c8e6:	1912      	adds	r2, r2, r4
    c8e8:	463b      	mov	r3, r7
    c8ea:	eb44 0303 	adc.w	r3, r4, r3
    c8ee:	461c      	mov	r4, r3
        q64 >>= 3;
    c8f0:	08d3      	lsrs	r3, r2, #3
    c8f2:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c8f6:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c8f8:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c8fa:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c8fe:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c902:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c904:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c908:	18e4      	adds	r4, r4, r3
    c90a:	eb42 0505 	adc.w	r5, r2, r5
    c90e:	1924      	adds	r4, r4, r4
    c910:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c912:	1b00      	subs	r0, r0, r4
    c914:	eb61 0105 	sbc.w	r1, r1, r5
    c918:	0900      	lsrs	r0, r0, #4
    c91a:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c91e:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c920:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c924:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c928:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c92c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c930:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c934:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c938:	f108 0801 	add.w	r8, r8, #1
{
    c93c:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c93e:	0883      	lsrs	r3, r0, #2
    c940:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c944:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c948:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c94c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c950:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c952:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c956:	1d83      	adds	r3, r0, #6
    c958:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c95c:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c960:	2700      	movs	r7, #0
    c962:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c964:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c968:	0842      	lsrs	r2, r0, #1
    c96a:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c96e:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c972:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c974:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c978:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c97c:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c980:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c984:	9700      	str	r7, [sp, #0]
    c986:	f10b 0901 	add.w	r9, fp, #1
    c98a:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c98c:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c990:	d18b      	bne.n	c8aa <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c992:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c996:	4618      	mov	r0, r3
    c998:	2100      	movs	r1, #0
    } while ( ui64Val );
    c99a:	2b00      	cmp	r3, #0
    c99c:	d1cc      	bne.n	c938 <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c99e:	9a01      	ldr	r2, [sp, #4]
    c9a0:	b172      	cbz	r2, c9c0 <uint64_to_str+0x128>
    c9a2:	ab03      	add	r3, sp, #12
    c9a4:	444b      	add	r3, r9
    c9a6:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c9a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c9ac:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c9b0:	a903      	add	r1, sp, #12
    c9b2:	4299      	cmp	r1, r3
    c9b4:	d1f8      	bne.n	c9a8 <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	445b      	add	r3, fp
    c9ba:	461a      	mov	r2, r3
    c9bc:	2300      	movs	r3, #0
    c9be:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c9c0:	4648      	mov	r0, r9
    c9c2:	b00b      	add	sp, #44	; 0x2c
    c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c9c8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c9c8:	4b01      	ldr	r3, [pc, #4]	; (c9d0 <am_util_stdio_printf_init+0x8>)
    c9ca:	6018      	str	r0, [r3, #0]
}
    c9cc:	4770      	bx	lr
    c9ce:	bf00      	nop
    c9d0:	100012f8 	.word	0x100012f8

0000c9d4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9d8:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c9da:	780b      	ldrb	r3, [r1, #0]
{
    c9dc:	9200      	str	r2, [sp, #0]
    c9de:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	f000 8355 	beq.w	d090 <am_util_stdio_vsprintf+0x6bc>
    c9e6:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c9e8:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c9ec:	2b25      	cmp	r3, #37	; 0x25
    c9ee:	f10a 0701 	add.w	r7, sl, #1
    c9f2:	d018      	beq.n	ca26 <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c9f4:	f10b 0201 	add.w	r2, fp, #1
    c9f8:	2c00      	cmp	r4, #0
    c9fa:	f000 8092 	beq.w	cb22 <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c9fe:	2b0a      	cmp	r3, #10
    ca00:	f104 0101 	add.w	r1, r4, #1
    ca04:	f000 808f 	beq.w	cb26 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    ca08:	7023      	strb	r3, [r4, #0]
    ca0a:	4693      	mov	fp, r2
    ca0c:	460c      	mov	r4, r1
            }

            ++pcFmt;
    ca0e:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    ca10:	f89a 3000 	ldrb.w	r3, [sl]
    ca14:	2b00      	cmp	r3, #0
    ca16:	d1e9      	bne.n	c9ec <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    ca18:	b10c      	cbz	r4, ca1e <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    ca1a:	2300      	movs	r3, #0
    ca1c:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    ca1e:	4658      	mov	r0, fp
    ca20:	b009      	add	sp, #36	; 0x24
    ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    ca26:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ca2a:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    ca2c:	bf03      	ittte	eq
    ca2e:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    ca32:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    ca36:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    ca38:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    ca3a:	2a2d      	cmp	r2, #45	; 0x2d
    ca3c:	f000 8083 	beq.w	cb46 <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca40:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    ca44:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca46:	2909      	cmp	r1, #9
    bool bNeg = false;
    ca48:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    ca4a:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca4c:	f200 8085 	bhi.w	cb5a <am_util_stdio_vsprintf+0x186>
    ca50:	3501      	adds	r5, #1
    ca52:	1aed      	subs	r5, r5, r3
    ca54:	2100      	movs	r1, #0
        ui32Val *= 10;
    ca56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    ca5a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ca5e:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ca66:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ca6a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    ca6c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca70:	d9f1      	bls.n	ca56 <am_util_stdio_vsprintf+0x82>
    ca72:	f817 200e 	ldrb.w	r2, [r7, lr]
    ca76:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    ca7a:	f1bc 0f00 	cmp.w	ip, #0
    ca7e:	d000      	beq.n	ca82 <am_util_stdio_vsprintf+0xae>
    ca80:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca82:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ca84:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca86:	f103 0a01 	add.w	sl, r3, #1
    ca8a:	f000 81ca 	beq.w	ce22 <am_util_stdio_vsprintf+0x44e>
    ca8e:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    ca92:	2a2e      	cmp	r2, #46	; 0x2e
    ca94:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    ca98:	f000 815c 	beq.w	cd54 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    ca9c:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    ca9e:	2a6c      	cmp	r2, #108	; 0x6c
    caa0:	d105      	bne.n	caae <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    caa2:	785a      	ldrb	r2, [r3, #1]
    caa4:	2a6c      	cmp	r2, #108	; 0x6c
    caa6:	f000 820a 	beq.w	cebe <am_util_stdio_vsprintf+0x4ea>
    caaa:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    caae:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    cab2:	2b32      	cmp	r3, #50	; 0x32
    cab4:	f200 8141 	bhi.w	cd3a <am_util_stdio_vsprintf+0x366>
    cab8:	e8df f013 	tbh	[pc, r3, lsl #1]
    cabc:	013f005b 	.word	0x013f005b
    cac0:	013f013f 	.word	0x013f013f
    cac4:	013f013f 	.word	0x013f013f
    cac8:	013f013f 	.word	0x013f013f
    cacc:	013f013f 	.word	0x013f013f
    cad0:	013f013f 	.word	0x013f013f
    cad4:	013f013f 	.word	0x013f013f
    cad8:	013f013f 	.word	0x013f013f
    cadc:	013f013f 	.word	0x013f013f
    cae0:	013f00d6 	.word	0x013f00d6
    cae4:	013f013f 	.word	0x013f013f
    cae8:	013f013f 	.word	0x013f013f
    caec:	013f013f 	.word	0x013f013f
    caf0:	013f013f 	.word	0x013f013f
    caf4:	0051013f 	.word	0x0051013f
    caf8:	013f00ed 	.word	0x013f00ed
    cafc:	013f005b 	.word	0x013f005b
    cb00:	00ed013f 	.word	0x00ed013f
    cb04:	013f013f 	.word	0x013f013f
    cb08:	013f013f 	.word	0x013f013f
    cb0c:	013f013f 	.word	0x013f013f
    cb10:	013f013f 	.word	0x013f013f
    cb14:	01b3013f 	.word	0x01b3013f
    cb18:	00d9013f 	.word	0x00d9013f
    cb1c:	013f013f 	.word	0x013f013f
    cb20:	00bc      	.short	0x00bc
    cb22:	4693      	mov	fp, r2
    cb24:	e773      	b.n	ca0e <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb26:	48ce      	ldr	r0, [pc, #824]	; (ce60 <am_util_stdio_vsprintf+0x48c>)
    cb28:	7800      	ldrb	r0, [r0, #0]
    cb2a:	2800      	cmp	r0, #0
    cb2c:	f43f af6c 	beq.w	ca08 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    cb30:	4620      	mov	r0, r4
    cb32:	230d      	movs	r3, #13
    cb34:	f800 3b02 	strb.w	r3, [r0], #2
    cb38:	460c      	mov	r4, r1
    cb3a:	f89a 3000 	ldrb.w	r3, [sl]
    cb3e:	f10b 0202 	add.w	r2, fp, #2
    cb42:	4601      	mov	r1, r0
    cb44:	e760      	b.n	ca08 <am_util_stdio_vsprintf+0x34>
        pcStr++;
    cb46:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    cb4c:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb4e:	2909      	cmp	r1, #9
        bNeg = true;
    cb50:	46ac      	mov	ip, r5
        pcStr++;
    cb52:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb56:	f67f af7b 	bls.w	ca50 <am_util_stdio_vsprintf+0x7c>
    cb5a:	2100      	movs	r1, #0
    cb5c:	e78d      	b.n	ca7a <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb5e:	9a00      	ldr	r2, [sp, #0]
    cb60:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    cb62:	b114      	cbz	r4, cb6a <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb64:	6812      	ldr	r2, [r2, #0]
    cb66:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    cb6a:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb6e:	9300      	str	r3, [sp, #0]
                break;
    cb70:	e74e      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    cb72:	2c00      	cmp	r4, #0
    cb74:	f43f af4c 	beq.w	ca10 <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    cb78:	9b00      	ldr	r3, [sp, #0]
    cb7a:	3307      	adds	r3, #7
    cb7c:	f023 0307 	bic.w	r3, r3, #7
    cb80:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    cb84:	9300      	str	r3, [sp, #0]
    cb86:	f7ff fc77 	bl	c478 <__aeabi_d2f>
    cb8a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cb8e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cb92:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cb98:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    cb9a:	f000 8372 	beq.w	d282 <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb9e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cba2:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    cba6:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    cba8:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbaa:	f3c0 0016 	ubfx	r0, r0, #0, #23
    cbae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    cbb2:	f300 8387 	bgt.w	d2c4 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    cbb6:	f112 0f17 	cmn.w	r2, #23
    cbba:	f2c0 8381 	blt.w	d2c0 <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    cbbe:	2a16      	cmp	r2, #22
    cbc0:	f104 0601 	add.w	r6, r4, #1
    cbc4:	f340 82a1 	ble.w	d10a <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    cbc8:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cbca:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cbcc:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cbd0:	f2c0 82e6 	blt.w	d1a0 <am_util_stdio_vsprintf+0x7cc>
    cbd4:	46a0      	mov	r8, r4
    i32FracPart = 0;
    cbd6:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    cbd8:	2800      	cmp	r0, #0
    cbda:	f000 8350 	beq.w	d27e <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    cbde:	f300 82a3 	bgt.w	d128 <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    cbe2:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    cbe4:	232d      	movs	r3, #45	; 0x2d
    cbe6:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    cbea:	4632      	mov	r2, r6
    cbec:	17c1      	asrs	r1, r0, #31
    cbee:	f7ff fe53 	bl	c898 <uint64_to_str>
            *pcBuf++ = '-';
    cbf2:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    cbf4:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    cbf6:	f898 3000 	ldrb.w	r3, [r8]
    cbfa:	b90b      	cbnz	r3, cc00 <am_util_stdio_vsprintf+0x22c>
    cbfc:	e380      	b.n	d300 <am_util_stdio_vsprintf+0x92c>
    cbfe:	46b0      	mov	r8, r6
    cc00:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    cc04:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d1f8      	bne.n	cbfe <am_util_stdio_vsprintf+0x22a>
    cc0c:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    cc10:	232e      	movs	r3, #46	; 0x2e
    cc12:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    cc14:	2d00      	cmp	r5, #0
    cc16:	f040 82e5 	bne.w	d1e4 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    cc1a:	1cb1      	adds	r1, r6, #2
    cc1c:	2330      	movs	r3, #48	; 0x30
    cc1e:	1b08      	subs	r0, r1, r4
    cc20:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    cc22:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    cc24:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    cc26:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    cc28:	f2c0 8310 	blt.w	d24c <am_util_stdio_vsprintf+0x878>
    cc2c:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    cc2e:	449b      	add	fp, r3
                    pcBuf += iVal;
    cc30:	441c      	add	r4, r3
    cc32:	e6ed      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    cc34:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    cc38:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc3a:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    cc3e:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc40:	2300      	movs	r3, #0
                if ( iWidth )
    cc42:	2900      	cmp	r1, #0
    cc44:	f040 81d5 	bne.w	cff2 <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    cc48:	ea52 0103 	orrs.w	r1, r2, r3
    cc4c:	f040 80ac 	bne.w	cda8 <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    cc50:	2c00      	cmp	r4, #0
    cc52:	d07b      	beq.n	cd4c <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    cc54:	4623      	mov	r3, r4
    cc56:	2230      	movs	r2, #48	; 0x30
    cc58:	f803 2b01 	strb.w	r2, [r3], #1
    cc5c:	2001      	movs	r0, #1
    cc5e:	461c      	mov	r4, r3
        *pcBuf = 0;
    cc60:	2200      	movs	r2, #0
    cc62:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    cc64:	4483      	add	fp, r0
                break;
    cc66:	e6d3      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    cc68:	f04f 0900 	mov.w	r9, #0
    cc6c:	e7e4      	b.n	cc38 <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    cc6e:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc70:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    cc74:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc76:	4690      	mov	r8, r2
    cc78:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    cc7c:	2900      	cmp	r1, #0
    cc7e:	f040 8213 	bne.w	d0a8 <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc82:	4640      	mov	r0, r8
    cc84:	4649      	mov	r1, r9
    cc86:	4622      	mov	r2, r4
    cc88:	f7ff fe06 	bl	c898 <uint64_to_str>
                if ( pcBuf )
    cc8c:	2c00      	cmp	r4, #0
    cc8e:	d05e      	beq.n	cd4e <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    cc90:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    cc92:	4483      	add	fp, r0
                break;
    cc94:	e6bc      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    cc96:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc98:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    cc9c:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc9e:	4690      	mov	r8, r2
    cca0:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    cca4:	f1b8 0f00 	cmp.w	r8, #0
    cca8:	f179 0300 	sbcs.w	r3, r9, #0
    ccac:	f2c0 8178 	blt.w	cfa0 <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    ccb0:	2900      	cmp	r1, #0
    ccb2:	d039      	beq.n	cd28 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    ccb4:	ea58 0309 	orrs.w	r3, r8, r9
    ccb8:	bf0c      	ite	eq
    ccba:	2701      	moveq	r7, #1
    ccbc:	2700      	movne	r7, #0
    while ( ui64Val )
    ccbe:	ea58 0309 	orrs.w	r3, r8, r9
    ccc2:	f000 8317 	beq.w	d2f4 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    ccc6:	2300      	movs	r3, #0
    ccc8:	9301      	str	r3, [sp, #4]
    ccca:	4640      	mov	r0, r8
    cccc:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    ccce:	f7ff fd81 	bl	c7d4 <divu64_10>
    while ( ui64Val )
    ccd2:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    ccd6:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    ccda:	d1f8      	bne.n	ccce <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    ccdc:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    ccde:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    cce0:	b123      	cbz	r3, ccec <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    cce2:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    cce4:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    cce8:	f000 8253 	beq.w	d192 <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    ccec:	2d00      	cmp	r5, #0
    ccee:	f340 82c4 	ble.w	d27a <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    ccf2:	1e6b      	subs	r3, r5, #1
    ccf4:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    ccf6:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    ccf8:	463d      	mov	r5, r7
    ccfa:	1e58      	subs	r0, r3, #1
    ccfc:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    ccfe:	2f00      	cmp	r7, #0
    cd00:	f000 8168 	beq.w	cfd4 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    cd04:	f805 6b01 	strb.w	r6, [r5], #1
    cd08:	4684      	mov	ip, r0
    cd0a:	462f      	mov	r7, r5
    cd0c:	4618      	mov	r0, r3
    cd0e:	460a      	mov	r2, r1
    cd10:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    cd12:	2800      	cmp	r0, #0
    cd14:	d1f0      	bne.n	ccf8 <am_util_stdio_vsprintf+0x324>
    cd16:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    cd18:	2c00      	cmp	r4, #0
    cd1a:	f000 829f 	beq.w	d25c <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cd1e:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    cd20:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cd22:	2b00      	cmp	r3, #0
    cd24:	f040 81b6 	bne.w	d094 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cd28:	4640      	mov	r0, r8
    cd2a:	4649      	mov	r1, r9
    cd2c:	4622      	mov	r2, r4
    cd2e:	f7ff fdb3 	bl	c898 <uint64_to_str>
                if ( pcBuf )
    cd32:	2c00      	cmp	r4, #0
    cd34:	d096      	beq.n	cc64 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    cd36:	4404      	add	r4, r0
    cd38:	e7ab      	b.n	cc92 <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    cd3a:	b10c      	cbz	r4, cd40 <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    cd3c:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    cd40:	f10b 0b01 	add.w	fp, fp, #1
                break;
    cd44:	e664      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    cd46:	ea52 0103 	orrs.w	r1, r2, r3
    cd4a:	d12d      	bne.n	cda8 <am_util_stdio_vsprintf+0x3d4>
    cd4c:	2001      	movs	r0, #1
                if ( pcBuf )
    cd4e:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    cd50:	4483      	add	fp, r0
                break;
    cd52:	e65d      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    cd54:	785a      	ldrb	r2, [r3, #1]
    cd56:	2a2d      	cmp	r2, #45	; 0x2d
    cd58:	f000 818e 	beq.w	d078 <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cd60:	2b09      	cmp	r3, #9
    cd62:	f200 8298 	bhi.w	d296 <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    cd66:	2000      	movs	r0, #0
    bool bNeg = false;
    cd68:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd6a:	46d6      	mov	lr, sl
    cd6c:	4653      	mov	r3, sl
    cd6e:	3001      	adds	r0, #1
    cd70:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    cd74:	2700      	movs	r7, #0
        ui32Val *= 10;
    cd76:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    cd7a:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    cd7e:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cd86:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cd8a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    cd8c:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd90:	d9f1      	bls.n	cd76 <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    cd92:	f1b8 0f00 	cmp.w	r8, #0
    cd96:	d000      	beq.n	cd9a <am_util_stdio_vsprintf+0x3c6>
    cd98:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    cd9a:	eb0a 030c 	add.w	r3, sl, ip
    cd9e:	f81a 200c 	ldrb.w	r2, [sl, ip]
    cda2:	f103 0a01 	add.w	sl, r3, #1
    cda6:	e67a      	b.n	ca9e <am_util_stdio_vsprintf+0xca>
    cda8:	f1b9 0f00 	cmp.w	r9, #0
    cdac:	bf14      	ite	ne
    cdae:	2627      	movne	r6, #39	; 0x27
    cdb0:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    cdb2:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    cdb6:	2700      	movs	r7, #0
    cdb8:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    cdba:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    cdbc:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cdc0:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    cdc2:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    cdc4:	ea4f 1913 	mov.w	r9, r3, lsr #4
    cdc8:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    cdcc:	f100 0030 	add.w	r0, r0, #48	; 0x30
    cdd0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    cdd4:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    cdd8:	d908      	bls.n	cdec <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    cdda:	462a      	mov	r2, r5
    cddc:	464b      	mov	r3, r9
    while ( ui64Val )
    cdde:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cde2:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    cde6:	d00a      	beq.n	cdfe <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    cde8:	4627      	mov	r7, r4
    cdea:	e7e6      	b.n	cdba <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    cdec:	462a      	mov	r2, r5
    cdee:	464b      	mov	r3, r9
    while ( ui64Val )
    cdf0:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cdf4:	f107 0401 	add.w	r4, r7, #1
    cdf8:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    cdfc:	d1f4      	bne.n	cde8 <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    cdfe:	4626      	mov	r6, r4
    ce00:	9c01      	ldr	r4, [sp, #4]
    ce02:	4630      	mov	r0, r6
    ce04:	2c00      	cmp	r4, #0
    ce06:	d0a2      	beq.n	cd4e <am_util_stdio_vsprintf+0x37a>
    ce08:	ab03      	add	r3, sp, #12
    ce0a:	4433      	add	r3, r6
    ce0c:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    ce0e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ce12:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    ce16:	a903      	add	r1, sp, #12
    ce18:	428b      	cmp	r3, r1
    ce1a:	d1f8      	bne.n	ce0e <am_util_stdio_vsprintf+0x43a>
    ce1c:	4434      	add	r4, r6
    ce1e:	4623      	mov	r3, r4
    ce20:	e71e      	b.n	cc60 <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    ce22:	f8dd c000 	ldr.w	ip, [sp]
    ce26:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	f000 8181 	beq.w	d132 <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    ce30:	4618      	mov	r0, r3
    ce32:	f810 1b01 	ldrb.w	r1, [r0], #1
    ce36:	2900      	cmp	r1, #0
    ce38:	f000 8231 	beq.w	d29e <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    ce3c:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    ce3e:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    ce42:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    ce44:	2a00      	cmp	r2, #0
    ce46:	d1fa      	bne.n	ce3e <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    ce48:	2d00      	cmp	r5, #0
    ce4a:	dd02      	ble.n	ce52 <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    ce4c:	42bd      	cmp	r5, r7
    ce4e:	f200 819c 	bhi.w	d18a <am_util_stdio_vsprintf+0x7b6>
    ce52:	f1c3 0801 	rsb	r8, r3, #1
    ce56:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    ce5a:	4622      	mov	r2, r4
    ce5c:	e003      	b.n	ce66 <am_util_stdio_vsprintf+0x492>
    ce5e:	bf00      	nop
    ce60:	1000105c 	.word	0x1000105c
                        *pcBuf++ = *pcStr;
    ce64:	4622      	mov	r2, r4
    ce66:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    ce6a:	2c00      	cmp	r4, #0
    ce6c:	f000 80b8 	beq.w	cfe0 <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    ce70:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    ce72:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    ce76:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    ce78:	2900      	cmp	r1, #0
    ce7a:	d1f3      	bne.n	ce64 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    ce7c:	46f3      	mov	fp, lr
                if ( iWidth )
    ce7e:	b1dd      	cbz	r5, ceb8 <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    ce80:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    ce82:	42bd      	cmp	r5, r7
    ce84:	d918      	bls.n	ceb8 <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    ce86:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    ce88:	2d00      	cmp	r5, #0
    ce8a:	f340 8217 	ble.w	d2bc <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    ce8e:	1e6b      	subs	r3, r5, #1
    ce90:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    ce92:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    ce94:	463d      	mov	r5, r7
    ce96:	1c51      	adds	r1, r2, #1
    ce98:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    ce9a:	2f00      	cmp	r7, #0
    ce9c:	f000 80e3 	beq.w	d066 <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    cea0:	f805 6b01 	strb.w	r6, [r5], #1
    cea4:	4686      	mov	lr, r0
    cea6:	4618      	mov	r0, r3
    cea8:	462f      	mov	r7, r5
    ceaa:	460a      	mov	r2, r1
    ceac:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    ceae:	2800      	cmp	r0, #0
    ceb0:	d1f0      	bne.n	ce94 <am_util_stdio_vsprintf+0x4c0>
    ceb2:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    ceb4:	b104      	cbz	r4, ceb8 <am_util_stdio_vsprintf+0x4e4>
    ceb6:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    ceb8:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    cebc:	e5a8      	b.n	ca10 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    cebe:	789a      	ldrb	r2, [r3, #2]
    cec0:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    cec4:	f103 0a03 	add.w	sl, r3, #3
    cec8:	2832      	cmp	r0, #50	; 0x32
    ceca:	f63f af36 	bhi.w	cd3a <am_util_stdio_vsprintf+0x366>
    cece:	a301      	add	r3, pc, #4	; (adr r3, ced4 <am_util_stdio_vsprintf+0x500>)
    ced0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    ced4:	0000cb73 	.word	0x0000cb73
    ced8:	0000cd3b 	.word	0x0000cd3b
    cedc:	0000cd3b 	.word	0x0000cd3b
    cee0:	0000cd3b 	.word	0x0000cd3b
    cee4:	0000cd3b 	.word	0x0000cd3b
    cee8:	0000cd3b 	.word	0x0000cd3b
    ceec:	0000cd3b 	.word	0x0000cd3b
    cef0:	0000cd3b 	.word	0x0000cd3b
    cef4:	0000cd3b 	.word	0x0000cd3b
    cef8:	0000cd3b 	.word	0x0000cd3b
    cefc:	0000cd3b 	.word	0x0000cd3b
    cf00:	0000cd3b 	.word	0x0000cd3b
    cf04:	0000cd3b 	.word	0x0000cd3b
    cf08:	0000cd3b 	.word	0x0000cd3b
    cf0c:	0000cd3b 	.word	0x0000cd3b
    cf10:	0000cd3b 	.word	0x0000cd3b
    cf14:	0000cd3b 	.word	0x0000cd3b
    cf18:	0000cd3b 	.word	0x0000cd3b
    cf1c:	0000d185 	.word	0x0000d185
    cf20:	0000cd3b 	.word	0x0000cd3b
    cf24:	0000cd3b 	.word	0x0000cd3b
    cf28:	0000cd3b 	.word	0x0000cd3b
    cf2c:	0000cd3b 	.word	0x0000cd3b
    cf30:	0000cd3b 	.word	0x0000cd3b
    cf34:	0000cd3b 	.word	0x0000cd3b
    cf38:	0000cd3b 	.word	0x0000cd3b
    cf3c:	0000cd3b 	.word	0x0000cd3b
    cf40:	0000cd3b 	.word	0x0000cd3b
    cf44:	0000cd3b 	.word	0x0000cd3b
    cf48:	0000cb5f 	.word	0x0000cb5f
    cf4c:	0000cfc5 	.word	0x0000cfc5
    cf50:	0000cd3b 	.word	0x0000cd3b
    cf54:	0000cb73 	.word	0x0000cb73
    cf58:	0000cd3b 	.word	0x0000cd3b
    cf5c:	0000cd3b 	.word	0x0000cd3b
    cf60:	0000cfc5 	.word	0x0000cfc5
    cf64:	0000cd3b 	.word	0x0000cd3b
    cf68:	0000cd3b 	.word	0x0000cd3b
    cf6c:	0000cd3b 	.word	0x0000cd3b
    cf70:	0000cd3b 	.word	0x0000cd3b
    cf74:	0000cd3b 	.word	0x0000cd3b
    cf78:	0000cd3b 	.word	0x0000cd3b
    cf7c:	0000cd3b 	.word	0x0000cd3b
    cf80:	0000cd3b 	.word	0x0000cd3b
    cf84:	0000cd3b 	.word	0x0000cd3b
    cf88:	0000ce23 	.word	0x0000ce23
    cf8c:	0000cd3b 	.word	0x0000cd3b
    cf90:	0000cfb5 	.word	0x0000cfb5
    cf94:	0000cd3b 	.word	0x0000cd3b
    cf98:	0000cd3b 	.word	0x0000cd3b
    cf9c:	0000d16f 	.word	0x0000d16f
                    ui64Val = -i64Val;          // Get absolute value
    cfa0:	f1d8 0800 	rsbs	r8, r8, #0
    cfa4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cfa8:	2900      	cmp	r1, #0
    cfaa:	d076      	beq.n	d09a <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cfac:	2301      	movs	r3, #1
    cfae:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cfb0:	2700      	movs	r7, #0
    cfb2:	e68a      	b.n	ccca <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfb4:	9b00      	ldr	r3, [sp, #0]
    cfb6:	3307      	adds	r3, #7
    cfb8:	f023 0307 	bic.w	r3, r3, #7
    cfbc:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cfc0:	9300      	str	r3, [sp, #0]
    cfc2:	e65b      	b.n	cc7c <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cfc4:	9b00      	ldr	r3, [sp, #0]
    cfc6:	3307      	adds	r3, #7
    cfc8:	f023 0307 	bic.w	r3, r3, #7
    cfcc:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cfd0:	9300      	str	r3, [sp, #0]
    cfd2:	e667      	b.n	cca4 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	f000 815b 	beq.w	d290 <am_util_stdio_vsprintf+0x8bc>
    cfda:	3b02      	subs	r3, #2
    cfdc:	3202      	adds	r2, #2
    cfde:	e698      	b.n	cd12 <am_util_stdio_vsprintf+0x33e>
    cfe0:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cfe4:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cfe6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cfea:	2900      	cmp	r1, #0
    cfec:	d1fa      	bne.n	cfe4 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cfee:	4683      	mov	fp, r0
    cff0:	e745      	b.n	ce7e <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cff2:	ea52 0103 	orrs.w	r1, r2, r3
    cff6:	bf0c      	ite	eq
    cff8:	f04f 0c01 	moveq.w	ip, #1
    cffc:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    d000:	ea52 0103 	orrs.w	r1, r2, r3
    d004:	d00d      	beq.n	d022 <am_util_stdio_vsprintf+0x64e>
    d006:	4610      	mov	r0, r2
    d008:	4619      	mov	r1, r3
        ui64Val >>= 4;
    d00a:	0907      	lsrs	r7, r0, #4
    d00c:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    d010:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    d014:	4638      	mov	r0, r7
    d016:	4671      	mov	r1, lr
    while ( ui64Val )
    d018:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    d01c:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    d020:	d1f3      	bne.n	d00a <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    d022:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    d026:	2900      	cmp	r1, #0
    d028:	f340 8125 	ble.w	d276 <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    d02c:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    d02e:	2000      	movs	r0, #0
    d030:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    d032:	46ac      	mov	ip, r5
    d034:	1e4f      	subs	r7, r1, #1
    d036:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    d03a:	b175      	cbz	r5, d05a <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    d03c:	f80c 6b01 	strb.w	r6, [ip], #1
    d040:	46b8      	mov	r8, r7
    d042:	4665      	mov	r5, ip
    d044:	460f      	mov	r7, r1
    d046:	4670      	mov	r0, lr
    d048:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    d04a:	2f00      	cmp	r7, #0
    d04c:	d1f1      	bne.n	d032 <am_util_stdio_vsprintf+0x65e>
    d04e:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    d050:	2c00      	cmp	r4, #0
    d052:	f43f ae78 	beq.w	cd46 <am_util_stdio_vsprintf+0x372>
    d056:	4404      	add	r4, r0
                    iWidth = 0;
    d058:	e5f6      	b.n	cc48 <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    d05a:	2900      	cmp	r1, #0
    d05c:	f000 8115 	beq.w	d28a <am_util_stdio_vsprintf+0x8b6>
    d060:	3902      	subs	r1, #2
    d062:	3002      	adds	r0, #2
    d064:	e7f1      	b.n	d04a <am_util_stdio_vsprintf+0x676>
    d066:	2b00      	cmp	r3, #0
    d068:	f000 8136 	beq.w	d2d8 <am_util_stdio_vsprintf+0x904>
    d06c:	3b02      	subs	r3, #2
    d06e:	3202      	adds	r2, #2
    d070:	2800      	cmp	r0, #0
    d072:	f47f af0f 	bne.w	ce94 <am_util_stdio_vsprintf+0x4c0>
    d076:	e71c      	b.n	ceb2 <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    d078:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d07a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    d07e:	2809      	cmp	r0, #9
        pcStr++;
    d080:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d084:	f200 8124 	bhi.w	d2d0 <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    d088:	2001      	movs	r0, #1
        bNeg = true;
    d08a:	4680      	mov	r8, r0
        pcStr++;
    d08c:	469e      	mov	lr, r3
    d08e:	e66e      	b.n	cd6e <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d090:	469b      	mov	fp, r3
    d092:	e4c1      	b.n	ca18 <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d094:	2e20      	cmp	r6, #32
    d096:	f47f ae47 	bne.w	cd28 <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    d09a:	b114      	cbz	r4, d0a2 <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    d09c:	232d      	movs	r3, #45	; 0x2d
    d09e:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    d0a2:	f10b 0b01 	add.w	fp, fp, #1
    d0a6:	e63f      	b.n	cd28 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    d0a8:	ea58 0309 	orrs.w	r3, r8, r9
    d0ac:	bf0c      	ite	eq
    d0ae:	2701      	moveq	r7, #1
    d0b0:	2700      	movne	r7, #0
    while ( ui64Val )
    d0b2:	ea58 0309 	orrs.w	r3, r8, r9
    d0b6:	d008      	beq.n	d0ca <am_util_stdio_vsprintf+0x6f6>
    d0b8:	4640      	mov	r0, r8
    d0ba:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    d0bc:	f7ff fb8a 	bl	c7d4 <divu64_10>
    while ( ui64Val )
    d0c0:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    d0c4:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    d0c8:	d1f8      	bne.n	d0bc <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    d0ca:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	f340 80f3 	ble.w	d2b8 <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    d0d2:	3b01      	subs	r3, #1
    d0d4:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    d0d6:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    d0d8:	4628      	mov	r0, r5
    d0da:	1c51      	adds	r1, r2, #1
    d0dc:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    d0de:	b16d      	cbz	r5, d0fc <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    d0e0:	f800 6b01 	strb.w	r6, [r0], #1
    d0e4:	460a      	mov	r2, r1
    d0e6:	4605      	mov	r5, r0
    d0e8:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    d0ea:	463b      	mov	r3, r7
    d0ec:	2900      	cmp	r1, #0
    d0ee:	d1f3      	bne.n	d0d8 <am_util_stdio_vsprintf+0x704>
    d0f0:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    d0f2:	2c00      	cmp	r4, #0
    d0f4:	f000 80da 	beq.w	d2ac <am_util_stdio_vsprintf+0x8d8>
    d0f8:	4414      	add	r4, r2
                    iWidth = 0;
    d0fa:	e5c2      	b.n	cc82 <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	f000 80ee 	beq.w	d2de <am_util_stdio_vsprintf+0x90a>
    d102:	4639      	mov	r1, r7
    d104:	3202      	adds	r2, #2
    d106:	1e9f      	subs	r7, r3, #2
    d108:	e7ef      	b.n	d0ea <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    d10a:	2a00      	cmp	r2, #0
    d10c:	db50      	blt.n	d1b0 <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d10e:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    d112:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    d116:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d11a:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d11c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d120:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d124:	db3d      	blt.n	d1a2 <am_util_stdio_vsprintf+0x7ce>
    d126:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    d128:	4642      	mov	r2, r8
    d12a:	17c1      	asrs	r1, r0, #31
    d12c:	f7ff fbb4 	bl	c898 <uint64_to_str>
    d130:	e561      	b.n	cbf6 <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    d132:	2d00      	cmp	r5, #0
    d134:	dd49      	ble.n	d1ca <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    d136:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d138:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    d13a:	2200      	movs	r2, #0
    d13c:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    d13e:	4608      	mov	r0, r1
    d140:	f105 3eff 	add.w	lr, r5, #4294967295
    d144:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    d148:	2900      	cmp	r1, #0
    d14a:	d044      	beq.n	d1d6 <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    d14c:	f800 6b01 	strb.w	r6, [r0], #1
    d150:	4642      	mov	r2, r8
    d152:	4601      	mov	r1, r0
    d154:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    d156:	4675      	mov	r5, lr
    d158:	2800      	cmp	r0, #0
    d15a:	d1f0      	bne.n	d13e <am_util_stdio_vsprintf+0x76a>
    d15c:	7819      	ldrb	r1, [r3, #0]
    d15e:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    d160:	b104      	cbz	r4, d164 <am_util_stdio_vsprintf+0x790>
    d162:	4414      	add	r4, r2
                        iWidth = 0;
    d164:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    d166:	2900      	cmp	r1, #0
    d168:	f47f ae73 	bne.w	ce52 <am_util_stdio_vsprintf+0x47e>
    d16c:	e6a4      	b.n	ceb8 <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    d16e:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d172:	9b00      	ldr	r3, [sp, #0]
    d174:	3307      	adds	r3, #7
    d176:	f023 0307 	bic.w	r3, r3, #7
    d17a:	4618      	mov	r0, r3
    d17c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    d180:	9000      	str	r0, [sp, #0]
    d182:	e55e      	b.n	cc42 <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    d184:	f04f 0900 	mov.w	r9, #0
    d188:	e7f3      	b.n	d172 <am_util_stdio_vsprintf+0x79e>
    d18a:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    d18c:	2d00      	cmp	r5, #0
    d18e:	dde7      	ble.n	d160 <am_util_stdio_vsprintf+0x78c>
    d190:	e7d2      	b.n	d138 <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    d192:	b114      	cbz	r4, d19a <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    d194:	232d      	movs	r3, #45	; 0x2d
    d196:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    d19a:	f10b 0b01 	add.w	fp, fp, #1
    d19e:	e5a5      	b.n	ccec <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    d1a0:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    d1a2:	4623      	mov	r3, r4
    d1a4:	222d      	movs	r2, #45	; 0x2d
    d1a6:	f803 2b02 	strb.w	r2, [r3], #2
    d1aa:	46b0      	mov	r8, r6
    d1ac:	461e      	mov	r6, r3
    d1ae:	e513      	b.n	cbd8 <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d1b0:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d1b2:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d1b4:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    d1b8:	f104 0202 	add.w	r2, r4, #2
    d1bc:	f2c0 8092 	blt.w	d2e4 <am_util_stdio_vsprintf+0x910>
    d1c0:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    d1c2:	2330      	movs	r3, #48	; 0x30
    d1c4:	f888 3000 	strb.w	r3, [r8]
    d1c8:	e522      	b.n	cc10 <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    d1ca:	7819      	ldrb	r1, [r3, #0]
    d1cc:	b909      	cbnz	r1, d1d2 <am_util_stdio_vsprintf+0x7fe>
    d1ce:	460f      	mov	r7, r1
    d1d0:	e655      	b.n	ce7e <am_util_stdio_vsprintf+0x4aa>
    d1d2:	461f      	mov	r7, r3
    d1d4:	e63d      	b.n	ce52 <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    d1d6:	2d00      	cmp	r5, #0
    d1d8:	d076      	beq.n	d2c8 <am_util_stdio_vsprintf+0x8f4>
    d1da:	4670      	mov	r0, lr
    d1dc:	3202      	adds	r2, #2
    d1de:	f1a5 0e02 	sub.w	lr, r5, #2
    d1e2:	e7b8      	b.n	d156 <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d1e4:	1b10      	subs	r0, r2, r4
    d1e6:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d1ea:	429f      	cmp	r7, r3
    d1ec:	bfa8      	it	ge
    d1ee:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    d1f0:	2f00      	cmp	r7, #0
    d1f2:	f340 8083 	ble.w	d2fc <am_util_stdio_vsprintf+0x928>
    d1f6:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    d1f8:	4610      	mov	r0, r2
            i32FracPart *= 10;
    d1fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d1fe:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d200:	162b      	asrs	r3, r5, #24
    d202:	3330      	adds	r3, #48	; 0x30
    d204:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    d208:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    d20a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d20e:	d1f4      	bne.n	d1fa <am_util_stdio_vsprintf+0x826>
    d210:	3f01      	subs	r7, #1
    d212:	19d6      	adds	r6, r2, r7
    d214:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d216:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d21a:	f345 52c7 	sbfx	r2, r5, #23, #8
    d21e:	2a04      	cmp	r2, #4
    d220:	f77f acff 	ble.w	cc22 <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    d224:	42a6      	cmp	r6, r4
    d226:	f4ff acfc 	bcc.w	cc22 <am_util_stdio_vsprintf+0x24e>
    d22a:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    d22c:	2630      	movs	r6, #48	; 0x30
    d22e:	e003      	b.n	d238 <am_util_stdio_vsprintf+0x864>
    d230:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d232:	429c      	cmp	r4, r3
    d234:	f63f acf5 	bhi.w	cc22 <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    d238:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    d23a:	f813 2901 	ldrb.w	r2, [r3], #-1
    d23e:	2a2e      	cmp	r2, #46	; 0x2e
    d240:	d0f7      	beq.n	d232 <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    d242:	2a39      	cmp	r2, #57	; 0x39
    d244:	d0f4      	beq.n	d230 <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    d246:	3201      	adds	r2, #1
    d248:	702a      	strb	r2, [r5, #0]
                    break;
    d24a:	e4ea      	b.n	cc22 <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d24c:	1c43      	adds	r3, r0, #1
    d24e:	d037      	beq.n	d2c0 <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d250:	3002      	adds	r0, #2
    d252:	d037      	beq.n	d2c4 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d254:	4b2c      	ldr	r3, [pc, #176]	; (d308 <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d256:	6023      	str	r3, [r4, #0]
    d258:	2303      	movs	r3, #3
    d25a:	e4e8      	b.n	cc2e <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d25c:	9b01      	ldr	r3, [sp, #4]
    d25e:	b113      	cbz	r3, d266 <am_util_stdio_vsprintf+0x892>
    d260:	2e20      	cmp	r6, #32
    d262:	f43f af1e 	beq.w	d0a2 <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d266:	4640      	mov	r0, r8
    d268:	4649      	mov	r1, r9
    d26a:	4622      	mov	r2, r4
    d26c:	f7ff fb14 	bl	c898 <uint64_to_str>
                ui32CharCnt += iVal;
    d270:	4483      	add	fp, r0
                break;
    d272:	f7ff bbcd 	b.w	ca10 <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    d276:	2000      	movs	r0, #0
    d278:	e6ea      	b.n	d050 <am_util_stdio_vsprintf+0x67c>
    d27a:	2200      	movs	r2, #0
    d27c:	e54c      	b.n	cd18 <am_util_stdio_vsprintf+0x344>
    d27e:	1c72      	adds	r2, r6, #1
    d280:	e79f      	b.n	d1c2 <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d282:	4b22      	ldr	r3, [pc, #136]	; (d30c <am_util_stdio_vsprintf+0x938>)
    d284:	6023      	str	r3, [r4, #0]
    d286:	2303      	movs	r3, #3
    d288:	e4d1      	b.n	cc2e <am_util_stdio_vsprintf+0x25a>
    d28a:	4670      	mov	r0, lr
    d28c:	44f3      	add	fp, lr
    d28e:	e6df      	b.n	d050 <am_util_stdio_vsprintf+0x67c>
    d290:	460a      	mov	r2, r1
    d292:	448b      	add	fp, r1
    d294:	e540      	b.n	cd18 <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    d296:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d29a:	4667      	mov	r7, ip
    d29c:	e57d      	b.n	cd9a <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    d29e:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    d2a0:	bfc8      	it	gt
    d2a2:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    d2a4:	f73f af48 	bgt.w	d138 <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    d2a8:	460f      	mov	r7, r1
    d2aa:	e5e8      	b.n	ce7e <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d2ac:	4622      	mov	r2, r4
    d2ae:	4640      	mov	r0, r8
    d2b0:	4649      	mov	r1, r9
    d2b2:	f7ff faf1 	bl	c898 <uint64_to_str>
                if ( pcBuf )
    d2b6:	e54a      	b.n	cd4e <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    d2b8:	2200      	movs	r2, #0
    d2ba:	e71a      	b.n	d0f2 <am_util_stdio_vsprintf+0x71e>
    d2bc:	2200      	movs	r2, #0
    d2be:	e5f9      	b.n	ceb4 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d2c0:	4b12      	ldr	r3, [pc, #72]	; (d30c <am_util_stdio_vsprintf+0x938>)
    d2c2:	e7c8      	b.n	d256 <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2c4:	4b12      	ldr	r3, [pc, #72]	; (d310 <am_util_stdio_vsprintf+0x93c>)
    d2c6:	e7c6      	b.n	d256 <am_util_stdio_vsprintf+0x882>
    d2c8:	4642      	mov	r2, r8
    d2ca:	44c3      	add	fp, r8
    d2cc:	7819      	ldrb	r1, [r3, #0]
    d2ce:	e747      	b.n	d160 <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    d2d0:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d2d4:	2700      	movs	r7, #0
    d2d6:	e55f      	b.n	cd98 <am_util_stdio_vsprintf+0x3c4>
    d2d8:	460a      	mov	r2, r1
    d2da:	448b      	add	fp, r1
    d2dc:	e5ea      	b.n	ceb4 <am_util_stdio_vsprintf+0x4e0>
    d2de:	460a      	mov	r2, r1
    d2e0:	448b      	add	fp, r1
    d2e2:	e706      	b.n	d0f2 <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    d2e4:	4623      	mov	r3, r4
    d2e6:	212d      	movs	r1, #45	; 0x2d
    d2e8:	f803 1b03 	strb.w	r1, [r3], #3
    d2ec:	46b0      	mov	r8, r6
    d2ee:	4616      	mov	r6, r2
    d2f0:	461a      	mov	r2, r3
    d2f2:	e766      	b.n	d1c2 <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    d2f4:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d2f6:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    d2f8:	9301      	str	r3, [sp, #4]
    d2fa:	e4f7      	b.n	ccec <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    d2fc:	4611      	mov	r1, r2
    d2fe:	e78a      	b.n	d216 <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    d300:	4632      	mov	r2, r6
    d302:	4646      	mov	r6, r8
    d304:	e484      	b.n	cc10 <am_util_stdio_vsprintf+0x23c>
    d306:	bf00      	nop
    d308:	003f2e3f 	.word	0x003f2e3f
    d30c:	00302e30 	.word	0x00302e30
    d310:	00232e23 	.word	0x00232e23

0000d314 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d314:	b40f      	push	{r0, r1, r2, r3}
    d316:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d318:	4d0a      	ldr	r5, [pc, #40]	; (d344 <am_util_stdio_printf+0x30>)
    d31a:	682c      	ldr	r4, [r5, #0]
{
    d31c:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d31e:	b154      	cbz	r4, d336 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d320:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d322:	461a      	mov	r2, r3
    d324:	9906      	ldr	r1, [sp, #24]
    d326:	4808      	ldr	r0, [pc, #32]	; (d348 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d328:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d32a:	f7ff fb53 	bl	c9d4 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d32e:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d330:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d332:	4805      	ldr	r0, [pc, #20]	; (d348 <am_util_stdio_printf+0x34>)
    d334:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d336:	4620      	mov	r0, r4
    d338:	b003      	add	sp, #12
    d33a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d33e:	b004      	add	sp, #16
    d340:	4770      	bx	lr
    d342:	bf00      	nop
    d344:	100012f8 	.word	0x100012f8
    d348:	10001060 	.word	0x10001060

0000d34c <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d34c:	4801      	ldr	r0, [pc, #4]	; (d354 <am_util_stdio_terminal_clear+0x8>)
    d34e:	f7ff bfe1 	b.w	d314 <am_util_stdio_printf>
    d352:	bf00      	nop
    d354:	0000ff3c 	.word	0x0000ff3c

0000d358 <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    d358:	e7fe      	b.n	d358 <NMI_Handler>
    d35a:	bf00      	nop

0000d35c <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    d35c:	e7fe      	b.n	d35c <DebugMon_Handler>
    d35e:	bf00      	nop

0000d360 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d360:	4811      	ldr	r0, [pc, #68]	; (d3a8 <zero_loop+0x12>)
    d362:	4912      	ldr	r1, [pc, #72]	; (d3ac <zero_loop+0x16>)
    d364:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d366:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d36a:	4811      	ldr	r0, [pc, #68]	; (d3b0 <zero_loop+0x1a>)
    d36c:	6801      	ldr	r1, [r0, #0]
    d36e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d372:	6001      	str	r1, [r0, #0]
    d374:	f3bf 8f4f 	dsb	sy
    d378:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d37c:	480d      	ldr	r0, [pc, #52]	; (d3b4 <zero_loop+0x1e>)
    d37e:	490e      	ldr	r1, [pc, #56]	; (d3b8 <zero_loop+0x22>)
    d380:	4a0e      	ldr	r2, [pc, #56]	; (d3bc <zero_loop+0x26>)

0000d382 <copy_loop>:
    d382:	f850 3b04 	ldr.w	r3, [r0], #4
    d386:	f841 3b04 	str.w	r3, [r1], #4
    d38a:	4291      	cmp	r1, r2
    d38c:	dbf9      	blt.n	d382 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d38e:	480c      	ldr	r0, [pc, #48]	; (d3c0 <zero_loop+0x2a>)
    d390:	490c      	ldr	r1, [pc, #48]	; (d3c4 <zero_loop+0x2e>)
    d392:	f04f 0200 	mov.w	r2, #0

0000d396 <zero_loop>:
    d396:	4288      	cmp	r0, r1
    d398:	bfb8      	it	lt
    d39a:	f840 2b04 	strlt.w	r2, [r0], #4
    d39e:	dbfa      	blt.n	d396 <zero_loop>
    main();
    d3a0:	f7ff f8ba 	bl	c518 <main>
    __asm("    bkpt     ");
    d3a4:	be00      	bkpt	0x0000
}
    d3a6:	0000      	.short	0x0000
    d3a8:	e000ed08 	.word	0xe000ed08
    d3ac:	0000c000 	.word	0x0000c000
    d3b0:	e000ed88 	.word	0xe000ed88
    d3b4:	000105b8 	.word	0x000105b8
    d3b8:	10001000 	.word	0x10001000
    d3bc:	1000105c 	.word	0x1000105c
    d3c0:	1000105c 	.word	0x1000105c
    d3c4:	10004bc0 	.word	0x10004bc0

0000d3c8 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d3c8:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d3ca:	2001      	movs	r0, #1
{
    d3cc:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d3ce:	f000 ff2f 	bl	e230 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d3d2:	4925      	ldr	r1, [pc, #148]	; (d468 <am_ctimer_isr+0xa0>)
    d3d4:	2000      	movs	r0, #0
    d3d6:	f000 fbcd 	bl	db74 <am_hal_adc_initialize>
    d3da:	bb68      	cbnz	r0, d438 <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d3dc:	4c22      	ldr	r4, [pc, #136]	; (d468 <am_ctimer_isr+0xa0>)
    d3de:	2200      	movs	r2, #0
    d3e0:	6820      	ldr	r0, [r4, #0]
    d3e2:	4611      	mov	r1, r2
    d3e4:	f000 fd4c 	bl	de80 <am_hal_adc_power_control>
    d3e8:	2800      	cmp	r0, #0
    d3ea:	d139      	bne.n	d460 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d3ec:	4b1f      	ldr	r3, [pc, #124]	; (d46c <am_ctimer_isr+0xa4>)
    d3ee:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d3f0:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d3f2:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d3f4:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d3f6:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d3fa:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d3fc:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d400:	f000 fbfa 	bl	dbf8 <am_hal_adc_configure>
    d404:	bb40      	cbnz	r0, d458 <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d406:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d40a:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d40c:	466a      	mov	r2, sp
    d40e:	2100      	movs	r1, #0
    d410:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d412:	9500      	str	r5, [sp, #0]
    ADCSlotConfig.bEnabled        = true;
    d414:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d418:	f000 fc26 	bl	dc68 <am_hal_adc_configure_slot>
    d41c:	b9c0      	cbnz	r0, d450 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d41e:	2101      	movs	r1, #1
    d420:	6820      	ldr	r0, [r4, #0]
    d422:	f000 fc8f 	bl	dd44 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d426:	6820      	ldr	r0, [r4, #0]
    d428:	f000 fc54 	bl	dcd4 <am_hal_adc_enable>
    d42c:	b940      	cbnz	r0, d440 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d42e:	6820      	ldr	r0, [r4, #0]
    d430:	f000 fd14 	bl	de5c <am_hal_adc_sw_trigger>
}
    d434:	b005      	add	sp, #20
    d436:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d438:	480d      	ldr	r0, [pc, #52]	; (d470 <am_ctimer_isr+0xa8>)
    d43a:	f7ff ff6b 	bl	d314 <am_util_stdio_printf>
    d43e:	e7cd      	b.n	d3dc <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d440:	480c      	ldr	r0, [pc, #48]	; (d474 <am_ctimer_isr+0xac>)
    d442:	f7ff ff67 	bl	d314 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d446:	6820      	ldr	r0, [r4, #0]
    d448:	f000 fd08 	bl	de5c <am_hal_adc_sw_trigger>
}
    d44c:	b005      	add	sp, #20
    d44e:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d450:	4809      	ldr	r0, [pc, #36]	; (d478 <am_ctimer_isr+0xb0>)
    d452:	f7ff ff5f 	bl	d314 <am_util_stdio_printf>
    d456:	e7e2      	b.n	d41e <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d458:	4808      	ldr	r0, [pc, #32]	; (d47c <am_ctimer_isr+0xb4>)
    d45a:	f7ff ff5b 	bl	d314 <am_util_stdio_printf>
    d45e:	e7d2      	b.n	d406 <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d460:	4807      	ldr	r0, [pc, #28]	; (d480 <am_ctimer_isr+0xb8>)
    d462:	f7ff ff57 	bl	d314 <am_util_stdio_printf>
    d466:	e7c1      	b.n	d3ec <am_ctimer_isr+0x24>
    d468:	10001164 	.word	0x10001164
    d46c:	00070001 	.word	0x00070001
    d470:	00010044 	.word	0x00010044
    d474:	000100e4 	.word	0x000100e4
    d478:	000100bc 	.word	0x000100bc
    d47c:	00010098 	.word	0x00010098
    d480:	00010078 	.word	0x00010078

0000d484 <am_adc_isr>:
{
    d484:	b530      	push	{r4, r5, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d486:	4c29      	ldr	r4, [pc, #164]	; (d52c <am_adc_isr+0xa8>)
{
    d488:	b085      	sub	sp, #20
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d48a:	2200      	movs	r2, #0
    d48c:	6820      	ldr	r0, [r4, #0]
    d48e:	4669      	mov	r1, sp
    d490:	f000 fc6e 	bl	dd70 <am_hal_adc_interrupt_status>
    d494:	b9e0      	cbnz	r0, d4d0 <am_adc_isr+0x4c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d496:	9900      	ldr	r1, [sp, #0]
    d498:	6820      	ldr	r0, [r4, #0]
    d49a:	f000 fc87 	bl	ddac <am_hal_adc_interrupt_clear>
    d49e:	bb00      	cbnz	r0, d4e2 <am_adc_isr+0x5e>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d4a0:	9b00      	ldr	r3, [sp, #0]
    d4a2:	6820      	ldr	r0, [r4, #0]
    d4a4:	07db      	lsls	r3, r3, #31
    d4a6:	d423      	bmi.n	d4f0 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d4a8:	4b21      	ldr	r3, [pc, #132]	; (d530 <am_adc_isr+0xac>)
    d4aa:	9a02      	ldr	r2, [sp, #8]
    d4ac:	601a      	str	r2, [r3, #0]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d4ae:	f000 fc31 	bl	dd14 <am_hal_adc_disable>
    d4b2:	2800      	cmp	r0, #0
    d4b4:	d132      	bne.n	d51c <am_adc_isr+0x98>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d4b6:	200a      	movs	r0, #10
    d4b8:	f001 fee0 	bl	f27c <am_hal_pwrctrl_periph_disable>
    d4bc:	bb50      	cbnz	r0, d514 <am_adc_isr+0x90>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d4be:	6820      	ldr	r0, [r4, #0]
    d4c0:	f000 fb7a 	bl	dbb8 <am_hal_adc_deinitialize>
    d4c4:	b9f0      	cbnz	r0, d504 <am_adc_isr+0x80>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d4c6:	6820      	ldr	r0, [r4, #0]
    d4c8:	f000 fcc8 	bl	de5c <am_hal_adc_sw_trigger>
}
    d4cc:	b005      	add	sp, #20
    d4ce:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d4d0:	4818      	ldr	r0, [pc, #96]	; (d534 <am_adc_isr+0xb0>)
    d4d2:	f7ff ff1f 	bl	d314 <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d4d6:	9900      	ldr	r1, [sp, #0]
    d4d8:	6820      	ldr	r0, [r4, #0]
    d4da:	f000 fc67 	bl	ddac <am_hal_adc_interrupt_clear>
    d4de:	2800      	cmp	r0, #0
    d4e0:	d0de      	beq.n	d4a0 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d4e2:	4815      	ldr	r0, [pc, #84]	; (d538 <am_adc_isr+0xb4>)
    d4e4:	f7ff ff16 	bl	d314 <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d4e8:	9b00      	ldr	r3, [sp, #0]
    d4ea:	6820      	ldr	r0, [r4, #0]
    d4ec:	07db      	lsls	r3, r3, #31
    d4ee:	d5db      	bpl.n	d4a8 <am_adc_isr+0x24>
        uint32_t    ui32NumSamples = 1;
    d4f0:	2501      	movs	r5, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d4f2:	ab02      	add	r3, sp, #8
    d4f4:	aa01      	add	r2, sp, #4
    d4f6:	2100      	movs	r1, #0
        uint32_t    ui32NumSamples = 1;
    d4f8:	9501      	str	r5, [sp, #4]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d4fa:	f000 fc69 	bl	ddd0 <am_hal_adc_samples_read>
    d4fe:	b988      	cbnz	r0, d524 <am_adc_isr+0xa0>
    d500:	6820      	ldr	r0, [r4, #0]
    d502:	e7d1      	b.n	d4a8 <am_adc_isr+0x24>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d504:	480d      	ldr	r0, [pc, #52]	; (d53c <am_adc_isr+0xb8>)
    d506:	f7ff ff05 	bl	d314 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d50a:	6820      	ldr	r0, [r4, #0]
    d50c:	f000 fca6 	bl	de5c <am_hal_adc_sw_trigger>
}
    d510:	b005      	add	sp, #20
    d512:	bd30      	pop	{r4, r5, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d514:	480a      	ldr	r0, [pc, #40]	; (d540 <am_adc_isr+0xbc>)
    d516:	f7ff fefd 	bl	d314 <am_util_stdio_printf>
    d51a:	e7d0      	b.n	d4be <am_adc_isr+0x3a>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d51c:	4809      	ldr	r0, [pc, #36]	; (d544 <am_adc_isr+0xc0>)
    d51e:	f7ff fef9 	bl	d314 <am_util_stdio_printf>
    d522:	e7c8      	b.n	d4b6 <am_adc_isr+0x32>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d524:	4808      	ldr	r0, [pc, #32]	; (d548 <am_adc_isr+0xc4>)
    d526:	f7ff fef5 	bl	d314 <am_util_stdio_printf>
    d52a:	e7e9      	b.n	d500 <am_adc_isr+0x7c>
    d52c:	10001164 	.word	0x10001164
    d530:	10001160 	.word	0x10001160
    d534:	0000ff50 	.word	0x0000ff50
    d538:	0000ff74 	.word	0x0000ff74
    d53c:	00010018 	.word	0x00010018
    d540:	0000ffe8 	.word	0x0000ffe8
    d544:	0000ffc8 	.word	0x0000ffc8
    d548:	0000ff9c 	.word	0x0000ff9c

0000d54c <initADC>:
{
    d54c:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d54e:	4b0e      	ldr	r3, [pc, #56]	; (d588 <initADC+0x3c>)
    d550:	200b      	movs	r0, #11
    d552:	6819      	ldr	r1, [r3, #0]
    d554:	f000 feac 	bl	e2b0 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d558:	f44f 7215 	mov.w	r2, #596	; 0x254
    d55c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d560:	2000      	movs	r0, #0
    d562:	f000 fd91 	bl	e088 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d566:	2001      	movs	r0, #1
    d568:	f000 fe4e 	bl	e208 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d56c:	2300      	movs	r3, #0
    d56e:	4618      	mov	r0, r3
    d570:	2201      	movs	r2, #1
    d572:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d576:	f000 fdf1 	bl	e15c <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d57a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d57e:	2000      	movs	r0, #0
    d580:	f000 fdc2 	bl	e108 <am_hal_ctimer_start>
}
    d584:	2000      	movs	r0, #0
    d586:	bd08      	pop	{r3, pc}
    d588:	00010104 	.word	0x00010104

0000d58c <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d58c:	4b04      	ldr	r3, [pc, #16]	; (d5a0 <enableAdcInterrupts+0x14>)
    d58e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d596:	6019      	str	r1, [r3, #0]
    d598:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d59a:	f001 b847 	b.w	e62c <am_hal_interrupt_master_enable>
    d59e:	bf00      	nop
    d5a0:	e000e100 	.word	0xe000e100

0000d5a4 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d5a4:	2b80      	cmp	r3, #128	; 0x80
    d5a6:	d83c      	bhi.n	d622 <platform_read+0x7e>
{
    d5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d5ac:	4690      	mov	r8, r2
    d5ae:	b08b      	sub	sp, #44	; 0x2c
    d5b0:	460e      	mov	r6, r1
    d5b2:	461f      	mov	r7, r3
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d5b4:	2a00      	cmp	r2, #0
    d5b6:	d03e      	beq.n	d636 <platform_read+0x92>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5b8:	4d25      	ldr	r5, [pc, #148]	; (d650 <platform_read+0xac>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d660 <platform_read+0xbc>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d5c0:	466c      	mov	r4, sp
    d5c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d5c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d5c8:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d5cc:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5ce:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d5d2:	2501      	movs	r5, #1
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d5d4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5d8:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d5dc:	9602      	str	r6, [sp, #8]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5de:	4669      	mov	r1, sp
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d5e0:	9501      	str	r5, [sp, #4]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d5e2:	f8ad 501c 	strh.w	r5, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d5e6:	f88d 501e 	strb.w	r5, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d5ea:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d5ec:	f88d 3010 	strb.w	r3, [sp, #16]
    iomTransfer.pui32RxBuffer = NULL;
    d5f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d5f4:	e9cd 3308 	strd	r3, r3, [sp, #32]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5f8:	f001 fb7a 	bl	ecf0 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d5fc:	4604      	mov	r4, r0
    d5fe:	b990      	cbnz	r0, d626 <platform_read+0x82>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d600:	4669      	mov	r1, sp
    d602:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d606:	f88d 401c 	strb.w	r4, [sp, #28]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d60a:	f88d 5010 	strb.w	r5, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d60e:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d612:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d614:	f001 fb6c 	bl	ecf0 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d618:	4604      	mov	r4, r0
    d61a:	b998      	cbnz	r0, d644 <platform_read+0xa0>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d61c:	b00b      	add	sp, #44	; 0x2c
    d61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d622:	2001      	movs	r0, #1
}
    d624:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d626:	4601      	mov	r1, r0
    d628:	480a      	ldr	r0, [pc, #40]	; (d654 <platform_read+0xb0>)
    d62a:	f7ff fe73 	bl	d314 <am_util_stdio_printf>
        return retVal32;
    d62e:	4620      	mov	r0, r4
}
    d630:	b00b      	add	sp, #44	; 0x2c
    d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d636:	4808      	ldr	r0, [pc, #32]	; (d658 <platform_read+0xb4>)
    d638:	f7ff fe6c 	bl	d314 <am_util_stdio_printf>
    d63c:	2001      	movs	r0, #1
}
    d63e:	b00b      	add	sp, #44	; 0x2c
    d640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d644:	4601      	mov	r1, r0
    d646:	4805      	ldr	r0, [pc, #20]	; (d65c <platform_read+0xb8>)
    d648:	f7ff fe64 	bl	d314 <am_util_stdio_printf>
        return retVal32;
    d64c:	4620      	mov	r0, r4
    d64e:	e7e5      	b.n	d61c <platform_read+0x78>
    d650:	10001004 	.word	0x10001004
    d654:	00010140 	.word	0x00010140
    d658:	00010128 	.word	0x00010128
    d65c:	00010150 	.word	0x00010150
    d660:	10001508 	.word	0x10001508

0000d664 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d664:	2b80      	cmp	r3, #128	; 0x80
    d666:	d83c      	bhi.n	d6e2 <platform_write+0x7e>
{
    d668:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d66a:	4e25      	ldr	r6, [pc, #148]	; (d700 <platform_write+0x9c>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d66c:	4f25      	ldr	r7, [pc, #148]	; (d704 <platform_write+0xa0>)
    d66e:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d670:	469c      	mov	ip, r3
    d672:	4614      	mov	r4, r2
    d674:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d676:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d678:	466d      	mov	r5, sp
    d67a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d67c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d67e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d680:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d684:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d688:	f8df e088 	ldr.w	lr, [pc, #136]	; d714 <platform_write+0xb0>
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d68c:	2200      	movs	r2, #0
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d68e:	2601      	movs	r6, #1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d690:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d694:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d698:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d69a:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d69e:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d6a2:	f8ad 201c 	strh.w	r2, [sp, #28]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d6a6:	e9cd 2208 	strd	r2, r2, [sp, #32]
    iomTransfer.pui32RxBuffer = i2cRX;
    d6aa:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    if(bufp == NULL){
    d6ae:	b30c      	cbz	r4, d6f4 <platform_write+0x90>
    while(len--){
    d6b0:	f10c 31ff 	add.w	r1, ip, #4294967295
    d6b4:	b289      	uxth	r1, r1
    d6b6:	f1bc 0f00 	cmp.w	ip, #0
    d6ba:	d009      	beq.n	d6d0 <platform_write+0x6c>
    d6bc:	1c4b      	adds	r3, r1, #1
    d6be:	18e2      	adds	r2, r4, r3
    d6c0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d6c4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d6c8:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d6cc:	42bb      	cmp	r3, r7
    d6ce:	d1f9      	bne.n	d6c4 <platform_write+0x60>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6d0:	4b0d      	ldr	r3, [pc, #52]	; (d708 <platform_write+0xa4>)
    d6d2:	4669      	mov	r1, sp
    d6d4:	6818      	ldr	r0, [r3, #0]
    d6d6:	f001 fb0b 	bl	ecf0 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d6da:	4606      	mov	r6, r0
    d6dc:	b918      	cbnz	r0, d6e6 <platform_write+0x82>
}
    d6de:	b00b      	add	sp, #44	; 0x2c
    d6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d6e2:	2001      	movs	r0, #1
}
    d6e4:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d6e6:	4601      	mov	r1, r0
    d6e8:	4808      	ldr	r0, [pc, #32]	; (d70c <platform_write+0xa8>)
    d6ea:	f7ff fe13 	bl	d314 <am_util_stdio_printf>
        return retVal32;
    d6ee:	4630      	mov	r0, r6
}
    d6f0:	b00b      	add	sp, #44	; 0x2c
    d6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d6f4:	4806      	ldr	r0, [pc, #24]	; (d710 <platform_write+0xac>)
    d6f6:	f7ff fe0d 	bl	d314 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d6fa:	4630      	mov	r0, r6
    d6fc:	e7ef      	b.n	d6de <platform_write+0x7a>
    d6fe:	bf00      	nop
    d700:	10001004 	.word	0x10001004
    d704:	10001308 	.word	0x10001308
    d708:	10001508 	.word	0x10001508
    d70c:	0001017c 	.word	0x0001017c
    d710:	00010164 	.word	0x00010164
    d714:	1000150c 	.word	0x1000150c

0000d718 <initAccelerometer>:
{
    d718:	b570      	push	{r4, r5, r6, lr}
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d71a:	4b2c      	ldr	r3, [pc, #176]	; (d7cc <initAccelerometer+0xb4>)
    dev_ctx.write_reg = platform_write;
    d71c:	4a2c      	ldr	r2, [pc, #176]	; (d7d0 <initAccelerometer+0xb8>)
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d71e:	4c2d      	ldr	r4, [pc, #180]	; (d7d4 <initAccelerometer+0xbc>)
    d720:	6818      	ldr	r0, [r3, #0]
    dev_ctx.write_reg = platform_write;
    d722:	4b2d      	ldr	r3, [pc, #180]	; (d7d8 <initAccelerometer+0xc0>)
    d724:	6013      	str	r3, [r2, #0]
{
    d726:	b086      	sub	sp, #24
    am_hal_iom_config_t i2cConfig =
    d728:	2300      	movs	r3, #0
    d72a:	9301      	str	r3, [sp, #4]
    dev_ctx.read_reg = platform_read;
    d72c:	4e2b      	ldr	r6, [pc, #172]	; (d7dc <initAccelerometer+0xc4>)
    am_hal_iom_config_t i2cConfig =
    d72e:	9305      	str	r3, [sp, #20]
    d730:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d734:	2501      	movs	r5, #1
    d736:	4b2a      	ldr	r3, [pc, #168]	; (d7e0 <initAccelerometer+0xc8>)
    dev_ctx.read_reg = platform_read;
    d738:	6056      	str	r6, [r2, #4]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d73a:	4621      	mov	r1, r4
    am_hal_iom_config_t i2cConfig =
    d73c:	f88d 5004 	strb.w	r5, [sp, #4]
    d740:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d742:	f000 fff7 	bl	e734 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d746:	b140      	cbz	r0, d75a <initAccelerometer+0x42>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d748:	4c26      	ldr	r4, [pc, #152]	; (d7e4 <initAccelerometer+0xcc>)
    d74a:	4821      	ldr	r0, [pc, #132]	; (d7d0 <initAccelerometer+0xb8>)
    d74c:	4621      	mov	r1, r4
    d74e:	f000 f94d 	bl	d9ec <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d752:	7821      	ldrb	r1, [r4, #0]
    d754:	2933      	cmp	r1, #51	; 0x33
    d756:	d01b      	beq.n	d790 <initAccelerometer+0x78>
        }
    d758:	e7fe      	b.n	d758 <initAccelerometer+0x40>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d75a:	4602      	mov	r2, r0
    d75c:	4601      	mov	r1, r0
    d75e:	6820      	ldr	r0, [r4, #0]
    d760:	f001 f880 	bl	e864 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d764:	2800      	cmp	r0, #0
    d766:	d1ef      	bne.n	d748 <initAccelerometer+0x30>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d768:	a901      	add	r1, sp, #4
    d76a:	6820      	ldr	r0, [r4, #0]
    d76c:	f001 f98a 	bl	ea84 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d770:	2800      	cmp	r0, #0
    d772:	d1e9      	bne.n	d748 <initAccelerometer+0x30>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d774:	4b1c      	ldr	r3, [pc, #112]	; (d7e8 <initAccelerometer+0xd0>)
    d776:	202b      	movs	r0, #43	; 0x2b
    d778:	6819      	ldr	r1, [r3, #0]
    d77a:	f000 fd99 	bl	e2b0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d77e:	4b1b      	ldr	r3, [pc, #108]	; (d7ec <initAccelerometer+0xd4>)
    d780:	202a      	movs	r0, #42	; 0x2a
    d782:	6819      	ldr	r1, [r3, #0]
    d784:	f000 fd94 	bl	e2b0 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d788:	6820      	ldr	r0, [r4, #0]
    d78a:	f000 fffb 	bl	e784 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d78e:	e7db      	b.n	d748 <initAccelerometer+0x30>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d790:	4817      	ldr	r0, [pc, #92]	; (d7f0 <initAccelerometer+0xd8>)
    d792:	f7ff fdbf 	bl	d314 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d796:	2101      	movs	r1, #1
    d798:	480d      	ldr	r0, [pc, #52]	; (d7d0 <initAccelerometer+0xb8>)
    d79a:	f000 f8f3 	bl	d984 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d79e:	2103      	movs	r1, #3
    d7a0:	480b      	ldr	r0, [pc, #44]	; (d7d0 <initAccelerometer+0xb8>)
    d7a2:	f000 f855 	bl	d850 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d7a6:	2103      	movs	r1, #3
    d7a8:	4809      	ldr	r0, [pc, #36]	; (d7d0 <initAccelerometer+0xb8>)
    d7aa:	f000 f8b7 	bl	d91c <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d7ae:	2100      	movs	r1, #0
    d7b0:	4807      	ldr	r0, [pc, #28]	; (d7d0 <initAccelerometer+0xb8>)
    d7b2:	f000 f8cd 	bl	d950 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d7b6:	2103      	movs	r1, #3
    d7b8:	4805      	ldr	r0, [pc, #20]	; (d7d0 <initAccelerometer+0xb8>)
    d7ba:	f000 f849 	bl	d850 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d7be:	2100      	movs	r1, #0
    d7c0:	4803      	ldr	r0, [pc, #12]	; (d7d0 <initAccelerometer+0xb8>)
    d7c2:	f000 f85f 	bl	d884 <lis2dh12_operating_mode_set>
}
    d7c6:	2000      	movs	r0, #0
    d7c8:	b006      	add	sp, #24
    d7ca:	bd70      	pop	{r4, r5, r6, pc}
    d7cc:	10001000 	.word	0x10001000
    d7d0:	100012fc 	.word	0x100012fc
    d7d4:	10001508 	.word	0x10001508
    d7d8:	0000d665 	.word	0x0000d665
    d7dc:	0000d5a5 	.word	0x0000d5a5
    d7e0:	000186a0 	.word	0x000186a0
    d7e4:	10001168 	.word	0x10001168
    d7e8:	000101c4 	.word	0x000101c4
    d7ec:	000101c8 	.word	0x000101c8
    d7f0:	00010108 	.word	0x00010108

0000d7f4 <lis2dh12_from_fs2_hr_to_mg>:
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d7f4:	ee00 0a10 	vmov	s0, r0
    d7f8:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d7fc:	4770      	bx	lr
    d7fe:	bf00      	nop

0000d800 <lis2dh12_from_lsb_hr_to_celsius>:
  return ( (float)lsb / 16.0f ) * 12.0f;
}

float lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
  return ( ( (float)lsb / 64.0f ) / 4.0f ) + 25.0f;
    d800:	ee07 0a90 	vmov	s15, r0
    d804:	eefa 7acd 	vcvt.f32.s32	s15, s15, #6
    d808:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    d80c:	ee67 7a80 	vmul.f32	s15, s15, s0
    d810:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
}
    d814:	ee37 0a80 	vadd.f32	s0, s15, s0
    d818:	4770      	bx	lr
    d81a:	bf00      	nop

0000d81c <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d81c:	b530      	push	{r4, r5, lr}
    d81e:	b083      	sub	sp, #12
    d820:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d822:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d826:	2301      	movs	r3, #1
    d828:	aa01      	add	r2, sp, #4
    d82a:	2107      	movs	r1, #7
    d82c:	47a8      	blx	r5
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
                          (uint8_t*)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
    d82e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d832:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d836:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d838:	b003      	add	sp, #12
    d83a:	bd30      	pop	{r4, r5, pc}

0000d83c <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d83c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d83e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d842:	460a      	mov	r2, r1
    d844:	46a4      	mov	ip, r4
    d846:	2302      	movs	r3, #2
    d848:	210c      	movs	r1, #12
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
  return ret;
}
    d84a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d84e:	4760      	bx	ip

0000d850 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d850:	b570      	push	{r4, r5, r6, lr}
    d852:	b082      	sub	sp, #8
    d854:	4604      	mov	r4, r0
    d856:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d858:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d85c:	aa01      	add	r2, sp, #4
    d85e:	2301      	movs	r3, #1
    d860:	211f      	movs	r1, #31
    d862:	47a8      	blx	r5
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d864:	b958      	cbnz	r0, d87e <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d866:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d86a:	6825      	ldr	r5, [r4, #0]
    d86c:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d86e:	f366 1387 	bfi	r3, r6, #6, #2
    d872:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d876:	aa01      	add	r2, sp, #4
    d878:	2301      	movs	r3, #1
    d87a:	211f      	movs	r1, #31
    d87c:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d87e:	b002      	add	sp, #8
    d880:	bd70      	pop	{r4, r5, r6, pc}
    d882:	bf00      	nop

0000d884 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d884:	b570      	push	{r4, r5, r6, lr}
    d886:	b082      	sub	sp, #8
    d888:	4604      	mov	r4, r0
    d88a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d88c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d890:	466a      	mov	r2, sp
    d892:	2301      	movs	r3, #1
    d894:	2120      	movs	r1, #32
    d896:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d898:	bb00      	cbnz	r0, d8dc <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d89a:	aa01      	add	r2, sp, #4
    d89c:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d8a0:	2301      	movs	r3, #1
    d8a2:	2123      	movs	r1, #35	; 0x23
    d8a4:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d8a6:	b9c8      	cbnz	r0, d8dc <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d8a8:	b9d5      	cbnz	r5, d8e0 <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d8aa:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d8ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d8b2:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d8b6:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d8ba:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d8be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8c2:	466a      	mov	r2, sp
    d8c4:	6825      	ldr	r5, [r4, #0]
    d8c6:	68a0      	ldr	r0, [r4, #8]
    d8c8:	2301      	movs	r3, #1
    d8ca:	2120      	movs	r1, #32
    d8cc:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d8ce:	b928      	cbnz	r0, d8dc <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8d0:	aa01      	add	r2, sp, #4
    d8d2:	6825      	ldr	r5, [r4, #0]
    d8d4:	68a0      	ldr	r0, [r4, #8]
    d8d6:	2301      	movs	r3, #1
    d8d8:	2123      	movs	r1, #35	; 0x23
    d8da:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d8dc:	b002      	add	sp, #8
    d8de:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d8e0:	2d01      	cmp	r5, #1
    d8e2:	d10c      	bne.n	d8fe <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d8e4:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d8e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d8ec:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d8f0:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d8f4:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d8f8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d8fc:	e7e1      	b.n	d8c2 <lis2dh12_operating_mode_set+0x3e>
    d8fe:	2d02      	cmp	r5, #2
    d900:	d1df      	bne.n	d8c2 <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d902:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d906:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d90a:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d90e:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d912:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d916:	f88d 2004 	strb.w	r2, [sp, #4]
    d91a:	e7d2      	b.n	d8c2 <lis2dh12_operating_mode_set+0x3e>

0000d91c <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d91c:	b570      	push	{r4, r5, r6, lr}
    d91e:	b082      	sub	sp, #8
    d920:	4604      	mov	r4, r0
    d922:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d924:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d928:	aa01      	add	r2, sp, #4
    d92a:	2301      	movs	r3, #1
    d92c:	2120      	movs	r1, #32
    d92e:	47a8      	blx	r5
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d930:	b958      	cbnz	r0, d94a <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d932:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d936:	6825      	ldr	r5, [r4, #0]
    d938:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d93a:	f366 1307 	bfi	r3, r6, #4, #4
    d93e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d942:	aa01      	add	r2, sp, #4
    d944:	2301      	movs	r3, #1
    d946:	2120      	movs	r1, #32
    d948:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d94a:	b002      	add	sp, #8
    d94c:	bd70      	pop	{r4, r5, r6, pc}
    d94e:	bf00      	nop

0000d950 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d950:	b570      	push	{r4, r5, r6, lr}
    d952:	b082      	sub	sp, #8
    d954:	4604      	mov	r4, r0
    d956:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d958:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d95c:	aa01      	add	r2, sp, #4
    d95e:	2301      	movs	r3, #1
    d960:	2123      	movs	r1, #35	; 0x23
    d962:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d964:	b958      	cbnz	r0, d97e <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d966:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d96a:	6825      	ldr	r5, [r4, #0]
    d96c:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d96e:	f366 1305 	bfi	r3, r6, #4, #2
    d972:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d976:	aa01      	add	r2, sp, #4
    d978:	2301      	movs	r3, #1
    d97a:	2123      	movs	r1, #35	; 0x23
    d97c:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d97e:	b002      	add	sp, #8
    d980:	bd70      	pop	{r4, r5, r6, pc}
    d982:	bf00      	nop

0000d984 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d984:	b570      	push	{r4, r5, r6, lr}
    d986:	b082      	sub	sp, #8
    d988:	4604      	mov	r4, r0
    d98a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d98c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d990:	aa01      	add	r2, sp, #4
    d992:	2301      	movs	r3, #1
    d994:	2123      	movs	r1, #35	; 0x23
    d996:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d998:	b958      	cbnz	r0, d9b2 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d99a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d99e:	6825      	ldr	r5, [r4, #0]
    d9a0:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d9a2:	f366 13c7 	bfi	r3, r6, #7, #1
    d9a6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d9aa:	aa01      	add	r2, sp, #4
    d9ac:	2301      	movs	r3, #1
    d9ae:	2123      	movs	r1, #35	; 0x23
    d9b0:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d9b2:	b002      	add	sp, #8
    d9b4:	bd70      	pop	{r4, r5, r6, pc}
    d9b6:	bf00      	nop

0000d9b8 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d9b8:	b530      	push	{r4, r5, lr}
    d9ba:	b083      	sub	sp, #12
    d9bc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9be:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d9c2:	2301      	movs	r3, #1
    d9c4:	aa01      	add	r2, sp, #4
    d9c6:	2127      	movs	r1, #39	; 0x27
    d9c8:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d9ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d9ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d9d2:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d9d4:	b003      	add	sp, #12
    d9d6:	bd30      	pop	{r4, r5, pc}

0000d9d8 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d9d8:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9da:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d9de:	460a      	mov	r2, r1
    d9e0:	46a4      	mov	ip, r4
    d9e2:	2306      	movs	r3, #6
    d9e4:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9ea:	4760      	bx	ip

0000d9ec <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d9ec:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9ee:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d9f2:	460a      	mov	r2, r1
    d9f4:	46a4      	mov	ip, r4
    d9f6:	2301      	movs	r3, #1
    d9f8:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9fe:	4760      	bx	ip

0000da00 <am_bsp_uart_string_print>:
    da00:	b510      	push	{r4, lr}
    da02:	b086      	sub	sp, #24
    da04:	7804      	ldrb	r4, [r0, #0]
    da06:	2300      	movs	r3, #0
    da08:	9300      	str	r3, [sp, #0]
    da0a:	b13c      	cbz	r4, da1c <am_bsp_uart_string_print+0x1c>
    da0c:	4603      	mov	r3, r0
    da0e:	f1c0 0201 	rsb	r2, r0, #1
    da12:	18d4      	adds	r4, r2, r3
    da14:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    da18:	2900      	cmp	r1, #0
    da1a:	d1fa      	bne.n	da12 <am_bsp_uart_string_print+0x12>
    da1c:	4b09      	ldr	r3, [pc, #36]	; (da44 <am_bsp_uart_string_print+0x44>)
    da1e:	9002      	str	r0, [sp, #8]
    da20:	2200      	movs	r2, #0
    da22:	6818      	ldr	r0, [r3, #0]
    da24:	9403      	str	r4, [sp, #12]
    da26:	f04f 33ff 	mov.w	r3, #4294967295
    da2a:	a901      	add	r1, sp, #4
    da2c:	9304      	str	r3, [sp, #16]
    da2e:	9201      	str	r2, [sp, #4]
    da30:	f8cd d014 	str.w	sp, [sp, #20]
    da34:	f001 fe94 	bl	f760 <am_hal_uart_transfer>
    da38:	9b00      	ldr	r3, [sp, #0]
    da3a:	42a3      	cmp	r3, r4
    da3c:	d000      	beq.n	da40 <am_bsp_uart_string_print+0x40>
    da3e:	e7fe      	b.n	da3e <am_bsp_uart_string_print+0x3e>
    da40:	b006      	add	sp, #24
    da42:	bd10      	pop	{r4, pc}
    da44:	1000116c 	.word	0x1000116c

0000da48 <am_bsp_low_power_init>:
    da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da4a:	f001 fb01 	bl	f050 <am_hal_itm_disable>
    da4e:	2000      	movs	r0, #0
    da50:	f7fe ffba 	bl	c9c8 <am_util_stdio_printf_init>
    da54:	4b12      	ldr	r3, [pc, #72]	; (daa0 <am_bsp_low_power_init+0x58>)
    da56:	4f13      	ldr	r7, [pc, #76]	; (daa4 <am_bsp_low_power_init+0x5c>)
    da58:	6819      	ldr	r1, [r3, #0]
    da5a:	2021      	movs	r0, #33	; 0x21
    da5c:	f000 fc28 	bl	e2b0 <am_hal_gpio_pinconfig>
    da60:	f001 fc38 	bl	f2d4 <am_hal_pwrctrl_low_power_init>
    da64:	2001      	movs	r0, #1
    da66:	f001 fc7f 	bl	f368 <am_hal_rtc_osc_select>
    da6a:	2100      	movs	r1, #0
    da6c:	2003      	movs	r0, #3
    da6e:	f000 fa9f 	bl	dfb0 <am_hal_clkgen_control>
    da72:	f001 fc85 	bl	f380 <am_hal_rtc_osc_disable>
    da76:	4b0c      	ldr	r3, [pc, #48]	; (daa8 <am_bsp_low_power_init+0x60>)
    da78:	681e      	ldr	r6, [r3, #0]
    da7a:	2400      	movs	r4, #0
    da7c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    da80:	4631      	mov	r1, r6
    da82:	4628      	mov	r0, r5
    da84:	f000 fc14 	bl	e2b0 <am_hal_gpio_pinconfig>
    da88:	2103      	movs	r1, #3
    da8a:	4628      	mov	r0, r5
    da8c:	f000 fd84 	bl	e598 <am_hal_gpio_state_write>
    da90:	3401      	adds	r4, #1
    da92:	4628      	mov	r0, r5
    da94:	2100      	movs	r1, #0
    da96:	f000 fd7f 	bl	e598 <am_hal_gpio_state_write>
    da9a:	2c04      	cmp	r4, #4
    da9c:	d1ee      	bne.n	da7c <am_bsp_low_power_init+0x34>
    da9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    daa0:	00010304 	.word	0x00010304
    daa4:	1000102c 	.word	0x1000102c
    daa8:	00010308 	.word	0x00010308

0000daac <am_bsp_debug_printf_disable>:
    daac:	b538      	push	{r3, r4, r5, lr}
    daae:	4b17      	ldr	r3, [pc, #92]	; (db0c <am_bsp_debug_printf_disable+0x60>)
    dab0:	681c      	ldr	r4, [r3, #0]
    dab2:	2c01      	cmp	r4, #1
    dab4:	d002      	beq.n	dabc <am_bsp_debug_printf_disable+0x10>
    dab6:	2c02      	cmp	r4, #2
    dab8:	d00c      	beq.n	dad4 <am_bsp_debug_printf_disable+0x28>
    daba:	bd38      	pop	{r3, r4, r5, pc}
    dabc:	f001 fac8 	bl	f050 <am_hal_itm_disable>
    dac0:	2000      	movs	r0, #0
    dac2:	f7fe ff81 	bl	c9c8 <am_util_stdio_printf_init>
    dac6:	4b12      	ldr	r3, [pc, #72]	; (db10 <am_bsp_debug_printf_disable+0x64>)
    dac8:	2021      	movs	r0, #33	; 0x21
    daca:	6819      	ldr	r1, [r3, #0]
    dacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dad0:	f000 bbee 	b.w	e2b0 <am_hal_gpio_pinconfig>
    dad4:	4d0f      	ldr	r5, [pc, #60]	; (db14 <am_bsp_debug_printf_disable+0x68>)
    dad6:	6828      	ldr	r0, [r5, #0]
    dad8:	f002 f87c 	bl	fbd4 <am_hal_uart_tx_flush>
    dadc:	2000      	movs	r0, #0
    dade:	f7fe ff73 	bl	c9c8 <am_util_stdio_printf_init>
    dae2:	4621      	mov	r1, r4
    dae4:	2200      	movs	r2, #0
    dae6:	6828      	ldr	r0, [r5, #0]
    dae8:	f001 fcbc 	bl	f464 <am_hal_uart_power_control>
    daec:	6828      	ldr	r0, [r5, #0]
    daee:	f001 fca5 	bl	f43c <am_hal_uart_deinitialize>
    daf2:	4b07      	ldr	r3, [pc, #28]	; (db10 <am_bsp_debug_printf_disable+0x64>)
    daf4:	681c      	ldr	r4, [r3, #0]
    daf6:	2030      	movs	r0, #48	; 0x30
    daf8:	4621      	mov	r1, r4
    dafa:	f000 fbd9 	bl	e2b0 <am_hal_gpio_pinconfig>
    dafe:	4621      	mov	r1, r4
    db00:	2031      	movs	r0, #49	; 0x31
    db02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    db06:	f000 bbd3 	b.w	e2b0 <am_hal_gpio_pinconfig>
    db0a:	bf00      	nop
    db0c:	10001170 	.word	0x10001170
    db10:	00010304 	.word	0x00010304
    db14:	1000116c 	.word	0x1000116c

0000db18 <am_bsp_uart_printf_enable>:
    db18:	b510      	push	{r4, lr}
    db1a:	4c10      	ldr	r4, [pc, #64]	; (db5c <am_bsp_uart_printf_enable+0x44>)
    db1c:	4b10      	ldr	r3, [pc, #64]	; (db60 <am_bsp_uart_printf_enable+0x48>)
    db1e:	4621      	mov	r1, r4
    db20:	2202      	movs	r2, #2
    db22:	2000      	movs	r0, #0
    db24:	601a      	str	r2, [r3, #0]
    db26:	f001 fc61 	bl	f3ec <am_hal_uart_initialize>
    db2a:	2200      	movs	r2, #0
    db2c:	4611      	mov	r1, r2
    db2e:	6820      	ldr	r0, [r4, #0]
    db30:	f001 fc98 	bl	f464 <am_hal_uart_power_control>
    db34:	6820      	ldr	r0, [r4, #0]
    db36:	490b      	ldr	r1, [pc, #44]	; (db64 <am_bsp_uart_printf_enable+0x4c>)
    db38:	f001 fd06 	bl	f548 <am_hal_uart_configure>
    db3c:	4b0a      	ldr	r3, [pc, #40]	; (db68 <am_bsp_uart_printf_enable+0x50>)
    db3e:	2030      	movs	r0, #48	; 0x30
    db40:	6819      	ldr	r1, [r3, #0]
    db42:	f000 fbb5 	bl	e2b0 <am_hal_gpio_pinconfig>
    db46:	4b09      	ldr	r3, [pc, #36]	; (db6c <am_bsp_uart_printf_enable+0x54>)
    db48:	2031      	movs	r0, #49	; 0x31
    db4a:	6819      	ldr	r1, [r3, #0]
    db4c:	f000 fbb0 	bl	e2b0 <am_hal_gpio_pinconfig>
    db50:	4807      	ldr	r0, [pc, #28]	; (db70 <am_bsp_uart_printf_enable+0x58>)
    db52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db56:	f7fe bf37 	b.w	c9c8 <am_util_stdio_printf_init>
    db5a:	bf00      	nop
    db5c:	1000116c 	.word	0x1000116c
    db60:	10001170 	.word	0x10001170
    db64:	00010194 	.word	0x00010194
    db68:	000101c0 	.word	0x000101c0
    db6c:	000101bc 	.word	0x000101bc
    db70:	0000da01 	.word	0x0000da01

0000db74 <am_hal_adc_initialize>:
    db74:	b108      	cbz	r0, db7a <am_hal_adc_initialize+0x6>
    db76:	2005      	movs	r0, #5
    db78:	4770      	bx	lr
    db7a:	b1a9      	cbz	r1, dba8 <am_hal_adc_initialize+0x34>
    db7c:	4a0b      	ldr	r2, [pc, #44]	; (dbac <am_hal_adc_initialize+0x38>)
    db7e:	78d3      	ldrb	r3, [r2, #3]
    db80:	f013 0001 	ands.w	r0, r3, #1
    db84:	d001      	beq.n	db8a <am_hal_adc_initialize+0x16>
    db86:	2007      	movs	r0, #7
    db88:	4770      	bx	lr
    db8a:	b430      	push	{r4, r5}
    db8c:	f043 0301 	orr.w	r3, r3, #1
    db90:	70d3      	strb	r3, [r2, #3]
    db92:	6813      	ldr	r3, [r2, #0]
    db94:	4d06      	ldr	r5, [pc, #24]	; (dbb0 <am_hal_adc_initialize+0x3c>)
    db96:	4c07      	ldr	r4, [pc, #28]	; (dbb4 <am_hal_adc_initialize+0x40>)
    db98:	6050      	str	r0, [r2, #4]
    db9a:	f365 0317 	bfi	r3, r5, #0, #24
    db9e:	6013      	str	r3, [r2, #0]
    dba0:	6020      	str	r0, [r4, #0]
    dba2:	600a      	str	r2, [r1, #0]
    dba4:	bc30      	pop	{r4, r5}
    dba6:	4770      	bx	lr
    dba8:	2006      	movs	r0, #6
    dbaa:	4770      	bx	lr
    dbac:	10001710 	.word	0x10001710
    dbb0:	00afafaf 	.word	0x00afafaf
    dbb4:	1000170c 	.word	0x1000170c

0000dbb8 <am_hal_adc_deinitialize>:
    dbb8:	b128      	cbz	r0, dbc6 <am_hal_adc_deinitialize+0xe>
    dbba:	6803      	ldr	r3, [r0, #0]
    dbbc:	4a0c      	ldr	r2, [pc, #48]	; (dbf0 <am_hal_adc_deinitialize+0x38>)
    dbbe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dbc2:	4293      	cmp	r3, r2
    dbc4:	d001      	beq.n	dbca <am_hal_adc_deinitialize+0x12>
    dbc6:	2002      	movs	r0, #2
    dbc8:	4770      	bx	lr
    dbca:	78c3      	ldrb	r3, [r0, #3]
    dbcc:	079b      	lsls	r3, r3, #30
    dbce:	d508      	bpl.n	dbe2 <am_hal_adc_deinitialize+0x2a>
    dbd0:	4b08      	ldr	r3, [pc, #32]	; (dbf4 <am_hal_adc_deinitialize+0x3c>)
    dbd2:	681a      	ldr	r2, [r3, #0]
    dbd4:	f36f 0200 	bfc	r2, #0, #1
    dbd8:	601a      	str	r2, [r3, #0]
    dbda:	78c3      	ldrb	r3, [r0, #3]
    dbdc:	f36f 0341 	bfc	r3, #1, #1
    dbe0:	70c3      	strb	r3, [r0, #3]
    dbe2:	78c3      	ldrb	r3, [r0, #3]
    dbe4:	f36f 0300 	bfc	r3, #0, #1
    dbe8:	70c3      	strb	r3, [r0, #3]
    dbea:	2000      	movs	r0, #0
    dbec:	4770      	bx	lr
    dbee:	bf00      	nop
    dbf0:	01afafaf 	.word	0x01afafaf
    dbf4:	50010000 	.word	0x50010000

0000dbf8 <am_hal_adc_configure>:
    dbf8:	b128      	cbz	r0, dc06 <am_hal_adc_configure+0xe>
    dbfa:	6803      	ldr	r3, [r0, #0]
    dbfc:	4a18      	ldr	r2, [pc, #96]	; (dc60 <am_hal_adc_configure+0x68>)
    dbfe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc02:	4293      	cmp	r3, r2
    dc04:	d001      	beq.n	dc0a <am_hal_adc_configure+0x12>
    dc06:	2002      	movs	r0, #2
    dc08:	4770      	bx	lr
    dc0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc0c:	7808      	ldrb	r0, [r1, #0]
    dc0e:	784d      	ldrb	r5, [r1, #1]
    dc10:	788c      	ldrb	r4, [r1, #2]
    dc12:	f891 e003 	ldrb.w	lr, [r1, #3]
    dc16:	790f      	ldrb	r7, [r1, #4]
    dc18:	794a      	ldrb	r2, [r1, #5]
    dc1a:	798b      	ldrb	r3, [r1, #6]
    dc1c:	4e11      	ldr	r6, [pc, #68]	; (dc64 <am_hal_adc_configure+0x6c>)
    dc1e:	0600      	lsls	r0, r0, #24
    dc20:	04ed      	lsls	r5, r5, #19
    dc22:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    dc26:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    dc2a:	4328      	orrs	r0, r5
    dc2c:	0424      	lsls	r4, r4, #16
    dc2e:	ea4f 210e 	mov.w	r1, lr, lsl #8
    dc32:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dc36:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    dc3a:	4304      	orrs	r4, r0
    dc3c:	f401 7040 	and.w	r0, r1, #768	; 0x300
    dc40:	0139      	lsls	r1, r7, #4
    dc42:	4320      	orrs	r0, r4
    dc44:	f001 0110 	and.w	r1, r1, #16
    dc48:	00d2      	lsls	r2, r2, #3
    dc4a:	4301      	orrs	r1, r0
    dc4c:	f002 0208 	and.w	r2, r2, #8
    dc50:	009b      	lsls	r3, r3, #2
    dc52:	430a      	orrs	r2, r1
    dc54:	f003 0304 	and.w	r3, r3, #4
    dc58:	4313      	orrs	r3, r2
    dc5a:	6033      	str	r3, [r6, #0]
    dc5c:	2000      	movs	r0, #0
    dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc60:	01afafaf 	.word	0x01afafaf
    dc64:	50010000 	.word	0x50010000

0000dc68 <am_hal_adc_configure_slot>:
    dc68:	b128      	cbz	r0, dc76 <am_hal_adc_configure_slot+0xe>
    dc6a:	6803      	ldr	r3, [r0, #0]
    dc6c:	4816      	ldr	r0, [pc, #88]	; (dcc8 <am_hal_adc_configure_slot+0x60>)
    dc6e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc72:	4283      	cmp	r3, r0
    dc74:	d001      	beq.n	dc7a <am_hal_adc_configure_slot+0x12>
    dc76:	2002      	movs	r0, #2
    dc78:	4770      	bx	lr
    dc7a:	2907      	cmp	r1, #7
    dc7c:	d901      	bls.n	dc82 <am_hal_adc_configure_slot+0x1a>
    dc7e:	2005      	movs	r0, #5
    dc80:	4770      	bx	lr
    dc82:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc84:	7813      	ldrb	r3, [r2, #0]
    dc86:	7854      	ldrb	r4, [r2, #1]
    dc88:	7890      	ldrb	r0, [r2, #2]
    dc8a:	78d7      	ldrb	r7, [r2, #3]
    dc8c:	f892 e004 	ldrb.w	lr, [r2, #4]
    dc90:	4d0e      	ldr	r5, [pc, #56]	; (dccc <am_hal_adc_configure_slot+0x64>)
    dc92:	4e0f      	ldr	r6, [pc, #60]	; (dcd0 <am_hal_adc_configure_slot+0x68>)
    dc94:	061b      	lsls	r3, r3, #24
    dc96:	0424      	lsls	r4, r4, #16
    dc98:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    dc9c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    dca0:	4323      	orrs	r3, r4
    dca2:	0202      	lsls	r2, r0, #8
    dca4:	ea43 0e0e 	orr.w	lr, r3, lr
    dca8:	440d      	add	r5, r1
    dcaa:	007b      	lsls	r3, r7, #1
    dcac:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    dcb0:	ea4e 0202 	orr.w	r2, lr, r2
    dcb4:	00ad      	lsls	r5, r5, #2
    dcb6:	f003 0302 	and.w	r3, r3, #2
    dcba:	4313      	orrs	r3, r2
    dcbc:	602b      	str	r3, [r5, #0]
    dcbe:	6833      	ldr	r3, [r6, #0]
    dcc0:	3301      	adds	r3, #1
    dcc2:	6033      	str	r3, [r6, #0]
    dcc4:	2000      	movs	r0, #0
    dcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcc8:	01afafaf 	.word	0x01afafaf
    dccc:	14004003 	.word	0x14004003
    dcd0:	1000170c 	.word	0x1000170c

0000dcd4 <am_hal_adc_enable>:
    dcd4:	4603      	mov	r3, r0
    dcd6:	b128      	cbz	r0, dce4 <am_hal_adc_enable+0x10>
    dcd8:	6802      	ldr	r2, [r0, #0]
    dcda:	490c      	ldr	r1, [pc, #48]	; (dd0c <am_hal_adc_enable+0x38>)
    dcdc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dce0:	428a      	cmp	r2, r1
    dce2:	d001      	beq.n	dce8 <am_hal_adc_enable+0x14>
    dce4:	2002      	movs	r0, #2
    dce6:	4770      	bx	lr
    dce8:	78c2      	ldrb	r2, [r0, #3]
    dcea:	f002 0202 	and.w	r2, r2, #2
    dcee:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dcf2:	b94a      	cbnz	r2, dd08 <am_hal_adc_enable+0x34>
    dcf4:	4906      	ldr	r1, [pc, #24]	; (dd10 <am_hal_adc_enable+0x3c>)
    dcf6:	680a      	ldr	r2, [r1, #0]
    dcf8:	f042 0201 	orr.w	r2, r2, #1
    dcfc:	600a      	str	r2, [r1, #0]
    dcfe:	78da      	ldrb	r2, [r3, #3]
    dd00:	f042 0202 	orr.w	r2, r2, #2
    dd04:	70da      	strb	r2, [r3, #3]
    dd06:	4770      	bx	lr
    dd08:	2000      	movs	r0, #0
    dd0a:	4770      	bx	lr
    dd0c:	01afafaf 	.word	0x01afafaf
    dd10:	50010000 	.word	0x50010000

0000dd14 <am_hal_adc_disable>:
    dd14:	b128      	cbz	r0, dd22 <am_hal_adc_disable+0xe>
    dd16:	6803      	ldr	r3, [r0, #0]
    dd18:	4a08      	ldr	r2, [pc, #32]	; (dd3c <am_hal_adc_disable+0x28>)
    dd1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd1e:	4293      	cmp	r3, r2
    dd20:	d001      	beq.n	dd26 <am_hal_adc_disable+0x12>
    dd22:	2002      	movs	r0, #2
    dd24:	4770      	bx	lr
    dd26:	4b06      	ldr	r3, [pc, #24]	; (dd40 <am_hal_adc_disable+0x2c>)
    dd28:	681a      	ldr	r2, [r3, #0]
    dd2a:	f36f 0200 	bfc	r2, #0, #1
    dd2e:	601a      	str	r2, [r3, #0]
    dd30:	78c3      	ldrb	r3, [r0, #3]
    dd32:	f36f 0341 	bfc	r3, #1, #1
    dd36:	70c3      	strb	r3, [r0, #3]
    dd38:	2000      	movs	r0, #0
    dd3a:	4770      	bx	lr
    dd3c:	01afafaf 	.word	0x01afafaf
    dd40:	50010000 	.word	0x50010000

0000dd44 <am_hal_adc_interrupt_enable>:
    dd44:	b128      	cbz	r0, dd52 <am_hal_adc_interrupt_enable+0xe>
    dd46:	6803      	ldr	r3, [r0, #0]
    dd48:	4a07      	ldr	r2, [pc, #28]	; (dd68 <am_hal_adc_interrupt_enable+0x24>)
    dd4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd4e:	4293      	cmp	r3, r2
    dd50:	d001      	beq.n	dd56 <am_hal_adc_interrupt_enable+0x12>
    dd52:	2002      	movs	r0, #2
    dd54:	4770      	bx	lr
    dd56:	4b05      	ldr	r3, [pc, #20]	; (dd6c <am_hal_adc_interrupt_enable+0x28>)
    dd58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd5c:	4311      	orrs	r1, r2
    dd5e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dd62:	2000      	movs	r0, #0
    dd64:	4770      	bx	lr
    dd66:	bf00      	nop
    dd68:	01afafaf 	.word	0x01afafaf
    dd6c:	50010000 	.word	0x50010000

0000dd70 <am_hal_adc_interrupt_status>:
    dd70:	b128      	cbz	r0, dd7e <am_hal_adc_interrupt_status+0xe>
    dd72:	6803      	ldr	r3, [r0, #0]
    dd74:	480b      	ldr	r0, [pc, #44]	; (dda4 <am_hal_adc_interrupt_status+0x34>)
    dd76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd7a:	4283      	cmp	r3, r0
    dd7c:	d001      	beq.n	dd82 <am_hal_adc_interrupt_status+0x12>
    dd7e:	2002      	movs	r0, #2
    dd80:	4770      	bx	lr
    dd82:	b92a      	cbnz	r2, dd90 <am_hal_adc_interrupt_status+0x20>
    dd84:	4b08      	ldr	r3, [pc, #32]	; (dda8 <am_hal_adc_interrupt_status+0x38>)
    dd86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dd8a:	600b      	str	r3, [r1, #0]
    dd8c:	4610      	mov	r0, r2
    dd8e:	4770      	bx	lr
    dd90:	4a05      	ldr	r2, [pc, #20]	; (dda8 <am_hal_adc_interrupt_status+0x38>)
    dd92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dd96:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dd9a:	4003      	ands	r3, r0
    dd9c:	600b      	str	r3, [r1, #0]
    dd9e:	2000      	movs	r0, #0
    dda0:	4770      	bx	lr
    dda2:	bf00      	nop
    dda4:	01afafaf 	.word	0x01afafaf
    dda8:	50010000 	.word	0x50010000

0000ddac <am_hal_adc_interrupt_clear>:
    ddac:	b128      	cbz	r0, ddba <am_hal_adc_interrupt_clear+0xe>
    ddae:	6803      	ldr	r3, [r0, #0]
    ddb0:	4a05      	ldr	r2, [pc, #20]	; (ddc8 <am_hal_adc_interrupt_clear+0x1c>)
    ddb2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddb6:	4293      	cmp	r3, r2
    ddb8:	d001      	beq.n	ddbe <am_hal_adc_interrupt_clear+0x12>
    ddba:	2002      	movs	r0, #2
    ddbc:	4770      	bx	lr
    ddbe:	4b03      	ldr	r3, [pc, #12]	; (ddcc <am_hal_adc_interrupt_clear+0x20>)
    ddc0:	2000      	movs	r0, #0
    ddc2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    ddc6:	4770      	bx	lr
    ddc8:	01afafaf 	.word	0x01afafaf
    ddcc:	50010000 	.word	0x50010000

0000ddd0 <am_hal_adc_samples_read>:
    ddd0:	b148      	cbz	r0, dde6 <am_hal_adc_samples_read+0x16>
    ddd2:	6800      	ldr	r0, [r0, #0]
    ddd4:	b470      	push	{r4, r5, r6}
    ddd6:	4c1f      	ldr	r4, [pc, #124]	; (de54 <am_hal_adc_samples_read+0x84>)
    ddd8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dddc:	42a0      	cmp	r0, r4
    ddde:	d004      	beq.n	ddea <am_hal_adc_samples_read+0x1a>
    dde0:	2002      	movs	r0, #2
    dde2:	bc70      	pop	{r4, r5, r6}
    dde4:	4770      	bx	lr
    dde6:	2002      	movs	r0, #2
    dde8:	4770      	bx	lr
    ddea:	b1db      	cbz	r3, de24 <am_hal_adc_samples_read+0x54>
    ddec:	2000      	movs	r0, #0
    ddee:	6814      	ldr	r4, [r2, #0]
    ddf0:	6010      	str	r0, [r2, #0]
    ddf2:	b1c9      	cbz	r1, de28 <am_hal_adc_samples_read+0x58>
    ddf4:	4d18      	ldr	r5, [pc, #96]	; (de58 <am_hal_adc_samples_read+0x88>)
    ddf6:	3308      	adds	r3, #8
    ddf8:	3904      	subs	r1, #4
    ddfa:	f851 0f04 	ldr.w	r0, [r1, #4]!
    ddfe:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    de00:	f3c0 7002 	ubfx	r0, r0, #28, #3
    de04:	f843 0c04 	str.w	r0, [r3, #-4]
    de08:	6808      	ldr	r0, [r1, #0]
    de0a:	f3c0 108d 	ubfx	r0, r0, #6, #14
    de0e:	f843 0c08 	str.w	r0, [r3, #-8]
    de12:	6810      	ldr	r0, [r2, #0]
    de14:	3001      	adds	r0, #1
    de16:	4284      	cmp	r4, r0
    de18:	f103 0308 	add.w	r3, r3, #8
    de1c:	6010      	str	r0, [r2, #0]
    de1e:	d8ec      	bhi.n	ddfa <am_hal_adc_samples_read+0x2a>
    de20:	2000      	movs	r0, #0
    de22:	e7de      	b.n	dde2 <am_hal_adc_samples_read+0x12>
    de24:	2006      	movs	r0, #6
    de26:	e7dc      	b.n	dde2 <am_hal_adc_samples_read+0x12>
    de28:	4e0b      	ldr	r6, [pc, #44]	; (de58 <am_hal_adc_samples_read+0x88>)
    de2a:	3308      	adds	r3, #8
    de2c:	e001      	b.n	de32 <am_hal_adc_samples_read+0x62>
    de2e:	4284      	cmp	r4, r0
    de30:	d9f6      	bls.n	de20 <am_hal_adc_samples_read+0x50>
    de32:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    de34:	f3c1 108d 	ubfx	r0, r1, #6, #14
    de38:	f3c1 7502 	ubfx	r5, r1, #28, #3
    de3c:	e903 0021 	stmdb	r3, {r0, r5}
    de40:	6810      	ldr	r0, [r2, #0]
    de42:	f3c1 5107 	ubfx	r1, r1, #20, #8
    de46:	3001      	adds	r0, #1
    de48:	3308      	adds	r3, #8
    de4a:	6010      	str	r0, [r2, #0]
    de4c:	2900      	cmp	r1, #0
    de4e:	d1ee      	bne.n	de2e <am_hal_adc_samples_read+0x5e>
    de50:	e7e6      	b.n	de20 <am_hal_adc_samples_read+0x50>
    de52:	bf00      	nop
    de54:	01afafaf 	.word	0x01afafaf
    de58:	50010000 	.word	0x50010000

0000de5c <am_hal_adc_sw_trigger>:
    de5c:	b128      	cbz	r0, de6a <am_hal_adc_sw_trigger+0xe>
    de5e:	6803      	ldr	r3, [r0, #0]
    de60:	4a05      	ldr	r2, [pc, #20]	; (de78 <am_hal_adc_sw_trigger+0x1c>)
    de62:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de66:	4293      	cmp	r3, r2
    de68:	d001      	beq.n	de6e <am_hal_adc_sw_trigger+0x12>
    de6a:	2002      	movs	r0, #2
    de6c:	4770      	bx	lr
    de6e:	4b03      	ldr	r3, [pc, #12]	; (de7c <am_hal_adc_sw_trigger+0x20>)
    de70:	2237      	movs	r2, #55	; 0x37
    de72:	609a      	str	r2, [r3, #8]
    de74:	2000      	movs	r0, #0
    de76:	4770      	bx	lr
    de78:	01afafaf 	.word	0x01afafaf
    de7c:	50010000 	.word	0x50010000

0000de80 <am_hal_adc_power_control>:
    de80:	b140      	cbz	r0, de94 <am_hal_adc_power_control+0x14>
    de82:	6803      	ldr	r3, [r0, #0]
    de84:	b570      	push	{r4, r5, r6, lr}
    de86:	4c2e      	ldr	r4, [pc, #184]	; (df40 <am_hal_adc_power_control+0xc0>)
    de88:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de8c:	42a3      	cmp	r3, r4
    de8e:	d003      	beq.n	de98 <am_hal_adc_power_control+0x18>
    de90:	2002      	movs	r0, #2
    de92:	bd70      	pop	{r4, r5, r6, pc}
    de94:	2002      	movs	r0, #2
    de96:	4770      	bx	lr
    de98:	4604      	mov	r4, r0
    de9a:	4615      	mov	r5, r2
    de9c:	460e      	mov	r6, r1
    de9e:	b329      	cbz	r1, deec <am_hal_adc_power_control+0x6c>
    dea0:	2902      	cmp	r1, #2
    dea2:	d821      	bhi.n	dee8 <am_hal_adc_power_control+0x68>
    dea4:	b1da      	cbz	r2, dede <am_hal_adc_power_control+0x5e>
    dea6:	4b27      	ldr	r3, [pc, #156]	; (df44 <am_hal_adc_power_control+0xc4>)
    dea8:	68da      	ldr	r2, [r3, #12]
    deaa:	6142      	str	r2, [r0, #20]
    deac:	691a      	ldr	r2, [r3, #16]
    deae:	6182      	str	r2, [r0, #24]
    deb0:	695a      	ldr	r2, [r3, #20]
    deb2:	61c2      	str	r2, [r0, #28]
    deb4:	699a      	ldr	r2, [r3, #24]
    deb6:	6202      	str	r2, [r0, #32]
    deb8:	69da      	ldr	r2, [r3, #28]
    deba:	6242      	str	r2, [r0, #36]	; 0x24
    debc:	6a1a      	ldr	r2, [r3, #32]
    debe:	6282      	str	r2, [r0, #40]	; 0x28
    dec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dec2:	62c2      	str	r2, [r0, #44]	; 0x2c
    dec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dec6:	6302      	str	r2, [r0, #48]	; 0x30
    dec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    deca:	6342      	str	r2, [r0, #52]	; 0x34
    decc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dece:	6382      	str	r2, [r0, #56]	; 0x38
    ded0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ded4:	63c2      	str	r2, [r0, #60]	; 0x3c
    ded6:	681b      	ldr	r3, [r3, #0]
    ded8:	6103      	str	r3, [r0, #16]
    deda:	2301      	movs	r3, #1
    dedc:	7303      	strb	r3, [r0, #12]
    dede:	200a      	movs	r0, #10
    dee0:	f001 f9cc 	bl	f27c <am_hal_pwrctrl_periph_disable>
    dee4:	2000      	movs	r0, #0
    dee6:	bd70      	pop	{r4, r5, r6, pc}
    dee8:	2006      	movs	r0, #6
    deea:	bd70      	pop	{r4, r5, r6, pc}
    deec:	b11a      	cbz	r2, def6 <am_hal_adc_power_control+0x76>
    deee:	7b03      	ldrb	r3, [r0, #12]
    def0:	b933      	cbnz	r3, df00 <am_hal_adc_power_control+0x80>
    def2:	2007      	movs	r0, #7
    def4:	bd70      	pop	{r4, r5, r6, pc}
    def6:	200a      	movs	r0, #10
    def8:	f001 f996 	bl	f228 <am_hal_pwrctrl_periph_enable>
    defc:	4628      	mov	r0, r5
    defe:	bd70      	pop	{r4, r5, r6, pc}
    df00:	200a      	movs	r0, #10
    df02:	f001 f991 	bl	f228 <am_hal_pwrctrl_periph_enable>
    df06:	4b0f      	ldr	r3, [pc, #60]	; (df44 <am_hal_adc_power_control+0xc4>)
    df08:	6962      	ldr	r2, [r4, #20]
    df0a:	60da      	str	r2, [r3, #12]
    df0c:	69a2      	ldr	r2, [r4, #24]
    df0e:	611a      	str	r2, [r3, #16]
    df10:	69e2      	ldr	r2, [r4, #28]
    df12:	615a      	str	r2, [r3, #20]
    df14:	6a22      	ldr	r2, [r4, #32]
    df16:	619a      	str	r2, [r3, #24]
    df18:	6a62      	ldr	r2, [r4, #36]	; 0x24
    df1a:	61da      	str	r2, [r3, #28]
    df1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    df1e:	621a      	str	r2, [r3, #32]
    df20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    df22:	625a      	str	r2, [r3, #36]	; 0x24
    df24:	6b22      	ldr	r2, [r4, #48]	; 0x30
    df26:	629a      	str	r2, [r3, #40]	; 0x28
    df28:	6b62      	ldr	r2, [r4, #52]	; 0x34
    df2a:	62da      	str	r2, [r3, #44]	; 0x2c
    df2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df2e:	631a      	str	r2, [r3, #48]	; 0x30
    df30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    df32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df36:	6922      	ldr	r2, [r4, #16]
    df38:	601a      	str	r2, [r3, #0]
    df3a:	4630      	mov	r0, r6
    df3c:	7326      	strb	r6, [r4, #12]
    df3e:	bd70      	pop	{r4, r5, r6, pc}
    df40:	01afafaf 	.word	0x01afafaf
    df44:	50010000 	.word	0x50010000

0000df48 <am_hal_cachectrl_config>:
    df48:	b530      	push	{r4, r5, lr}
    df4a:	b083      	sub	sp, #12
    df4c:	4605      	mov	r5, r0
    df4e:	f000 fb71 	bl	e634 <am_hal_interrupt_master_disable>
    df52:	4c11      	ldr	r4, [pc, #68]	; (df98 <am_hal_cachectrl_config+0x50>)
    df54:	9001      	str	r0, [sp, #4]
    df56:	6823      	ldr	r3, [r4, #0]
    df58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    df5c:	6023      	str	r3, [r4, #0]
    df5e:	9801      	ldr	r0, [sp, #4]
    df60:	f000 fb6c 	bl	e63c <am_hal_interrupt_master_set>
    df64:	78eb      	ldrb	r3, [r5, #3]
    df66:	782a      	ldrb	r2, [r5, #0]
    df68:	78a8      	ldrb	r0, [r5, #2]
    df6a:	7869      	ldrb	r1, [r5, #1]
    df6c:	005b      	lsls	r3, r3, #1
    df6e:	0112      	lsls	r2, r2, #4
    df70:	b2d2      	uxtb	r2, r2
    df72:	f003 0302 	and.w	r3, r3, #2
    df76:	4313      	orrs	r3, r2
    df78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    df7c:	0080      	lsls	r0, r0, #2
    df7e:	f000 000c 	and.w	r0, r0, #12
    df82:	020a      	lsls	r2, r1, #8
    df84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    df88:	4303      	orrs	r3, r0
    df8a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    df8e:	4313      	orrs	r3, r2
    df90:	2000      	movs	r0, #0
    df92:	6023      	str	r3, [r4, #0]
    df94:	b003      	add	sp, #12
    df96:	bd30      	pop	{r4, r5, pc}
    df98:	40018000 	.word	0x40018000

0000df9c <am_hal_cachectrl_enable>:
    df9c:	4a03      	ldr	r2, [pc, #12]	; (dfac <am_hal_cachectrl_enable+0x10>)
    df9e:	6813      	ldr	r3, [r2, #0]
    dfa0:	f043 0301 	orr.w	r3, r3, #1
    dfa4:	6013      	str	r3, [r2, #0]
    dfa6:	2000      	movs	r0, #0
    dfa8:	4770      	bx	lr
    dfaa:	bf00      	nop
    dfac:	40018000 	.word	0x40018000

0000dfb0 <am_hal_clkgen_control>:
    dfb0:	4b32      	ldr	r3, [pc, #200]	; (e07c <am_hal_clkgen_control+0xcc>)
    dfb2:	681a      	ldr	r2, [r3, #0]
    dfb4:	b912      	cbnz	r2, dfbc <am_hal_clkgen_control+0xc>
    dfb6:	4a32      	ldr	r2, [pc, #200]	; (e080 <am_hal_clkgen_control+0xd0>)
    dfb8:	6812      	ldr	r2, [r2, #0]
    dfba:	601a      	str	r2, [r3, #0]
    dfbc:	2809      	cmp	r0, #9
    dfbe:	d85a      	bhi.n	e076 <am_hal_clkgen_control+0xc6>
    dfc0:	e8df f000 	tbb	[pc, r0]
    dfc4:	261e160d 	.word	0x261e160d
    dfc8:	4640362e 	.word	0x4640362e
    dfcc:	054e      	.short	0x054e
    dfce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dfd2:	2000      	movs	r0, #0
    dfd4:	6a1a      	ldr	r2, [r3, #32]
    dfd6:	f36f 0200 	bfc	r2, #0, #1
    dfda:	621a      	str	r2, [r3, #32]
    dfdc:	4770      	bx	lr
    dfde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dfe2:	2200      	movs	r2, #0
    dfe4:	2147      	movs	r1, #71	; 0x47
    dfe6:	6159      	str	r1, [r3, #20]
    dfe8:	4610      	mov	r0, r2
    dfea:	619a      	str	r2, [r3, #24]
    dfec:	615a      	str	r2, [r3, #20]
    dfee:	4770      	bx	lr
    dff0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dff4:	2000      	movs	r0, #0
    dff6:	68d3      	ldr	r3, [r2, #12]
    dff8:	f023 0301 	bic.w	r3, r3, #1
    dffc:	60d3      	str	r3, [r2, #12]
    dffe:	4770      	bx	lr
    e000:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e004:	2000      	movs	r0, #0
    e006:	68d3      	ldr	r3, [r2, #12]
    e008:	f023 0302 	bic.w	r3, r3, #2
    e00c:	60d3      	str	r3, [r2, #12]
    e00e:	4770      	bx	lr
    e010:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e014:	2000      	movs	r0, #0
    e016:	68d3      	ldr	r3, [r2, #12]
    e018:	f043 0301 	orr.w	r3, r3, #1
    e01c:	60d3      	str	r3, [r2, #12]
    e01e:	4770      	bx	lr
    e020:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e024:	2000      	movs	r0, #0
    e026:	68d3      	ldr	r3, [r2, #12]
    e028:	f043 0302 	orr.w	r3, r3, #2
    e02c:	60d3      	str	r3, [r2, #12]
    e02e:	4770      	bx	lr
    e030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e034:	2200      	movs	r2, #0
    e036:	2047      	movs	r0, #71	; 0x47
    e038:	2101      	movs	r1, #1
    e03a:	6158      	str	r0, [r3, #20]
    e03c:	6199      	str	r1, [r3, #24]
    e03e:	4610      	mov	r0, r2
    e040:	615a      	str	r2, [r3, #20]
    e042:	4770      	bx	lr
    e044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e048:	2000      	movs	r0, #0
    e04a:	68da      	ldr	r2, [r3, #12]
    e04c:	60da      	str	r2, [r3, #12]
    e04e:	4770      	bx	lr
    e050:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e054:	2000      	movs	r0, #0
    e056:	68d3      	ldr	r3, [r2, #12]
    e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e05c:	60d3      	str	r3, [r2, #12]
    e05e:	4770      	bx	lr
    e060:	b139      	cbz	r1, e072 <am_hal_clkgen_control+0xc2>
    e062:	680b      	ldr	r3, [r1, #0]
    e064:	f043 0301 	orr.w	r3, r3, #1
    e068:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e06c:	2000      	movs	r0, #0
    e06e:	6213      	str	r3, [r2, #32]
    e070:	4770      	bx	lr
    e072:	4b04      	ldr	r3, [pc, #16]	; (e084 <am_hal_clkgen_control+0xd4>)
    e074:	e7f8      	b.n	e068 <am_hal_clkgen_control+0xb8>
    e076:	2006      	movs	r0, #6
    e078:	4770      	bx	lr
    e07a:	bf00      	nop
    e07c:	10001174 	.word	0x10001174
    e080:	4ffff000 	.word	0x4ffff000
    e084:	0025b801 	.word	0x0025b801

0000e088 <am_hal_ctimer_config_single>:
    e088:	b5f0      	push	{r4, r5, r6, r7, lr}
    e08a:	b083      	sub	sp, #12
    e08c:	460e      	mov	r6, r1
    e08e:	4614      	mov	r4, r2
    e090:	0147      	lsls	r7, r0, #5
    e092:	4605      	mov	r5, r0
    e094:	f000 face 	bl	e634 <am_hal_interrupt_master_disable>
    e098:	4a19      	ldr	r2, [pc, #100]	; (e100 <am_hal_ctimer_config_single+0x78>)
    e09a:	9001      	str	r0, [sp, #4]
    e09c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e0a0:	58bb      	ldr	r3, [r7, r2]
    e0a2:	d021      	beq.n	e0e8 <am_hal_ctimer_config_single+0x60>
    e0a4:	ea23 0306 	bic.w	r3, r3, r6
    e0a8:	1c71      	adds	r1, r6, #1
    e0aa:	ea43 0304 	orr.w	r3, r3, r4
    e0ae:	d00c      	beq.n	e0ca <am_hal_ctimer_config_single+0x42>
    e0b0:	50bb      	str	r3, [r7, r2]
    e0b2:	9801      	ldr	r0, [sp, #4]
    e0b4:	f000 fac2 	bl	e63c <am_hal_interrupt_master_set>
    e0b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e0bc:	429e      	cmp	r6, r3
    e0be:	d01c      	beq.n	e0fa <am_hal_ctimer_config_single+0x72>
    e0c0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e0c4:	d017      	beq.n	e0f6 <am_hal_ctimer_config_single+0x6e>
    e0c6:	b003      	add	sp, #12
    e0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e0ce:	50bb      	str	r3, [r7, r2]
    e0d0:	9801      	ldr	r0, [sp, #4]
    e0d2:	f000 fab3 	bl	e63c <am_hal_interrupt_master_set>
    e0d6:	2200      	movs	r2, #0
    e0d8:	4b0a      	ldr	r3, [pc, #40]	; (e104 <am_hal_ctimer_config_single+0x7c>)
    e0da:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e0de:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e0e2:	54ac      	strb	r4, [r5, r2]
    e0e4:	b003      	add	sp, #12
    e0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0e8:	0424      	lsls	r4, r4, #16
    e0ea:	b29b      	uxth	r3, r3
    e0ec:	4323      	orrs	r3, r4
    e0ee:	50bb      	str	r3, [r7, r2]
    e0f0:	9801      	ldr	r0, [sp, #4]
    e0f2:	f000 faa3 	bl	e63c <am_hal_interrupt_master_set>
    e0f6:	2201      	movs	r2, #1
    e0f8:	e7ee      	b.n	e0d8 <am_hal_ctimer_config_single+0x50>
    e0fa:	2200      	movs	r2, #0
    e0fc:	e7ec      	b.n	e0d8 <am_hal_ctimer_config_single+0x50>
    e0fe:	bf00      	nop
    e100:	4000800c 	.word	0x4000800c
    e104:	1000104c 	.word	0x1000104c

0000e108 <am_hal_ctimer_start>:
    e108:	b570      	push	{r4, r5, r6, lr}
    e10a:	b082      	sub	sp, #8
    e10c:	460c      	mov	r4, r1
    e10e:	0146      	lsls	r6, r0, #5
    e110:	4605      	mov	r5, r0
    e112:	f000 fa8f 	bl	e634 <am_hal_interrupt_master_disable>
    e116:	4a0f      	ldr	r2, [pc, #60]	; (e154 <am_hal_ctimer_start+0x4c>)
    e118:	9001      	str	r0, [sp, #4]
    e11a:	58b3      	ldr	r3, [r6, r2]
    e11c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e120:	ea23 0301 	bic.w	r3, r3, r1
    e124:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e128:	430b      	orrs	r3, r1
    e12a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e12e:	bf0c      	ite	eq
    e130:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e134:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e138:	50b3      	str	r3, [r6, r2]
    e13a:	4b07      	ldr	r3, [pc, #28]	; (e158 <am_hal_ctimer_start+0x50>)
    e13c:	9801      	ldr	r0, [sp, #4]
    e13e:	bf0c      	ite	eq
    e140:	2101      	moveq	r1, #1
    e142:	2100      	movne	r1, #0
    e144:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e148:	545c      	strb	r4, [r3, r1]
    e14a:	f000 fa77 	bl	e63c <am_hal_interrupt_master_set>
    e14e:	b002      	add	sp, #8
    e150:	bd70      	pop	{r4, r5, r6, pc}
    e152:	bf00      	nop
    e154:	4000800c 	.word	0x4000800c
    e158:	1000104c 	.word	0x1000104c

0000e15c <am_hal_ctimer_period_set>:
    e15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e160:	b082      	sub	sp, #8
    e162:	4689      	mov	r9, r1
    e164:	4698      	mov	r8, r3
    e166:	0147      	lsls	r7, r0, #5
    e168:	4614      	mov	r4, r2
    e16a:	f000 fa63 	bl	e634 <am_hal_interrupt_master_disable>
    e16e:	f8df a094 	ldr.w	sl, [pc, #148]	; e204 <am_hal_ctimer_period_set+0xa8>
    e172:	9001      	str	r0, [sp, #4]
    e174:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e178:	4d20      	ldr	r5, [pc, #128]	; (e1fc <am_hal_ctimer_period_set+0xa0>)
    e17a:	4e21      	ldr	r6, [pc, #132]	; (e200 <am_hal_ctimer_period_set+0xa4>)
    e17c:	f857 300a 	ldr.w	r3, [r7, sl]
    e180:	d01a      	beq.n	e1b8 <am_hal_ctimer_period_set+0x5c>
    e182:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e186:	2b80      	cmp	r3, #128	; 0x80
    e188:	d01b      	beq.n	e1c2 <am_hal_ctimer_period_set+0x66>
    e18a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e18e:	2000      	movs	r0, #0
    e190:	4591      	cmp	r9, r2
    e192:	4603      	mov	r3, r0
    e194:	d01e      	beq.n	e1d4 <am_hal_ctimer_period_set+0x78>
    e196:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e19a:	d025      	beq.n	e1e8 <am_hal_ctimer_period_set+0x8c>
    e19c:	0c1b      	lsrs	r3, r3, #16
    e19e:	b2a2      	uxth	r2, r4
    e1a0:	041b      	lsls	r3, r3, #16
    e1a2:	4310      	orrs	r0, r2
    e1a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e1a8:	5178      	str	r0, [r7, r5]
    e1aa:	51bb      	str	r3, [r7, r6]
    e1ac:	9801      	ldr	r0, [sp, #4]
    e1ae:	f000 fa45 	bl	e63c <am_hal_interrupt_master_set>
    e1b2:	b002      	add	sp, #8
    e1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1b8:	0c1b      	lsrs	r3, r3, #16
    e1ba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e1be:	2b80      	cmp	r3, #128	; 0x80
    e1c0:	d111      	bne.n	e1e6 <am_hal_ctimer_period_set+0x8a>
    e1c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1c6:	4591      	cmp	r9, r2
    e1c8:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e1cc:	4623      	mov	r3, r4
    e1ce:	ebc8 0404 	rsb	r4, r8, r4
    e1d2:	d1e0      	bne.n	e196 <am_hal_ctimer_period_set+0x3a>
    e1d4:	b2a3      	uxth	r3, r4
    e1d6:	4318      	orrs	r0, r3
    e1d8:	5178      	str	r0, [r7, r5]
    e1da:	9801      	ldr	r0, [sp, #4]
    e1dc:	f000 fa2e 	bl	e63c <am_hal_interrupt_master_set>
    e1e0:	b002      	add	sp, #8
    e1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1e6:	2000      	movs	r0, #0
    e1e8:	b2a3      	uxth	r3, r4
    e1ea:	4318      	orrs	r0, r3
    e1ec:	51b8      	str	r0, [r7, r6]
    e1ee:	9801      	ldr	r0, [sp, #4]
    e1f0:	f000 fa24 	bl	e63c <am_hal_interrupt_master_set>
    e1f4:	b002      	add	sp, #8
    e1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1fa:	bf00      	nop
    e1fc:	40008004 	.word	0x40008004
    e200:	40008008 	.word	0x40008008
    e204:	4000800c 	.word	0x4000800c

0000e208 <am_hal_ctimer_int_enable>:
    e208:	b510      	push	{r4, lr}
    e20a:	b082      	sub	sp, #8
    e20c:	4604      	mov	r4, r0
    e20e:	f000 fa11 	bl	e634 <am_hal_interrupt_master_disable>
    e212:	4b06      	ldr	r3, [pc, #24]	; (e22c <am_hal_ctimer_int_enable+0x24>)
    e214:	9001      	str	r0, [sp, #4]
    e216:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e21a:	4314      	orrs	r4, r2
    e21c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e220:	9801      	ldr	r0, [sp, #4]
    e222:	f000 fa0b 	bl	e63c <am_hal_interrupt_master_set>
    e226:	b002      	add	sp, #8
    e228:	bd10      	pop	{r4, pc}
    e22a:	bf00      	nop
    e22c:	40008000 	.word	0x40008000

0000e230 <am_hal_ctimer_int_clear>:
    e230:	b510      	push	{r4, lr}
    e232:	b082      	sub	sp, #8
    e234:	4604      	mov	r4, r0
    e236:	f000 f9fd 	bl	e634 <am_hal_interrupt_master_disable>
    e23a:	4b04      	ldr	r3, [pc, #16]	; (e24c <am_hal_ctimer_int_clear+0x1c>)
    e23c:	9001      	str	r0, [sp, #4]
    e23e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e242:	9801      	ldr	r0, [sp, #4]
    e244:	f000 f9fa 	bl	e63c <am_hal_interrupt_master_set>
    e248:	b002      	add	sp, #8
    e24a:	bd10      	pop	{r4, pc}
    e24c:	40008000 	.word	0x40008000

0000e250 <am_hal_flash_delay>:
    e250:	4b00      	ldr	r3, [pc, #0]	; (e254 <am_hal_flash_delay+0x4>)
    e252:	4718      	bx	r3
    e254:	0800009d 	.word	0x0800009d

0000e258 <am_hal_flash_delay_status_check>:
    e258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e25c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    e260:	460d      	mov	r5, r1
    e262:	4616      	mov	r6, r2
    e264:	461f      	mov	r7, r3
    e266:	b17c      	cbz	r4, e288 <am_hal_flash_delay_status_check+0x30>
    e268:	4604      	mov	r4, r0
    e26a:	f8df 8040 	ldr.w	r8, [pc, #64]	; e2ac <am_hal_flash_delay_status_check+0x54>
    e26e:	e002      	b.n	e276 <am_hal_flash_delay_status_check+0x1e>
    e270:	b1c4      	cbz	r4, e2a4 <am_hal_flash_delay_status_check+0x4c>
    e272:	47c0      	blx	r8
    e274:	3c01      	subs	r4, #1
    e276:	682b      	ldr	r3, [r5, #0]
    e278:	4033      	ands	r3, r6
    e27a:	429f      	cmp	r7, r3
    e27c:	f04f 0001 	mov.w	r0, #1
    e280:	d1f6      	bne.n	e270 <am_hal_flash_delay_status_check+0x18>
    e282:	2000      	movs	r0, #0
    e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e288:	f8df 8020 	ldr.w	r8, [pc, #32]	; e2ac <am_hal_flash_delay_status_check+0x54>
    e28c:	4604      	mov	r4, r0
    e28e:	e002      	b.n	e296 <am_hal_flash_delay_status_check+0x3e>
    e290:	b144      	cbz	r4, e2a4 <am_hal_flash_delay_status_check+0x4c>
    e292:	47c0      	blx	r8
    e294:	3c01      	subs	r4, #1
    e296:	682b      	ldr	r3, [r5, #0]
    e298:	4033      	ands	r3, r6
    e29a:	429f      	cmp	r7, r3
    e29c:	f04f 0001 	mov.w	r0, #1
    e2a0:	d0f6      	beq.n	e290 <am_hal_flash_delay_status_check+0x38>
    e2a2:	e7ee      	b.n	e282 <am_hal_flash_delay_status_check+0x2a>
    e2a4:	2004      	movs	r0, #4
    e2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2aa:	bf00      	nop
    e2ac:	0800009d 	.word	0x0800009d

0000e2b0 <am_hal_gpio_pinconfig>:
    e2b0:	2831      	cmp	r0, #49	; 0x31
    e2b2:	d901      	bls.n	e2b8 <am_hal_gpio_pinconfig+0x8>
    e2b4:	2006      	movs	r0, #6
    e2b6:	4770      	bx	lr
    e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2bc:	f001 0307 	and.w	r3, r1, #7
    e2c0:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    e2c4:	b085      	sub	sp, #20
    e2c6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e2ca:	d014      	beq.n	e2f6 <am_hal_gpio_pinconfig+0x46>
    e2cc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e2d0:	1db4      	adds	r4, r6, #6
    e2d2:	f004 0407 	and.w	r4, r4, #7
    e2d6:	2c03      	cmp	r4, #3
    e2d8:	f042 0201 	orr.w	r2, r2, #1
    e2dc:	f200 80ae 	bhi.w	e43c <am_hal_gpio_pinconfig+0x18c>
    e2e0:	4c85      	ldr	r4, [pc, #532]	; (e4f8 <am_hal_gpio_pinconfig+0x248>)
    e2e2:	5c24      	ldrb	r4, [r4, r0]
    e2e4:	07e7      	lsls	r7, r4, #31
    e2e6:	d403      	bmi.n	e2f0 <am_hal_gpio_pinconfig+0x40>
    e2e8:	4884      	ldr	r0, [pc, #528]	; (e4fc <am_hal_gpio_pinconfig+0x24c>)
    e2ea:	b005      	add	sp, #20
    e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2f0:	3e02      	subs	r6, #2
    e2f2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e2f6:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e2fa:	2c00      	cmp	r4, #0
    e2fc:	f040 8098 	bne.w	e430 <am_hal_gpio_pinconfig+0x180>
    e300:	4c7f      	ldr	r4, [pc, #508]	; (e500 <am_hal_gpio_pinconfig+0x250>)
    e302:	4d80      	ldr	r5, [pc, #512]	; (e504 <am_hal_gpio_pinconfig+0x254>)
    e304:	5c24      	ldrb	r4, [r4, r0]
    e306:	5c2d      	ldrb	r5, [r5, r0]
    e308:	411c      	asrs	r4, r3
    e30a:	f014 0f01 	tst.w	r4, #1
    e30e:	bf0c      	ite	eq
    e310:	2400      	moveq	r4, #0
    e312:	2402      	movne	r4, #2
    e314:	42ab      	cmp	r3, r5
    e316:	ea42 0204 	orr.w	r2, r2, r4
    e31a:	f000 809b 	beq.w	e454 <am_hal_gpio_pinconfig+0x1a4>
    e31e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e322:	105d      	asrs	r5, r3, #1
    e324:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e328:	00db      	lsls	r3, r3, #3
    e32a:	f3c1 2707 	ubfx	r7, r1, #8, #8
    e32e:	f003 0408 	and.w	r4, r3, #8
    e332:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e336:	f007 060c 	and.w	r6, r7, #12
    e33a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e33e:	2e04      	cmp	r6, #4
    e340:	ea43 0304 	orr.w	r3, r3, r4
    e344:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e348:	462c      	mov	r4, r5
    e34a:	f000 8090 	beq.w	e46e <am_hal_gpio_pinconfig+0x1be>
    e34e:	4c6e      	ldr	r4, [pc, #440]	; (e508 <am_hal_gpio_pinconfig+0x258>)
    e350:	6824      	ldr	r4, [r4, #0]
    e352:	ebc4 0901 	rsb	r9, r4, r1
    e356:	fab9 f989 	clz	r9, r9
    e35a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    e35e:	f017 0f60 	tst.w	r7, #96	; 0x60
    e362:	bf04      	itt	eq
    e364:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e368:	f364 0300 	bfieq	r3, r4, #0, #1
    e36c:	0084      	lsls	r4, r0, #2
    e36e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e372:	2902      	cmp	r1, #2
    e374:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e378:	d07c      	beq.n	e474 <am_hal_gpio_pinconfig+0x1c4>
    e37a:	f200 8082 	bhi.w	e482 <am_hal_gpio_pinconfig+0x1d2>
    e37e:	2901      	cmp	r1, #1
    e380:	bf08      	it	eq
    e382:	f042 0204 	orreq.w	r2, r2, #4
    e386:	f005 0518 	and.w	r5, r5, #24
    e38a:	f04f 0800 	mov.w	r8, #0
    e38e:	f004 041c 	and.w	r4, r4, #28
    e392:	0841      	lsrs	r1, r0, #1
    e394:	f020 0a03 	bic.w	sl, r0, #3
    e398:	270f      	movs	r7, #15
    e39a:	f021 0103 	bic.w	r1, r1, #3
    e39e:	40a7      	lsls	r7, r4
    e3a0:	26ff      	movs	r6, #255	; 0xff
    e3a2:	fa03 f404 	lsl.w	r4, r3, r4
    e3a6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e3aa:	40ae      	lsls	r6, r5
    e3ac:	9101      	str	r1, [sp, #4]
    e3ae:	9300      	str	r3, [sp, #0]
    e3b0:	4683      	mov	fp, r0
    e3b2:	fa02 f505 	lsl.w	r5, r2, r5
    e3b6:	f000 f93d 	bl	e634 <am_hal_interrupt_master_disable>
    e3ba:	9b00      	ldr	r3, [sp, #0]
    e3bc:	9003      	str	r0, [sp, #12]
    e3be:	43ff      	mvns	r7, r7
    e3c0:	43f6      	mvns	r6, r6
    e3c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e3c6:	f8df e160 	ldr.w	lr, [pc, #352]	; e528 <am_hal_gpio_pinconfig+0x278>
    e3ca:	4850      	ldr	r0, [pc, #320]	; (e50c <am_hal_gpio_pinconfig+0x25c>)
    e3cc:	9901      	ldr	r1, [sp, #4]
    e3ce:	f1b9 0f00 	cmp.w	r9, #0
    e3d2:	d00b      	beq.n	e3ec <am_hal_gpio_pinconfig+0x13c>
    e3d4:	f00b 021f 	and.w	r2, fp, #31
    e3d8:	f04f 0901 	mov.w	r9, #1
    e3dc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    e3e0:	f8df c148 	ldr.w	ip, [pc, #328]	; e52c <am_hal_gpio_pinconfig+0x27c>
    e3e4:	fa09 f202 	lsl.w	r2, r9, r2
    e3e8:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    e3ec:	4a48      	ldr	r2, [pc, #288]	; (e510 <am_hal_gpio_pinconfig+0x260>)
    e3ee:	f04f 0c73 	mov.w	ip, #115	; 0x73
    e3f2:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    e3f6:	f8d3 c000 	ldr.w	ip, [r3]
    e3fa:	ea06 0c0c 	and.w	ip, r6, ip
    e3fe:	ea4c 0505 	orr.w	r5, ip, r5
    e402:	601d      	str	r5, [r3, #0]
    e404:	f851 300e 	ldr.w	r3, [r1, lr]
    e408:	403b      	ands	r3, r7
    e40a:	4323      	orrs	r3, r4
    e40c:	f841 300e 	str.w	r3, [r1, lr]
    e410:	f85a 3000 	ldr.w	r3, [sl, r0]
    e414:	401e      	ands	r6, r3
    e416:	2400      	movs	r4, #0
    e418:	ea46 0608 	orr.w	r6, r6, r8
    e41c:	f84a 6000 	str.w	r6, [sl, r0]
    e420:	6614      	str	r4, [r2, #96]	; 0x60
    e422:	9803      	ldr	r0, [sp, #12]
    e424:	f000 f90a 	bl	e63c <am_hal_interrupt_master_set>
    e428:	4620      	mov	r0, r4
    e42a:	b005      	add	sp, #20
    e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e430:	2c01      	cmp	r4, #1
    e432:	d015      	beq.n	e460 <am_hal_gpio_pinconfig+0x1b0>
    e434:	2c02      	cmp	r4, #2
    e436:	d032      	beq.n	e49e <am_hal_gpio_pinconfig+0x1ee>
    e438:	4836      	ldr	r0, [pc, #216]	; (e514 <am_hal_gpio_pinconfig+0x264>)
    e43a:	e756      	b.n	e2ea <am_hal_gpio_pinconfig+0x3a>
    e43c:	2dc0      	cmp	r5, #192	; 0xc0
    e43e:	d029      	beq.n	e494 <am_hal_gpio_pinconfig+0x1e4>
    e440:	2d20      	cmp	r5, #32
    e442:	f47f af58 	bne.w	e2f6 <am_hal_gpio_pinconfig+0x46>
    e446:	4c2c      	ldr	r4, [pc, #176]	; (e4f8 <am_hal_gpio_pinconfig+0x248>)
    e448:	5c24      	ldrb	r4, [r4, r0]
    e44a:	f014 0f09 	tst.w	r4, #9
    e44e:	f47f af4b 	bne.w	e2e8 <am_hal_gpio_pinconfig+0x38>
    e452:	e750      	b.n	e2f6 <am_hal_gpio_pinconfig+0x46>
    e454:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e458:	2c07      	cmp	r4, #7
    e45a:	d127      	bne.n	e4ac <am_hal_gpio_pinconfig+0x1fc>
    e45c:	482e      	ldr	r0, [pc, #184]	; (e518 <am_hal_gpio_pinconfig+0x268>)
    e45e:	e744      	b.n	e2ea <am_hal_gpio_pinconfig+0x3a>
    e460:	4c25      	ldr	r4, [pc, #148]	; (e4f8 <am_hal_gpio_pinconfig+0x248>)
    e462:	5c24      	ldrb	r4, [r4, r0]
    e464:	07a5      	lsls	r5, r4, #30
    e466:	d5e7      	bpl.n	e438 <am_hal_gpio_pinconfig+0x188>
    e468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e46c:	e748      	b.n	e300 <am_hal_gpio_pinconfig+0x50>
    e46e:	f04f 0901 	mov.w	r9, #1
    e472:	e774      	b.n	e35e <am_hal_gpio_pinconfig+0xae>
    e474:	f005 0518 	and.w	r5, r5, #24
    e478:	f04f 0801 	mov.w	r8, #1
    e47c:	fa08 f805 	lsl.w	r8, r8, r5
    e480:	e785      	b.n	e38e <am_hal_gpio_pinconfig+0xde>
    e482:	f005 0518 	and.w	r5, r5, #24
    e486:	f04f 0801 	mov.w	r8, #1
    e48a:	f042 0204 	orr.w	r2, r2, #4
    e48e:	fa08 f805 	lsl.w	r8, r8, r5
    e492:	e77c      	b.n	e38e <am_hal_gpio_pinconfig+0xde>
    e494:	2814      	cmp	r0, #20
    e496:	f43f af2e 	beq.w	e2f6 <am_hal_gpio_pinconfig+0x46>
    e49a:	4820      	ldr	r0, [pc, #128]	; (e51c <am_hal_gpio_pinconfig+0x26c>)
    e49c:	e725      	b.n	e2ea <am_hal_gpio_pinconfig+0x3a>
    e49e:	4c16      	ldr	r4, [pc, #88]	; (e4f8 <am_hal_gpio_pinconfig+0x248>)
    e4a0:	5c24      	ldrb	r4, [r4, r0]
    e4a2:	0764      	lsls	r4, r4, #29
    e4a4:	d5c8      	bpl.n	e438 <am_hal_gpio_pinconfig+0x188>
    e4a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e4aa:	e729      	b.n	e300 <am_hal_gpio_pinconfig+0x50>
    e4ac:	4d1c      	ldr	r5, [pc, #112]	; (e520 <am_hal_gpio_pinconfig+0x270>)
    e4ae:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e4b2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e4b6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e4ba:	429e      	cmp	r6, r3
    e4bc:	d00c      	beq.n	e4d8 <am_hal_gpio_pinconfig+0x228>
    e4be:	0084      	lsls	r4, r0, #2
    e4c0:	4425      	add	r5, r4
    e4c2:	786e      	ldrb	r6, [r5, #1]
    e4c4:	429e      	cmp	r6, r3
    e4c6:	d013      	beq.n	e4f0 <am_hal_gpio_pinconfig+0x240>
    e4c8:	78ae      	ldrb	r6, [r5, #2]
    e4ca:	429e      	cmp	r6, r3
    e4cc:	d00e      	beq.n	e4ec <am_hal_gpio_pinconfig+0x23c>
    e4ce:	78ed      	ldrb	r5, [r5, #3]
    e4d0:	429d      	cmp	r5, r3
    e4d2:	d00f      	beq.n	e4f4 <am_hal_gpio_pinconfig+0x244>
    e4d4:	4813      	ldr	r0, [pc, #76]	; (e524 <am_hal_gpio_pinconfig+0x274>)
    e4d6:	e708      	b.n	e2ea <am_hal_gpio_pinconfig+0x3a>
    e4d8:	2300      	movs	r3, #0
    e4da:	0084      	lsls	r4, r0, #2
    e4dc:	005b      	lsls	r3, r3, #1
    e4de:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e4e2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e4e6:	f04f 0900 	mov.w	r9, #0
    e4ea:	e740      	b.n	e36e <am_hal_gpio_pinconfig+0xbe>
    e4ec:	2302      	movs	r3, #2
    e4ee:	e7f5      	b.n	e4dc <am_hal_gpio_pinconfig+0x22c>
    e4f0:	2301      	movs	r3, #1
    e4f2:	e7f3      	b.n	e4dc <am_hal_gpio_pinconfig+0x22c>
    e4f4:	2303      	movs	r3, #3
    e4f6:	e7f1      	b.n	e4dc <am_hal_gpio_pinconfig+0x22c>
    e4f8:	000101d4 	.word	0x000101d4
    e4fc:	08000100 	.word	0x08000100
    e500:	000102d0 	.word	0x000102d0
    e504:	0001030c 	.word	0x0001030c
    e508:	00010304 	.word	0x00010304
    e50c:	400100e0 	.word	0x400100e0
    e510:	40010000 	.word	0x40010000
    e514:	08000102 	.word	0x08000102
    e518:	08000103 	.word	0x08000103
    e51c:	08000101 	.word	0x08000101
    e520:	00010208 	.word	0x00010208
    e524:	08000104 	.word	0x08000104
    e528:	40010040 	.word	0x40010040
    e52c:	400100b4 	.word	0x400100b4

0000e530 <am_hal_gpio_state_read>:
    e530:	b1ca      	cbz	r2, e566 <am_hal_gpio_state_read+0x36>
    e532:	2831      	cmp	r0, #49	; 0x31
    e534:	d904      	bls.n	e540 <am_hal_gpio_state_read+0x10>
    e536:	f04f 33ff 	mov.w	r3, #4294967295
    e53a:	6013      	str	r3, [r2, #0]
    e53c:	2005      	movs	r0, #5
    e53e:	4770      	bx	lr
    e540:	2901      	cmp	r1, #1
    e542:	ea4f 1350 	mov.w	r3, r0, lsr #5
    e546:	f000 001f 	and.w	r0, r0, #31
    e54a:	d00e      	beq.n	e56a <am_hal_gpio_state_read+0x3a>
    e54c:	d315      	bcc.n	e57a <am_hal_gpio_state_read+0x4a>
    e54e:	2902      	cmp	r1, #2
    e550:	d109      	bne.n	e566 <am_hal_gpio_state_read+0x36>
    e552:	490e      	ldr	r1, [pc, #56]	; (e58c <am_hal_gpio_state_read+0x5c>)
    e554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e558:	fa23 f000 	lsr.w	r0, r3, r0
    e55c:	f000 0001 	and.w	r0, r0, #1
    e560:	6010      	str	r0, [r2, #0]
    e562:	2000      	movs	r0, #0
    e564:	4770      	bx	lr
    e566:	2006      	movs	r0, #6
    e568:	4770      	bx	lr
    e56a:	4909      	ldr	r1, [pc, #36]	; (e590 <am_hal_gpio_state_read+0x60>)
    e56c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e570:	fa23 f000 	lsr.w	r0, r3, r0
    e574:	f000 0001 	and.w	r0, r0, #1
    e578:	e7f2      	b.n	e560 <am_hal_gpio_state_read+0x30>
    e57a:	4906      	ldr	r1, [pc, #24]	; (e594 <am_hal_gpio_state_read+0x64>)
    e57c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e580:	fa23 f000 	lsr.w	r0, r3, r0
    e584:	f000 0001 	and.w	r0, r0, #1
    e588:	e7ea      	b.n	e560 <am_hal_gpio_state_read+0x30>
    e58a:	bf00      	nop
    e58c:	400100a0 	.word	0x400100a0
    e590:	40010088 	.word	0x40010088
    e594:	40010080 	.word	0x40010080

0000e598 <am_hal_gpio_state_write>:
    e598:	2831      	cmp	r0, #49	; 0x31
    e59a:	d901      	bls.n	e5a0 <am_hal_gpio_state_write+0x8>
    e59c:	2005      	movs	r0, #5
    e59e:	4770      	bx	lr
    e5a0:	2905      	cmp	r1, #5
    e5a2:	d901      	bls.n	e5a8 <am_hal_gpio_state_write+0x10>
    e5a4:	2006      	movs	r0, #6
    e5a6:	4770      	bx	lr
    e5a8:	b570      	push	{r4, r5, r6, lr}
    e5aa:	f000 031f 	and.w	r3, r0, #31
    e5ae:	b082      	sub	sp, #8
    e5b0:	2201      	movs	r2, #1
    e5b2:	460d      	mov	r5, r1
    e5b4:	4604      	mov	r4, r0
    e5b6:	fa02 f603 	lsl.w	r6, r2, r3
    e5ba:	f000 f83b 	bl	e634 <am_hal_interrupt_master_disable>
    e5be:	1e69      	subs	r1, r5, #1
    e5c0:	9001      	str	r0, [sp, #4]
    e5c2:	0960      	lsrs	r0, r4, #5
    e5c4:	2904      	cmp	r1, #4
    e5c6:	d81c      	bhi.n	e602 <am_hal_gpio_state_write+0x6a>
    e5c8:	e8df f001 	tbb	[pc, r1]
    e5cc:	030c1017 	.word	0x030c1017
    e5d0:	1f          	.byte	0x1f
    e5d1:	00          	.byte	0x00
    e5d2:	4b11      	ldr	r3, [pc, #68]	; (e618 <am_hal_gpio_state_write+0x80>)
    e5d4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e5d8:	9801      	ldr	r0, [sp, #4]
    e5da:	f000 f82f 	bl	e63c <am_hal_interrupt_master_set>
    e5de:	2000      	movs	r0, #0
    e5e0:	b002      	add	sp, #8
    e5e2:	bd70      	pop	{r4, r5, r6, pc}
    e5e4:	4b0d      	ldr	r3, [pc, #52]	; (e61c <am_hal_gpio_state_write+0x84>)
    e5e6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e5ea:	e7f5      	b.n	e5d8 <am_hal_gpio_state_write+0x40>
    e5ec:	4a0c      	ldr	r2, [pc, #48]	; (e620 <am_hal_gpio_state_write+0x88>)
    e5ee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e5f2:	4073      	eors	r3, r6
    e5f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e5f8:	e7ee      	b.n	e5d8 <am_hal_gpio_state_write+0x40>
    e5fa:	4b0a      	ldr	r3, [pc, #40]	; (e624 <am_hal_gpio_state_write+0x8c>)
    e5fc:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e600:	e7ea      	b.n	e5d8 <am_hal_gpio_state_write+0x40>
    e602:	4b09      	ldr	r3, [pc, #36]	; (e628 <am_hal_gpio_state_write+0x90>)
    e604:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e608:	e7e6      	b.n	e5d8 <am_hal_gpio_state_write+0x40>
    e60a:	4a04      	ldr	r2, [pc, #16]	; (e61c <am_hal_gpio_state_write+0x84>)
    e60c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e610:	4073      	eors	r3, r6
    e612:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e616:	e7df      	b.n	e5d8 <am_hal_gpio_state_write+0x40>
    e618:	400100a8 	.word	0x400100a8
    e61c:	400100b4 	.word	0x400100b4
    e620:	40010088 	.word	0x40010088
    e624:	40010090 	.word	0x40010090
    e628:	40010098 	.word	0x40010098

0000e62c <am_hal_interrupt_master_enable>:
    e62c:	f3ef 8010 	mrs	r0, PRIMASK
    e630:	b662      	cpsie	i
    e632:	4770      	bx	lr

0000e634 <am_hal_interrupt_master_disable>:
    e634:	f3ef 8010 	mrs	r0, PRIMASK
    e638:	b672      	cpsid	i
    e63a:	4770      	bx	lr

0000e63c <am_hal_interrupt_master_set>:
    e63c:	f380 8810 	msr	PRIMASK, r0
    e640:	4770      	bx	lr
    e642:	bf00      	nop

0000e644 <internal_iom_reset_on_error>:
    e644:	b570      	push	{r4, r5, r6, lr}
    e646:	6844      	ldr	r4, [r0, #4]
    e648:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e64c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e650:	3404      	adds	r4, #4
    e652:	0324      	lsls	r4, r4, #12
    e654:	2300      	movs	r3, #0
    e656:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e65a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e65e:	050b      	lsls	r3, r1, #20
    e660:	d52a      	bpl.n	e6b8 <internal_iom_reset_on_error+0x74>
    e662:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e666:	079e      	lsls	r6, r3, #30
    e668:	d450      	bmi.n	e70c <internal_iom_reset_on_error+0xc8>
    e66a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e66e:	079a      	lsls	r2, r3, #30
    e670:	d508      	bpl.n	e684 <internal_iom_reset_on_error+0x40>
    e672:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e676:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e67a:	2b03      	cmp	r3, #3
    e67c:	d9f5      	bls.n	e66a <internal_iom_reset_on_error+0x26>
    e67e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e682:	e7f6      	b.n	e672 <internal_iom_reset_on_error+0x2e>
    e684:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e688:	f003 0306 	and.w	r3, r3, #6
    e68c:	2b04      	cmp	r3, #4
    e68e:	d1f9      	bne.n	e684 <internal_iom_reset_on_error+0x40>
    e690:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e694:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e698:	b173      	cbz	r3, e6b8 <internal_iom_reset_on_error+0x74>
    e69a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e69e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e6a2:	2b03      	cmp	r3, #3
    e6a4:	d9f4      	bls.n	e690 <internal_iom_reset_on_error+0x4c>
    e6a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e6aa:	e7f6      	b.n	e69a <internal_iom_reset_on_error+0x56>
    e6ac:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e6b0:	f003 0306 	and.w	r3, r3, #6
    e6b4:	2b04      	cmp	r3, #4
    e6b6:	d1f9      	bne.n	e6ac <internal_iom_reset_on_error+0x68>
    e6b8:	06cb      	lsls	r3, r1, #27
    e6ba:	d520      	bpl.n	e6fe <internal_iom_reset_on_error+0xba>
    e6bc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e6c0:	f003 0306 	and.w	r3, r3, #6
    e6c4:	2b04      	cmp	r3, #4
    e6c6:	d1f9      	bne.n	e6bc <internal_iom_reset_on_error+0x78>
    e6c8:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e6cc:	f36f 1304 	bfc	r3, #4, #1
    e6d0:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e6d4:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e6d8:	f36f 0341 	bfc	r3, #1, #1
    e6dc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e6e0:	0040      	lsls	r0, r0, #1
    e6e2:	f7ff fdb5 	bl	e250 <am_hal_flash_delay>
    e6e6:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e6ea:	f043 0302 	orr.w	r3, r3, #2
    e6ee:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e6f2:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e6f6:	f043 0310 	orr.w	r3, r3, #16
    e6fa:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e6fe:	f04f 33ff 	mov.w	r3, #4294967295
    e702:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e706:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e70a:	bd70      	pop	{r4, r5, r6, pc}
    e70c:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e710:	4e07      	ldr	r6, [pc, #28]	; (e730 <internal_iom_reset_on_error+0xec>)
    e712:	2a00      	cmp	r2, #0
    e714:	d0ca      	beq.n	e6ac <internal_iom_reset_on_error+0x68>
    e716:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e71a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e71e:	2b03      	cmp	r3, #3
    e720:	d9f9      	bls.n	e716 <internal_iom_reset_on_error+0xd2>
    e722:	2a04      	cmp	r2, #4
    e724:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e728:	d9c0      	bls.n	e6ac <internal_iom_reset_on_error+0x68>
    e72a:	3a04      	subs	r2, #4
    e72c:	e7f1      	b.n	e712 <internal_iom_reset_on_error+0xce>
    e72e:	bf00      	nop
    e730:	deadbeef 	.word	0xdeadbeef

0000e734 <am_hal_iom_initialize>:
    e734:	2805      	cmp	r0, #5
    e736:	d901      	bls.n	e73c <am_hal_iom_initialize+0x8>
    e738:	2005      	movs	r0, #5
    e73a:	4770      	bx	lr
    e73c:	b1e1      	cbz	r1, e778 <am_hal_iom_initialize+0x44>
    e73e:	b4f0      	push	{r4, r5, r6, r7}
    e740:	f640 049c 	movw	r4, #2204	; 0x89c
    e744:	4e0d      	ldr	r6, [pc, #52]	; (e77c <am_hal_iom_initialize+0x48>)
    e746:	fb04 f400 	mul.w	r4, r4, r0
    e74a:	1935      	adds	r5, r6, r4
    e74c:	4602      	mov	r2, r0
    e74e:	78e8      	ldrb	r0, [r5, #3]
    e750:	f010 0301 	ands.w	r3, r0, #1
    e754:	d002      	beq.n	e75c <am_hal_iom_initialize+0x28>
    e756:	2007      	movs	r0, #7
    e758:	bcf0      	pop	{r4, r5, r6, r7}
    e75a:	4770      	bx	lr
    e75c:	f040 0001 	orr.w	r0, r0, #1
    e760:	f363 0041 	bfi	r0, r3, #1, #1
    e764:	70e8      	strb	r0, [r5, #3]
    e766:	5937      	ldr	r7, [r6, r4]
    e768:	4805      	ldr	r0, [pc, #20]	; (e780 <am_hal_iom_initialize+0x4c>)
    e76a:	f360 0717 	bfi	r7, r0, #0, #24
    e76e:	5137      	str	r7, [r6, r4]
    e770:	4618      	mov	r0, r3
    e772:	606a      	str	r2, [r5, #4]
    e774:	600d      	str	r5, [r1, #0]
    e776:	e7ef      	b.n	e758 <am_hal_iom_initialize+0x24>
    e778:	2006      	movs	r0, #6
    e77a:	4770      	bx	lr
    e77c:	10001750 	.word	0x10001750
    e780:	00123456 	.word	0x00123456

0000e784 <am_hal_iom_enable>:
    e784:	b128      	cbz	r0, e792 <am_hal_iom_enable+0xe>
    e786:	6803      	ldr	r3, [r0, #0]
    e788:	4a34      	ldr	r2, [pc, #208]	; (e85c <am_hal_iom_enable+0xd8>)
    e78a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e78e:	4293      	cmp	r3, r2
    e790:	d001      	beq.n	e796 <am_hal_iom_enable+0x12>
    e792:	2002      	movs	r0, #2
    e794:	4770      	bx	lr
    e796:	78c3      	ldrb	r3, [r0, #3]
    e798:	079b      	lsls	r3, r3, #30
    e79a:	d45d      	bmi.n	e858 <am_hal_iom_enable+0xd4>
    e79c:	6843      	ldr	r3, [r0, #4]
    e79e:	7a01      	ldrb	r1, [r0, #8]
    e7a0:	b570      	push	{r4, r5, r6, lr}
    e7a2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7a6:	3304      	adds	r3, #4
    e7a8:	031b      	lsls	r3, r3, #12
    e7aa:	3100      	adds	r1, #0
    e7ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e7b0:	bf18      	it	ne
    e7b2:	2101      	movne	r1, #1
    e7b4:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e7b8:	4291      	cmp	r1, r2
    e7ba:	bf0c      	ite	eq
    e7bc:	2201      	moveq	r2, #1
    e7be:	2210      	movne	r2, #16
    e7c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e7c4:	68c3      	ldr	r3, [r0, #12]
    e7c6:	b084      	sub	sp, #16
    e7c8:	4604      	mov	r4, r0
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d039      	beq.n	e842 <am_hal_iom_enable+0xbe>
    e7ce:	6843      	ldr	r3, [r0, #4]
    e7d0:	4923      	ldr	r1, [pc, #140]	; (e860 <am_hal_iom_enable+0xdc>)
    e7d2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7d6:	3304      	adds	r3, #4
    e7d8:	031a      	lsls	r2, r3, #12
    e7da:	2300      	movs	r3, #0
    e7dc:	6243      	str	r3, [r0, #36]	; 0x24
    e7de:	61c3      	str	r3, [r0, #28]
    e7e0:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    e7e4:	6902      	ldr	r2, [r0, #16]
    e7e6:	6840      	ldr	r0, [r0, #4]
    e7e8:	68e6      	ldr	r6, [r4, #12]
    e7ea:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    e7ee:	2501      	movs	r5, #1
    e7f0:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    e7f4:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    e7f8:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    e7fc:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    e800:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    e804:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    e808:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    e80c:	6223      	str	r3, [r4, #32]
    e80e:	b2c0      	uxtb	r0, r0
    e810:	fa22 f305 	lsr.w	r3, r2, r5
    e814:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    e818:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e81c:	a901      	add	r1, sp, #4
    e81e:	9301      	str	r3, [sp, #4]
    e820:	9602      	str	r6, [sp, #8]
    e822:	f88d 500c 	strb.w	r5, [sp, #12]
    e826:	f001 fa07 	bl	fc38 <am_hal_cmdq_init>
    e82a:	6863      	ldr	r3, [r4, #4]
    e82c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e830:	3304      	adds	r3, #4
    e832:	031b      	lsls	r3, r3, #12
    e834:	b960      	cbnz	r0, e850 <am_hal_iom_enable+0xcc>
    e836:	f44f 7180 	mov.w	r1, #256	; 0x100
    e83a:	2202      	movs	r2, #2
    e83c:	6221      	str	r1, [r4, #32]
    e83e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e842:	78e3      	ldrb	r3, [r4, #3]
    e844:	f043 0302 	orr.w	r3, r3, #2
    e848:	70e3      	strb	r3, [r4, #3]
    e84a:	2000      	movs	r0, #0
    e84c:	b004      	add	sp, #16
    e84e:	bd70      	pop	{r4, r5, r6, pc}
    e850:	2202      	movs	r2, #2
    e852:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e856:	e7f9      	b.n	e84c <am_hal_iom_enable+0xc8>
    e858:	2000      	movs	r0, #0
    e85a:	4770      	bx	lr
    e85c:	01123456 	.word	0x01123456
    e860:	00800040 	.word	0x00800040

0000e864 <am_hal_iom_power_ctrl>:
    e864:	b140      	cbz	r0, e878 <am_hal_iom_power_ctrl+0x14>
    e866:	b538      	push	{r3, r4, r5, lr}
    e868:	6803      	ldr	r3, [r0, #0]
    e86a:	4c85      	ldr	r4, [pc, #532]	; (ea80 <am_hal_iom_power_ctrl+0x21c>)
    e86c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e870:	42a3      	cmp	r3, r4
    e872:	d003      	beq.n	e87c <am_hal_iom_power_ctrl+0x18>
    e874:	2002      	movs	r0, #2
    e876:	bd38      	pop	{r3, r4, r5, pc}
    e878:	2002      	movs	r0, #2
    e87a:	4770      	bx	lr
    e87c:	4604      	mov	r4, r0
    e87e:	4615      	mov	r5, r2
    e880:	b199      	cbz	r1, e8aa <am_hal_iom_power_ctrl+0x46>
    e882:	2902      	cmp	r1, #2
    e884:	d80f      	bhi.n	e8a6 <am_hal_iom_power_ctrl+0x42>
    e886:	78c3      	ldrb	r3, [r0, #3]
    e888:	6840      	ldr	r0, [r0, #4]
    e88a:	079a      	lsls	r2, r3, #30
    e88c:	d519      	bpl.n	e8c2 <am_hal_iom_power_ctrl+0x5e>
    e88e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e892:	3304      	adds	r3, #4
    e894:	031b      	lsls	r3, r3, #12
    e896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e89a:	f003 0306 	and.w	r3, r3, #6
    e89e:	2b04      	cmp	r3, #4
    e8a0:	d00c      	beq.n	e8bc <am_hal_iom_power_ctrl+0x58>
    e8a2:	2003      	movs	r0, #3
    e8a4:	bd38      	pop	{r3, r4, r5, pc}
    e8a6:	2006      	movs	r0, #6
    e8a8:	bd38      	pop	{r3, r4, r5, pc}
    e8aa:	2a00      	cmp	r2, #0
    e8ac:	f000 80cf 	beq.w	ea4e <am_hal_iom_power_ctrl+0x1ea>
    e8b0:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	d146      	bne.n	e946 <am_hal_iom_power_ctrl+0xe2>
    e8b8:	2007      	movs	r0, #7
    e8ba:	bd38      	pop	{r3, r4, r5, pc}
    e8bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8be:	2b00      	cmp	r3, #0
    e8c0:	d1ef      	bne.n	e8a2 <am_hal_iom_power_ctrl+0x3e>
    e8c2:	b3d5      	cbz	r5, e93a <am_hal_iom_power_ctrl+0xd6>
    e8c4:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e8c8:	3304      	adds	r3, #4
    e8ca:	031b      	lsls	r3, r3, #12
    e8cc:	2201      	movs	r2, #1
    e8ce:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e8d2:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    e8d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e8da:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e8de:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e8e2:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    e8e6:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e8ea:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e8ee:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e8f2:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e8f6:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e8fa:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e8fe:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e902:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e906:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e90a:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e90e:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e912:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e916:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e91a:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e91e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e922:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e926:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e92a:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e92e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e932:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    e936:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    e93a:	3002      	adds	r0, #2
    e93c:	b2c0      	uxtb	r0, r0
    e93e:	f000 fc9d 	bl	f27c <am_hal_pwrctrl_periph_disable>
    e942:	2000      	movs	r0, #0
    e944:	bd38      	pop	{r3, r4, r5, pc}
    e946:	6843      	ldr	r3, [r0, #4]
    e948:	1c98      	adds	r0, r3, #2
    e94a:	b2c0      	uxtb	r0, r0
    e94c:	f000 fc6c 	bl	f228 <am_hal_pwrctrl_periph_enable>
    e950:	6863      	ldr	r3, [r4, #4]
    e952:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    e956:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e95a:	3304      	adds	r3, #4
    e95c:	031b      	lsls	r3, r3, #12
    e95e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e962:	6863      	ldr	r3, [r4, #4]
    e964:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    e968:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e96c:	3304      	adds	r3, #4
    e96e:	031b      	lsls	r3, r3, #12
    e970:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e974:	6863      	ldr	r3, [r4, #4]
    e976:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    e97a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e97e:	3304      	adds	r3, #4
    e980:	031b      	lsls	r3, r3, #12
    e982:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e986:	6863      	ldr	r3, [r4, #4]
    e988:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    e98c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e990:	3304      	adds	r3, #4
    e992:	031b      	lsls	r3, r3, #12
    e994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    e998:	6863      	ldr	r3, [r4, #4]
    e99a:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e99e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9a2:	3304      	adds	r3, #4
    e9a4:	031b      	lsls	r3, r3, #12
    e9a6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    e9aa:	6863      	ldr	r3, [r4, #4]
    e9ac:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    e9b0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9b4:	3304      	adds	r3, #4
    e9b6:	031b      	lsls	r3, r3, #12
    e9b8:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    e9bc:	6863      	ldr	r3, [r4, #4]
    e9be:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    e9c2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9c6:	3304      	adds	r3, #4
    e9c8:	031b      	lsls	r3, r3, #12
    e9ca:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    e9ce:	6863      	ldr	r3, [r4, #4]
    e9d0:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    e9d4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9d8:	3304      	adds	r3, #4
    e9da:	031b      	lsls	r3, r3, #12
    e9dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    e9e0:	6863      	ldr	r3, [r4, #4]
    e9e2:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    e9e6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9ea:	3304      	adds	r3, #4
    e9ec:	031b      	lsls	r3, r3, #12
    e9ee:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e9f2:	6863      	ldr	r3, [r4, #4]
    e9f4:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    e9f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9fc:	3304      	adds	r3, #4
    e9fe:	031b      	lsls	r3, r3, #12
    ea00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ea04:	6863      	ldr	r3, [r4, #4]
    ea06:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    ea0a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea0e:	3304      	adds	r3, #4
    ea10:	031b      	lsls	r3, r3, #12
    ea12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ea16:	6863      	ldr	r3, [r4, #4]
    ea18:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    ea1c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea20:	3304      	adds	r3, #4
    ea22:	031b      	lsls	r3, r3, #12
    ea24:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ea28:	6863      	ldr	r3, [r4, #4]
    ea2a:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    ea2e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea32:	3304      	adds	r3, #4
    ea34:	031b      	lsls	r3, r3, #12
    ea36:	f022 0201 	bic.w	r2, r2, #1
    ea3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ea3e:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    ea42:	07db      	lsls	r3, r3, #31
    ea44:	d40a      	bmi.n	ea5c <am_hal_iom_power_ctrl+0x1f8>
    ea46:	2000      	movs	r0, #0
    ea48:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    ea4c:	bd38      	pop	{r3, r4, r5, pc}
    ea4e:	6840      	ldr	r0, [r0, #4]
    ea50:	3002      	adds	r0, #2
    ea52:	b2c0      	uxtb	r0, r0
    ea54:	f000 fbe8 	bl	f228 <am_hal_pwrctrl_periph_enable>
    ea58:	4628      	mov	r0, r5
    ea5a:	bd38      	pop	{r3, r4, r5, pc}
    ea5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea5e:	b953      	cbnz	r3, ea76 <am_hal_iom_power_ctrl+0x212>
    ea60:	6863      	ldr	r3, [r4, #4]
    ea62:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea66:	3304      	adds	r3, #4
    ea68:	031b      	lsls	r3, r3, #12
    ea6a:	f503 7226 	add.w	r2, r3, #664	; 0x298
    ea6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    ea72:	e883 000c 	stmia.w	r3, {r2, r3}
    ea76:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ea7a:	f001 f941 	bl	fd00 <am_hal_cmdq_enable>
    ea7e:	e7e2      	b.n	ea46 <am_hal_iom_power_ctrl+0x1e2>
    ea80:	01123456 	.word	0x01123456

0000ea84 <am_hal_iom_configure>:
    ea84:	b128      	cbz	r0, ea92 <am_hal_iom_configure+0xe>
    ea86:	6803      	ldr	r3, [r0, #0]
    ea88:	4a8b      	ldr	r2, [pc, #556]	; (ecb8 <am_hal_iom_configure+0x234>)
    ea8a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea8e:	4293      	cmp	r3, r2
    ea90:	d001      	beq.n	ea96 <am_hal_iom_configure+0x12>
    ea92:	2002      	movs	r0, #2
    ea94:	4770      	bx	lr
    ea96:	b111      	cbz	r1, ea9e <am_hal_iom_configure+0x1a>
    ea98:	6843      	ldr	r3, [r0, #4]
    ea9a:	2b05      	cmp	r3, #5
    ea9c:	d901      	bls.n	eaa2 <am_hal_iom_configure+0x1e>
    ea9e:	2006      	movs	r0, #6
    eaa0:	4770      	bx	lr
    eaa2:	78c2      	ldrb	r2, [r0, #3]
    eaa4:	0792      	lsls	r2, r2, #30
    eaa6:	d501      	bpl.n	eaac <am_hal_iom_configure+0x28>
    eaa8:	2007      	movs	r0, #7
    eaaa:	4770      	bx	lr
    eaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eab0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eab4:	3304      	adds	r3, #4
    eab6:	780a      	ldrb	r2, [r1, #0]
    eab8:	7202      	strb	r2, [r0, #8]
    eaba:	031b      	lsls	r3, r3, #12
    eabc:	f241 0410 	movw	r4, #4112	; 0x1010
    eac0:	b083      	sub	sp, #12
    eac2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    eac6:	b942      	cbnz	r2, eada <am_hal_iom_configure+0x56>
    eac8:	f891 c008 	ldrb.w	ip, [r1, #8]
    eacc:	f1bc 0f03 	cmp.w	ip, #3
    ead0:	d908      	bls.n	eae4 <am_hal_iom_configure+0x60>
    ead2:	2006      	movs	r0, #6
    ead4:	b003      	add	sp, #12
    ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eada:	2a01      	cmp	r2, #1
    eadc:	f000 80c3 	beq.w	ec66 <am_hal_iom_configure+0x1e2>
    eae0:	2005      	movs	r0, #5
    eae2:	e7f7      	b.n	ead4 <am_hal_iom_configure+0x50>
    eae4:	684f      	ldr	r7, [r1, #4]
    eae6:	2f00      	cmp	r7, #0
    eae8:	f000 80bb 	beq.w	ec62 <am_hal_iom_configure+0x1de>
    eaec:	4e73      	ldr	r6, [pc, #460]	; (ecbc <am_hal_iom_configure+0x238>)
    eaee:	fbb6 f6f7 	udiv	r6, r6, r7
    eaf2:	fb07 f206 	mul.w	r2, r7, r6
    eaf6:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    eafa:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    eafe:	2a00      	cmp	r2, #0
    eb00:	bf18      	it	ne
    eb02:	3601      	addne	r6, #1
    eb04:	4274      	negs	r4, r6
    eb06:	4034      	ands	r4, r6
    eb08:	fab4 f484 	clz	r4, r4
    eb0c:	f1c4 041f 	rsb	r4, r4, #31
    eb10:	2c06      	cmp	r4, #6
    eb12:	bfa8      	it	ge
    eb14:	2406      	movge	r4, #6
    eb16:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    eb1a:	f240 80b7 	bls.w	ec8c <am_hal_iom_configure+0x208>
    eb1e:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    eb22:	4d67      	ldr	r5, [pc, #412]	; (ecc0 <am_hal_iom_configure+0x23c>)
    eb24:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    eb28:	42aa      	cmp	r2, r5
    eb2a:	bf8c      	ite	hi
    eb2c:	f04f 0e00 	movhi.w	lr, #0
    eb30:	f04f 0e01 	movls.w	lr, #1
    eb34:	ea4f 024e 	mov.w	r2, lr, lsl #1
    eb38:	3201      	adds	r2, #1
    eb3a:	fa02 f804 	lsl.w	r8, r2, r4
    eb3e:	fbb6 f5f8 	udiv	r5, r6, r8
    eb42:	fb08 6815 	mls	r8, r8, r5, r6
    eb46:	f1b8 0f00 	cmp.w	r8, #0
    eb4a:	bf18      	it	ne
    eb4c:	3501      	addne	r5, #1
    eb4e:	fab5 f885 	clz	r8, r5
    eb52:	f1c8 081f 	rsb	r8, r8, #31
    eb56:	f1b8 0f07 	cmp.w	r8, #7
    eb5a:	f240 8094 	bls.w	ec86 <am_hal_iom_configure+0x202>
    eb5e:	3c07      	subs	r4, #7
    eb60:	4444      	add	r4, r8
    eb62:	f104 0901 	add.w	r9, r4, #1
    eb66:	f1b9 0f07 	cmp.w	r9, #7
    eb6a:	d87a      	bhi.n	ec62 <am_hal_iom_configure+0x1de>
    eb6c:	f1a8 0807 	sub.w	r8, r8, #7
    eb70:	f04f 0a01 	mov.w	sl, #1
    eb74:	fa0a fa08 	lsl.w	sl, sl, r8
    eb78:	f10a 3aff 	add.w	sl, sl, #4294967295
    eb7c:	ea0a 0a05 	and.w	sl, sl, r5
    eb80:	fa25 f508 	lsr.w	r5, r5, r8
    eb84:	f1ba 0f00 	cmp.w	sl, #0
    eb88:	bf18      	it	ne
    eb8a:	3501      	addne	r5, #1
    eb8c:	f8df 8158 	ldr.w	r8, [pc, #344]	; ece8 <am_hal_iom_configure+0x264>
    eb90:	4547      	cmp	r7, r8
    eb92:	d87e      	bhi.n	ec92 <am_hal_iom_configure+0x20e>
    eb94:	f04f 0801 	mov.w	r8, #1
    eb98:	fa08 f804 	lsl.w	r8, r8, r4
    eb9c:	ebb8 0806 	subs.w	r8, r8, r6
    eba0:	bf18      	it	ne
    eba2:	f04f 0801 	movne.w	r8, #1
    eba6:	ea4f 066c 	mov.w	r6, ip, asr #1
    ebaa:	2e01      	cmp	r6, #1
    ebac:	d074      	beq.n	ec98 <am_hal_iom_configure+0x214>
    ebae:	3d01      	subs	r5, #1
    ebb0:	086e      	lsrs	r6, r5, #1
    ebb2:	9600      	str	r6, [sp, #0]
    ebb4:	fb05 fa08 	mul.w	sl, r5, r8
    ebb8:	40a2      	lsls	r2, r4
    ebba:	fb0a 2202 	mla	r2, sl, r2, r2
    ebbe:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    ebc2:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    ebc6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; ecbc <am_hal_iom_configure+0x238>
    ebca:	fbb9 fbf2 	udiv	fp, r9, r2
    ebce:	fb02 fa0b 	mul.w	sl, r2, fp
    ebd2:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    ebd6:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    ebda:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    ebde:	9601      	str	r6, [sp, #4]
    ebe0:	0852      	lsrs	r2, r2, #1
    ebe2:	9e00      	ldr	r6, [sp, #0]
    ebe4:	4552      	cmp	r2, sl
    ebe6:	bf2c      	ite	cs
    ebe8:	465a      	movcs	r2, fp
    ebea:	f10b 0201 	addcc.w	r2, fp, #1
    ebee:	f8df b0fc 	ldr.w	fp, [pc, #252]	; ecec <am_hal_iom_configure+0x268>
    ebf2:	fbb2 fafb 	udiv	sl, r2, fp
    ebf6:	0436      	lsls	r6, r6, #16
    ebf8:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    ebfc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    ec00:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    ec04:	fb0b 2b1a 	mls	fp, fp, sl, r2
    ec08:	432e      	orrs	r6, r5
    ec0a:	f1bb 0f00 	cmp.w	fp, #0
    ec0e:	d10a      	bne.n	ec26 <am_hal_iom_configure+0x1a2>
    ec10:	f1ba 0f00 	cmp.w	sl, #0
    ec14:	d007      	beq.n	ec26 <am_hal_iom_configure+0x1a2>
    ec16:	f10a 35ff 	add.w	r5, sl, #4294967295
    ec1a:	ea15 0f0a 	tst.w	r5, sl
    ec1e:	d102      	bne.n	ec26 <am_hal_iom_configure+0x1a2>
    ec20:	9d01      	ldr	r5, [sp, #4]
    ec22:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    ec26:	2400      	movs	r4, #0
    ec28:	4334      	orrs	r4, r6
    ec2a:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    ec2e:	f044 0401 	orr.w	r4, r4, #1
    ec32:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    ec36:	68cb      	ldr	r3, [r1, #12]
    ec38:	690a      	ldr	r2, [r1, #16]
    ec3a:	60c3      	str	r3, [r0, #12]
    ec3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec40:	2300      	movs	r3, #0
    ec42:	6102      	str	r2, [r0, #16]
    ec44:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    ec48:	4a1c      	ldr	r2, [pc, #112]	; (ecbc <am_hal_iom_configure+0x238>)
    ec4a:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    ec4e:	fbb2 f7f7 	udiv	r7, r2, r7
    ec52:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    ec56:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    ec5a:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    ec5e:	4618      	mov	r0, r3
    ec60:	e738      	b.n	ead4 <am_hal_iom_configure+0x50>
    ec62:	2400      	movs	r4, #0
    ec64:	e7e1      	b.n	ec2a <am_hal_iom_configure+0x1a6>
    ec66:	684f      	ldr	r7, [r1, #4]
    ec68:	4a16      	ldr	r2, [pc, #88]	; (ecc4 <am_hal_iom_configure+0x240>)
    ec6a:	4297      	cmp	r7, r2
    ec6c:	d01e      	beq.n	ecac <am_hal_iom_configure+0x228>
    ec6e:	4a16      	ldr	r2, [pc, #88]	; (ecc8 <am_hal_iom_configure+0x244>)
    ec70:	4297      	cmp	r7, r2
    ec72:	d016      	beq.n	eca2 <am_hal_iom_configure+0x21e>
    ec74:	4a15      	ldr	r2, [pc, #84]	; (eccc <am_hal_iom_configure+0x248>)
    ec76:	4297      	cmp	r7, r2
    ec78:	f47f af2b 	bne.w	ead2 <am_hal_iom_configure+0x4e>
    ec7c:	4a14      	ldr	r2, [pc, #80]	; (ecd0 <am_hal_iom_configure+0x24c>)
    ec7e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ec82:	4c14      	ldr	r4, [pc, #80]	; (ecd4 <am_hal_iom_configure+0x250>)
    ec84:	e7d3      	b.n	ec2e <am_hal_iom_configure+0x1aa>
    ec86:	f104 0901 	add.w	r9, r4, #1
    ec8a:	e77f      	b.n	eb8c <am_hal_iom_configure+0x108>
    ec8c:	f04f 0e01 	mov.w	lr, #1
    ec90:	e750      	b.n	eb34 <am_hal_iom_configure+0xb0>
    ec92:	f04f 0800 	mov.w	r8, #0
    ec96:	e786      	b.n	eba6 <am_hal_iom_configure+0x122>
    ec98:	1eae      	subs	r6, r5, #2
    ec9a:	0876      	lsrs	r6, r6, #1
    ec9c:	9600      	str	r6, [sp, #0]
    ec9e:	3d01      	subs	r5, #1
    eca0:	e788      	b.n	ebb4 <am_hal_iom_configure+0x130>
    eca2:	4a0d      	ldr	r2, [pc, #52]	; (ecd8 <am_hal_iom_configure+0x254>)
    eca4:	4c0d      	ldr	r4, [pc, #52]	; (ecdc <am_hal_iom_configure+0x258>)
    eca6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ecaa:	e7c0      	b.n	ec2e <am_hal_iom_configure+0x1aa>
    ecac:	4a0c      	ldr	r2, [pc, #48]	; (ece0 <am_hal_iom_configure+0x25c>)
    ecae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ecb2:	4c0c      	ldr	r4, [pc, #48]	; (ece4 <am_hal_iom_configure+0x260>)
    ecb4:	e7bb      	b.n	ec2e <am_hal_iom_configure+0x1aa>
    ecb6:	bf00      	nop
    ecb8:	01123456 	.word	0x01123456
    ecbc:	02dc6c00 	.word	0x02dc6c00
    ecc0:	007a11ff 	.word	0x007a11ff
    ecc4:	00061a80 	.word	0x00061a80
    ecc8:	000f4240 	.word	0x000f4240
    eccc:	000186a0 	.word	0x000186a0
    ecd0:	0003f070 	.word	0x0003f070
    ecd4:	773b1201 	.word	0x773b1201
    ecd8:	00213040 	.word	0x00213040
    ecdc:	06031301 	.word	0x06031301
    ece0:	0003f270 	.word	0x0003f270
    ece4:	1d0e1201 	.word	0x1d0e1201
    ece8:	00b71aff 	.word	0x00b71aff
    ecec:	0003d090 	.word	0x0003d090

0000ecf0 <am_hal_iom_blocking_transfer>:
    ecf0:	b128      	cbz	r0, ecfe <am_hal_iom_blocking_transfer+0xe>
    ecf2:	6803      	ldr	r3, [r0, #0]
    ecf4:	4ac1      	ldr	r2, [pc, #772]	; (effc <am_hal_iom_blocking_transfer+0x30c>)
    ecf6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ecfa:	4293      	cmp	r3, r2
    ecfc:	d001      	beq.n	ed02 <am_hal_iom_blocking_transfer+0x12>
    ecfe:	2002      	movs	r0, #2
    ed00:	4770      	bx	lr
    ed02:	b159      	cbz	r1, ed1c <am_hal_iom_blocking_transfer+0x2c>
    ed04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed08:	f891 8010 	ldrb.w	r8, [r1, #16]
    ed0c:	f1b8 0f01 	cmp.w	r8, #1
    ed10:	b087      	sub	sp, #28
    ed12:	d905      	bls.n	ed20 <am_hal_iom_blocking_transfer+0x30>
    ed14:	2007      	movs	r0, #7
    ed16:	b007      	add	sp, #28
    ed18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed1c:	2006      	movs	r0, #6
    ed1e:	4770      	bx	lr
    ed20:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    ed24:	f1ba 0f00 	cmp.w	sl, #0
    ed28:	d102      	bne.n	ed30 <am_hal_iom_blocking_transfer+0x40>
    ed2a:	f881 a010 	strb.w	sl, [r1, #16]
    ed2e:	46d0      	mov	r8, sl
    ed30:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ed34:	f1b9 0f03 	cmp.w	r9, #3
    ed38:	d901      	bls.n	ed3e <am_hal_iom_blocking_transfer+0x4e>
    ed3a:	2006      	movs	r0, #6
    ed3c:	e7eb      	b.n	ed16 <am_hal_iom_blocking_transfer+0x26>
    ed3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    ed42:	f04f 33ff 	mov.w	r3, #4294967295
    ed46:	f8d1 b008 	ldr.w	fp, [r1, #8]
    ed4a:	4093      	lsls	r3, r2
    ed4c:	ea13 0f0b 	tst.w	r3, fp
    ed50:	d1f3      	bne.n	ed3a <am_hal_iom_blocking_transfer+0x4a>
    ed52:	f1ba 0f00 	cmp.w	sl, #0
    ed56:	f000 80bb 	beq.w	eed0 <am_hal_iom_blocking_transfer+0x1e0>
    ed5a:	f1b8 0f00 	cmp.w	r8, #0
    ed5e:	f000 80c7 	beq.w	eef0 <am_hal_iom_blocking_transfer+0x200>
    ed62:	698b      	ldr	r3, [r1, #24]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d0e8      	beq.n	ed3a <am_hal_iom_blocking_transfer+0x4a>
    ed68:	7a03      	ldrb	r3, [r0, #8]
    ed6a:	2b01      	cmp	r3, #1
    ed6c:	f040 80b4 	bne.w	eed8 <am_hal_iom_blocking_transfer+0x1e8>
    ed70:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    ed74:	d8e1      	bhi.n	ed3a <am_hal_iom_blocking_transfer+0x4a>
    ed76:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    ed7a:	2b02      	cmp	r3, #2
    ed7c:	d0ca      	beq.n	ed14 <am_hal_iom_blocking_transfer+0x24>
    ed7e:	7f0b      	ldrb	r3, [r1, #28]
    ed80:	694f      	ldr	r7, [r1, #20]
    ed82:	f8d1 e018 	ldr.w	lr, [r1, #24]
    ed86:	9303      	str	r3, [sp, #12]
    ed88:	4604      	mov	r4, r0
    ed8a:	2301      	movs	r3, #1
    ed8c:	460d      	mov	r5, r1
    ed8e:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    ed92:	6866      	ldr	r6, [r4, #4]
    ed94:	9300      	str	r3, [sp, #0]
    ed96:	f04f 32ff 	mov.w	r2, #4294967295
    ed9a:	2300      	movs	r3, #0
    ed9c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    eda0:	4598      	cmp	r8, r3
    eda2:	bf18      	it	ne
    eda4:	4677      	movne	r7, lr
    eda6:	f7ff fa57 	bl	e258 <am_hal_flash_delay_status_check>
    edaa:	2800      	cmp	r0, #0
    edac:	d1b3      	bne.n	ed16 <am_hal_iom_blocking_transfer+0x26>
    edae:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    edb2:	3604      	adds	r6, #4
    edb4:	2301      	movs	r3, #1
    edb6:	0336      	lsls	r6, r6, #12
    edb8:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    edbc:	9300      	str	r3, [sp, #0]
    edbe:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    edc2:	9304      	str	r3, [sp, #16]
    edc4:	4619      	mov	r1, r3
    edc6:	2206      	movs	r2, #6
    edc8:	2304      	movs	r3, #4
    edca:	f7ff fa45 	bl	e258 <am_hal_flash_delay_status_check>
    edce:	2800      	cmp	r0, #0
    edd0:	d1a1      	bne.n	ed16 <am_hal_iom_blocking_transfer+0x26>
    edd2:	f04f 33ff 	mov.w	r3, #4294967295
    edd6:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    edda:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    edde:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    ede2:	682b      	ldr	r3, [r5, #0]
    ede4:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    ede8:	682b      	ldr	r3, [r5, #0]
    edea:	9205      	str	r2, [sp, #20]
    edec:	4423      	add	r3, r4
    edee:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    edf2:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    edf6:	7a23      	ldrb	r3, [r4, #8]
    edf8:	b903      	cbnz	r3, edfc <am_hal_iom_blocking_transfer+0x10c>
    edfa:	6828      	ldr	r0, [r5, #0]
    edfc:	4a80      	ldr	r2, [pc, #512]	; (f000 <am_hal_iom_blocking_transfer+0x310>)
    edfe:	0500      	lsls	r0, r0, #20
    ee00:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    ee04:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    ee08:	ea0a 0202 	and.w	r2, sl, r2
    ee0c:	f1b8 0f01 	cmp.w	r8, #1
    ee10:	ea42 0203 	orr.w	r2, r2, r3
    ee14:	d074      	beq.n	ef00 <am_hal_iom_blocking_transfer+0x210>
    ee16:	f3cb 230f 	ubfx	r3, fp, #8, #16
    ee1a:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    ee1e:	ea4f 1149 	mov.w	r1, r9, lsl #5
    ee22:	ea4f 600b 	mov.w	r0, fp, lsl #24
    ee26:	f040 0001 	orr.w	r0, r0, #1
    ee2a:	f001 0160 	and.w	r1, r1, #96	; 0x60
    ee2e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ee32:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ee36:	4301      	orrs	r1, r0
    ee38:	9803      	ldr	r0, [sp, #12]
    ee3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ee3e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    ee42:	2b03      	cmp	r3, #3
    ee44:	ea42 0201 	orr.w	r2, r2, r1
    ee48:	f240 80b3 	bls.w	efb2 <am_hal_iom_blocking_transfer+0x2c2>
    ee4c:	f1b8 0f00 	cmp.w	r8, #0
    ee50:	d00a      	beq.n	ee68 <am_hal_iom_blocking_transfer+0x178>
    ee52:	4641      	mov	r1, r8
    ee54:	f857 0b04 	ldr.w	r0, [r7], #4
    ee58:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    ee5c:	2903      	cmp	r1, #3
    ee5e:	f1a3 0304 	sub.w	r3, r3, #4
    ee62:	f1a1 0104 	sub.w	r1, r1, #4
    ee66:	d82e      	bhi.n	eec6 <am_hal_iom_blocking_transfer+0x1d6>
    ee68:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ee6c:	f04f 0800 	mov.w	r8, #0
    ee70:	2701      	movs	r7, #1
    ee72:	9904      	ldr	r1, [sp, #16]
    ee74:	9700      	str	r7, [sp, #0]
    ee76:	2304      	movs	r3, #4
    ee78:	2206      	movs	r2, #6
    ee7a:	4862      	ldr	r0, [pc, #392]	; (f004 <am_hal_iom_blocking_transfer+0x314>)
    ee7c:	f7ff f9ec 	bl	e258 <am_hal_flash_delay_status_check>
    ee80:	4605      	mov	r5, r0
    ee82:	b970      	cbnz	r0, eea2 <am_hal_iom_blocking_transfer+0x1b2>
    ee84:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ee88:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    ee8c:	d135      	bne.n	eefa <am_hal_iom_blocking_transfer+0x20a>
    ee8e:	0599      	lsls	r1, r3, #22
    ee90:	f100 80cf 	bmi.w	f032 <am_hal_iom_blocking_transfer+0x342>
    ee94:	06da      	lsls	r2, r3, #27
    ee96:	f100 80ce 	bmi.w	f036 <am_hal_iom_blocking_transfer+0x346>
    ee9a:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    ee9e:	d00e      	beq.n	eebe <am_hal_iom_blocking_transfer+0x1ce>
    eea0:	463d      	mov	r5, r7
    eea2:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    eea6:	4620      	mov	r0, r4
    eea8:	f7ff fbcc 	bl	e644 <internal_iom_reset_on_error>
    eeac:	f04f 33ff 	mov.w	r3, #4294967295
    eeb0:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    eeb4:	9b05      	ldr	r3, [sp, #20]
    eeb6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    eeba:	4628      	mov	r0, r5
    eebc:	e72b      	b.n	ed16 <am_hal_iom_blocking_transfer+0x26>
    eebe:	f1b8 0f00 	cmp.w	r8, #0
    eec2:	d0f3      	beq.n	eeac <am_hal_iom_blocking_transfer+0x1bc>
    eec4:	e7ec      	b.n	eea0 <am_hal_iom_blocking_transfer+0x1b0>
    eec6:	2b03      	cmp	r3, #3
    eec8:	d972      	bls.n	efb0 <am_hal_iom_blocking_transfer+0x2c0>
    eeca:	2900      	cmp	r1, #0
    eecc:	d1c2      	bne.n	ee54 <am_hal_iom_blocking_transfer+0x164>
    eece:	e7cb      	b.n	ee68 <am_hal_iom_blocking_transfer+0x178>
    eed0:	7a03      	ldrb	r3, [r0, #8]
    eed2:	2b01      	cmp	r3, #1
    eed4:	f43f af4f 	beq.w	ed76 <am_hal_iom_blocking_transfer+0x86>
    eed8:	2b00      	cmp	r3, #0
    eeda:	f47f af4c 	bne.w	ed76 <am_hal_iom_blocking_transfer+0x86>
    eede:	680b      	ldr	r3, [r1, #0]
    eee0:	2b03      	cmp	r3, #3
    eee2:	f63f af2a 	bhi.w	ed3a <am_hal_iom_blocking_transfer+0x4a>
    eee6:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    eeea:	f4bf af26 	bcs.w	ed3a <am_hal_iom_blocking_transfer+0x4a>
    eeee:	e742      	b.n	ed76 <am_hal_iom_blocking_transfer+0x86>
    eef0:	694b      	ldr	r3, [r1, #20]
    eef2:	2b00      	cmp	r3, #0
    eef4:	f47f af38 	bne.w	ed68 <am_hal_iom_blocking_transfer+0x78>
    eef8:	e71f      	b.n	ed3a <am_hal_iom_blocking_transfer+0x4a>
    eefa:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eefe:	e7d0      	b.n	eea2 <am_hal_iom_blocking_transfer+0x1b2>
    ef00:	ea4f 1349 	mov.w	r3, r9, lsl #5
    ef04:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    ef08:	ea4f 610b 	mov.w	r1, fp, lsl #24
    ef0c:	9b03      	ldr	r3, [sp, #12]
    ef0e:	f041 0102 	orr.w	r1, r1, #2
    ef12:	f3cb 200f 	ubfx	r0, fp, #8, #16
    ef16:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    ef1a:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    ef1e:	ea4e 0301 	orr.w	r3, lr, r1
    ef22:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ef26:	431a      	orrs	r2, r3
    ef28:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ef2c:	2200      	movs	r2, #0
    ef2e:	f1b8 0f00 	cmp.w	r8, #0
    ef32:	d09b      	beq.n	ee6c <am_hal_iom_blocking_transfer+0x17c>
    ef34:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ef38:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ef3c:	2b03      	cmp	r3, #3
    ef3e:	d81e      	bhi.n	ef7e <am_hal_iom_blocking_transfer+0x28e>
    ef40:	4d30      	ldr	r5, [pc, #192]	; (f004 <am_hal_iom_blocking_transfer+0x314>)
    ef42:	e001      	b.n	ef48 <am_hal_iom_blocking_transfer+0x258>
    ef44:	3d01      	subs	r5, #1
    ef46:	d093      	beq.n	ee70 <am_hal_iom_blocking_transfer+0x180>
    ef48:	2001      	movs	r0, #1
    ef4a:	b10a      	cbz	r2, ef50 <am_hal_iom_blocking_transfer+0x260>
    ef4c:	4598      	cmp	r8, r3
    ef4e:	d88f      	bhi.n	ee70 <am_hal_iom_blocking_transfer+0x180>
    ef50:	f7ff f97e 	bl	e250 <am_hal_flash_delay>
    ef54:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    ef58:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ef5c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ef60:	2b03      	cmp	r3, #3
    ef62:	f002 0201 	and.w	r2, r2, #1
    ef66:	d9ed      	bls.n	ef44 <am_hal_iom_blocking_transfer+0x254>
    ef68:	e009      	b.n	ef7e <am_hal_iom_blocking_transfer+0x28e>
    ef6a:	2b03      	cmp	r3, #3
    ef6c:	6039      	str	r1, [r7, #0]
    ef6e:	f1a8 0804 	sub.w	r8, r8, #4
    ef72:	d962      	bls.n	f03a <am_hal_iom_blocking_transfer+0x34a>
    ef74:	f1b8 0f00 	cmp.w	r8, #0
    ef78:	f43f af78 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    ef7c:	4607      	mov	r7, r0
    ef7e:	f1b8 0f03 	cmp.w	r8, #3
    ef82:	f1a3 0304 	sub.w	r3, r3, #4
    ef86:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    ef8a:	f107 0004 	add.w	r0, r7, #4
    ef8e:	d8ec      	bhi.n	ef6a <am_hal_iom_blocking_transfer+0x27a>
    ef90:	f1b8 0f01 	cmp.w	r8, #1
    ef94:	7039      	strb	r1, [r7, #0]
    ef96:	ea4f 2311 	mov.w	r3, r1, lsr #8
    ef9a:	f43f af67 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    ef9e:	f1b8 0f02 	cmp.w	r8, #2
    efa2:	707b      	strb	r3, [r7, #1]
    efa4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    efa8:	f43f af60 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    efac:	70b9      	strb	r1, [r7, #2]
    efae:	e75d      	b.n	ee6c <am_hal_iom_blocking_transfer+0x17c>
    efb0:	4688      	mov	r8, r1
    efb2:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    efb6:	f1b8 0f00 	cmp.w	r8, #0
    efba:	f43f af57 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    efbe:	463b      	mov	r3, r7
    efc0:	4647      	mov	r7, r8
    efc2:	4698      	mov	r8, r3
    efc4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    efc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    efcc:	2b03      	cmp	r3, #3
    efce:	d81e      	bhi.n	f00e <am_hal_iom_blocking_transfer+0x31e>
    efd0:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    efd4:	07d8      	lsls	r0, r3, #31
    efd6:	d42a      	bmi.n	f02e <am_hal_iom_blocking_transfer+0x33e>
    efd8:	4d0a      	ldr	r5, [pc, #40]	; (f004 <am_hal_iom_blocking_transfer+0x314>)
    efda:	e005      	b.n	efe8 <am_hal_iom_blocking_transfer+0x2f8>
    efdc:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    efe0:	07db      	lsls	r3, r3, #31
    efe2:	d424      	bmi.n	f02e <am_hal_iom_blocking_transfer+0x33e>
    efe4:	3d01      	subs	r5, #1
    efe6:	d022      	beq.n	f02e <am_hal_iom_blocking_transfer+0x33e>
    efe8:	2001      	movs	r0, #1
    efea:	f7ff f931 	bl	e250 <am_hal_flash_delay>
    efee:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    eff2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    eff6:	2b03      	cmp	r3, #3
    eff8:	d9f0      	bls.n	efdc <am_hal_iom_blocking_transfer+0x2ec>
    effa:	e008      	b.n	f00e <am_hal_iom_blocking_transfer+0x31e>
    effc:	01123456 	.word	0x01123456
    f000:	000fff00 	.word	0x000fff00
    f004:	0007a120 	.word	0x0007a120
    f008:	2f00      	cmp	r7, #0
    f00a:	f43f af2f 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    f00e:	f858 2b04 	ldr.w	r2, [r8], #4
    f012:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f016:	2f03      	cmp	r7, #3
    f018:	f1a3 0304 	sub.w	r3, r3, #4
    f01c:	f1a7 0704 	sub.w	r7, r7, #4
    f020:	f67f af24 	bls.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    f024:	2b03      	cmp	r3, #3
    f026:	d8ef      	bhi.n	f008 <am_hal_iom_blocking_transfer+0x318>
    f028:	2f00      	cmp	r7, #0
    f02a:	d1cb      	bne.n	efc4 <am_hal_iom_blocking_transfer+0x2d4>
    f02c:	e71e      	b.n	ee6c <am_hal_iom_blocking_transfer+0x17c>
    f02e:	46b8      	mov	r8, r7
    f030:	e71e      	b.n	ee70 <am_hal_iom_blocking_transfer+0x180>
    f032:	4d05      	ldr	r5, [pc, #20]	; (f048 <am_hal_iom_blocking_transfer+0x358>)
    f034:	e735      	b.n	eea2 <am_hal_iom_blocking_transfer+0x1b2>
    f036:	4d05      	ldr	r5, [pc, #20]	; (f04c <am_hal_iom_blocking_transfer+0x35c>)
    f038:	e733      	b.n	eea2 <am_hal_iom_blocking_transfer+0x1b2>
    f03a:	f1b8 0f00 	cmp.w	r8, #0
    f03e:	f43f af15 	beq.w	ee6c <am_hal_iom_blocking_transfer+0x17c>
    f042:	4607      	mov	r7, r0
    f044:	e776      	b.n	ef34 <am_hal_iom_blocking_transfer+0x244>
    f046:	bf00      	nop
    f048:	08000001 	.word	0x08000001
    f04c:	08000002 	.word	0x08000002

0000f050 <am_hal_itm_disable>:
    f050:	b510      	push	{r4, lr}
    f052:	4b25      	ldr	r3, [pc, #148]	; (f0e8 <am_hal_itm_disable+0x98>)
    f054:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f058:	b9b3      	cbnz	r3, f088 <am_hal_itm_disable+0x38>
    f05a:	4b24      	ldr	r3, [pc, #144]	; (f0ec <am_hal_itm_disable+0x9c>)
    f05c:	68da      	ldr	r2, [r3, #12]
    f05e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f062:	60da      	str	r2, [r3, #12]
    f064:	68da      	ldr	r2, [r3, #12]
    f066:	01d2      	lsls	r2, r2, #7
    f068:	d5fc      	bpl.n	f064 <am_hal_itm_disable+0x14>
    f06a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f06e:	4920      	ldr	r1, [pc, #128]	; (f0f0 <am_hal_itm_disable+0xa0>)
    f070:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f074:	4a1f      	ldr	r2, [pc, #124]	; (f0f4 <am_hal_itm_disable+0xa4>)
    f076:	200f      	movs	r0, #15
    f078:	f04f 31ff 	mov.w	r1, #4294967295
    f07c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f080:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f084:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f088:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f08c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f090:	021b      	lsls	r3, r3, #8
    f092:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f096:	d4f9      	bmi.n	f08c <am_hal_itm_disable+0x3c>
    f098:	f240 20f7 	movw	r0, #759	; 0x2f7
    f09c:	f7ff f8d8 	bl	e250 <am_hal_flash_delay>
    f0a0:	4b13      	ldr	r3, [pc, #76]	; (f0f0 <am_hal_itm_disable+0xa0>)
    f0a2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f0a6:	4621      	mov	r1, r4
    f0a8:	2064      	movs	r0, #100	; 0x64
    f0aa:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f0ae:	f023 0301 	bic.w	r3, r3, #1
    f0b2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f0b6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f0ba:	4b0f      	ldr	r3, [pc, #60]	; (f0f8 <am_hal_itm_disable+0xa8>)
    f0bc:	4013      	ands	r3, r2
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d1f9      	bne.n	f0b6 <am_hal_itm_disable+0x66>
    f0c2:	3801      	subs	r0, #1
    f0c4:	d1f1      	bne.n	f0aa <am_hal_itm_disable+0x5a>
    f0c6:	4a09      	ldr	r2, [pc, #36]	; (f0ec <am_hal_itm_disable+0x9c>)
    f0c8:	68d3      	ldr	r3, [r2, #12]
    f0ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f0ce:	60d3      	str	r3, [r2, #12]
    f0d0:	68d3      	ldr	r3, [r2, #12]
    f0d2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f0d6:	d1fb      	bne.n	f0d0 <am_hal_itm_disable+0x80>
    f0d8:	4a03      	ldr	r2, [pc, #12]	; (f0e8 <am_hal_itm_disable+0x98>)
    f0da:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f0de:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f0e2:	2b00      	cmp	r3, #0
    f0e4:	d1fb      	bne.n	f0de <am_hal_itm_disable+0x8e>
    f0e6:	bd10      	pop	{r4, pc}
    f0e8:	40020000 	.word	0x40020000
    f0ec:	e000edf0 	.word	0xe000edf0
    f0f0:	c5acce55 	.word	0xc5acce55
    f0f4:	00150511 	.word	0x00150511
    f0f8:	00800001 	.word	0x00800001

0000f0fc <am_hal_mcuctrl_info_get>:
    f0fc:	b4f0      	push	{r4, r5, r6, r7}
    f0fe:	b121      	cbz	r1, f10a <am_hal_mcuctrl_info_get+0xe>
    f100:	2801      	cmp	r0, #1
    f102:	d038      	beq.n	f176 <am_hal_mcuctrl_info_get+0x7a>
    f104:	d320      	bcc.n	f148 <am_hal_mcuctrl_info_get+0x4c>
    f106:	2802      	cmp	r0, #2
    f108:	d002      	beq.n	f110 <am_hal_mcuctrl_info_get+0x14>
    f10a:	2006      	movs	r0, #6
    f10c:	bcf0      	pop	{r4, r5, r6, r7}
    f10e:	4770      	bx	lr
    f110:	4a41      	ldr	r2, [pc, #260]	; (f218 <am_hal_mcuctrl_info_get+0x11c>)
    f112:	684d      	ldr	r5, [r1, #4]
    f114:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f118:	694c      	ldr	r4, [r1, #20]
    f11a:	f003 0601 	and.w	r6, r3, #1
    f11e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f122:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f126:	700e      	strb	r6, [r1, #0]
    f128:	7208      	strb	r0, [r1, #8]
    f12a:	740b      	strb	r3, [r1, #16]
    f12c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f130:	60cb      	str	r3, [r1, #12]
    f132:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f136:	4328      	orrs	r0, r5
    f138:	6048      	str	r0, [r1, #4]
    f13a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f13e:	4323      	orrs	r3, r4
    f140:	2000      	movs	r0, #0
    f142:	614b      	str	r3, [r1, #20]
    f144:	bcf0      	pop	{r4, r5, r6, r7}
    f146:	4770      	bx	lr
    f148:	4a33      	ldr	r2, [pc, #204]	; (f218 <am_hal_mcuctrl_info_get+0x11c>)
    f14a:	6993      	ldr	r3, [r2, #24]
    f14c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f150:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f154:	7008      	strb	r0, [r1, #0]
    f156:	704b      	strb	r3, [r1, #1]
    f158:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f15c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f160:	710b      	strb	r3, [r1, #4]
    f162:	6953      	ldr	r3, [r2, #20]
    f164:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f168:	f003 0301 	and.w	r3, r3, #1
    f16c:	2000      	movs	r0, #0
    f16e:	708a      	strb	r2, [r1, #2]
    f170:	70cb      	strb	r3, [r1, #3]
    f172:	bcf0      	pop	{r4, r5, r6, r7}
    f174:	4770      	bx	lr
    f176:	4b28      	ldr	r3, [pc, #160]	; (f218 <am_hal_mcuctrl_info_get+0x11c>)
    f178:	4c28      	ldr	r4, [pc, #160]	; (f21c <am_hal_mcuctrl_info_get+0x120>)
    f17a:	681a      	ldr	r2, [r3, #0]
    f17c:	600a      	str	r2, [r1, #0]
    f17e:	6858      	ldr	r0, [r3, #4]
    f180:	6048      	str	r0, [r1, #4]
    f182:	6898      	ldr	r0, [r3, #8]
    f184:	6088      	str	r0, [r1, #8]
    f186:	68d8      	ldr	r0, [r3, #12]
    f188:	60c8      	str	r0, [r1, #12]
    f18a:	691d      	ldr	r5, [r3, #16]
    f18c:	4824      	ldr	r0, [pc, #144]	; (f220 <am_hal_mcuctrl_info_get+0x124>)
    f18e:	610d      	str	r5, [r1, #16]
    f190:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f194:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f198:	695d      	ldr	r5, [r3, #20]
    f19a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f19e:	4b21      	ldr	r3, [pc, #132]	; (f224 <am_hal_mcuctrl_info_get+0x128>)
    f1a0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f1a4:	6208      	str	r0, [r1, #32]
    f1a6:	f002 0201 	and.w	r2, r2, #1
    f1aa:	614d      	str	r5, [r1, #20]
    f1ac:	61cc      	str	r4, [r1, #28]
    f1ae:	618a      	str	r2, [r1, #24]
    f1b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f1b4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f1b8:	b2d0      	uxtb	r0, r2
    f1ba:	f004 020f 	and.w	r2, r4, #15
    f1be:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f1c2:	624a      	str	r2, [r1, #36]	; 0x24
    f1c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f1c8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f1cc:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f1d0:	f004 020f 	and.w	r2, r4, #15
    f1d4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f1d8:	628a      	str	r2, [r1, #40]	; 0x28
    f1da:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f1de:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f1e2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f1e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f1ea:	4302      	orrs	r2, r0
    f1ec:	62ca      	str	r2, [r1, #44]	; 0x2c
    f1ee:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f1f2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f1f6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f1fa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f1fe:	b2c0      	uxtb	r0, r0
    f200:	0400      	lsls	r0, r0, #16
    f202:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f206:	b2d2      	uxtb	r2, r2
    f208:	431a      	orrs	r2, r3
    f20a:	b2e3      	uxtb	r3, r4
    f20c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f210:	630b      	str	r3, [r1, #48]	; 0x30
    f212:	2000      	movs	r0, #0
    f214:	bcf0      	pop	{r4, r5, r6, r7}
    f216:	4770      	bx	lr
    f218:	40020000 	.word	0x40020000
    f21c:	00010344 	.word	0x00010344
    f220:	00010384 	.word	0x00010384
    f224:	f0000f00 	.word	0xf0000f00

0000f228 <am_hal_pwrctrl_periph_enable>:
    f228:	b570      	push	{r4, r5, r6, lr}
    f22a:	b082      	sub	sp, #8
    f22c:	4604      	mov	r4, r0
    f22e:	f7ff fa01 	bl	e634 <am_hal_interrupt_master_disable>
    f232:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f236:	4d0f      	ldr	r5, [pc, #60]	; (f274 <am_hal_pwrctrl_periph_enable+0x4c>)
    f238:	4e0f      	ldr	r6, [pc, #60]	; (f278 <am_hal_pwrctrl_periph_enable+0x50>)
    f23a:	9001      	str	r0, [sp, #4]
    f23c:	00a4      	lsls	r4, r4, #2
    f23e:	68aa      	ldr	r2, [r5, #8]
    f240:	5933      	ldr	r3, [r6, r4]
    f242:	4313      	orrs	r3, r2
    f244:	60ab      	str	r3, [r5, #8]
    f246:	9801      	ldr	r0, [sp, #4]
    f248:	4434      	add	r4, r6
    f24a:	f7ff f9f7 	bl	e63c <am_hal_interrupt_master_set>
    f24e:	2077      	movs	r0, #119	; 0x77
    f250:	f7fe fffe 	bl	e250 <am_hal_flash_delay>
    f254:	69ab      	ldr	r3, [r5, #24]
    f256:	6864      	ldr	r4, [r4, #4]
    f258:	4223      	tst	r3, r4
    f25a:	d103      	bne.n	f264 <am_hal_pwrctrl_periph_enable+0x3c>
    f25c:	2077      	movs	r0, #119	; 0x77
    f25e:	f7fe fff7 	bl	e250 <am_hal_flash_delay>
    f262:	69ab      	ldr	r3, [r5, #24]
    f264:	4b03      	ldr	r3, [pc, #12]	; (f274 <am_hal_pwrctrl_periph_enable+0x4c>)
    f266:	699b      	ldr	r3, [r3, #24]
    f268:	4223      	tst	r3, r4
    f26a:	bf0c      	ite	eq
    f26c:	2001      	moveq	r0, #1
    f26e:	2000      	movne	r0, #0
    f270:	b002      	add	sp, #8
    f272:	bd70      	pop	{r4, r5, r6, pc}
    f274:	40021000 	.word	0x40021000
    f278:	000103c4 	.word	0x000103c4

0000f27c <am_hal_pwrctrl_periph_disable>:
    f27c:	b570      	push	{r4, r5, r6, lr}
    f27e:	b082      	sub	sp, #8
    f280:	4604      	mov	r4, r0
    f282:	f7ff f9d7 	bl	e634 <am_hal_interrupt_master_disable>
    f286:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f28a:	4d10      	ldr	r5, [pc, #64]	; (f2cc <am_hal_pwrctrl_periph_disable+0x50>)
    f28c:	4e10      	ldr	r6, [pc, #64]	; (f2d0 <am_hal_pwrctrl_periph_disable+0x54>)
    f28e:	9001      	str	r0, [sp, #4]
    f290:	00a4      	lsls	r4, r4, #2
    f292:	68ab      	ldr	r3, [r5, #8]
    f294:	5932      	ldr	r2, [r6, r4]
    f296:	ea23 0302 	bic.w	r3, r3, r2
    f29a:	60ab      	str	r3, [r5, #8]
    f29c:	9801      	ldr	r0, [sp, #4]
    f29e:	4434      	add	r4, r6
    f2a0:	f7ff f9cc 	bl	e63c <am_hal_interrupt_master_set>
    f2a4:	2077      	movs	r0, #119	; 0x77
    f2a6:	f7fe ffd3 	bl	e250 <am_hal_flash_delay>
    f2aa:	69ab      	ldr	r3, [r5, #24]
    f2ac:	6864      	ldr	r4, [r4, #4]
    f2ae:	4223      	tst	r3, r4
    f2b0:	d003      	beq.n	f2ba <am_hal_pwrctrl_periph_disable+0x3e>
    f2b2:	2077      	movs	r0, #119	; 0x77
    f2b4:	f7fe ffcc 	bl	e250 <am_hal_flash_delay>
    f2b8:	69ab      	ldr	r3, [r5, #24]
    f2ba:	4b04      	ldr	r3, [pc, #16]	; (f2cc <am_hal_pwrctrl_periph_disable+0x50>)
    f2bc:	699b      	ldr	r3, [r3, #24]
    f2be:	4223      	tst	r3, r4
    f2c0:	bf14      	ite	ne
    f2c2:	2001      	movne	r0, #1
    f2c4:	2000      	moveq	r0, #0
    f2c6:	b002      	add	sp, #8
    f2c8:	bd70      	pop	{r4, r5, r6, pc}
    f2ca:	bf00      	nop
    f2cc:	40021000 	.word	0x40021000
    f2d0:	000103c4 	.word	0x000103c4

0000f2d4 <am_hal_pwrctrl_low_power_init>:
    f2d4:	b530      	push	{r4, r5, lr}
    f2d6:	4b1f      	ldr	r3, [pc, #124]	; (f354 <am_hal_pwrctrl_low_power_init+0x80>)
    f2d8:	681a      	ldr	r2, [r3, #0]
    f2da:	b083      	sub	sp, #12
    f2dc:	b912      	cbnz	r2, f2e4 <am_hal_pwrctrl_low_power_init+0x10>
    f2de:	4a1e      	ldr	r2, [pc, #120]	; (f358 <am_hal_pwrctrl_low_power_init+0x84>)
    f2e0:	6812      	ldr	r2, [r2, #0]
    f2e2:	601a      	str	r2, [r3, #0]
    f2e4:	4c1d      	ldr	r4, [pc, #116]	; (f35c <am_hal_pwrctrl_low_power_init+0x88>)
    f2e6:	69a3      	ldr	r3, [r4, #24]
    f2e8:	05db      	lsls	r3, r3, #23
    f2ea:	d502      	bpl.n	f2f2 <am_hal_pwrctrl_low_power_init+0x1e>
    f2ec:	2000      	movs	r0, #0
    f2ee:	b003      	add	sp, #12
    f2f0:	bd30      	pop	{r4, r5, pc}
    f2f2:	4d1b      	ldr	r5, [pc, #108]	; (f360 <am_hal_pwrctrl_low_power_init+0x8c>)
    f2f4:	491b      	ldr	r1, [pc, #108]	; (f364 <am_hal_pwrctrl_low_power_init+0x90>)
    f2f6:	7e2a      	ldrb	r2, [r5, #24]
    f2f8:	2001      	movs	r0, #1
    f2fa:	4302      	orrs	r2, r0
    f2fc:	2307      	movs	r3, #7
    f2fe:	762a      	strb	r2, [r5, #24]
    f300:	9000      	str	r0, [sp, #0]
    f302:	461a      	mov	r2, r3
    f304:	f242 7010 	movw	r0, #10000	; 0x2710
    f308:	f7fe ffa6 	bl	e258 <am_hal_flash_delay_status_check>
    f30c:	b110      	cbz	r0, f314 <am_hal_pwrctrl_low_power_init+0x40>
    f30e:	2004      	movs	r0, #4
    f310:	b003      	add	sp, #12
    f312:	bd30      	pop	{r4, r5, pc}
    f314:	6823      	ldr	r3, [r4, #0]
    f316:	f043 0301 	orr.w	r3, r3, #1
    f31a:	6023      	str	r3, [r4, #0]
    f31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f322:	6263      	str	r3, [r4, #36]	; 0x24
    f324:	68eb      	ldr	r3, [r5, #12]
    f326:	b2db      	uxtb	r3, r3
    f328:	2b11      	cmp	r3, #17
    f32a:	d1df      	bne.n	f2ec <am_hal_pwrctrl_low_power_init+0x18>
    f32c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f330:	f360 5356 	bfi	r3, r0, #21, #2
    f334:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f338:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f33c:	220f      	movs	r2, #15
    f33e:	f362 138b 	bfi	r3, r2, #6, #6
    f342:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f346:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f34a:	f362 0305 	bfi	r3, r2, #0, #6
    f34e:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f352:	e7cc      	b.n	f2ee <am_hal_pwrctrl_low_power_init+0x1a>
    f354:	10001174 	.word	0x10001174
    f358:	4ffff000 	.word	0x4ffff000
    f35c:	40021000 	.word	0x40021000
    f360:	40020000 	.word	0x40020000
    f364:	40020018 	.word	0x40020018

0000f368 <am_hal_rtc_osc_select>:
    f368:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f36c:	2801      	cmp	r0, #1
    f36e:	68d3      	ldr	r3, [r2, #12]
    f370:	bf0c      	ite	eq
    f372:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    f376:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    f37a:	60d3      	str	r3, [r2, #12]
    f37c:	4770      	bx	lr
    f37e:	bf00      	nop

0000f380 <am_hal_rtc_osc_disable>:
    f380:	4a03      	ldr	r2, [pc, #12]	; (f390 <am_hal_rtc_osc_disable+0x10>)
    f382:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f386:	f043 0310 	orr.w	r3, r3, #16
    f38a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f38e:	4770      	bx	lr
    f390:	40004200 	.word	0x40004200

0000f394 <am_hal_sysctrl_sleep>:
    f394:	b510      	push	{r4, lr}
    f396:	b082      	sub	sp, #8
    f398:	4604      	mov	r4, r0
    f39a:	f7ff f94b 	bl	e634 <am_hal_interrupt_master_disable>
    f39e:	4a0f      	ldr	r2, [pc, #60]	; (f3dc <am_hal_sysctrl_sleep+0x48>)
    f3a0:	9001      	str	r0, [sp, #4]
    f3a2:	b124      	cbz	r4, f3ae <am_hal_sysctrl_sleep+0x1a>
    f3a4:	4b0e      	ldr	r3, [pc, #56]	; (f3e0 <am_hal_sysctrl_sleep+0x4c>)
    f3a6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f3aa:	07db      	lsls	r3, r3, #31
    f3ac:	d511      	bpl.n	f3d2 <am_hal_sysctrl_sleep+0x3e>
    f3ae:	6913      	ldr	r3, [r2, #16]
    f3b0:	f023 0304 	bic.w	r3, r3, #4
    f3b4:	6113      	str	r3, [r2, #16]
    f3b6:	f3bf 8f4f 	dsb	sy
    f3ba:	4a0a      	ldr	r2, [pc, #40]	; (f3e4 <am_hal_sysctrl_sleep+0x50>)
    f3bc:	4b0a      	ldr	r3, [pc, #40]	; (f3e8 <am_hal_sysctrl_sleep+0x54>)
    f3be:	6812      	ldr	r2, [r2, #0]
    f3c0:	601a      	str	r2, [r3, #0]
    f3c2:	bf30      	wfi
    f3c4:	f3bf 8f6f 	isb	sy
    f3c8:	9801      	ldr	r0, [sp, #4]
    f3ca:	f7ff f937 	bl	e63c <am_hal_interrupt_master_set>
    f3ce:	b002      	add	sp, #8
    f3d0:	bd10      	pop	{r4, pc}
    f3d2:	6913      	ldr	r3, [r2, #16]
    f3d4:	f043 0304 	orr.w	r3, r3, #4
    f3d8:	6113      	str	r3, [r2, #16]
    f3da:	e7ec      	b.n	f3b6 <am_hal_sysctrl_sleep+0x22>
    f3dc:	e000ed00 	.word	0xe000ed00
    f3e0:	40020000 	.word	0x40020000
    f3e4:	5fff0000 	.word	0x5fff0000
    f3e8:	10001178 	.word	0x10001178

0000f3ec <am_hal_uart_initialize>:
    f3ec:	2801      	cmp	r0, #1
    f3ee:	d901      	bls.n	f3f4 <am_hal_uart_initialize+0x8>
    f3f0:	2005      	movs	r0, #5
    f3f2:	4770      	bx	lr
    f3f4:	b169      	cbz	r1, f412 <am_hal_uart_initialize+0x26>
    f3f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3f8:	2264      	movs	r2, #100	; 0x64
    f3fa:	4e0e      	ldr	r6, [pc, #56]	; (f434 <am_hal_uart_initialize+0x48>)
    f3fc:	fb02 f200 	mul.w	r2, r2, r0
    f400:	18b4      	adds	r4, r6, r2
    f402:	4603      	mov	r3, r0
    f404:	78e0      	ldrb	r0, [r4, #3]
    f406:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f40a:	b2fd      	uxtb	r5, r7
    f40c:	b11d      	cbz	r5, f416 <am_hal_uart_initialize+0x2a>
    f40e:	2007      	movs	r0, #7
    f410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f412:	2006      	movs	r0, #6
    f414:	4770      	bx	lr
    f416:	f040 0001 	orr.w	r0, r0, #1
    f41a:	70e0      	strb	r0, [r4, #3]
    f41c:	58b0      	ldr	r0, [r6, r2]
    f41e:	f8df e018 	ldr.w	lr, [pc, #24]	; f438 <am_hal_uart_initialize+0x4c>
    f422:	f36e 0017 	bfi	r0, lr, #0, #24
    f426:	50b0      	str	r0, [r6, r2]
    f428:	6263      	str	r3, [r4, #36]	; 0x24
    f42a:	7127      	strb	r7, [r4, #4]
    f42c:	6625      	str	r5, [r4, #96]	; 0x60
    f42e:	4628      	mov	r0, r5
    f430:	600c      	str	r4, [r1, #0]
    f432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f434:	10004af8 	.word	0x10004af8
    f438:	00ea9e06 	.word	0x00ea9e06

0000f43c <am_hal_uart_deinitialize>:
    f43c:	b128      	cbz	r0, f44a <am_hal_uart_deinitialize+0xe>
    f43e:	6803      	ldr	r3, [r0, #0]
    f440:	4a07      	ldr	r2, [pc, #28]	; (f460 <am_hal_uart_deinitialize+0x24>)
    f442:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f446:	4293      	cmp	r3, r2
    f448:	d001      	beq.n	f44e <am_hal_uart_deinitialize+0x12>
    f44a:	2002      	movs	r0, #2
    f44c:	4770      	bx	lr
    f44e:	78c2      	ldrb	r2, [r0, #3]
    f450:	2300      	movs	r3, #0
    f452:	f36f 0200 	bfc	r2, #0, #1
    f456:	70c2      	strb	r2, [r0, #3]
    f458:	6243      	str	r3, [r0, #36]	; 0x24
    f45a:	7103      	strb	r3, [r0, #4]
    f45c:	4618      	mov	r0, r3
    f45e:	4770      	bx	lr
    f460:	01ea9e06 	.word	0x01ea9e06

0000f464 <am_hal_uart_power_control>:
    f464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f468:	6804      	ldr	r4, [r0, #0]
    f46a:	4b36      	ldr	r3, [pc, #216]	; (f544 <am_hal_uart_power_control+0xe0>)
    f46c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f470:	429c      	cmp	r4, r3
    f472:	b083      	sub	sp, #12
    f474:	d003      	beq.n	f47e <am_hal_uart_power_control+0x1a>
    f476:	2002      	movs	r0, #2
    f478:	b003      	add	sp, #12
    f47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f47e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f480:	4605      	mov	r5, r0
    f482:	f107 0008 	add.w	r0, r7, #8
    f486:	4691      	mov	r9, r2
    f488:	460e      	mov	r6, r1
    f48a:	fa5f f880 	uxtb.w	r8, r0
    f48e:	b181      	cbz	r1, f4b2 <am_hal_uart_power_control+0x4e>
    f490:	2902      	cmp	r1, #2
    f492:	d80c      	bhi.n	f4ae <am_hal_uart_power_control+0x4a>
    f494:	b992      	cbnz	r2, f4bc <am_hal_uart_power_control+0x58>
    f496:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f49a:	371c      	adds	r7, #28
    f49c:	033f      	lsls	r7, r7, #12
    f49e:	f04f 33ff 	mov.w	r3, #4294967295
    f4a2:	647b      	str	r3, [r7, #68]	; 0x44
    f4a4:	4640      	mov	r0, r8
    f4a6:	f7ff fee9 	bl	f27c <am_hal_pwrctrl_periph_disable>
    f4aa:	2000      	movs	r0, #0
    f4ac:	e7e4      	b.n	f478 <am_hal_uart_power_control+0x14>
    f4ae:	2006      	movs	r0, #6
    f4b0:	e7e2      	b.n	f478 <am_hal_uart_power_control+0x14>
    f4b2:	b322      	cbz	r2, f4fe <am_hal_uart_power_control+0x9a>
    f4b4:	792b      	ldrb	r3, [r5, #4]
    f4b6:	bb3b      	cbnz	r3, f508 <am_hal_uart_power_control+0xa4>
    f4b8:	2007      	movs	r0, #7
    f4ba:	e7dd      	b.n	f478 <am_hal_uart_power_control+0x14>
    f4bc:	f7ff f8ba 	bl	e634 <am_hal_interrupt_master_disable>
    f4c0:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f4c4:	331c      	adds	r3, #28
    f4c6:	031b      	lsls	r3, r3, #12
    f4c8:	9001      	str	r0, [sp, #4]
    f4ca:	6a1a      	ldr	r2, [r3, #32]
    f4cc:	60aa      	str	r2, [r5, #8]
    f4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f4d0:	60ea      	str	r2, [r5, #12]
    f4d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f4d4:	612a      	str	r2, [r5, #16]
    f4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4d8:	616a      	str	r2, [r5, #20]
    f4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f4dc:	61aa      	str	r2, [r5, #24]
    f4de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f4e0:	61ea      	str	r2, [r5, #28]
    f4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f4e4:	622b      	str	r3, [r5, #32]
    f4e6:	2301      	movs	r3, #1
    f4e8:	712b      	strb	r3, [r5, #4]
    f4ea:	9801      	ldr	r0, [sp, #4]
    f4ec:	f7ff f8a6 	bl	e63c <am_hal_interrupt_master_set>
    f4f0:	682b      	ldr	r3, [r5, #0]
    f4f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4f6:	42a3      	cmp	r3, r4
    f4f8:	d1d4      	bne.n	f4a4 <am_hal_uart_power_control+0x40>
    f4fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f4fc:	e7cb      	b.n	f496 <am_hal_uart_power_control+0x32>
    f4fe:	4640      	mov	r0, r8
    f500:	f7ff fe92 	bl	f228 <am_hal_pwrctrl_periph_enable>
    f504:	4648      	mov	r0, r9
    f506:	e7b7      	b.n	f478 <am_hal_uart_power_control+0x14>
    f508:	4640      	mov	r0, r8
    f50a:	f7ff fe8d 	bl	f228 <am_hal_pwrctrl_periph_enable>
    f50e:	f7ff f891 	bl	e634 <am_hal_interrupt_master_disable>
    f512:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f516:	331c      	adds	r3, #28
    f518:	031b      	lsls	r3, r3, #12
    f51a:	68aa      	ldr	r2, [r5, #8]
    f51c:	9000      	str	r0, [sp, #0]
    f51e:	621a      	str	r2, [r3, #32]
    f520:	68ea      	ldr	r2, [r5, #12]
    f522:	625a      	str	r2, [r3, #36]	; 0x24
    f524:	692a      	ldr	r2, [r5, #16]
    f526:	629a      	str	r2, [r3, #40]	; 0x28
    f528:	696a      	ldr	r2, [r5, #20]
    f52a:	62da      	str	r2, [r3, #44]	; 0x2c
    f52c:	69aa      	ldr	r2, [r5, #24]
    f52e:	631a      	str	r2, [r3, #48]	; 0x30
    f530:	69ea      	ldr	r2, [r5, #28]
    f532:	635a      	str	r2, [r3, #52]	; 0x34
    f534:	6a2a      	ldr	r2, [r5, #32]
    f536:	639a      	str	r2, [r3, #56]	; 0x38
    f538:	9800      	ldr	r0, [sp, #0]
    f53a:	712e      	strb	r6, [r5, #4]
    f53c:	f7ff f87e 	bl	e63c <am_hal_interrupt_master_set>
    f540:	4630      	mov	r0, r6
    f542:	e799      	b.n	f478 <am_hal_uart_power_control+0x14>
    f544:	01ea9e06 	.word	0x01ea9e06

0000f548 <am_hal_uart_configure>:
    f548:	6803      	ldr	r3, [r0, #0]
    f54a:	4a7a      	ldr	r2, [pc, #488]	; (f734 <am_hal_uart_configure+0x1ec>)
    f54c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f550:	4293      	cmp	r3, r2
    f552:	d001      	beq.n	f558 <am_hal_uart_configure+0x10>
    f554:	2002      	movs	r0, #2
    f556:	4770      	bx	lr
    f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f55c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f55e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f562:	351c      	adds	r5, #28
    f564:	032d      	lsls	r5, r5, #12
    f566:	2700      	movs	r7, #0
    f568:	b084      	sub	sp, #16
    f56a:	632f      	str	r7, [r5, #48]	; 0x30
    f56c:	460e      	mov	r6, r1
    f56e:	4604      	mov	r4, r0
    f570:	f7ff f860 	bl	e634 <am_hal_interrupt_master_disable>
    f574:	9001      	str	r0, [sp, #4]
    f576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f578:	f043 0308 	orr.w	r3, r3, #8
    f57c:	862b      	strh	r3, [r5, #48]	; 0x30
    f57e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f580:	2201      	movs	r2, #1
    f582:	f362 1306 	bfi	r3, r2, #4, #3
    f586:	862b      	strh	r3, [r5, #48]	; 0x30
    f588:	9801      	ldr	r0, [sp, #4]
    f58a:	f7ff f857 	bl	e63c <am_hal_interrupt_master_set>
    f58e:	f7ff f851 	bl	e634 <am_hal_interrupt_master_disable>
    f592:	9002      	str	r0, [sp, #8]
    f594:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f596:	f367 0300 	bfi	r3, r7, #0, #1
    f59a:	862b      	strh	r3, [r5, #48]	; 0x30
    f59c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f59e:	f367 2349 	bfi	r3, r7, #9, #1
    f5a2:	862b      	strh	r3, [r5, #48]	; 0x30
    f5a4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f5a6:	f367 2308 	bfi	r3, r7, #8, #1
    f5aa:	862b      	strh	r3, [r5, #48]	; 0x30
    f5ac:	9802      	ldr	r0, [sp, #8]
    f5ae:	f7ff f845 	bl	e63c <am_hal_interrupt_master_set>
    f5b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f5b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f5b8:	3b01      	subs	r3, #1
    f5ba:	2b03      	cmp	r3, #3
    f5bc:	d854      	bhi.n	f668 <am_hal_uart_configure+0x120>
    f5be:	e8df f003 	tbb	[pc, r3]
    f5c2:	020e      	.short	0x020e
    f5c4:	1114      	.short	0x1114
    f5c6:	495c      	ldr	r1, [pc, #368]	; (f738 <am_hal_uart_configure+0x1f0>)
    f5c8:	485c      	ldr	r0, [pc, #368]	; (f73c <am_hal_uart_configure+0x1f4>)
    f5ca:	6832      	ldr	r2, [r6, #0]
    f5cc:	0112      	lsls	r2, r2, #4
    f5ce:	fbb0 f3f2 	udiv	r3, r0, r2
    f5d2:	b96b      	cbnz	r3, f5f0 <am_hal_uart_configure+0xa8>
    f5d4:	485a      	ldr	r0, [pc, #360]	; (f740 <am_hal_uart_configure+0x1f8>)
    f5d6:	6623      	str	r3, [r4, #96]	; 0x60
    f5d8:	b004      	add	sp, #16
    f5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5de:	4959      	ldr	r1, [pc, #356]	; (f744 <am_hal_uart_configure+0x1fc>)
    f5e0:	4859      	ldr	r0, [pc, #356]	; (f748 <am_hal_uart_configure+0x200>)
    f5e2:	e7f2      	b.n	f5ca <am_hal_uart_configure+0x82>
    f5e4:	4959      	ldr	r1, [pc, #356]	; (f74c <am_hal_uart_configure+0x204>)
    f5e6:	485a      	ldr	r0, [pc, #360]	; (f750 <am_hal_uart_configure+0x208>)
    f5e8:	e7ef      	b.n	f5ca <am_hal_uart_configure+0x82>
    f5ea:	495a      	ldr	r1, [pc, #360]	; (f754 <am_hal_uart_configure+0x20c>)
    f5ec:	485a      	ldr	r0, [pc, #360]	; (f758 <am_hal_uart_configure+0x210>)
    f5ee:	e7ec      	b.n	f5ca <am_hal_uart_configure+0x82>
    f5f0:	fbb1 f2f2 	udiv	r2, r1, r2
    f5f4:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f5f8:	626b      	str	r3, [r5, #36]	; 0x24
    f5fa:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    f5fe:	626b      	str	r3, [r5, #36]	; 0x24
    f600:	fbb0 f0f1 	udiv	r0, r0, r1
    f604:	62aa      	str	r2, [r5, #40]	; 0x28
    f606:	6620      	str	r0, [r4, #96]	; 0x60
    f608:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f60a:	f36f 338e 	bfc	r3, #14, #1
    f60e:	862b      	strh	r3, [r5, #48]	; 0x30
    f610:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f612:	f36f 33cf 	bfc	r3, #15, #1
    f616:	862b      	strh	r3, [r5, #48]	; 0x30
    f618:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f61a:	6933      	ldr	r3, [r6, #16]
    f61c:	4313      	orrs	r3, r2
    f61e:	632b      	str	r3, [r5, #48]	; 0x30
    f620:	6973      	ldr	r3, [r6, #20]
    f622:	636b      	str	r3, [r5, #52]	; 0x34
    f624:	6871      	ldr	r1, [r6, #4]
    f626:	68b3      	ldr	r3, [r6, #8]
    f628:	68f2      	ldr	r2, [r6, #12]
    f62a:	430b      	orrs	r3, r1
    f62c:	f043 0310 	orr.w	r3, r3, #16
    f630:	4313      	orrs	r3, r2
    f632:	62eb      	str	r3, [r5, #44]	; 0x2c
    f634:	f7fe fffe 	bl	e634 <am_hal_interrupt_master_disable>
    f638:	9003      	str	r0, [sp, #12]
    f63a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f63c:	f043 0301 	orr.w	r3, r3, #1
    f640:	862b      	strh	r3, [r5, #48]	; 0x30
    f642:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f648:	862b      	strh	r3, [r5, #48]	; 0x30
    f64a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f650:	862b      	strh	r3, [r5, #48]	; 0x30
    f652:	9803      	ldr	r0, [sp, #12]
    f654:	f7fe fff2 	bl	e63c <am_hal_interrupt_master_set>
    f658:	6825      	ldr	r5, [r4, #0]
    f65a:	4b36      	ldr	r3, [pc, #216]	; (f734 <am_hal_uart_configure+0x1ec>)
    f65c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f660:	429d      	cmp	r5, r3
    f662:	d005      	beq.n	f670 <am_hal_uart_configure+0x128>
    f664:	2000      	movs	r0, #0
    f666:	e7b7      	b.n	f5d8 <am_hal_uart_configure+0x90>
    f668:	2300      	movs	r3, #0
    f66a:	6623      	str	r3, [r4, #96]	; 0x60
    f66c:	483b      	ldr	r0, [pc, #236]	; (f75c <am_hal_uart_configure+0x214>)
    f66e:	e7b3      	b.n	f5d8 <am_hal_uart_configure+0x90>
    f670:	69b1      	ldr	r1, [r6, #24]
    f672:	6a37      	ldr	r7, [r6, #32]
    f674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    f678:	b109      	cbz	r1, f67e <am_hal_uart_configure+0x136>
    f67a:	69f3      	ldr	r3, [r6, #28]
    f67c:	bb3b      	cbnz	r3, f6ce <am_hal_uart_configure+0x186>
    f67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f680:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f684:	f103 021c 	add.w	r2, r3, #28
    f688:	0312      	lsls	r2, r2, #12
    f68a:	2100      	movs	r1, #0
    f68c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    f690:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f692:	f021 0120 	bic.w	r1, r1, #32
    f696:	6391      	str	r1, [r2, #56]	; 0x38
    f698:	b1b7      	cbz	r7, f6c8 <am_hal_uart_configure+0x180>
    f69a:	f1b8 0f00 	cmp.w	r8, #0
    f69e:	d12e      	bne.n	f6fe <am_hal_uart_configure+0x1b6>
    f6a0:	6823      	ldr	r3, [r4, #0]
    f6a2:	4a24      	ldr	r2, [pc, #144]	; (f734 <am_hal_uart_configure+0x1ec>)
    f6a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f6a8:	2100      	movs	r1, #0
    f6aa:	4293      	cmp	r3, r2
    f6ac:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    f6b0:	d1d8      	bne.n	f664 <am_hal_uart_configure+0x11c>
    f6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f6b4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f6b8:	331c      	adds	r3, #28
    f6ba:	031b      	lsls	r3, r3, #12
    f6bc:	2000      	movs	r0, #0
    f6be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f6c0:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f6c4:	639a      	str	r2, [r3, #56]	; 0x38
    f6c6:	e787      	b.n	f5d8 <am_hal_uart_configure+0x90>
    f6c8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f6cc:	e7f4      	b.n	f6b8 <am_hal_uart_configure+0x170>
    f6ce:	2201      	movs	r2, #1
    f6d0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f6d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f6d8:	f000 fb32 	bl	fd40 <am_hal_queue_init>
    f6dc:	6823      	ldr	r3, [r4, #0]
    f6de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f6e2:	42ab      	cmp	r3, r5
    f6e4:	d1be      	bne.n	f664 <am_hal_uart_configure+0x11c>
    f6e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f6e8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f6ec:	331c      	adds	r3, #28
    f6ee:	031b      	lsls	r3, r3, #12
    f6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f6f2:	f042 0220 	orr.w	r2, r2, #32
    f6f6:	639a      	str	r2, [r3, #56]	; 0x38
    f6f8:	2f00      	cmp	r7, #0
    f6fa:	d1ce      	bne.n	f69a <am_hal_uart_configure+0x152>
    f6fc:	e7d0      	b.n	f6a0 <am_hal_uart_configure+0x158>
    f6fe:	2201      	movs	r2, #1
    f700:	4643      	mov	r3, r8
    f702:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f706:	4639      	mov	r1, r7
    f708:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f70c:	f000 fb18 	bl	fd40 <am_hal_queue_init>
    f710:	6823      	ldr	r3, [r4, #0]
    f712:	4a08      	ldr	r2, [pc, #32]	; (f734 <am_hal_uart_configure+0x1ec>)
    f714:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f718:	4293      	cmp	r3, r2
    f71a:	d1a3      	bne.n	f664 <am_hal_uart_configure+0x11c>
    f71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f71e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f722:	331c      	adds	r3, #28
    f724:	031b      	lsls	r3, r3, #12
    f726:	2000      	movs	r0, #0
    f728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f72a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f72e:	639a      	str	r2, [r3, #56]	; 0x38
    f730:	e752      	b.n	f5d8 <am_hal_uart_configure+0x90>
    f732:	bf00      	nop
    f734:	01ea9e06 	.word	0x01ea9e06
    f738:	2dc6c000 	.word	0x2dc6c000
    f73c:	00b71b00 	.word	0x00b71b00
    f740:	08000003 	.word	0x08000003
    f744:	5b8d8000 	.word	0x5b8d8000
    f748:	016e3600 	.word	0x016e3600
    f74c:	0b71b000 	.word	0x0b71b000
    f750:	002dc6c0 	.word	0x002dc6c0
    f754:	16e36000 	.word	0x16e36000
    f758:	005b8d80 	.word	0x005b8d80
    f75c:	08000002 	.word	0x08000002

0000f760 <am_hal_uart_transfer>:
    f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f764:	680f      	ldr	r7, [r1, #0]
    f766:	b091      	sub	sp, #68	; 0x44
    f768:	4605      	mov	r5, r0
    f76a:	b13f      	cbz	r7, f77c <am_hal_uart_transfer+0x1c>
    f76c:	2f01      	cmp	r7, #1
    f76e:	bf18      	it	ne
    f770:	2707      	movne	r7, #7
    f772:	d024      	beq.n	f7be <am_hal_uart_transfer+0x5e>
    f774:	4638      	mov	r0, r7
    f776:	b011      	add	sp, #68	; 0x44
    f778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f77c:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f780:	690b      	ldr	r3, [r1, #16]
    f782:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f786:	688e      	ldr	r6, [r1, #8]
    f788:	9300      	str	r3, [sp, #0]
    f78a:	f1b9 0f00 	cmp.w	r9, #0
    f78e:	d031      	beq.n	f7f4 <am_hal_uart_transfer+0x94>
    f790:	2e00      	cmp	r6, #0
    f792:	f000 819c 	beq.w	face <am_hal_uart_transfer+0x36e>
    f796:	2800      	cmp	r0, #0
    f798:	f000 8097 	beq.w	f8ca <am_hal_uart_transfer+0x16a>
    f79c:	6803      	ldr	r3, [r0, #0]
    f79e:	4aa9      	ldr	r2, [pc, #676]	; (fa44 <am_hal_uart_transfer+0x2e4>)
    f7a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f7a4:	4293      	cmp	r3, r2
    f7a6:	f000 8092 	beq.w	f8ce <am_hal_uart_transfer+0x16e>
    f7aa:	46b8      	mov	r8, r7
    f7ac:	9b00      	ldr	r3, [sp, #0]
    f7ae:	b10b      	cbz	r3, f7b4 <am_hal_uart_transfer+0x54>
    f7b0:	f8c3 8000 	str.w	r8, [r3]
    f7b4:	2702      	movs	r7, #2
    f7b6:	4638      	mov	r0, r7
    f7b8:	b011      	add	sp, #68	; 0x44
    f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7be:	1d0b      	adds	r3, r1, #4
    f7c0:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f7c4:	f1b9 0f00 	cmp.w	r9, #0
    f7c8:	d043      	beq.n	f852 <am_hal_uart_transfer+0xf2>
    f7ca:	2f00      	cmp	r7, #0
    f7cc:	f000 8185 	beq.w	fada <am_hal_uart_transfer+0x37a>
    f7d0:	2800      	cmp	r0, #0
    f7d2:	f000 80eb 	beq.w	f9ac <am_hal_uart_transfer+0x24c>
    f7d6:	6802      	ldr	r2, [r0, #0]
    f7d8:	499a      	ldr	r1, [pc, #616]	; (fa44 <am_hal_uart_transfer+0x2e4>)
    f7da:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f7de:	428a      	cmp	r2, r1
    f7e0:	f000 80e7 	beq.w	f9b2 <am_hal_uart_transfer+0x252>
    f7e4:	2600      	movs	r6, #0
    f7e6:	2702      	movs	r7, #2
    f7e8:	f1bb 0f00 	cmp.w	fp, #0
    f7ec:	d0c2      	beq.n	f774 <am_hal_uart_transfer+0x14>
    f7ee:	f8cb 6000 	str.w	r6, [fp]
    f7f2:	e7bf      	b.n	f774 <am_hal_uart_transfer+0x14>
    f7f4:	2800      	cmp	r0, #0
    f7f6:	d0dd      	beq.n	f7b4 <am_hal_uart_transfer+0x54>
    f7f8:	6803      	ldr	r3, [r0, #0]
    f7fa:	4a92      	ldr	r2, [pc, #584]	; (fa44 <am_hal_uart_transfer+0x2e4>)
    f7fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f800:	4293      	cmp	r3, r2
    f802:	d1d7      	bne.n	f7b4 <am_hal_uart_transfer+0x54>
    f804:	9b00      	ldr	r3, [sp, #0]
    f806:	b10b      	cbz	r3, f80c <am_hal_uart_transfer+0xac>
    f808:	f8c3 9000 	str.w	r9, [r3]
    f80c:	b1fe      	cbz	r6, f84e <am_hal_uart_transfer+0xee>
    f80e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f812:	2b00      	cmp	r3, #0
    f814:	f040 8165 	bne.w	fae2 <am_hal_uart_transfer+0x382>
    f818:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f81a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f81e:	311c      	adds	r1, #28
    f820:	0309      	lsls	r1, r1, #12
    f822:	698a      	ldr	r2, [r1, #24]
    f824:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f828:	2a00      	cmp	r2, #0
    f82a:	f040 818d 	bne.w	fb48 <am_hal_uart_transfer+0x3e8>
    f82e:	f10a 33ff 	add.w	r3, sl, #4294967295
    f832:	e003      	b.n	f83c <am_hal_uart_transfer+0xdc>
    f834:	6988      	ldr	r0, [r1, #24]
    f836:	0680      	lsls	r0, r0, #26
    f838:	f100 8151 	bmi.w	fade <am_hal_uart_transfer+0x37e>
    f83c:	3201      	adds	r2, #1
    f83e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f842:	6008      	str	r0, [r1, #0]
    f844:	4296      	cmp	r6, r2
    f846:	d1f5      	bne.n	f834 <am_hal_uart_transfer+0xd4>
    f848:	9b00      	ldr	r3, [sp, #0]
    f84a:	b103      	cbz	r3, f84e <am_hal_uart_transfer+0xee>
    f84c:	601e      	str	r6, [r3, #0]
    f84e:	2700      	movs	r7, #0
    f850:	e790      	b.n	f774 <am_hal_uart_transfer+0x14>
    f852:	2800      	cmp	r0, #0
    f854:	d0ae      	beq.n	f7b4 <am_hal_uart_transfer+0x54>
    f856:	6802      	ldr	r2, [r0, #0]
    f858:	497a      	ldr	r1, [pc, #488]	; (fa44 <am_hal_uart_transfer+0x2e4>)
    f85a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f85e:	428a      	cmp	r2, r1
    f860:	d1a8      	bne.n	f7b4 <am_hal_uart_transfer+0x54>
    f862:	f1bb 0f00 	cmp.w	fp, #0
    f866:	d001      	beq.n	f86c <am_hal_uart_transfer+0x10c>
    f868:	f8cb 9000 	str.w	r9, [fp]
    f86c:	2f00      	cmp	r7, #0
    f86e:	d0ee      	beq.n	f84e <am_hal_uart_transfer+0xee>
    f870:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    f874:	2c00      	cmp	r4, #0
    f876:	f040 816c 	bne.w	fb52 <am_hal_uart_transfer+0x3f2>
    f87a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f87c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f880:	321c      	adds	r2, #28
    f882:	0312      	lsls	r2, r2, #12
    f884:	6990      	ldr	r0, [r2, #24]
    f886:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f88a:	2800      	cmp	r0, #0
    f88c:	f040 819d 	bne.w	fbca <am_hal_uart_transfer+0x46a>
    f890:	6811      	ldr	r1, [r2, #0]
    f892:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    f896:	bf08      	it	eq
    f898:	f103 33ff 	addeq.w	r3, r3, #4294967295
    f89c:	d008      	beq.n	f8b0 <am_hal_uart_transfer+0x150>
    f89e:	e190      	b.n	fbc2 <am_hal_uart_transfer+0x462>
    f8a0:	6991      	ldr	r1, [r2, #24]
    f8a2:	06c8      	lsls	r0, r1, #27
    f8a4:	d409      	bmi.n	f8ba <am_hal_uart_transfer+0x15a>
    f8a6:	6811      	ldr	r1, [r2, #0]
    f8a8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f8ac:	f040 814e 	bne.w	fb4c <am_hal_uart_transfer+0x3ec>
    f8b0:	3401      	adds	r4, #1
    f8b2:	42a7      	cmp	r7, r4
    f8b4:	f803 1f01 	strb.w	r1, [r3, #1]!
    f8b8:	d1f2      	bne.n	f8a0 <am_hal_uart_transfer+0x140>
    f8ba:	2700      	movs	r7, #0
    f8bc:	f1bb 0f00 	cmp.w	fp, #0
    f8c0:	f43f af58 	beq.w	f774 <am_hal_uart_transfer+0x14>
    f8c4:	f8cb 4000 	str.w	r4, [fp]
    f8c8:	e754      	b.n	f774 <am_hal_uart_transfer+0x14>
    f8ca:	4680      	mov	r8, r0
    f8cc:	e76e      	b.n	f7ac <am_hal_uart_transfer+0x4c>
    f8ce:	9301      	str	r3, [sp, #4]
    f8d0:	4651      	mov	r1, sl
    f8d2:	46bb      	mov	fp, r7
    f8d4:	46b8      	mov	r8, r7
    f8d6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f8da:	b9f2      	cbnz	r2, f91a <am_hal_uart_transfer+0x1ba>
    f8dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f8de:	b19e      	cbz	r6, f908 <am_hal_uart_transfer+0x1a8>
    f8e0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f8e4:	321c      	adds	r2, #28
    f8e6:	0312      	lsls	r2, r2, #12
    f8e8:	3901      	subs	r1, #1
    f8ea:	6994      	ldr	r4, [r2, #24]
    f8ec:	f3c4 1440 	ubfx	r4, r4, #5, #1
    f8f0:	b11c      	cbz	r4, f8fa <am_hal_uart_transfer+0x19a>
    f8f2:	e047      	b.n	f984 <am_hal_uart_transfer+0x224>
    f8f4:	6993      	ldr	r3, [r2, #24]
    f8f6:	069b      	lsls	r3, r3, #26
    f8f8:	d441      	bmi.n	f97e <am_hal_uart_transfer+0x21e>
    f8fa:	3401      	adds	r4, #1
    f8fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    f900:	6013      	str	r3, [r2, #0]
    f902:	42b4      	cmp	r4, r6
    f904:	d1f6      	bne.n	f8f4 <am_hal_uart_transfer+0x194>
    f906:	44a0      	add	r8, r4
    f908:	9b00      	ldr	r3, [sp, #0]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d09f      	beq.n	f84e <am_hal_uart_transfer+0xee>
    f90e:	4638      	mov	r0, r7
    f910:	f8c3 8000 	str.w	r8, [r3]
    f914:	b011      	add	sp, #68	; 0x44
    f916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f91a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f91c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    f91e:	1b14      	subs	r4, r2, r4
    f920:	42b4      	cmp	r4, r6
    f922:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    f926:	bf28      	it	cs
    f928:	4634      	movcs	r4, r6
    f92a:	4622      	mov	r2, r4
    f92c:	4618      	mov	r0, r3
    f92e:	9302      	str	r3, [sp, #8]
    f930:	f000 fa12 	bl	fd58 <am_hal_queue_item_add>
    f934:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f936:	9303      	str	r3, [sp, #12]
    f938:	f7fe fe7c 	bl	e634 <am_hal_interrupt_master_disable>
    f93c:	9b03      	ldr	r3, [sp, #12]
    f93e:	9008      	str	r0, [sp, #32]
    f940:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f944:	331c      	adds	r3, #28
    f946:	031b      	lsls	r3, r3, #12
    f948:	9303      	str	r3, [sp, #12]
    f94a:	e00d      	b.n	f968 <am_hal_uart_transfer+0x208>
    f94c:	f000 fa3c 	bl	fdc8 <am_hal_queue_item_get>
    f950:	b190      	cbz	r0, f978 <am_hal_uart_transfer+0x218>
    f952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f954:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f958:	331c      	adds	r3, #28
    f95a:	031b      	lsls	r3, r3, #12
    f95c:	699a      	ldr	r2, [r3, #24]
    f95e:	0692      	lsls	r2, r2, #26
    f960:	bf5c      	itt	pl
    f962:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    f966:	601a      	strpl	r2, [r3, #0]
    f968:	9b03      	ldr	r3, [sp, #12]
    f96a:	9802      	ldr	r0, [sp, #8]
    f96c:	699b      	ldr	r3, [r3, #24]
    f96e:	069b      	lsls	r3, r3, #26
    f970:	f04f 0201 	mov.w	r2, #1
    f974:	a907      	add	r1, sp, #28
    f976:	d5e9      	bpl.n	f94c <am_hal_uart_transfer+0x1ec>
    f978:	9808      	ldr	r0, [sp, #32]
    f97a:	f7fe fe5f 	bl	e63c <am_hal_interrupt_master_set>
    f97e:	1b36      	subs	r6, r6, r4
    f980:	44a0      	add	r8, r4
    f982:	d0c1      	beq.n	f908 <am_hal_uart_transfer+0x1a8>
    f984:	2001      	movs	r0, #1
    f986:	f7fe fc63 	bl	e250 <am_hal_flash_delay>
    f98a:	f1b9 3fff 	cmp.w	r9, #4294967295
    f98e:	d001      	beq.n	f994 <am_hal_uart_transfer+0x234>
    f990:	f10b 0b01 	add.w	fp, fp, #1
    f994:	45d9      	cmp	r9, fp
    f996:	d9b7      	bls.n	f908 <am_hal_uart_transfer+0x1a8>
    f998:	682a      	ldr	r2, [r5, #0]
    f99a:	9b01      	ldr	r3, [sp, #4]
    f99c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f9a0:	429a      	cmp	r2, r3
    f9a2:	eb0a 0108 	add.w	r1, sl, r8
    f9a6:	f47f af01 	bne.w	f7ac <am_hal_uart_transfer+0x4c>
    f9aa:	e794      	b.n	f8d6 <am_hal_uart_transfer+0x176>
    f9ac:	4606      	mov	r6, r0
    f9ae:	2702      	movs	r7, #2
    f9b0:	e71a      	b.n	f7e8 <am_hal_uart_transfer+0x88>
    f9b2:	9200      	str	r2, [sp, #0]
    f9b4:	f100 0248 	add.w	r2, r0, #72	; 0x48
    f9b8:	f04f 0a00 	mov.w	sl, #0
    f9bc:	9202      	str	r2, [sp, #8]
    f9be:	465a      	mov	r2, fp
    f9c0:	4698      	mov	r8, r3
    f9c2:	469b      	mov	fp, r3
    f9c4:	4656      	mov	r6, sl
    f9c6:	4613      	mov	r3, r2
    f9c8:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    f9cc:	2a00      	cmp	r2, #0
    f9ce:	d152      	bne.n	fa76 <am_hal_uart_transfer+0x316>
    f9d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f9d2:	b3a7      	cbz	r7, fa3e <am_hal_uart_transfer+0x2de>
    f9d4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f9d8:	311c      	adds	r1, #28
    f9da:	0309      	lsls	r1, r1, #12
    f9dc:	698a      	ldr	r2, [r1, #24]
    f9de:	06d0      	lsls	r0, r2, #27
    f9e0:	d432      	bmi.n	fa48 <am_hal_uart_transfer+0x2e8>
    f9e2:	680a      	ldr	r2, [r1, #0]
    f9e4:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    f9e8:	f040 80aa 	bne.w	fb40 <am_hal_uart_transfer+0x3e0>
    f9ec:	f108 38ff 	add.w	r8, r8, #4294967295
    f9f0:	e006      	b.n	fa00 <am_hal_uart_transfer+0x2a0>
    f9f2:	698a      	ldr	r2, [r1, #24]
    f9f4:	06d2      	lsls	r2, r2, #27
    f9f6:	d41f      	bmi.n	fa38 <am_hal_uart_transfer+0x2d8>
    f9f8:	680a      	ldr	r2, [r1, #0]
    f9fa:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f9fe:	d161      	bne.n	fac4 <am_hal_uart_transfer+0x364>
    fa00:	3401      	adds	r4, #1
    fa02:	42bc      	cmp	r4, r7
    fa04:	f808 2f01 	strb.w	r2, [r8, #1]!
    fa08:	d1f3      	bne.n	f9f2 <am_hal_uart_transfer+0x292>
    fa0a:	469b      	mov	fp, r3
    fa0c:	4426      	add	r6, r4
    fa0e:	f1bb 0f00 	cmp.w	fp, #0
    fa12:	f43f af1c 	beq.w	f84e <am_hal_uart_transfer+0xee>
    fa16:	f8cb 6000 	str.w	r6, [fp]
    fa1a:	2700      	movs	r7, #0
    fa1c:	e6aa      	b.n	f774 <am_hal_uart_transfer+0x14>
    fa1e:	9807      	ldr	r0, [sp, #28]
    fa20:	f7fe fe0c 	bl	e63c <am_hal_interrupt_master_set>
    fa24:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fa26:	9802      	ldr	r0, [sp, #8]
    fa28:	42bc      	cmp	r4, r7
    fa2a:	bf28      	it	cs
    fa2c:	463c      	movcs	r4, r7
    fa2e:	4641      	mov	r1, r8
    fa30:	4622      	mov	r2, r4
    fa32:	f000 f9c9 	bl	fdc8 <am_hal_queue_item_get>
    fa36:	9b01      	ldr	r3, [sp, #4]
    fa38:	1b3f      	subs	r7, r7, r4
    fa3a:	4426      	add	r6, r4
    fa3c:	d104      	bne.n	fa48 <am_hal_uart_transfer+0x2e8>
    fa3e:	469b      	mov	fp, r3
    fa40:	e7e5      	b.n	fa0e <am_hal_uart_transfer+0x2ae>
    fa42:	bf00      	nop
    fa44:	01ea9e06 	.word	0x01ea9e06
    fa48:	2001      	movs	r0, #1
    fa4a:	9301      	str	r3, [sp, #4]
    fa4c:	f7fe fc00 	bl	e250 <am_hal_flash_delay>
    fa50:	f1b9 3fff 	cmp.w	r9, #4294967295
    fa54:	9b01      	ldr	r3, [sp, #4]
    fa56:	d001      	beq.n	fa5c <am_hal_uart_transfer+0x2fc>
    fa58:	f10a 0a01 	add.w	sl, sl, #1
    fa5c:	45d1      	cmp	r9, sl
    fa5e:	d9ee      	bls.n	fa3e <am_hal_uart_transfer+0x2de>
    fa60:	682a      	ldr	r2, [r5, #0]
    fa62:	9900      	ldr	r1, [sp, #0]
    fa64:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fa68:	428a      	cmp	r2, r1
    fa6a:	eb0b 0806 	add.w	r8, fp, r6
    fa6e:	d0ab      	beq.n	f9c8 <am_hal_uart_transfer+0x268>
    fa70:	469b      	mov	fp, r3
    fa72:	2702      	movs	r7, #2
    fa74:	e6b8      	b.n	f7e8 <am_hal_uart_transfer+0x88>
    fa76:	9301      	str	r3, [sp, #4]
    fa78:	f7fe fddc 	bl	e634 <am_hal_interrupt_master_disable>
    fa7c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fa7e:	9007      	str	r0, [sp, #28]
    fa80:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    fa84:	301c      	adds	r0, #28
    fa86:	9b01      	ldr	r3, [sp, #4]
    fa88:	0300      	lsls	r0, r0, #12
    fa8a:	ac08      	add	r4, sp, #32
    fa8c:	2200      	movs	r2, #0
    fa8e:	6981      	ldr	r1, [r0, #24]
    fa90:	06c9      	lsls	r1, r1, #27
    fa92:	d409      	bmi.n	faa8 <am_hal_uart_transfer+0x348>
    fa94:	6801      	ldr	r1, [r0, #0]
    fa96:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fa9a:	f102 0201 	add.w	r2, r2, #1
    fa9e:	d118      	bne.n	fad2 <am_hal_uart_transfer+0x372>
    faa0:	2a20      	cmp	r2, #32
    faa2:	f804 1b01 	strb.w	r1, [r4], #1
    faa6:	d1f2      	bne.n	fa8e <am_hal_uart_transfer+0x32e>
    faa8:	a908      	add	r1, sp, #32
    faaa:	9802      	ldr	r0, [sp, #8]
    faac:	9301      	str	r3, [sp, #4]
    faae:	f000 f953 	bl	fd58 <am_hal_queue_item_add>
    fab2:	9b01      	ldr	r3, [sp, #4]
    fab4:	2800      	cmp	r0, #0
    fab6:	d1b2      	bne.n	fa1e <am_hal_uart_transfer+0x2be>
    fab8:	4f45      	ldr	r7, [pc, #276]	; (fbd0 <am_hal_uart_transfer+0x470>)
    faba:	469b      	mov	fp, r3
    fabc:	9807      	ldr	r0, [sp, #28]
    fabe:	f7fe fdbd 	bl	e63c <am_hal_interrupt_master_set>
    fac2:	e691      	b.n	f7e8 <am_hal_uart_transfer+0x88>
    fac4:	469b      	mov	fp, r3
    fac6:	4426      	add	r6, r4
    fac8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    facc:	e68c      	b.n	f7e8 <am_hal_uart_transfer+0x88>
    face:	46b8      	mov	r8, r7
    fad0:	e71a      	b.n	f908 <am_hal_uart_transfer+0x1a8>
    fad2:	469b      	mov	fp, r3
    fad4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fad8:	e7f0      	b.n	fabc <am_hal_uart_transfer+0x35c>
    fada:	463e      	mov	r6, r7
    fadc:	e797      	b.n	fa0e <am_hal_uart_transfer+0x2ae>
    fade:	4616      	mov	r6, r2
    fae0:	e6b2      	b.n	f848 <am_hal_uart_transfer+0xe8>
    fae2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    fae4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    fae6:	1a9b      	subs	r3, r3, r2
    fae8:	429e      	cmp	r6, r3
    faea:	bf28      	it	cs
    faec:	461e      	movcs	r6, r3
    faee:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    faf2:	4651      	mov	r1, sl
    faf4:	4632      	mov	r2, r6
    faf6:	4620      	mov	r0, r4
    faf8:	f000 f92e 	bl	fd58 <am_hal_queue_item_add>
    fafc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fafe:	f7fe fd99 	bl	e634 <am_hal_interrupt_master_disable>
    fb02:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fb06:	371c      	adds	r7, #28
    fb08:	033f      	lsls	r7, r7, #12
    fb0a:	9005      	str	r0, [sp, #20]
    fb0c:	e00d      	b.n	fb2a <am_hal_uart_transfer+0x3ca>
    fb0e:	f000 f95b 	bl	fdc8 <am_hal_queue_item_get>
    fb12:	b188      	cbz	r0, fb38 <am_hal_uart_transfer+0x3d8>
    fb14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fb16:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb1a:	331c      	adds	r3, #28
    fb1c:	031b      	lsls	r3, r3, #12
    fb1e:	699a      	ldr	r2, [r3, #24]
    fb20:	0692      	lsls	r2, r2, #26
    fb22:	bf5c      	itt	pl
    fb24:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    fb28:	601a      	strpl	r2, [r3, #0]
    fb2a:	69bb      	ldr	r3, [r7, #24]
    fb2c:	069b      	lsls	r3, r3, #26
    fb2e:	f04f 0201 	mov.w	r2, #1
    fb32:	a908      	add	r1, sp, #32
    fb34:	4620      	mov	r0, r4
    fb36:	d5ea      	bpl.n	fb0e <am_hal_uart_transfer+0x3ae>
    fb38:	9805      	ldr	r0, [sp, #20]
    fb3a:	f7fe fd7f 	bl	e63c <am_hal_interrupt_master_set>
    fb3e:	e683      	b.n	f848 <am_hal_uart_transfer+0xe8>
    fb40:	469b      	mov	fp, r3
    fb42:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fb46:	e64f      	b.n	f7e8 <am_hal_uart_transfer+0x88>
    fb48:	461e      	mov	r6, r3
    fb4a:	e67d      	b.n	f848 <am_hal_uart_transfer+0xe8>
    fb4c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fb50:	e6b4      	b.n	f8bc <am_hal_uart_transfer+0x15c>
    fb52:	9300      	str	r3, [sp, #0]
    fb54:	f7fe fd6e 	bl	e634 <am_hal_interrupt_master_disable>
    fb58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fb5a:	9006      	str	r0, [sp, #24]
    fb5c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fb60:	321c      	adds	r2, #28
    fb62:	0311      	lsls	r1, r2, #12
    fb64:	a808      	add	r0, sp, #32
    fb66:	2200      	movs	r2, #0
    fb68:	9b00      	ldr	r3, [sp, #0]
    fb6a:	e009      	b.n	fb80 <am_hal_uart_transfer+0x420>
    fb6c:	680c      	ldr	r4, [r1, #0]
    fb6e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    fb72:	f102 0201 	add.w	r2, r2, #1
    fb76:	d121      	bne.n	fbbc <am_hal_uart_transfer+0x45c>
    fb78:	2a20      	cmp	r2, #32
    fb7a:	f800 4b01 	strb.w	r4, [r0], #1
    fb7e:	d002      	beq.n	fb86 <am_hal_uart_transfer+0x426>
    fb80:	698c      	ldr	r4, [r1, #24]
    fb82:	06e4      	lsls	r4, r4, #27
    fb84:	d5f2      	bpl.n	fb6c <am_hal_uart_transfer+0x40c>
    fb86:	f105 0648 	add.w	r6, r5, #72	; 0x48
    fb8a:	a908      	add	r1, sp, #32
    fb8c:	4630      	mov	r0, r6
    fb8e:	9300      	str	r3, [sp, #0]
    fb90:	f000 f8e2 	bl	fd58 <am_hal_queue_item_add>
    fb94:	b920      	cbnz	r0, fba0 <am_hal_uart_transfer+0x440>
    fb96:	4f0e      	ldr	r7, [pc, #56]	; (fbd0 <am_hal_uart_transfer+0x470>)
    fb98:	9806      	ldr	r0, [sp, #24]
    fb9a:	f7fe fd4f 	bl	e63c <am_hal_interrupt_master_set>
    fb9e:	e5e9      	b.n	f774 <am_hal_uart_transfer+0x14>
    fba0:	9806      	ldr	r0, [sp, #24]
    fba2:	f7fe fd4b 	bl	e63c <am_hal_interrupt_master_set>
    fba6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fba8:	9b00      	ldr	r3, [sp, #0]
    fbaa:	42bc      	cmp	r4, r7
    fbac:	bf28      	it	cs
    fbae:	463c      	movcs	r4, r7
    fbb0:	4619      	mov	r1, r3
    fbb2:	4630      	mov	r0, r6
    fbb4:	4622      	mov	r2, r4
    fbb6:	f000 f907 	bl	fdc8 <am_hal_queue_item_get>
    fbba:	e67e      	b.n	f8ba <am_hal_uart_transfer+0x15a>
    fbbc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fbc0:	e7ea      	b.n	fb98 <am_hal_uart_transfer+0x438>
    fbc2:	4604      	mov	r4, r0
    fbc4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fbc8:	e678      	b.n	f8bc <am_hal_uart_transfer+0x15c>
    fbca:	4627      	mov	r7, r4
    fbcc:	e676      	b.n	f8bc <am_hal_uart_transfer+0x15c>
    fbce:	bf00      	nop
    fbd0:	08000001 	.word	0x08000001

0000fbd4 <am_hal_uart_tx_flush>:
    fbd4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fbd8:	b570      	push	{r4, r5, r6, lr}
    fbda:	4604      	mov	r4, r0
    fbdc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    fbde:	b183      	cbz	r3, fc02 <am_hal_uart_tx_flush+0x2e>
    fbe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fbe2:	b173      	cbz	r3, fc02 <am_hal_uart_tx_flush+0x2e>
    fbe4:	4e13      	ldr	r6, [pc, #76]	; (fc34 <am_hal_uart_tx_flush+0x60>)
    fbe6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    fbe8:	fbb6 f0f0 	udiv	r0, r6, r0
    fbec:	2802      	cmp	r0, #2
    fbee:	ea4f 1000 	mov.w	r0, r0, lsl #4
    fbf2:	bf8c      	ite	hi
    fbf4:	3829      	subhi	r0, #41	; 0x29
    fbf6:	2001      	movls	r0, #1
    fbf8:	f7fe fb2a 	bl	e250 <am_hal_flash_delay>
    fbfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fbfe:	2b00      	cmp	r3, #0
    fc00:	d1f1      	bne.n	fbe6 <am_hal_uart_tx_flush+0x12>
    fc02:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fc06:	351c      	adds	r5, #28
    fc08:	032d      	lsls	r5, r5, #12
    fc0a:	69ab      	ldr	r3, [r5, #24]
    fc0c:	071a      	lsls	r2, r3, #28
    fc0e:	d50e      	bpl.n	fc2e <am_hal_uart_tx_flush+0x5a>
    fc10:	4e08      	ldr	r6, [pc, #32]	; (fc34 <am_hal_uart_tx_flush+0x60>)
    fc12:	6e20      	ldr	r0, [r4, #96]	; 0x60
    fc14:	fbb6 f0f0 	udiv	r0, r6, r0
    fc18:	2802      	cmp	r0, #2
    fc1a:	ea4f 1000 	mov.w	r0, r0, lsl #4
    fc1e:	bf8c      	ite	hi
    fc20:	3829      	subhi	r0, #41	; 0x29
    fc22:	2001      	movls	r0, #1
    fc24:	f7fe fb14 	bl	e250 <am_hal_flash_delay>
    fc28:	69ab      	ldr	r3, [r5, #24]
    fc2a:	071b      	lsls	r3, r3, #28
    fc2c:	d4f1      	bmi.n	fc12 <am_hal_uart_tx_flush+0x3e>
    fc2e:	2000      	movs	r0, #0
    fc30:	bd70      	pop	{r4, r5, r6, pc}
    fc32:	bf00      	nop
    fc34:	00b71b00 	.word	0x00b71b00

0000fc38 <am_hal_cmdq_init>:
    fc38:	2807      	cmp	r0, #7
    fc3a:	d901      	bls.n	fc40 <am_hal_cmdq_init+0x8>
    fc3c:	2005      	movs	r0, #5
    fc3e:	4770      	bx	lr
    fc40:	b1c9      	cbz	r1, fc76 <am_hal_cmdq_init+0x3e>
    fc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc46:	684c      	ldr	r4, [r1, #4]
    fc48:	b194      	cbz	r4, fc70 <am_hal_cmdq_init+0x38>
    fc4a:	b18a      	cbz	r2, fc70 <am_hal_cmdq_init+0x38>
    fc4c:	680e      	ldr	r6, [r1, #0]
    fc4e:	2e01      	cmp	r6, #1
    fc50:	d90e      	bls.n	fc70 <am_hal_cmdq_init+0x38>
    fc52:	272c      	movs	r7, #44	; 0x2c
    fc54:	f8df c09c 	ldr.w	ip, [pc, #156]	; fcf4 <am_hal_cmdq_init+0xbc>
    fc58:	fb07 f700 	mul.w	r7, r7, r0
    fc5c:	eb0c 0507 	add.w	r5, ip, r7
    fc60:	f895 e003 	ldrb.w	lr, [r5, #3]
    fc64:	f01e 0301 	ands.w	r3, lr, #1
    fc68:	d007      	beq.n	fc7a <am_hal_cmdq_init+0x42>
    fc6a:	2007      	movs	r0, #7
    fc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc70:	2006      	movs	r0, #6
    fc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc76:	2006      	movs	r0, #6
    fc78:	4770      	bx	lr
    fc7a:	f04e 0e01 	orr.w	lr, lr, #1
    fc7e:	00f6      	lsls	r6, r6, #3
    fc80:	f363 0e41 	bfi	lr, r3, #1, #1
    fc84:	f885 e003 	strb.w	lr, [r5, #3]
    fc88:	eb06 0804 	add.w	r8, r6, r4
    fc8c:	f8df e068 	ldr.w	lr, [pc, #104]	; fcf8 <am_hal_cmdq_init+0xc0>
    fc90:	f8c5 8008 	str.w	r8, [r5, #8]
    fc94:	606c      	str	r4, [r5, #4]
    fc96:	60ec      	str	r4, [r5, #12]
    fc98:	616c      	str	r4, [r5, #20]
    fc9a:	612c      	str	r4, [r5, #16]
    fc9c:	61ae      	str	r6, [r5, #24]
    fc9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fca2:	f85c 6007 	ldr.w	r6, [ip, r7]
    fca6:	f8df 8054 	ldr.w	r8, [pc, #84]	; fcfc <am_hal_cmdq_init+0xc4>
    fcaa:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    fcae:	f368 0617 	bfi	r6, r8, #0, #24
    fcb2:	f8d0 e008 	ldr.w	lr, [r0, #8]
    fcb6:	f84c 6007 	str.w	r6, [ip, r7]
    fcba:	6268      	str	r0, [r5, #36]	; 0x24
    fcbc:	61eb      	str	r3, [r5, #28]
    fcbe:	622b      	str	r3, [r5, #32]
    fcc0:	f8ce 3000 	str.w	r3, [lr]
    fcc4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fcc6:	7a09      	ldrb	r1, [r1, #8]
    fcc8:	68c0      	ldr	r0, [r0, #12]
    fcca:	6003      	str	r3, [r0, #0]
    fccc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fcce:	6906      	ldr	r6, [r0, #16]
    fcd0:	6940      	ldr	r0, [r0, #20]
    fcd2:	6837      	ldr	r7, [r6, #0]
    fcd4:	4338      	orrs	r0, r7
    fcd6:	6030      	str	r0, [r6, #0]
    fcd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fcda:	6840      	ldr	r0, [r0, #4]
    fcdc:	6004      	str	r4, [r0, #0]
    fcde:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fce0:	0049      	lsls	r1, r1, #1
    fce2:	6804      	ldr	r4, [r0, #0]
    fce4:	f001 0102 	and.w	r1, r1, #2
    fce8:	6021      	str	r1, [r4, #0]
    fcea:	4618      	mov	r0, r3
    fcec:	6015      	str	r5, [r2, #0]
    fcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcf2:	bf00      	nop
    fcf4:	1000117c 	.word	0x1000117c
    fcf8:	00010478 	.word	0x00010478
    fcfc:	00cdcdcd 	.word	0x00cdcdcd

0000fd00 <am_hal_cmdq_enable>:
    fd00:	4603      	mov	r3, r0
    fd02:	b128      	cbz	r0, fd10 <am_hal_cmdq_enable+0x10>
    fd04:	6802      	ldr	r2, [r0, #0]
    fd06:	490d      	ldr	r1, [pc, #52]	; (fd3c <am_hal_cmdq_enable+0x3c>)
    fd08:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fd0c:	428a      	cmp	r2, r1
    fd0e:	d001      	beq.n	fd14 <am_hal_cmdq_enable+0x14>
    fd10:	2002      	movs	r0, #2
    fd12:	4770      	bx	lr
    fd14:	78c2      	ldrb	r2, [r0, #3]
    fd16:	f002 0202 	and.w	r2, r2, #2
    fd1a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    fd1e:	b952      	cbnz	r2, fd36 <am_hal_cmdq_enable+0x36>
    fd20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fd22:	6811      	ldr	r1, [r2, #0]
    fd24:	680a      	ldr	r2, [r1, #0]
    fd26:	f042 0201 	orr.w	r2, r2, #1
    fd2a:	600a      	str	r2, [r1, #0]
    fd2c:	78da      	ldrb	r2, [r3, #3]
    fd2e:	f042 0202 	orr.w	r2, r2, #2
    fd32:	70da      	strb	r2, [r3, #3]
    fd34:	4770      	bx	lr
    fd36:	2000      	movs	r0, #0
    fd38:	4770      	bx	lr
    fd3a:	bf00      	nop
    fd3c:	01cdcdcd 	.word	0x01cdcdcd

0000fd40 <am_hal_queue_init>:
    fd40:	b410      	push	{r4}
    fd42:	2400      	movs	r4, #0
    fd44:	6004      	str	r4, [r0, #0]
    fd46:	6044      	str	r4, [r0, #4]
    fd48:	6084      	str	r4, [r0, #8]
    fd4a:	60c3      	str	r3, [r0, #12]
    fd4c:	6102      	str	r2, [r0, #16]
    fd4e:	6141      	str	r1, [r0, #20]
    fd50:	f85d 4b04 	ldr.w	r4, [sp], #4
    fd54:	4770      	bx	lr
    fd56:	bf00      	nop

0000fd58 <am_hal_queue_item_add>:
    fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd5a:	4604      	mov	r4, r0
    fd5c:	6906      	ldr	r6, [r0, #16]
    fd5e:	b083      	sub	sp, #12
    fd60:	fb06 f602 	mul.w	r6, r6, r2
    fd64:	460d      	mov	r5, r1
    fd66:	f7fe fc65 	bl	e634 <am_hal_interrupt_master_disable>
    fd6a:	68e7      	ldr	r7, [r4, #12]
    fd6c:	68a2      	ldr	r2, [r4, #8]
    fd6e:	9001      	str	r0, [sp, #4]
    fd70:	1abb      	subs	r3, r7, r2
    fd72:	429e      	cmp	r6, r3
    fd74:	d826      	bhi.n	fdc4 <am_hal_queue_item_add+0x6c>
    fd76:	b196      	cbz	r6, fd9e <am_hal_queue_item_add+0x46>
    fd78:	6823      	ldr	r3, [r4, #0]
    fd7a:	4629      	mov	r1, r5
    fd7c:	b1c5      	cbz	r5, fdb0 <am_hal_queue_item_add+0x58>
    fd7e:	19af      	adds	r7, r5, r6
    fd80:	6962      	ldr	r2, [r4, #20]
    fd82:	f811 0b01 	ldrb.w	r0, [r1], #1
    fd86:	54d0      	strb	r0, [r2, r3]
    fd88:	6823      	ldr	r3, [r4, #0]
    fd8a:	68e5      	ldr	r5, [r4, #12]
    fd8c:	3301      	adds	r3, #1
    fd8e:	42b9      	cmp	r1, r7
    fd90:	fbb3 f0f5 	udiv	r0, r3, r5
    fd94:	fb05 3310 	mls	r3, r5, r0, r3
    fd98:	6023      	str	r3, [r4, #0]
    fd9a:	d1f1      	bne.n	fd80 <am_hal_queue_item_add+0x28>
    fd9c:	68a2      	ldr	r2, [r4, #8]
    fd9e:	4432      	add	r2, r6
    fda0:	60a2      	str	r2, [r4, #8]
    fda2:	2401      	movs	r4, #1
    fda4:	9801      	ldr	r0, [sp, #4]
    fda6:	f7fe fc49 	bl	e63c <am_hal_interrupt_master_set>
    fdaa:	4620      	mov	r0, r4
    fdac:	b003      	add	sp, #12
    fdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdb0:	3101      	adds	r1, #1
    fdb2:	3301      	adds	r3, #1
    fdb4:	428e      	cmp	r6, r1
    fdb6:	fbb3 f0f7 	udiv	r0, r3, r7
    fdba:	fb07 3310 	mls	r3, r7, r0, r3
    fdbe:	d1f7      	bne.n	fdb0 <am_hal_queue_item_add+0x58>
    fdc0:	6023      	str	r3, [r4, #0]
    fdc2:	e7ec      	b.n	fd9e <am_hal_queue_item_add+0x46>
    fdc4:	2400      	movs	r4, #0
    fdc6:	e7ed      	b.n	fda4 <am_hal_queue_item_add+0x4c>

0000fdc8 <am_hal_queue_item_get>:
    fdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdca:	4604      	mov	r4, r0
    fdcc:	6906      	ldr	r6, [r0, #16]
    fdce:	b083      	sub	sp, #12
    fdd0:	fb06 f602 	mul.w	r6, r6, r2
    fdd4:	460d      	mov	r5, r1
    fdd6:	f7fe fc2d 	bl	e634 <am_hal_interrupt_master_disable>
    fdda:	68a2      	ldr	r2, [r4, #8]
    fddc:	9001      	str	r0, [sp, #4]
    fdde:	4296      	cmp	r6, r2
    fde0:	d81c      	bhi.n	fe1c <am_hal_queue_item_get+0x54>
    fde2:	b196      	cbz	r6, fe0a <am_hal_queue_item_get+0x42>
    fde4:	6863      	ldr	r3, [r4, #4]
    fde6:	b1dd      	cbz	r5, fe20 <am_hal_queue_item_get+0x58>
    fde8:	4629      	mov	r1, r5
    fdea:	19af      	adds	r7, r5, r6
    fdec:	6962      	ldr	r2, [r4, #20]
    fdee:	5cd3      	ldrb	r3, [r2, r3]
    fdf0:	f801 3b01 	strb.w	r3, [r1], #1
    fdf4:	6863      	ldr	r3, [r4, #4]
    fdf6:	68e5      	ldr	r5, [r4, #12]
    fdf8:	3301      	adds	r3, #1
    fdfa:	428f      	cmp	r7, r1
    fdfc:	fbb3 f0f5 	udiv	r0, r3, r5
    fe00:	fb05 3310 	mls	r3, r5, r0, r3
    fe04:	6063      	str	r3, [r4, #4]
    fe06:	d1f1      	bne.n	fdec <am_hal_queue_item_get+0x24>
    fe08:	68a2      	ldr	r2, [r4, #8]
    fe0a:	1b92      	subs	r2, r2, r6
    fe0c:	60a2      	str	r2, [r4, #8]
    fe0e:	2401      	movs	r4, #1
    fe10:	9801      	ldr	r0, [sp, #4]
    fe12:	f7fe fc13 	bl	e63c <am_hal_interrupt_master_set>
    fe16:	4620      	mov	r0, r4
    fe18:	b003      	add	sp, #12
    fe1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe1c:	2400      	movs	r4, #0
    fe1e:	e7f7      	b.n	fe10 <am_hal_queue_item_get+0x48>
    fe20:	68e0      	ldr	r0, [r4, #12]
    fe22:	4629      	mov	r1, r5
    fe24:	3101      	adds	r1, #1
    fe26:	3301      	adds	r3, #1
    fe28:	428e      	cmp	r6, r1
    fe2a:	fbb3 f5f0 	udiv	r5, r3, r0
    fe2e:	fb00 3315 	mls	r3, r0, r5, r3
    fe32:	d1f7      	bne.n	fe24 <am_hal_queue_item_get+0x5c>
    fe34:	6063      	str	r3, [r4, #4]
    fe36:	e7e8      	b.n	fe0a <am_hal_queue_item_get+0x42>
    fe38:	72617053 	.word	0x72617053
    fe3c:	6e75466b 	.word	0x6e75466b
    fe40:	67644520 	.word	0x67644520
    fe44:	6f422065 	.word	0x6f422065
    fe48:	20647261 	.word	0x20647261
    fe4c:	74736554 	.word	0x74736554
    fe50:	0000000a 	.word	0x0000000a
    fe54:	353a3731 	.word	0x353a3731
    fe58:	34303a38 	.word	0x34303a38
    fe5c:	00000000 	.word	0x00000000
    fe60:	20626546 	.word	0x20626546
    fe64:	32203531 	.word	0x32203531
    fe68:	00393130 	.word	0x00393130
    fe6c:	706d6f43 	.word	0x706d6f43
    fe70:	64656c69 	.word	0x64656c69
    fe74:	206e6f20 	.word	0x206e6f20
    fe78:	202c7325 	.word	0x202c7325
    fe7c:	0a0a7325 	.word	0x0a0a7325
    fe80:	00000000 	.word	0x00000000
    fe84:	72617053 	.word	0x72617053
    fe88:	6e75466b 	.word	0x6e75466b
    fe8c:	6e655420 	.word	0x6e655420
    fe90:	66726f73 	.word	0x66726f73
    fe94:	20776f6c 	.word	0x20776f6c
    fe98:	75626544 	.word	0x75626544
    fe9c:	754f2067 	.word	0x754f2067
    fea0:	74757074 	.word	0x74757074
    fea4:	41552820 	.word	0x41552820
    fea8:	0d295452 	.word	0x0d295452
    feac:	0000000a 	.word	0x0000000a
    feb0:	6c6c6548 	.word	0x6c6c6548
    feb4:	55202c6f 	.word	0x55202c6f
    feb8:	21545241 	.word	0x21545241
    febc:	00000a0d 	.word	0x00000a0d
    fec0:	65636341 	.word	0x65636341
    fec4:	6f72656c 	.word	0x6f72656c
    fec8:	6574656d 	.word	0x6574656d
    fecc:	6e692072 	.word	0x6e692072
    fed0:	72207469 	.word	0x72207469
    fed4:	72757465 	.word	0x72757465
    fed8:	2064656e 	.word	0x2064656e
    fedc:	0d783825 	.word	0x0d783825
    fee0:	0000000a 	.word	0x0000000a
    fee4:	20636341 	.word	0x20636341
    fee8:	5d676d5b 	.word	0x5d676d5b
    feec:	34302520 	.word	0x34302520
    fef0:	2066322e 	.word	0x2066322e
    fef4:	25202c78 	.word	0x25202c78
    fef8:	322e3430 	.word	0x322e3430
    fefc:	2c792066 	.word	0x2c792066
    ff00:	34302520 	.word	0x34302520
    ff04:	2066322e 	.word	0x2066322e
    ff08:	54202c7a 	.word	0x54202c7a
    ff0c:	20706d65 	.word	0x20706d65
    ff10:	6765645b 	.word	0x6765645b
    ff14:	205d4320 	.word	0x205d4320
    ff18:	2e343025 	.word	0x2e343025
    ff1c:	202c6632 	.word	0x202c6632
    ff20:	3043494d 	.word	0x3043494d
    ff24:	6f635b20 	.word	0x6f635b20
    ff28:	73746e75 	.word	0x73746e75
    ff2c:	32202f20 	.word	0x32202f20
    ff30:	5d34315e 	.word	0x5d34315e
    ff34:	0d642520 	.word	0x0d642520
    ff38:	0000000a 	.word	0x0000000a
    ff3c:	0a0a0a0a 	.word	0x0a0a0a0a
    ff40:	0a0a0a0a 	.word	0x0a0a0a0a
    ff44:	0a0a0a0a 	.word	0x0a0a0a0a
    ff48:	0a0a0a0a 	.word	0x0a0a0a0a
    ff4c:	00000a0a 	.word	0x00000a0a
    ff50:	6f727245 	.word	0x6f727245
    ff54:	65722072 	.word	0x65722072
    ff58:	6e696461 	.word	0x6e696461
    ff5c:	44412067 	.word	0x44412067
    ff60:	6e692043 	.word	0x6e692043
    ff64:	72726574 	.word	0x72726574
    ff68:	20747075 	.word	0x20747075
    ff6c:	74617473 	.word	0x74617473
    ff70:	000a7375 	.word	0x000a7375
    ff74:	6f727245 	.word	0x6f727245
    ff78:	6c632072 	.word	0x6c632072
    ff7c:	69726165 	.word	0x69726165
    ff80:	4120676e 	.word	0x4120676e
    ff84:	69204344 	.word	0x69204344
    ff88:	7265746e 	.word	0x7265746e
    ff8c:	74707572 	.word	0x74707572
    ff90:	61747320 	.word	0x61747320
    ff94:	0a737574 	.word	0x0a737574
    ff98:	00000000 	.word	0x00000000
    ff9c:	6f727245 	.word	0x6f727245
    ffa0:	202d2072 	.word	0x202d2072
    ffa4:	20434441 	.word	0x20434441
    ffa8:	706d6173 	.word	0x706d6173
    ffac:	7220656c 	.word	0x7220656c
    ffb0:	20646165 	.word	0x20646165
    ffb4:	6d6f7266 	.word	0x6d6f7266
    ffb8:	46494620 	.word	0x46494620
    ffbc:	6166204f 	.word	0x6166204f
    ffc0:	64656c69 	.word	0x64656c69
    ffc4:	00000a2e 	.word	0x00000a2e
    ffc8:	6f727245 	.word	0x6f727245
    ffcc:	202d2072 	.word	0x202d2072
    ffd0:	61736964 	.word	0x61736964
    ffd4:	20656c62 	.word	0x20656c62
    ffd8:	20434441 	.word	0x20434441
    ffdc:	6c696166 	.word	0x6c696166
    ffe0:	0a2e6465 	.word	0x0a2e6465
    ffe4:	00000000 	.word	0x00000000
    ffe8:	6f727245 	.word	0x6f727245
    ffec:	202d2072 	.word	0x202d2072
    fff0:	61736964 	.word	0x61736964
    fff4:	6e696c62 	.word	0x6e696c62
    fff8:	68742067 	.word	0x68742067
    fffc:	44412065 	.word	0x44412065
   10000:	6f702043 	.word	0x6f702043
   10004:	20726577 	.word	0x20726577
   10008:	616d6f64 	.word	0x616d6f64
   1000c:	66206e69 	.word	0x66206e69
   10010:	656c6961 	.word	0x656c6961
   10014:	000a2e64 	.word	0x000a2e64
   10018:	6f727245 	.word	0x6f727245
   1001c:	202d2072 	.word	0x202d2072
   10020:	75746572 	.word	0x75746572
   10024:	6f206e72 	.word	0x6f206e72
   10028:	68742066 	.word	0x68742066
   1002c:	44412065 	.word	0x44412065
   10030:	6e692043 	.word	0x6e692043
   10034:	6e617473 	.word	0x6e617473
   10038:	66206563 	.word	0x66206563
   1003c:	656c6961 	.word	0x656c6961
   10040:	000a2e64 	.word	0x000a2e64
   10044:	6f727245 	.word	0x6f727245
   10048:	202d2072 	.word	0x202d2072
   1004c:	65736572 	.word	0x65736572
   10050:	74617672 	.word	0x74617672
   10054:	206e6f69 	.word	0x206e6f69
   10058:	7420666f 	.word	0x7420666f
   1005c:	41206568 	.word	0x41206568
   10060:	69204344 	.word	0x69204344
   10064:	6174736e 	.word	0x6174736e
   10068:	2065636e 	.word	0x2065636e
   1006c:	6c696166 	.word	0x6c696166
   10070:	0a2e6465 	.word	0x0a2e6465
   10074:	00000000 	.word	0x00000000
   10078:	6f727245 	.word	0x6f727245
   1007c:	202d2072 	.word	0x202d2072
   10080:	20434441 	.word	0x20434441
   10084:	65776f70 	.word	0x65776f70
   10088:	6e6f2072 	.word	0x6e6f2072
   1008c:	69616620 	.word	0x69616620
   10090:	2e64656c 	.word	0x2e64656c
   10094:	0000000a 	.word	0x0000000a
   10098:	6f727245 	.word	0x6f727245
   1009c:	202d2072 	.word	0x202d2072
   100a0:	666e6f63 	.word	0x666e6f63
   100a4:	72756769 	.word	0x72756769
   100a8:	20676e69 	.word	0x20676e69
   100ac:	20434441 	.word	0x20434441
   100b0:	6c696166 	.word	0x6c696166
   100b4:	0a2e6465 	.word	0x0a2e6465
   100b8:	00000000 	.word	0x00000000
   100bc:	6f727245 	.word	0x6f727245
   100c0:	202d2072 	.word	0x202d2072
   100c4:	666e6f63 	.word	0x666e6f63
   100c8:	72756769 	.word	0x72756769
   100cc:	20676e69 	.word	0x20676e69
   100d0:	20434441 	.word	0x20434441
   100d4:	746f6c53 	.word	0x746f6c53
   100d8:	66203020 	.word	0x66203020
   100dc:	656c6961 	.word	0x656c6961
   100e0:	000a2e64 	.word	0x000a2e64
   100e4:	6f727245 	.word	0x6f727245
   100e8:	202d2072 	.word	0x202d2072
   100ec:	62616e65 	.word	0x62616e65
   100f0:	676e696c 	.word	0x676e696c
   100f4:	43444120 	.word	0x43444120
   100f8:	69616620 	.word	0x69616620
   100fc:	2e64656c 	.word	0x2e64656c
   10100:	0000000a 	.word	0x0000000a

00010104 <g_AM_PIN_11_ADCSE2>:
   10104:	00000000 616f6857 2820696d 756f6873     ....Whoami (shou
   10114:	6220646c 78302065 3a293333 25783020     ld be 0x33): 0x%
   10124:	000a7832 52206f4e 75622058 72656666     2x..No RX buffer
   10134:	6f727020 65646976 00000a64 646e6553      provided...Send
   10144:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   10154:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   10164:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   10174:	65646976 00000a64 646e6553 72726520     vided...Send err
   10184:	68702820 20657361 203a2931 000a6425      (phase 1): %d..

00010194 <g_sBspUartConfig>:
   10194:	0001c200 00000060 00000000 00000000     ....`...........
   101a4:	00000000 00000012 00000000 00000000     ................
	...

000101bc <g_AM_BSP_GPIO_COM_UART_RX>:
   101bc:	00000000                                ....

000101c0 <g_AM_BSP_GPIO_COM_UART_TX>:
   101c0:	00000000                                ....

000101c4 <g_AM_BSP_GPIO_IOM4_SCL>:
   101c4:	00040b44                                D...

000101c8 <g_AM_BSP_GPIO_IOM4_SDA>:
   101c8:	00040b44                                D...

000101cc <am_hal_cachectrl_defaults>:
   101cc:	00000308                                ....

000101d0 <g_AM_HAL_GPIO_INPUT>:
   101d0:	00001003                                ....

000101d4 <g_ui8Bit76Capabilities>:
   101d4:	02800101 80010180 80800101 80808080     ................
   101e4:	80808080 80808008 01800180 80808080     ................
   101f4:	80808080 01800402 01010401 80808080     ................
   10204:	00000101                                ....

00010208 <g_ui8NCEtable>:
   10208:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10218:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10228:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10238:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10248:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10258:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10268:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10278:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10288:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10298:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   102a8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   102b8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   102c8:	32221202 43231303                       .."2..#C

000102d0 <g_ui8Inpen>:
   102d0:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   102e0:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   102f0:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   10300:	00003130                                01..

00010304 <g_AM_HAL_GPIO_DISABLE>:
   10304:	00000003                                ....

00010308 <g_AM_HAL_GPIO_OUTPUT>:
   10308:	00000403                                ....

0001030c <g_ui8nCEpins>:
   1030c:	02070707 00080802 01020202 01010101     ................
   1031c:	01010101 01010101 01010101 01010101     ................
   1032c:	01010101 08010101 01010008 01010101     ................
   1033c:	00000101                                ....

00010340 <g_AM_HAL_GPIO_OUTPUT_12>:
   10340:	00000703                                ....

00010344 <g_am_hal_mcuctrl_flash_size>:
   10344:	00004000 00008000 00010000 00020000     .@..............
   10354:	00040000 00080000 00100000 00200000     .............. .
	...

00010384 <g_am_hal_mcuctrl_sram_size>:
   10384:	00004000 00008000 00010000 00020000     .@..............
   10394:	00040000 00080000 00100000 00060000     ................
	...

000103c4 <am_hal_pwrctrl_peripheral_control>:
	...
   103d0:	00000001 00000004 00000004 00000002     ................
   103e0:	00000008 00000008 00000004 00000008     ................
   103f0:	00000008 00000008 00000008 00000008     ................
   10400:	00000010 00000010 00000010 00000020     ............ ...
   10410:	00000010 00000010 00000040 00000010     ........@.......
   10420:	00000010 00000080 00000004 00000004     ................
   10430:	00000100 00000004 00000004 00000200     ................
   10440:	00000020 00000020 00000400 00000004      ... ...........
   10450:	00000004 00000800 00000040 00000040     ........@...@...
   10460:	00001000 00000080 00000080 00002000     ............. ..
   10470:	00000100 00000100                       ........

00010478 <gAmHalCmdQReg>:
   10478:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10488:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10498:	00000004 00000002 50005294 50005298     .........R.P.R.P
   104a8:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   104b8:	5000529c 00000001 00000004 00000002     .R.P............
   104c8:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   104d8:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   104e8:	00000004 00000002 50007294 50007298     .........r.P.r.P
   104f8:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10508:	5000729c 00000001 00000004 00000002     .r.P............
   10518:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10528:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10538:	00000004 00000002 50009294 50009298     ...........P...P
   10548:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10558:	5000929c 00000001 00000004 00000002     ...P............
   10568:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10578:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10588:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10598:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   105a8:	5000c250 00000001 00000004 00000002     P..P............
