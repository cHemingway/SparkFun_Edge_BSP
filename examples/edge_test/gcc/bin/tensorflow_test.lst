
bin/tensorflow_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 01 d3 00 00 f9 d2 00 00 9d c6 00 00     ................
    c010:	9d c6 00 00 9d c6 00 00 9d c6 00 00 00 00 00 00     ................
	...
    c02c:	fd d2 00 00 fd d2 00 00 00 00 00 00 fd d2 00 00     ................
    c03c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c04c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c05c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c06c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 69 d3 00 00     ............i...
    c07c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 25 d4 00 00     ............%...
    c08c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c09c:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c0ac:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c0bc:	fd d2 00 00 fd d2 00 00 fd d2 00 00 fd d2 00 00     ................
    c0cc:	fd d2 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23e:	f1a4 0401 	sub.w	r4, r4, #1
    c242:	d1e9      	bne.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c51c:	ed2d 8b02 	vpush	{d8}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c520:	2100      	movs	r1, #0
{
    c522:	b08b      	sub	sp, #44	; 0x2c
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c524:	4608      	mov	r0, r1
    c526:	f001 fcb5 	bl	de94 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c52a:	484b      	ldr	r0, [pc, #300]	; (c658 <main+0x140>)
    c52c:	4c4b      	ldr	r4, [pc, #300]	; (c65c <main+0x144>)
    c52e:	4d4c      	ldr	r5, [pc, #304]	; (c660 <main+0x148>)
    c530:	f8df b164 	ldr.w	fp, [pc, #356]	; c698 <main+0x180>
                    acceleration_mg[0], acceleration_mg[1], acceleration_mg[2], ((float)audioSample/16));
    c534:	ed9f 8a4b 	vldr	s16, [pc, #300]	; c664 <main+0x14c>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c538:	4e4b      	ldr	r6, [pc, #300]	; (c668 <main+0x150>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c53a:	f001 fc77 	bl	de2c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c53e:	f001 fc9f 	bl	de80 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c542:	f001 fa29 	bl	d998 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c546:	f001 fa59 	bl	d9fc <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c54a:	4b48      	ldr	r3, [pc, #288]	; (c66c <main+0x154>)
    c54c:	681f      	ldr	r7, [r3, #0]
    c54e:	202e      	movs	r0, #46	; 0x2e
    c550:	4639      	mov	r1, r7
    c552:	f001 fe1f 	bl	e194 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c556:	4639      	mov	r1, r7
    c558:	2025      	movs	r0, #37	; 0x25
    c55a:	f001 fe1b 	bl	e194 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c55e:	4639      	mov	r1, r7
    c560:	202c      	movs	r0, #44	; 0x2c
    c562:	f001 fe17 	bl	e194 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c566:	4639      	mov	r1, r7
    c568:	202f      	movs	r0, #47	; 0x2f
    c56a:	f001 fe13 	bl	e194 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c56e:	4b40      	ldr	r3, [pc, #256]	; (c670 <main+0x158>)
    c570:	200e      	movs	r0, #14
    c572:	6819      	ldr	r1, [r3, #0]
    c574:	f001 fe0e 	bl	e194 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c578:	4b3e      	ldr	r3, [pc, #248]	; (c674 <main+0x15c>)
    c57a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c57e:	2220      	movs	r2, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c580:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c582:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c58c:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c58e:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c590:	f000 feac 	bl	d2ec <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c594:	4838      	ldr	r0, [pc, #224]	; (c678 <main+0x160>)
    c596:	f000 fe8d 	bl	d2b4 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c59a:	4a38      	ldr	r2, [pc, #224]	; (c67c <main+0x164>)
    c59c:	4938      	ldr	r1, [pc, #224]	; (c680 <main+0x168>)
    c59e:	4839      	ldr	r0, [pc, #228]	; (c684 <main+0x16c>)
    c5a0:	f000 fe88 	bl	d2b4 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (SWO)\r\n");
    c5a4:	4838      	ldr	r0, [pc, #224]	; (c688 <main+0x170>)
    c5a6:	f000 fe85 	bl	d2b4 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c5aa:	4838      	ldr	r0, [pc, #224]	; (c68c <main+0x174>)
    c5ac:	f001 f9d0 	bl	d950 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c5b0:	f001 f882 	bl	d6b8 <initAccelerometer>
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c5b4:	4601      	mov	r1, r0
    c5b6:	4836      	ldr	r0, [pc, #216]	; (c690 <main+0x178>)
    c5b8:	f000 fe7c 	bl	d2b4 <am_util_stdio_printf>
    return 0;
}

static int testADC(void)
{
    initADC();
    c5bc:	f000 ff96 	bl	d4ec <initADC>
    enableAdcInterrupts();
    c5c0:	f000 ffb4 	bl	d52c <enableAdcInterrupts>
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5c4:	46a2      	mov	sl, r4
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5c6:	a909      	add	r1, sp, #36	; 0x24
    c5c8:	4630      	mov	r0, r6
    c5ca:	f001 f99d 	bl	d908 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c5ce:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5d2:	4651      	mov	r1, sl
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5d4:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5d6:	4630      	mov	r0, r6
        if (reg.byte)
    c5d8:	2a00      	cmp	r2, #0
    c5da:	d0f4      	beq.n	c5c6 <main+0xae>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5dc:	6023      	str	r3, [r4, #0]
    c5de:	80a3      	strh	r3, [r4, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5e0:	f001 f9a2 	bl	d928 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c5e4:	f9b4 0000 	ldrsh.w	r0, [r4]
    c5e8:	f001 f8d4 	bl	d794 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c5ec:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
            acceleration_mg[0] =
    c5f0:	ed85 0a00 	vstr	s0, [r5]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c5f4:	f001 f8ce 	bl	d794 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c5f8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
            acceleration_mg[1] =
    c5fc:	ed85 0a01 	vstr	s0, [r5, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c600:	f001 f8c8 	bl	d794 <lis2dh12_from_fs2_hr_to_mg>
                    acceleration_mg[0], acceleration_mg[1], acceleration_mg[2], ((float)audioSample/16));
    c604:	f8db 7000 	ldr.w	r7, [fp]
            acceleration_mg[2] =
    c608:	ed85 0a02 	vstr	s0, [r5, #8]
            am_util_stdio_printf("%04.2f, %04.2f, %04.2f, %04.2f\r\n",
    c60c:	6828      	ldr	r0, [r5, #0]
            acceleration_mg[2] =
    c60e:	ed8d 0a07 	vstr	s0, [sp, #28]
            am_util_stdio_printf("%04.2f, %04.2f, %04.2f, %04.2f\r\n",
    c612:	f7ff fed9 	bl	c3c8 <__aeabi_f2d>
                    acceleration_mg[0], acceleration_mg[1], acceleration_mg[2], ((float)audioSample/16));
    c616:	ee07 7a90 	vmov	s15, r7
    c61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
            am_util_stdio_printf("%04.2f, %04.2f, %04.2f, %04.2f\r\n",
    c61e:	4680      	mov	r8, r0
    c620:	ee67 7a88 	vmul.f32	s15, s15, s16
    c624:	4689      	mov	r9, r1
    c626:	ee17 0a90 	vmov	r0, s15
    c62a:	f7ff fecd 	bl	c3c8 <__aeabi_f2d>
    c62e:	ed9d 0a07 	vldr	s0, [sp, #28]
    c632:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c636:	ee10 0a10 	vmov	r0, s0
    c63a:	f7ff fec5 	bl	c3c8 <__aeabi_f2d>
    c63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c642:	6868      	ldr	r0, [r5, #4]
    c644:	f7ff fec0 	bl	c3c8 <__aeabi_f2d>
    c648:	4642      	mov	r2, r8
    c64a:	e9cd 0100 	strd	r0, r1, [sp]
    c64e:	464b      	mov	r3, r9
    c650:	4810      	ldr	r0, [pc, #64]	; (c694 <main+0x17c>)
    c652:	f000 fe2f 	bl	d2b4 <am_util_stdio_printf>
    {
    c656:	e7b6      	b.n	c5c6 <main+0xae>
    c658:	0000ff30 	.word	0x0000ff30
    c65c:	100012d8 	.word	0x100012d8
    c660:	100012e0 	.word	0x100012e0
    c664:	3d800000 	.word	0x3d800000
    c668:	100012f0 	.word	0x100012f0
    c66c:	000100a4 	.word	0x000100a4
    c670:	0000ff34 	.word	0x0000ff34
    c674:	40010094 	.word	0x40010094
    c678:	0000fbd0 	.word	0x0000fbd0
    c67c:	0000fbec 	.word	0x0000fbec
    c680:	0000fbf8 	.word	0x0000fbf8
    c684:	0000fc04 	.word	0x0000fc04
    c688:	0000fc1c 	.word	0x0000fc1c
    c68c:	0000fc48 	.word	0x0000fc48
    c690:	0000fc58 	.word	0x0000fc58
    c694:	0000fc7c 	.word	0x0000fc7c
    c698:	10001160 	.word	0x10001160

0000c69c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c69c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c69e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6a2:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6a4:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c6a8:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c6ac:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c6b0:	f000 f806 	bl	c6c0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c6b4:	bd01      	pop	{r0, pc}
    c6b6:	bf00      	nop

0000c6b8 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c6b8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c6ba:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c6bc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c6be:	4770      	bx	lr

0000c6c0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c6c0:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c6c2:	2300      	movs	r3, #0
{
    c6c4:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c6c6:	e9cd 3300 	strd	r3, r3, [sp]
    c6ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c6ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c6d2:	4a27      	ldr	r2, [pc, #156]	; (c770 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c6d4:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c6d6:	6813      	ldr	r3, [r2, #0]
    c6d8:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c6da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c6e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c6e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c6e8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c6ee:	0c1b      	lsrs	r3, r3, #16
    c6f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c6f4:	6913      	ldr	r3, [r2, #16]
    c6f6:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c6f8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c6fc:	0792      	lsls	r2, r2, #30
{
    c6fe:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c700:	d430      	bmi.n	c764 <am_util_faultisr_collect_data+0xa4>
    c702:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c706:	4619      	mov	r1, r3
    c708:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c70a:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c70c:	f7ff ffd4 	bl	c6b8 <getStackedReg>
    c710:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c712:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c714:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c716:	f7ff ffcf 	bl	c6b8 <getStackedReg>
    c71a:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c71c:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c71e:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c720:	f7ff ffca 	bl	c6b8 <getStackedReg>
    c724:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c726:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c728:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c72a:	f7ff ffc5 	bl	c6b8 <getStackedReg>
    c72e:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c730:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c732:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c734:	f7ff ffc0 	bl	c6b8 <getStackedReg>
    c738:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c73a:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c73c:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c73e:	f7ff ffbb 	bl	c6b8 <getStackedReg>
    c742:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c744:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c746:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c748:	f7ff ffb6 	bl	c6b8 <getStackedReg>
    c74c:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c74e:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c750:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c752:	f7ff ffb1 	bl	c6b8 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c756:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c758:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c75a:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c75c:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c75e:	f002 fc0b 	bl	ef78 <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c762:	e7fe      	b.n	c762 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c764:	4601      	mov	r1, r0
    c766:	2006      	movs	r0, #6
    c768:	f7ff ffa6 	bl	c6b8 <getStackedReg>
    c76c:	4602      	mov	r2, r0
    c76e:	e7ca      	b.n	c706 <am_util_faultisr_collect_data+0x46>
    c770:	e000ed28 	.word	0xe000ed28

0000c774 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c774:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c776:	460d      	mov	r5, r1
    c778:	2600      	movs	r6, #0
    c77a:	ea55 0306 	orrs.w	r3, r5, r6
    c77e:	d046      	beq.n	c80e <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c780:	0842      	lsrs	r2, r0, #1
    c782:	0883      	lsrs	r3, r0, #2
    c784:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c788:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c78c:	18d2      	adds	r2, r2, r3
    c78e:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c792:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c796:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c79a:	0914      	lsrs	r4, r2, #4
    c79c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c7a0:	1912      	adds	r2, r2, r4
    c7a2:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c7a6:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c7aa:	0a14      	lsrs	r4, r2, #8
    c7ac:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c7b0:	1912      	adds	r2, r2, r4
    c7b2:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c7b6:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c7ba:	0c14      	lsrs	r4, r2, #16
    c7bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7c0:	1912      	adds	r2, r2, r4
    c7c2:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c7c6:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c7ca:	18d2      	adds	r2, r2, r3
    c7cc:	4634      	mov	r4, r6
    c7ce:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c7d2:	08d3      	lsrs	r3, r2, #3
    c7d4:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c7d8:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c7da:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c7dc:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c7e0:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c7e4:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c7e6:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c7ea:	18e4      	adds	r4, r4, r3
    c7ec:	eb42 0505 	adc.w	r5, r2, r5
    c7f0:	1924      	adds	r4, r4, r4
    c7f2:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c7f4:	1b00      	subs	r0, r0, r4
    c7f6:	eb61 0105 	sbc.w	r1, r1, r5
    c7fa:	0900      	lsrs	r0, r0, #4
    c7fc:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c800:	18c0      	adds	r0, r0, r3
    c802:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c806:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c80a:	bc70      	pop	{r4, r5, r6}
    c80c:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c80e:	0883      	lsrs	r3, r0, #2
    c810:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c814:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c818:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c81c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c820:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c822:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c824:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c828:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c82c:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c830:	2100      	movs	r1, #0
}
    c832:	bc70      	pop	{r4, r5, r6}
    c834:	4770      	bx	lr
    c836:	bf00      	nop

0000c838 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c83c:	b08b      	sub	sp, #44	; 0x2c
    c83e:	f10d 080c 	add.w	r8, sp, #12
    c842:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c844:	f04f 0b00 	mov.w	fp, #0
    c848:	e049      	b.n	c8de <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c84a:	eb12 020e 	adds.w	r2, r2, lr
    c84e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c852:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c856:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c85a:	eb12 020e 	adds.w	r2, r2, lr
    c85e:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c862:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c866:	0a13      	lsrs	r3, r2, #8
    c868:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c86c:	18d2      	adds	r2, r2, r3
    c86e:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c872:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c876:	0c13      	lsrs	r3, r2, #16
    c878:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c87c:	18d2      	adds	r2, r2, r3
    c87e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c882:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c886:	1912      	adds	r2, r2, r4
    c888:	463b      	mov	r3, r7
    c88a:	eb44 0303 	adc.w	r3, r4, r3
    c88e:	461c      	mov	r4, r3
        q64 >>= 3;
    c890:	08d3      	lsrs	r3, r2, #3
    c892:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c896:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c898:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c89a:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c89e:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c8a2:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c8a4:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c8a8:	18e4      	adds	r4, r4, r3
    c8aa:	eb42 0505 	adc.w	r5, r2, r5
    c8ae:	1924      	adds	r4, r4, r4
    c8b0:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c8b2:	1b00      	subs	r0, r0, r4
    c8b4:	eb61 0105 	sbc.w	r1, r1, r5
    c8b8:	0900      	lsrs	r0, r0, #4
    c8ba:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c8be:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c8c0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c8c4:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c8c8:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c8cc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c8d0:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c8d4:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c8d8:	f108 0801 	add.w	r8, r8, #1
{
    c8dc:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c8de:	0883      	lsrs	r3, r0, #2
    c8e0:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c8e4:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c8e8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c8ec:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c8f0:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c8f2:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c8f6:	1d83      	adds	r3, r0, #6
    c8f8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c8fc:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c900:	2700      	movs	r7, #0
    c902:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c904:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c908:	0842      	lsrs	r2, r0, #1
    c90a:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c90e:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c912:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c914:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c918:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c91c:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c920:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c924:	9700      	str	r7, [sp, #0]
    c926:	f10b 0901 	add.w	r9, fp, #1
    c92a:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c92c:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c930:	d18b      	bne.n	c84a <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c932:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c936:	4618      	mov	r0, r3
    c938:	2100      	movs	r1, #0
    } while ( ui64Val );
    c93a:	2b00      	cmp	r3, #0
    c93c:	d1cc      	bne.n	c8d8 <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c93e:	9a01      	ldr	r2, [sp, #4]
    c940:	b172      	cbz	r2, c960 <uint64_to_str+0x128>
    c942:	ab03      	add	r3, sp, #12
    c944:	444b      	add	r3, r9
    c946:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c948:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c94c:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c950:	a903      	add	r1, sp, #12
    c952:	4299      	cmp	r1, r3
    c954:	d1f8      	bne.n	c948 <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c956:	9b01      	ldr	r3, [sp, #4]
    c958:	445b      	add	r3, fp
    c95a:	461a      	mov	r2, r3
    c95c:	2300      	movs	r3, #0
    c95e:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c960:	4648      	mov	r0, r9
    c962:	b00b      	add	sp, #44	; 0x2c
    c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c968 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c968:	4b01      	ldr	r3, [pc, #4]	; (c970 <am_util_stdio_printf_init+0x8>)
    c96a:	6018      	str	r0, [r3, #0]
}
    c96c:	4770      	bx	lr
    c96e:	bf00      	nop
    c970:	100012ec 	.word	0x100012ec

0000c974 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c978:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c97a:	780b      	ldrb	r3, [r1, #0]
{
    c97c:	9200      	str	r2, [sp, #0]
    c97e:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c980:	2b00      	cmp	r3, #0
    c982:	f000 8355 	beq.w	d030 <am_util_stdio_vsprintf+0x6bc>
    c986:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c988:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c98c:	2b25      	cmp	r3, #37	; 0x25
    c98e:	f10a 0701 	add.w	r7, sl, #1
    c992:	d018      	beq.n	c9c6 <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c994:	f10b 0201 	add.w	r2, fp, #1
    c998:	2c00      	cmp	r4, #0
    c99a:	f000 8092 	beq.w	cac2 <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c99e:	2b0a      	cmp	r3, #10
    c9a0:	f104 0101 	add.w	r1, r4, #1
    c9a4:	f000 808f 	beq.w	cac6 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c9a8:	7023      	strb	r3, [r4, #0]
    c9aa:	4693      	mov	fp, r2
    c9ac:	460c      	mov	r4, r1
            }

            ++pcFmt;
    c9ae:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    c9b0:	f89a 3000 	ldrb.w	r3, [sl]
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d1e9      	bne.n	c98c <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c9b8:	b10c      	cbz	r4, c9be <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    c9ba:	2300      	movs	r3, #0
    c9bc:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    c9be:	4658      	mov	r0, fp
    c9c0:	b009      	add	sp, #36	; 0x24
    c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c9c6:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c9ca:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    c9cc:	bf03      	ittte	eq
    c9ce:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    c9d2:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    c9d6:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    c9d8:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    c9da:	2a2d      	cmp	r2, #45	; 0x2d
    c9dc:	f000 8083 	beq.w	cae6 <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c9e4:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9e6:	2909      	cmp	r1, #9
    bool bNeg = false;
    c9e8:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    c9ea:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9ec:	f200 8085 	bhi.w	cafa <am_util_stdio_vsprintf+0x186>
    c9f0:	3501      	adds	r5, #1
    c9f2:	1aed      	subs	r5, r5, r3
    c9f4:	2100      	movs	r1, #0
        ui32Val *= 10;
    c9f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c9fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c9fe:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca02:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ca06:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ca0a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    ca0c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca10:	d9f1      	bls.n	c9f6 <am_util_stdio_vsprintf+0x82>
    ca12:	f817 200e 	ldrb.w	r2, [r7, lr]
    ca16:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    ca1a:	f1bc 0f00 	cmp.w	ip, #0
    ca1e:	d000      	beq.n	ca22 <am_util_stdio_vsprintf+0xae>
    ca20:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca22:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ca24:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca26:	f103 0a01 	add.w	sl, r3, #1
    ca2a:	f000 81ca 	beq.w	cdc2 <am_util_stdio_vsprintf+0x44e>
    ca2e:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    ca32:	2a2e      	cmp	r2, #46	; 0x2e
    ca34:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    ca38:	f000 815c 	beq.w	ccf4 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    ca3c:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    ca3e:	2a6c      	cmp	r2, #108	; 0x6c
    ca40:	d105      	bne.n	ca4e <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ca42:	785a      	ldrb	r2, [r3, #1]
    ca44:	2a6c      	cmp	r2, #108	; 0x6c
    ca46:	f000 820a 	beq.w	ce5e <am_util_stdio_vsprintf+0x4ea>
    ca4a:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    ca4e:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    ca52:	2b32      	cmp	r3, #50	; 0x32
    ca54:	f200 8141 	bhi.w	ccda <am_util_stdio_vsprintf+0x366>
    ca58:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca5c:	013f005b 	.word	0x013f005b
    ca60:	013f013f 	.word	0x013f013f
    ca64:	013f013f 	.word	0x013f013f
    ca68:	013f013f 	.word	0x013f013f
    ca6c:	013f013f 	.word	0x013f013f
    ca70:	013f013f 	.word	0x013f013f
    ca74:	013f013f 	.word	0x013f013f
    ca78:	013f013f 	.word	0x013f013f
    ca7c:	013f013f 	.word	0x013f013f
    ca80:	013f00d6 	.word	0x013f00d6
    ca84:	013f013f 	.word	0x013f013f
    ca88:	013f013f 	.word	0x013f013f
    ca8c:	013f013f 	.word	0x013f013f
    ca90:	013f013f 	.word	0x013f013f
    ca94:	0051013f 	.word	0x0051013f
    ca98:	013f00ed 	.word	0x013f00ed
    ca9c:	013f005b 	.word	0x013f005b
    caa0:	00ed013f 	.word	0x00ed013f
    caa4:	013f013f 	.word	0x013f013f
    caa8:	013f013f 	.word	0x013f013f
    caac:	013f013f 	.word	0x013f013f
    cab0:	013f013f 	.word	0x013f013f
    cab4:	01b3013f 	.word	0x01b3013f
    cab8:	00d9013f 	.word	0x00d9013f
    cabc:	013f013f 	.word	0x013f013f
    cac0:	00bc      	.short	0x00bc
    cac2:	4693      	mov	fp, r2
    cac4:	e773      	b.n	c9ae <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cac6:	48ce      	ldr	r0, [pc, #824]	; (ce00 <am_util_stdio_vsprintf+0x48c>)
    cac8:	7800      	ldrb	r0, [r0, #0]
    caca:	2800      	cmp	r0, #0
    cacc:	f43f af6c 	beq.w	c9a8 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    cad0:	4620      	mov	r0, r4
    cad2:	230d      	movs	r3, #13
    cad4:	f800 3b02 	strb.w	r3, [r0], #2
    cad8:	460c      	mov	r4, r1
    cada:	f89a 3000 	ldrb.w	r3, [sl]
    cade:	f10b 0202 	add.w	r2, fp, #2
    cae2:	4601      	mov	r1, r0
    cae4:	e760      	b.n	c9a8 <am_util_stdio_vsprintf+0x34>
        pcStr++;
    cae6:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cae8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    caec:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    caee:	2909      	cmp	r1, #9
        bNeg = true;
    caf0:	46ac      	mov	ip, r5
        pcStr++;
    caf2:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    caf6:	f67f af7b 	bls.w	c9f0 <am_util_stdio_vsprintf+0x7c>
    cafa:	2100      	movs	r1, #0
    cafc:	e78d      	b.n	ca1a <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cafe:	9a00      	ldr	r2, [sp, #0]
    cb00:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    cb02:	b114      	cbz	r4, cb0a <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb04:	6812      	ldr	r2, [r2, #0]
    cb06:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    cb0a:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb0e:	9300      	str	r3, [sp, #0]
                break;
    cb10:	e74e      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    cb12:	2c00      	cmp	r4, #0
    cb14:	f43f af4c 	beq.w	c9b0 <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    cb18:	9b00      	ldr	r3, [sp, #0]
    cb1a:	3307      	adds	r3, #7
    cb1c:	f023 0307 	bic.w	r3, r3, #7
    cb20:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    cb24:	9300      	str	r3, [sp, #0]
    cb26:	f7ff fca7 	bl	c478 <__aeabi_d2f>
    cb2a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cb2e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cb32:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cb38:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    cb3a:	f000 8372 	beq.w	d222 <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb3e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cb42:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    cb46:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    cb48:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb4a:	f3c0 0016 	ubfx	r0, r0, #0, #23
    cb4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    cb52:	f300 8387 	bgt.w	d264 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    cb56:	f112 0f17 	cmn.w	r2, #23
    cb5a:	f2c0 8381 	blt.w	d260 <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    cb5e:	2a16      	cmp	r2, #22
    cb60:	f104 0601 	add.w	r6, r4, #1
    cb64:	f340 82a1 	ble.w	d0aa <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    cb68:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cb6a:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cb6c:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cb70:	f2c0 82e6 	blt.w	d140 <am_util_stdio_vsprintf+0x7cc>
    cb74:	46a0      	mov	r8, r4
    i32FracPart = 0;
    cb76:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    cb78:	2800      	cmp	r0, #0
    cb7a:	f000 8350 	beq.w	d21e <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    cb7e:	f300 82a3 	bgt.w	d0c8 <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    cb82:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    cb84:	232d      	movs	r3, #45	; 0x2d
    cb86:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    cb8a:	4632      	mov	r2, r6
    cb8c:	17c1      	asrs	r1, r0, #31
    cb8e:	f7ff fe53 	bl	c838 <uint64_to_str>
            *pcBuf++ = '-';
    cb92:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    cb94:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    cb96:	f898 3000 	ldrb.w	r3, [r8]
    cb9a:	b90b      	cbnz	r3, cba0 <am_util_stdio_vsprintf+0x22c>
    cb9c:	e380      	b.n	d2a0 <am_util_stdio_vsprintf+0x92c>
    cb9e:	46b0      	mov	r8, r6
    cba0:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    cba4:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d1f8      	bne.n	cb9e <am_util_stdio_vsprintf+0x22a>
    cbac:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    cbb0:	232e      	movs	r3, #46	; 0x2e
    cbb2:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    cbb4:	2d00      	cmp	r5, #0
    cbb6:	f040 82e5 	bne.w	d184 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    cbba:	1cb1      	adds	r1, r6, #2
    cbbc:	2330      	movs	r3, #48	; 0x30
    cbbe:	1b08      	subs	r0, r1, r4
    cbc0:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    cbc2:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    cbc4:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    cbc6:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    cbc8:	f2c0 8310 	blt.w	d1ec <am_util_stdio_vsprintf+0x878>
    cbcc:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    cbce:	449b      	add	fp, r3
                    pcBuf += iVal;
    cbd0:	441c      	add	r4, r3
    cbd2:	e6ed      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    cbd4:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    cbd8:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbda:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    cbde:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbe0:	2300      	movs	r3, #0
                if ( iWidth )
    cbe2:	2900      	cmp	r1, #0
    cbe4:	f040 81d5 	bne.w	cf92 <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    cbe8:	ea52 0103 	orrs.w	r1, r2, r3
    cbec:	f040 80ac 	bne.w	cd48 <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    cbf0:	2c00      	cmp	r4, #0
    cbf2:	d07b      	beq.n	ccec <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    cbf4:	4623      	mov	r3, r4
    cbf6:	2230      	movs	r2, #48	; 0x30
    cbf8:	f803 2b01 	strb.w	r2, [r3], #1
    cbfc:	2001      	movs	r0, #1
    cbfe:	461c      	mov	r4, r3
        *pcBuf = 0;
    cc00:	2200      	movs	r2, #0
    cc02:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    cc04:	4483      	add	fp, r0
                break;
    cc06:	e6d3      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    cc08:	f04f 0900 	mov.w	r9, #0
    cc0c:	e7e4      	b.n	cbd8 <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    cc0e:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc10:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    cc14:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc16:	4690      	mov	r8, r2
    cc18:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    cc1c:	2900      	cmp	r1, #0
    cc1e:	f040 8213 	bne.w	d048 <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc22:	4640      	mov	r0, r8
    cc24:	4649      	mov	r1, r9
    cc26:	4622      	mov	r2, r4
    cc28:	f7ff fe06 	bl	c838 <uint64_to_str>
                if ( pcBuf )
    cc2c:	2c00      	cmp	r4, #0
    cc2e:	d05e      	beq.n	ccee <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    cc30:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    cc32:	4483      	add	fp, r0
                break;
    cc34:	e6bc      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    cc36:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc38:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    cc3c:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc3e:	4690      	mov	r8, r2
    cc40:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    cc44:	f1b8 0f00 	cmp.w	r8, #0
    cc48:	f179 0300 	sbcs.w	r3, r9, #0
    cc4c:	f2c0 8178 	blt.w	cf40 <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    cc50:	2900      	cmp	r1, #0
    cc52:	d039      	beq.n	ccc8 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    cc54:	ea58 0309 	orrs.w	r3, r8, r9
    cc58:	bf0c      	ite	eq
    cc5a:	2701      	moveq	r7, #1
    cc5c:	2700      	movne	r7, #0
    while ( ui64Val )
    cc5e:	ea58 0309 	orrs.w	r3, r8, r9
    cc62:	f000 8317 	beq.w	d294 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    cc66:	2300      	movs	r3, #0
    cc68:	9301      	str	r3, [sp, #4]
    cc6a:	4640      	mov	r0, r8
    cc6c:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    cc6e:	f7ff fd81 	bl	c774 <divu64_10>
    while ( ui64Val )
    cc72:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cc76:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    cc7a:	d1f8      	bne.n	cc6e <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    cc7c:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    cc7e:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    cc80:	b123      	cbz	r3, cc8c <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    cc82:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    cc84:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    cc88:	f000 8253 	beq.w	d132 <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    cc8c:	2d00      	cmp	r5, #0
    cc8e:	f340 82c4 	ble.w	d21a <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    cc92:	1e6b      	subs	r3, r5, #1
    cc94:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    cc96:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cc98:	463d      	mov	r5, r7
    cc9a:	1e58      	subs	r0, r3, #1
    cc9c:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    cc9e:	2f00      	cmp	r7, #0
    cca0:	f000 8168 	beq.w	cf74 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    cca4:	f805 6b01 	strb.w	r6, [r5], #1
    cca8:	4684      	mov	ip, r0
    ccaa:	462f      	mov	r7, r5
    ccac:	4618      	mov	r0, r3
    ccae:	460a      	mov	r2, r1
    ccb0:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    ccb2:	2800      	cmp	r0, #0
    ccb4:	d1f0      	bne.n	cc98 <am_util_stdio_vsprintf+0x324>
    ccb6:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    ccb8:	2c00      	cmp	r4, #0
    ccba:	f000 829f 	beq.w	d1fc <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ccbe:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    ccc0:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	f040 81b6 	bne.w	d034 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ccc8:	4640      	mov	r0, r8
    ccca:	4649      	mov	r1, r9
    cccc:	4622      	mov	r2, r4
    ccce:	f7ff fdb3 	bl	c838 <uint64_to_str>
                if ( pcBuf )
    ccd2:	2c00      	cmp	r4, #0
    ccd4:	d096      	beq.n	cc04 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    ccd6:	4404      	add	r4, r0
    ccd8:	e7ab      	b.n	cc32 <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    ccda:	b10c      	cbz	r4, cce0 <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    ccdc:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    cce0:	f10b 0b01 	add.w	fp, fp, #1
                break;
    cce4:	e664      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    cce6:	ea52 0103 	orrs.w	r1, r2, r3
    ccea:	d12d      	bne.n	cd48 <am_util_stdio_vsprintf+0x3d4>
    ccec:	2001      	movs	r0, #1
                if ( pcBuf )
    ccee:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    ccf0:	4483      	add	fp, r0
                break;
    ccf2:	e65d      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    ccf4:	785a      	ldrb	r2, [r3, #1]
    ccf6:	2a2d      	cmp	r2, #45	; 0x2d
    ccf8:	f000 818e 	beq.w	d018 <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cd00:	2b09      	cmp	r3, #9
    cd02:	f200 8298 	bhi.w	d236 <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    cd06:	2000      	movs	r0, #0
    bool bNeg = false;
    cd08:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd0a:	46d6      	mov	lr, sl
    cd0c:	4653      	mov	r3, sl
    cd0e:	3001      	adds	r0, #1
    cd10:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    cd14:	2700      	movs	r7, #0
        ui32Val *= 10;
    cd16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    cd1a:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    cd1e:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cd26:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cd2a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    cd2c:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd30:	d9f1      	bls.n	cd16 <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    cd32:	f1b8 0f00 	cmp.w	r8, #0
    cd36:	d000      	beq.n	cd3a <am_util_stdio_vsprintf+0x3c6>
    cd38:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    cd3a:	eb0a 030c 	add.w	r3, sl, ip
    cd3e:	f81a 200c 	ldrb.w	r2, [sl, ip]
    cd42:	f103 0a01 	add.w	sl, r3, #1
    cd46:	e67a      	b.n	ca3e <am_util_stdio_vsprintf+0xca>
    cd48:	f1b9 0f00 	cmp.w	r9, #0
    cd4c:	bf14      	ite	ne
    cd4e:	2627      	movne	r6, #39	; 0x27
    cd50:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    cd52:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    cd56:	2700      	movs	r7, #0
    cd58:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    cd5a:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    cd5c:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cd60:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    cd62:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    cd64:	ea4f 1913 	mov.w	r9, r3, lsr #4
    cd68:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    cd6c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    cd70:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    cd74:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    cd78:	d908      	bls.n	cd8c <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    cd7a:	462a      	mov	r2, r5
    cd7c:	464b      	mov	r3, r9
    while ( ui64Val )
    cd7e:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cd82:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    cd86:	d00a      	beq.n	cd9e <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    cd88:	4627      	mov	r7, r4
    cd8a:	e7e6      	b.n	cd5a <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    cd8c:	462a      	mov	r2, r5
    cd8e:	464b      	mov	r3, r9
    while ( ui64Val )
    cd90:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cd94:	f107 0401 	add.w	r4, r7, #1
    cd98:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    cd9c:	d1f4      	bne.n	cd88 <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    cd9e:	4626      	mov	r6, r4
    cda0:	9c01      	ldr	r4, [sp, #4]
    cda2:	4630      	mov	r0, r6
    cda4:	2c00      	cmp	r4, #0
    cda6:	d0a2      	beq.n	ccee <am_util_stdio_vsprintf+0x37a>
    cda8:	ab03      	add	r3, sp, #12
    cdaa:	4433      	add	r3, r6
    cdac:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    cdae:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cdb2:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cdb6:	a903      	add	r1, sp, #12
    cdb8:	428b      	cmp	r3, r1
    cdba:	d1f8      	bne.n	cdae <am_util_stdio_vsprintf+0x43a>
    cdbc:	4434      	add	r4, r6
    cdbe:	4623      	mov	r3, r4
    cdc0:	e71e      	b.n	cc00 <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    cdc2:	f8dd c000 	ldr.w	ip, [sp]
    cdc6:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    cdca:	2b00      	cmp	r3, #0
    cdcc:	f000 8181 	beq.w	d0d2 <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    cdd0:	4618      	mov	r0, r3
    cdd2:	f810 1b01 	ldrb.w	r1, [r0], #1
    cdd6:	2900      	cmp	r1, #0
    cdd8:	f000 8231 	beq.w	d23e <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    cddc:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    cdde:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    cde2:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    cde4:	2a00      	cmp	r2, #0
    cde6:	d1fa      	bne.n	cdde <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    cde8:	2d00      	cmp	r5, #0
    cdea:	dd02      	ble.n	cdf2 <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    cdec:	42bd      	cmp	r5, r7
    cdee:	f200 819c 	bhi.w	d12a <am_util_stdio_vsprintf+0x7b6>
    cdf2:	f1c3 0801 	rsb	r8, r3, #1
    cdf6:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    cdfa:	4622      	mov	r2, r4
    cdfc:	e003      	b.n	ce06 <am_util_stdio_vsprintf+0x492>
    cdfe:	bf00      	nop
    ce00:	1000105c 	.word	0x1000105c
                        *pcBuf++ = *pcStr;
    ce04:	4622      	mov	r2, r4
    ce06:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    ce0a:	2c00      	cmp	r4, #0
    ce0c:	f000 80b8 	beq.w	cf80 <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    ce10:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    ce12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    ce16:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    ce18:	2900      	cmp	r1, #0
    ce1a:	d1f3      	bne.n	ce04 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    ce1c:	46f3      	mov	fp, lr
                if ( iWidth )
    ce1e:	b1dd      	cbz	r5, ce58 <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    ce20:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    ce22:	42bd      	cmp	r5, r7
    ce24:	d918      	bls.n	ce58 <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    ce26:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    ce28:	2d00      	cmp	r5, #0
    ce2a:	f340 8217 	ble.w	d25c <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    ce2e:	1e6b      	subs	r3, r5, #1
    ce30:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    ce32:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    ce34:	463d      	mov	r5, r7
    ce36:	1c51      	adds	r1, r2, #1
    ce38:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    ce3a:	2f00      	cmp	r7, #0
    ce3c:	f000 80e3 	beq.w	d006 <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    ce40:	f805 6b01 	strb.w	r6, [r5], #1
    ce44:	4686      	mov	lr, r0
    ce46:	4618      	mov	r0, r3
    ce48:	462f      	mov	r7, r5
    ce4a:	460a      	mov	r2, r1
    ce4c:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    ce4e:	2800      	cmp	r0, #0
    ce50:	d1f0      	bne.n	ce34 <am_util_stdio_vsprintf+0x4c0>
    ce52:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    ce54:	b104      	cbz	r4, ce58 <am_util_stdio_vsprintf+0x4e4>
    ce56:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    ce58:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    ce5c:	e5a8      	b.n	c9b0 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    ce5e:	789a      	ldrb	r2, [r3, #2]
    ce60:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    ce64:	f103 0a03 	add.w	sl, r3, #3
    ce68:	2832      	cmp	r0, #50	; 0x32
    ce6a:	f63f af36 	bhi.w	ccda <am_util_stdio_vsprintf+0x366>
    ce6e:	a301      	add	r3, pc, #4	; (adr r3, ce74 <am_util_stdio_vsprintf+0x500>)
    ce70:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    ce74:	0000cb13 	.word	0x0000cb13
    ce78:	0000ccdb 	.word	0x0000ccdb
    ce7c:	0000ccdb 	.word	0x0000ccdb
    ce80:	0000ccdb 	.word	0x0000ccdb
    ce84:	0000ccdb 	.word	0x0000ccdb
    ce88:	0000ccdb 	.word	0x0000ccdb
    ce8c:	0000ccdb 	.word	0x0000ccdb
    ce90:	0000ccdb 	.word	0x0000ccdb
    ce94:	0000ccdb 	.word	0x0000ccdb
    ce98:	0000ccdb 	.word	0x0000ccdb
    ce9c:	0000ccdb 	.word	0x0000ccdb
    cea0:	0000ccdb 	.word	0x0000ccdb
    cea4:	0000ccdb 	.word	0x0000ccdb
    cea8:	0000ccdb 	.word	0x0000ccdb
    ceac:	0000ccdb 	.word	0x0000ccdb
    ceb0:	0000ccdb 	.word	0x0000ccdb
    ceb4:	0000ccdb 	.word	0x0000ccdb
    ceb8:	0000ccdb 	.word	0x0000ccdb
    cebc:	0000d125 	.word	0x0000d125
    cec0:	0000ccdb 	.word	0x0000ccdb
    cec4:	0000ccdb 	.word	0x0000ccdb
    cec8:	0000ccdb 	.word	0x0000ccdb
    cecc:	0000ccdb 	.word	0x0000ccdb
    ced0:	0000ccdb 	.word	0x0000ccdb
    ced4:	0000ccdb 	.word	0x0000ccdb
    ced8:	0000ccdb 	.word	0x0000ccdb
    cedc:	0000ccdb 	.word	0x0000ccdb
    cee0:	0000ccdb 	.word	0x0000ccdb
    cee4:	0000ccdb 	.word	0x0000ccdb
    cee8:	0000caff 	.word	0x0000caff
    ceec:	0000cf65 	.word	0x0000cf65
    cef0:	0000ccdb 	.word	0x0000ccdb
    cef4:	0000cb13 	.word	0x0000cb13
    cef8:	0000ccdb 	.word	0x0000ccdb
    cefc:	0000ccdb 	.word	0x0000ccdb
    cf00:	0000cf65 	.word	0x0000cf65
    cf04:	0000ccdb 	.word	0x0000ccdb
    cf08:	0000ccdb 	.word	0x0000ccdb
    cf0c:	0000ccdb 	.word	0x0000ccdb
    cf10:	0000ccdb 	.word	0x0000ccdb
    cf14:	0000ccdb 	.word	0x0000ccdb
    cf18:	0000ccdb 	.word	0x0000ccdb
    cf1c:	0000ccdb 	.word	0x0000ccdb
    cf20:	0000ccdb 	.word	0x0000ccdb
    cf24:	0000ccdb 	.word	0x0000ccdb
    cf28:	0000cdc3 	.word	0x0000cdc3
    cf2c:	0000ccdb 	.word	0x0000ccdb
    cf30:	0000cf55 	.word	0x0000cf55
    cf34:	0000ccdb 	.word	0x0000ccdb
    cf38:	0000ccdb 	.word	0x0000ccdb
    cf3c:	0000d10f 	.word	0x0000d10f
                    ui64Val = -i64Val;          // Get absolute value
    cf40:	f1d8 0800 	rsbs	r8, r8, #0
    cf44:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cf48:	2900      	cmp	r1, #0
    cf4a:	d076      	beq.n	d03a <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cf4c:	2301      	movs	r3, #1
    cf4e:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cf50:	2700      	movs	r7, #0
    cf52:	e68a      	b.n	cc6a <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf54:	9b00      	ldr	r3, [sp, #0]
    cf56:	3307      	adds	r3, #7
    cf58:	f023 0307 	bic.w	r3, r3, #7
    cf5c:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cf60:	9300      	str	r3, [sp, #0]
    cf62:	e65b      	b.n	cc1c <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf64:	9b00      	ldr	r3, [sp, #0]
    cf66:	3307      	adds	r3, #7
    cf68:	f023 0307 	bic.w	r3, r3, #7
    cf6c:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cf70:	9300      	str	r3, [sp, #0]
    cf72:	e667      	b.n	cc44 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cf74:	2b00      	cmp	r3, #0
    cf76:	f000 815b 	beq.w	d230 <am_util_stdio_vsprintf+0x8bc>
    cf7a:	3b02      	subs	r3, #2
    cf7c:	3202      	adds	r2, #2
    cf7e:	e698      	b.n	ccb2 <am_util_stdio_vsprintf+0x33e>
    cf80:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cf84:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cf86:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cf8a:	2900      	cmp	r1, #0
    cf8c:	d1fa      	bne.n	cf84 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cf8e:	4683      	mov	fp, r0
    cf90:	e745      	b.n	ce1e <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cf92:	ea52 0103 	orrs.w	r1, r2, r3
    cf96:	bf0c      	ite	eq
    cf98:	f04f 0c01 	moveq.w	ip, #1
    cf9c:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    cfa0:	ea52 0103 	orrs.w	r1, r2, r3
    cfa4:	d00d      	beq.n	cfc2 <am_util_stdio_vsprintf+0x64e>
    cfa6:	4610      	mov	r0, r2
    cfa8:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cfaa:	0907      	lsrs	r7, r0, #4
    cfac:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    cfb0:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cfb4:	4638      	mov	r0, r7
    cfb6:	4671      	mov	r1, lr
    while ( ui64Val )
    cfb8:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    cfbc:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    cfc0:	d1f3      	bne.n	cfaa <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    cfc2:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    cfc6:	2900      	cmp	r1, #0
    cfc8:	f340 8125 	ble.w	d216 <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    cfcc:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    cfce:	2000      	movs	r0, #0
    cfd0:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    cfd2:	46ac      	mov	ip, r5
    cfd4:	1e4f      	subs	r7, r1, #1
    cfd6:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    cfda:	b175      	cbz	r5, cffa <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    cfdc:	f80c 6b01 	strb.w	r6, [ip], #1
    cfe0:	46b8      	mov	r8, r7
    cfe2:	4665      	mov	r5, ip
    cfe4:	460f      	mov	r7, r1
    cfe6:	4670      	mov	r0, lr
    cfe8:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    cfea:	2f00      	cmp	r7, #0
    cfec:	d1f1      	bne.n	cfd2 <am_util_stdio_vsprintf+0x65e>
    cfee:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cff0:	2c00      	cmp	r4, #0
    cff2:	f43f ae78 	beq.w	cce6 <am_util_stdio_vsprintf+0x372>
    cff6:	4404      	add	r4, r0
                    iWidth = 0;
    cff8:	e5f6      	b.n	cbe8 <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    cffa:	2900      	cmp	r1, #0
    cffc:	f000 8115 	beq.w	d22a <am_util_stdio_vsprintf+0x8b6>
    d000:	3902      	subs	r1, #2
    d002:	3002      	adds	r0, #2
    d004:	e7f1      	b.n	cfea <am_util_stdio_vsprintf+0x676>
    d006:	2b00      	cmp	r3, #0
    d008:	f000 8136 	beq.w	d278 <am_util_stdio_vsprintf+0x904>
    d00c:	3b02      	subs	r3, #2
    d00e:	3202      	adds	r2, #2
    d010:	2800      	cmp	r0, #0
    d012:	f47f af0f 	bne.w	ce34 <am_util_stdio_vsprintf+0x4c0>
    d016:	e71c      	b.n	ce52 <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    d018:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d01a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    d01e:	2809      	cmp	r0, #9
        pcStr++;
    d020:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d024:	f200 8124 	bhi.w	d270 <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    d028:	2001      	movs	r0, #1
        bNeg = true;
    d02a:	4680      	mov	r8, r0
        pcStr++;
    d02c:	469e      	mov	lr, r3
    d02e:	e66e      	b.n	cd0e <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d030:	469b      	mov	fp, r3
    d032:	e4c1      	b.n	c9b8 <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d034:	2e20      	cmp	r6, #32
    d036:	f47f ae47 	bne.w	ccc8 <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    d03a:	b114      	cbz	r4, d042 <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    d03c:	232d      	movs	r3, #45	; 0x2d
    d03e:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    d042:	f10b 0b01 	add.w	fp, fp, #1
    d046:	e63f      	b.n	ccc8 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    d048:	ea58 0309 	orrs.w	r3, r8, r9
    d04c:	bf0c      	ite	eq
    d04e:	2701      	moveq	r7, #1
    d050:	2700      	movne	r7, #0
    while ( ui64Val )
    d052:	ea58 0309 	orrs.w	r3, r8, r9
    d056:	d008      	beq.n	d06a <am_util_stdio_vsprintf+0x6f6>
    d058:	4640      	mov	r0, r8
    d05a:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    d05c:	f7ff fb8a 	bl	c774 <divu64_10>
    while ( ui64Val )
    d060:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    d064:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    d068:	d1f8      	bne.n	d05c <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    d06a:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    d06c:	2b00      	cmp	r3, #0
    d06e:	f340 80f3 	ble.w	d258 <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    d072:	3b01      	subs	r3, #1
    d074:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    d076:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    d078:	4628      	mov	r0, r5
    d07a:	1c51      	adds	r1, r2, #1
    d07c:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    d07e:	b16d      	cbz	r5, d09c <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    d080:	f800 6b01 	strb.w	r6, [r0], #1
    d084:	460a      	mov	r2, r1
    d086:	4605      	mov	r5, r0
    d088:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    d08a:	463b      	mov	r3, r7
    d08c:	2900      	cmp	r1, #0
    d08e:	d1f3      	bne.n	d078 <am_util_stdio_vsprintf+0x704>
    d090:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    d092:	2c00      	cmp	r4, #0
    d094:	f000 80da 	beq.w	d24c <am_util_stdio_vsprintf+0x8d8>
    d098:	4414      	add	r4, r2
                    iWidth = 0;
    d09a:	e5c2      	b.n	cc22 <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    d09c:	2b00      	cmp	r3, #0
    d09e:	f000 80ee 	beq.w	d27e <am_util_stdio_vsprintf+0x90a>
    d0a2:	4639      	mov	r1, r7
    d0a4:	3202      	adds	r2, #2
    d0a6:	1e9f      	subs	r7, r3, #2
    d0a8:	e7ef      	b.n	d08a <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    d0aa:	2a00      	cmp	r2, #0
    d0ac:	db50      	blt.n	d150 <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d0ae:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    d0b2:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    d0b6:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d0ba:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d0bc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d0c0:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d0c4:	db3d      	blt.n	d142 <am_util_stdio_vsprintf+0x7ce>
    d0c6:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    d0c8:	4642      	mov	r2, r8
    d0ca:	17c1      	asrs	r1, r0, #31
    d0cc:	f7ff fbb4 	bl	c838 <uint64_to_str>
    d0d0:	e561      	b.n	cb96 <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    d0d2:	2d00      	cmp	r5, #0
    d0d4:	dd49      	ble.n	d16a <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    d0d6:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d0d8:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    d0da:	2200      	movs	r2, #0
    d0dc:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    d0de:	4608      	mov	r0, r1
    d0e0:	f105 3eff 	add.w	lr, r5, #4294967295
    d0e4:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    d0e8:	2900      	cmp	r1, #0
    d0ea:	d044      	beq.n	d176 <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    d0ec:	f800 6b01 	strb.w	r6, [r0], #1
    d0f0:	4642      	mov	r2, r8
    d0f2:	4601      	mov	r1, r0
    d0f4:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    d0f6:	4675      	mov	r5, lr
    d0f8:	2800      	cmp	r0, #0
    d0fa:	d1f0      	bne.n	d0de <am_util_stdio_vsprintf+0x76a>
    d0fc:	7819      	ldrb	r1, [r3, #0]
    d0fe:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    d100:	b104      	cbz	r4, d104 <am_util_stdio_vsprintf+0x790>
    d102:	4414      	add	r4, r2
                        iWidth = 0;
    d104:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    d106:	2900      	cmp	r1, #0
    d108:	f47f ae73 	bne.w	cdf2 <am_util_stdio_vsprintf+0x47e>
    d10c:	e6a4      	b.n	ce58 <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    d10e:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d112:	9b00      	ldr	r3, [sp, #0]
    d114:	3307      	adds	r3, #7
    d116:	f023 0307 	bic.w	r3, r3, #7
    d11a:	4618      	mov	r0, r3
    d11c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    d120:	9000      	str	r0, [sp, #0]
    d122:	e55e      	b.n	cbe2 <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    d124:	f04f 0900 	mov.w	r9, #0
    d128:	e7f3      	b.n	d112 <am_util_stdio_vsprintf+0x79e>
    d12a:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    d12c:	2d00      	cmp	r5, #0
    d12e:	dde7      	ble.n	d100 <am_util_stdio_vsprintf+0x78c>
    d130:	e7d2      	b.n	d0d8 <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    d132:	b114      	cbz	r4, d13a <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    d134:	232d      	movs	r3, #45	; 0x2d
    d136:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    d13a:	f10b 0b01 	add.w	fp, fp, #1
    d13e:	e5a5      	b.n	cc8c <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    d140:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    d142:	4623      	mov	r3, r4
    d144:	222d      	movs	r2, #45	; 0x2d
    d146:	f803 2b02 	strb.w	r2, [r3], #2
    d14a:	46b0      	mov	r8, r6
    d14c:	461e      	mov	r6, r3
    d14e:	e513      	b.n	cb78 <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d150:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d152:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d154:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    d158:	f104 0202 	add.w	r2, r4, #2
    d15c:	f2c0 8092 	blt.w	d284 <am_util_stdio_vsprintf+0x910>
    d160:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    d162:	2330      	movs	r3, #48	; 0x30
    d164:	f888 3000 	strb.w	r3, [r8]
    d168:	e522      	b.n	cbb0 <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    d16a:	7819      	ldrb	r1, [r3, #0]
    d16c:	b909      	cbnz	r1, d172 <am_util_stdio_vsprintf+0x7fe>
    d16e:	460f      	mov	r7, r1
    d170:	e655      	b.n	ce1e <am_util_stdio_vsprintf+0x4aa>
    d172:	461f      	mov	r7, r3
    d174:	e63d      	b.n	cdf2 <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    d176:	2d00      	cmp	r5, #0
    d178:	d076      	beq.n	d268 <am_util_stdio_vsprintf+0x8f4>
    d17a:	4670      	mov	r0, lr
    d17c:	3202      	adds	r2, #2
    d17e:	f1a5 0e02 	sub.w	lr, r5, #2
    d182:	e7b8      	b.n	d0f6 <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d184:	1b10      	subs	r0, r2, r4
    d186:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d18a:	429f      	cmp	r7, r3
    d18c:	bfa8      	it	ge
    d18e:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    d190:	2f00      	cmp	r7, #0
    d192:	f340 8083 	ble.w	d29c <am_util_stdio_vsprintf+0x928>
    d196:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    d198:	4610      	mov	r0, r2
            i32FracPart *= 10;
    d19a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d19e:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d1a0:	162b      	asrs	r3, r5, #24
    d1a2:	3330      	adds	r3, #48	; 0x30
    d1a4:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    d1a8:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    d1aa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d1ae:	d1f4      	bne.n	d19a <am_util_stdio_vsprintf+0x826>
    d1b0:	3f01      	subs	r7, #1
    d1b2:	19d6      	adds	r6, r2, r7
    d1b4:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d1b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d1ba:	f345 52c7 	sbfx	r2, r5, #23, #8
    d1be:	2a04      	cmp	r2, #4
    d1c0:	f77f acff 	ble.w	cbc2 <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    d1c4:	42a6      	cmp	r6, r4
    d1c6:	f4ff acfc 	bcc.w	cbc2 <am_util_stdio_vsprintf+0x24e>
    d1ca:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    d1cc:	2630      	movs	r6, #48	; 0x30
    d1ce:	e003      	b.n	d1d8 <am_util_stdio_vsprintf+0x864>
    d1d0:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d1d2:	429c      	cmp	r4, r3
    d1d4:	f63f acf5 	bhi.w	cbc2 <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    d1d8:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    d1da:	f813 2901 	ldrb.w	r2, [r3], #-1
    d1de:	2a2e      	cmp	r2, #46	; 0x2e
    d1e0:	d0f7      	beq.n	d1d2 <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    d1e2:	2a39      	cmp	r2, #57	; 0x39
    d1e4:	d0f4      	beq.n	d1d0 <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    d1e6:	3201      	adds	r2, #1
    d1e8:	702a      	strb	r2, [r5, #0]
                    break;
    d1ea:	e4ea      	b.n	cbc2 <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d1ec:	1c43      	adds	r3, r0, #1
    d1ee:	d037      	beq.n	d260 <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d1f0:	3002      	adds	r0, #2
    d1f2:	d037      	beq.n	d264 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d1f4:	4b2c      	ldr	r3, [pc, #176]	; (d2a8 <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1f6:	6023      	str	r3, [r4, #0]
    d1f8:	2303      	movs	r3, #3
    d1fa:	e4e8      	b.n	cbce <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	b113      	cbz	r3, d206 <am_util_stdio_vsprintf+0x892>
    d200:	2e20      	cmp	r6, #32
    d202:	f43f af1e 	beq.w	d042 <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d206:	4640      	mov	r0, r8
    d208:	4649      	mov	r1, r9
    d20a:	4622      	mov	r2, r4
    d20c:	f7ff fb14 	bl	c838 <uint64_to_str>
                ui32CharCnt += iVal;
    d210:	4483      	add	fp, r0
                break;
    d212:	f7ff bbcd 	b.w	c9b0 <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    d216:	2000      	movs	r0, #0
    d218:	e6ea      	b.n	cff0 <am_util_stdio_vsprintf+0x67c>
    d21a:	2200      	movs	r2, #0
    d21c:	e54c      	b.n	ccb8 <am_util_stdio_vsprintf+0x344>
    d21e:	1c72      	adds	r2, r6, #1
    d220:	e79f      	b.n	d162 <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d222:	4b22      	ldr	r3, [pc, #136]	; (d2ac <am_util_stdio_vsprintf+0x938>)
    d224:	6023      	str	r3, [r4, #0]
    d226:	2303      	movs	r3, #3
    d228:	e4d1      	b.n	cbce <am_util_stdio_vsprintf+0x25a>
    d22a:	4670      	mov	r0, lr
    d22c:	44f3      	add	fp, lr
    d22e:	e6df      	b.n	cff0 <am_util_stdio_vsprintf+0x67c>
    d230:	460a      	mov	r2, r1
    d232:	448b      	add	fp, r1
    d234:	e540      	b.n	ccb8 <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    d236:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d23a:	4667      	mov	r7, ip
    d23c:	e57d      	b.n	cd3a <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    d23e:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    d240:	bfc8      	it	gt
    d242:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    d244:	f73f af48 	bgt.w	d0d8 <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    d248:	460f      	mov	r7, r1
    d24a:	e5e8      	b.n	ce1e <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d24c:	4622      	mov	r2, r4
    d24e:	4640      	mov	r0, r8
    d250:	4649      	mov	r1, r9
    d252:	f7ff faf1 	bl	c838 <uint64_to_str>
                if ( pcBuf )
    d256:	e54a      	b.n	ccee <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    d258:	2200      	movs	r2, #0
    d25a:	e71a      	b.n	d092 <am_util_stdio_vsprintf+0x71e>
    d25c:	2200      	movs	r2, #0
    d25e:	e5f9      	b.n	ce54 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d260:	4b12      	ldr	r3, [pc, #72]	; (d2ac <am_util_stdio_vsprintf+0x938>)
    d262:	e7c8      	b.n	d1f6 <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d264:	4b12      	ldr	r3, [pc, #72]	; (d2b0 <am_util_stdio_vsprintf+0x93c>)
    d266:	e7c6      	b.n	d1f6 <am_util_stdio_vsprintf+0x882>
    d268:	4642      	mov	r2, r8
    d26a:	44c3      	add	fp, r8
    d26c:	7819      	ldrb	r1, [r3, #0]
    d26e:	e747      	b.n	d100 <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    d270:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d274:	2700      	movs	r7, #0
    d276:	e55f      	b.n	cd38 <am_util_stdio_vsprintf+0x3c4>
    d278:	460a      	mov	r2, r1
    d27a:	448b      	add	fp, r1
    d27c:	e5ea      	b.n	ce54 <am_util_stdio_vsprintf+0x4e0>
    d27e:	460a      	mov	r2, r1
    d280:	448b      	add	fp, r1
    d282:	e706      	b.n	d092 <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    d284:	4623      	mov	r3, r4
    d286:	212d      	movs	r1, #45	; 0x2d
    d288:	f803 1b03 	strb.w	r1, [r3], #3
    d28c:	46b0      	mov	r8, r6
    d28e:	4616      	mov	r6, r2
    d290:	461a      	mov	r2, r3
    d292:	e766      	b.n	d162 <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    d294:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d296:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    d298:	9301      	str	r3, [sp, #4]
    d29a:	e4f7      	b.n	cc8c <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    d29c:	4611      	mov	r1, r2
    d29e:	e78a      	b.n	d1b6 <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    d2a0:	4632      	mov	r2, r6
    d2a2:	4646      	mov	r6, r8
    d2a4:	e484      	b.n	cbb0 <am_util_stdio_vsprintf+0x23c>
    d2a6:	bf00      	nop
    d2a8:	003f2e3f 	.word	0x003f2e3f
    d2ac:	00302e30 	.word	0x00302e30
    d2b0:	00232e23 	.word	0x00232e23

0000d2b4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2b4:	b40f      	push	{r0, r1, r2, r3}
    d2b6:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2b8:	4d0a      	ldr	r5, [pc, #40]	; (d2e4 <am_util_stdio_printf+0x30>)
    d2ba:	682c      	ldr	r4, [r5, #0]
{
    d2bc:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d2be:	b154      	cbz	r4, d2d6 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2c0:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2c2:	461a      	mov	r2, r3
    d2c4:	9906      	ldr	r1, [sp, #24]
    d2c6:	4808      	ldr	r0, [pc, #32]	; (d2e8 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d2c8:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2ca:	f7ff fb53 	bl	c974 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2ce:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2d0:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d2d2:	4805      	ldr	r0, [pc, #20]	; (d2e8 <am_util_stdio_printf+0x34>)
    d2d4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d2d6:	4620      	mov	r0, r4
    d2d8:	b003      	add	sp, #12
    d2da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d2de:	b004      	add	sp, #16
    d2e0:	4770      	bx	lr
    d2e2:	bf00      	nop
    d2e4:	100012ec 	.word	0x100012ec
    d2e8:	10001060 	.word	0x10001060

0000d2ec <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2ec:	4801      	ldr	r0, [pc, #4]	; (d2f4 <am_util_stdio_terminal_clear+0x8>)
    d2ee:	f7ff bfe1 	b.w	d2b4 <am_util_stdio_printf>
    d2f2:	bf00      	nop
    d2f4:	0000fca0 	.word	0x0000fca0

0000d2f8 <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    d2f8:	e7fe      	b.n	d2f8 <NMI_Handler>
    d2fa:	bf00      	nop

0000d2fc <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    d2fc:	e7fe      	b.n	d2fc <DebugMon_Handler>
    d2fe:	bf00      	nop

0000d300 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d300:	4811      	ldr	r0, [pc, #68]	; (d348 <zero_loop+0x12>)
    d302:	4912      	ldr	r1, [pc, #72]	; (d34c <zero_loop+0x16>)
    d304:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d306:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d30a:	4811      	ldr	r0, [pc, #68]	; (d350 <zero_loop+0x1a>)
    d30c:	6801      	ldr	r1, [r0, #0]
    d30e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d312:	6001      	str	r1, [r0, #0]
    d314:	f3bf 8f4f 	dsb	sy
    d318:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d31c:	480d      	ldr	r0, [pc, #52]	; (d354 <zero_loop+0x1e>)
    d31e:	490e      	ldr	r1, [pc, #56]	; (d358 <zero_loop+0x22>)
    d320:	4a0e      	ldr	r2, [pc, #56]	; (d35c <zero_loop+0x26>)

0000d322 <copy_loop>:
    d322:	f850 3b04 	ldr.w	r3, [r0], #4
    d326:	f841 3b04 	str.w	r3, [r1], #4
    d32a:	4291      	cmp	r1, r2
    d32c:	dbf9      	blt.n	d322 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d32e:	480c      	ldr	r0, [pc, #48]	; (d360 <zero_loop+0x2a>)
    d330:	490c      	ldr	r1, [pc, #48]	; (d364 <zero_loop+0x2e>)
    d332:	f04f 0200 	mov.w	r2, #0

0000d336 <zero_loop>:
    d336:	4288      	cmp	r0, r1
    d338:	bfb8      	it	lt
    d33a:	f840 2b04 	strlt.w	r2, [r0], #4
    d33e:	dbfa      	blt.n	d336 <zero_loop>
    main();
    d340:	f7ff f8ea 	bl	c518 <main>
    __asm("    bkpt     ");
    d344:	be00      	bkpt	0x0000
}
    d346:	0000      	.short	0x0000
    d348:	e000ed08 	.word	0xe000ed08
    d34c:	0000c000 	.word	0x0000c000
    d350:	e000ed88 	.word	0xe000ed88
    d354:	0001031c 	.word	0x0001031c
    d358:	10001000 	.word	0x10001000
    d35c:	1000105c 	.word	0x1000105c
    d360:	1000105c 	.word	0x1000105c
    d364:	10004bb4 	.word	0x10004bb4

0000d368 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d368:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d36a:	2001      	movs	r0, #1
{
    d36c:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d36e:	f000 fed1 	bl	e114 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d372:	4925      	ldr	r1, [pc, #148]	; (d408 <am_ctimer_isr+0xa0>)
    d374:	2000      	movs	r0, #0
    d376:	f000 fb6f 	bl	da58 <am_hal_adc_initialize>
    d37a:	bb68      	cbnz	r0, d3d8 <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d37c:	4c22      	ldr	r4, [pc, #136]	; (d408 <am_ctimer_isr+0xa0>)
    d37e:	2200      	movs	r2, #0
    d380:	6820      	ldr	r0, [r4, #0]
    d382:	4611      	mov	r1, r2
    d384:	f000 fcee 	bl	dd64 <am_hal_adc_power_control>
    d388:	2800      	cmp	r0, #0
    d38a:	d139      	bne.n	d400 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d38c:	4b1f      	ldr	r3, [pc, #124]	; (d40c <am_ctimer_isr+0xa4>)
    d38e:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d390:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d392:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d394:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d396:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d39a:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d39c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d3a0:	f000 fb9c 	bl	dadc <am_hal_adc_configure>
    d3a4:	bb40      	cbnz	r0, d3f8 <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d3a6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d3aa:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d3ac:	466a      	mov	r2, sp
    d3ae:	2100      	movs	r1, #0
    d3b0:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d3b2:	9500      	str	r5, [sp, #0]
    ADCSlotConfig.bEnabled        = true;
    d3b4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d3b8:	f000 fbc8 	bl	db4c <am_hal_adc_configure_slot>
    d3bc:	b9c0      	cbnz	r0, d3f0 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d3be:	2101      	movs	r1, #1
    d3c0:	6820      	ldr	r0, [r4, #0]
    d3c2:	f000 fc31 	bl	dc28 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d3c6:	6820      	ldr	r0, [r4, #0]
    d3c8:	f000 fbf6 	bl	dbb8 <am_hal_adc_enable>
    d3cc:	b940      	cbnz	r0, d3e0 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d3ce:	6820      	ldr	r0, [r4, #0]
    d3d0:	f000 fcb6 	bl	dd40 <am_hal_adc_sw_trigger>
}
    d3d4:	b005      	add	sp, #20
    d3d6:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d3d8:	480d      	ldr	r0, [pc, #52]	; (d410 <am_ctimer_isr+0xa8>)
    d3da:	f7ff ff6b 	bl	d2b4 <am_util_stdio_printf>
    d3de:	e7cd      	b.n	d37c <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d3e0:	480c      	ldr	r0, [pc, #48]	; (d414 <am_ctimer_isr+0xac>)
    d3e2:	f7ff ff67 	bl	d2b4 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d3e6:	6820      	ldr	r0, [r4, #0]
    d3e8:	f000 fcaa 	bl	dd40 <am_hal_adc_sw_trigger>
}
    d3ec:	b005      	add	sp, #20
    d3ee:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d3f0:	4809      	ldr	r0, [pc, #36]	; (d418 <am_ctimer_isr+0xb0>)
    d3f2:	f7ff ff5f 	bl	d2b4 <am_util_stdio_printf>
    d3f6:	e7e2      	b.n	d3be <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d3f8:	4808      	ldr	r0, [pc, #32]	; (d41c <am_ctimer_isr+0xb4>)
    d3fa:	f7ff ff5b 	bl	d2b4 <am_util_stdio_printf>
    d3fe:	e7d2      	b.n	d3a6 <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d400:	4807      	ldr	r0, [pc, #28]	; (d420 <am_ctimer_isr+0xb8>)
    d402:	f7ff ff57 	bl	d2b4 <am_util_stdio_printf>
    d406:	e7c1      	b.n	d38c <am_ctimer_isr+0x24>
    d408:	10001164 	.word	0x10001164
    d40c:	00070001 	.word	0x00070001
    d410:	0000fda8 	.word	0x0000fda8
    d414:	0000fe48 	.word	0x0000fe48
    d418:	0000fe20 	.word	0x0000fe20
    d41c:	0000fdfc 	.word	0x0000fdfc
    d420:	0000fddc 	.word	0x0000fddc

0000d424 <am_adc_isr>:
{
    d424:	b530      	push	{r4, r5, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d426:	4c29      	ldr	r4, [pc, #164]	; (d4cc <am_adc_isr+0xa8>)
{
    d428:	b085      	sub	sp, #20
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d42a:	2200      	movs	r2, #0
    d42c:	6820      	ldr	r0, [r4, #0]
    d42e:	4669      	mov	r1, sp
    d430:	f000 fc10 	bl	dc54 <am_hal_adc_interrupt_status>
    d434:	b9e0      	cbnz	r0, d470 <am_adc_isr+0x4c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d436:	9900      	ldr	r1, [sp, #0]
    d438:	6820      	ldr	r0, [r4, #0]
    d43a:	f000 fc29 	bl	dc90 <am_hal_adc_interrupt_clear>
    d43e:	bb00      	cbnz	r0, d482 <am_adc_isr+0x5e>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d440:	9b00      	ldr	r3, [sp, #0]
    d442:	6820      	ldr	r0, [r4, #0]
    d444:	07db      	lsls	r3, r3, #31
    d446:	d423      	bmi.n	d490 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d448:	4b21      	ldr	r3, [pc, #132]	; (d4d0 <am_adc_isr+0xac>)
    d44a:	9a02      	ldr	r2, [sp, #8]
    d44c:	601a      	str	r2, [r3, #0]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d44e:	f000 fbd3 	bl	dbf8 <am_hal_adc_disable>
    d452:	2800      	cmp	r0, #0
    d454:	d132      	bne.n	d4bc <am_adc_isr+0x98>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d456:	200a      	movs	r0, #10
    d458:	f001 fe4e 	bl	f0f8 <am_hal_pwrctrl_periph_disable>
    d45c:	bb50      	cbnz	r0, d4b4 <am_adc_isr+0x90>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d45e:	6820      	ldr	r0, [r4, #0]
    d460:	f000 fb1c 	bl	da9c <am_hal_adc_deinitialize>
    d464:	b9f0      	cbnz	r0, d4a4 <am_adc_isr+0x80>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d466:	6820      	ldr	r0, [r4, #0]
    d468:	f000 fc6a 	bl	dd40 <am_hal_adc_sw_trigger>
}
    d46c:	b005      	add	sp, #20
    d46e:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d470:	4818      	ldr	r0, [pc, #96]	; (d4d4 <am_adc_isr+0xb0>)
    d472:	f7ff ff1f 	bl	d2b4 <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d476:	9900      	ldr	r1, [sp, #0]
    d478:	6820      	ldr	r0, [r4, #0]
    d47a:	f000 fc09 	bl	dc90 <am_hal_adc_interrupt_clear>
    d47e:	2800      	cmp	r0, #0
    d480:	d0de      	beq.n	d440 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d482:	4815      	ldr	r0, [pc, #84]	; (d4d8 <am_adc_isr+0xb4>)
    d484:	f7ff ff16 	bl	d2b4 <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d488:	9b00      	ldr	r3, [sp, #0]
    d48a:	6820      	ldr	r0, [r4, #0]
    d48c:	07db      	lsls	r3, r3, #31
    d48e:	d5db      	bpl.n	d448 <am_adc_isr+0x24>
        uint32_t    ui32NumSamples = 1;
    d490:	2501      	movs	r5, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d492:	ab02      	add	r3, sp, #8
    d494:	aa01      	add	r2, sp, #4
    d496:	2100      	movs	r1, #0
        uint32_t    ui32NumSamples = 1;
    d498:	9501      	str	r5, [sp, #4]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d49a:	f000 fc0b 	bl	dcb4 <am_hal_adc_samples_read>
    d49e:	b988      	cbnz	r0, d4c4 <am_adc_isr+0xa0>
    d4a0:	6820      	ldr	r0, [r4, #0]
    d4a2:	e7d1      	b.n	d448 <am_adc_isr+0x24>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d4a4:	480d      	ldr	r0, [pc, #52]	; (d4dc <am_adc_isr+0xb8>)
    d4a6:	f7ff ff05 	bl	d2b4 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d4aa:	6820      	ldr	r0, [r4, #0]
    d4ac:	f000 fc48 	bl	dd40 <am_hal_adc_sw_trigger>
}
    d4b0:	b005      	add	sp, #20
    d4b2:	bd30      	pop	{r4, r5, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d4b4:	480a      	ldr	r0, [pc, #40]	; (d4e0 <am_adc_isr+0xbc>)
    d4b6:	f7ff fefd 	bl	d2b4 <am_util_stdio_printf>
    d4ba:	e7d0      	b.n	d45e <am_adc_isr+0x3a>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d4bc:	4809      	ldr	r0, [pc, #36]	; (d4e4 <am_adc_isr+0xc0>)
    d4be:	f7ff fef9 	bl	d2b4 <am_util_stdio_printf>
    d4c2:	e7c8      	b.n	d456 <am_adc_isr+0x32>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d4c4:	4808      	ldr	r0, [pc, #32]	; (d4e8 <am_adc_isr+0xc4>)
    d4c6:	f7ff fef5 	bl	d2b4 <am_util_stdio_printf>
    d4ca:	e7e9      	b.n	d4a0 <am_adc_isr+0x7c>
    d4cc:	10001164 	.word	0x10001164
    d4d0:	10001160 	.word	0x10001160
    d4d4:	0000fcb4 	.word	0x0000fcb4
    d4d8:	0000fcd8 	.word	0x0000fcd8
    d4dc:	0000fd7c 	.word	0x0000fd7c
    d4e0:	0000fd4c 	.word	0x0000fd4c
    d4e4:	0000fd2c 	.word	0x0000fd2c
    d4e8:	0000fd00 	.word	0x0000fd00

0000d4ec <initADC>:
{
    d4ec:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d4ee:	4b0e      	ldr	r3, [pc, #56]	; (d528 <initADC+0x3c>)
    d4f0:	200b      	movs	r0, #11
    d4f2:	6819      	ldr	r1, [r3, #0]
    d4f4:	f000 fe4e 	bl	e194 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d4f8:	f44f 7215 	mov.w	r2, #596	; 0x254
    d4fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d500:	2000      	movs	r0, #0
    d502:	f000 fd33 	bl	df6c <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d506:	2001      	movs	r0, #1
    d508:	f000 fdf0 	bl	e0ec <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d50c:	2300      	movs	r3, #0
    d50e:	4618      	mov	r0, r3
    d510:	2201      	movs	r2, #1
    d512:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d516:	f000 fd93 	bl	e040 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d51a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d51e:	2000      	movs	r0, #0
    d520:	f000 fd64 	bl	dfec <am_hal_ctimer_start>
}
    d524:	2000      	movs	r0, #0
    d526:	bd08      	pop	{r3, pc}
    d528:	0000fe68 	.word	0x0000fe68

0000d52c <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d52c:	4b04      	ldr	r3, [pc, #16]	; (d540 <enableAdcInterrupts+0x14>)
    d52e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d536:	6019      	str	r1, [r3, #0]
    d538:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d53a:	f000 bfb5 	b.w	e4a8 <am_hal_interrupt_master_enable>
    d53e:	bf00      	nop
    d540:	e000e100 	.word	0xe000e100

0000d544 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d544:	2b80      	cmp	r3, #128	; 0x80
    d546:	d83c      	bhi.n	d5c2 <platform_read+0x7e>
{
    d548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d54c:	4690      	mov	r8, r2
    d54e:	b08b      	sub	sp, #44	; 0x2c
    d550:	460e      	mov	r6, r1
    d552:	461f      	mov	r7, r3
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d554:	2a00      	cmp	r2, #0
    d556:	d03e      	beq.n	d5d6 <platform_read+0x92>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d558:	4d25      	ldr	r5, [pc, #148]	; (d5f0 <platform_read+0xac>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d55a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d600 <platform_read+0xbc>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d55e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d560:	466c      	mov	r4, sp
    d562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d568:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d56c:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d56e:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d572:	2501      	movs	r5, #1
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d574:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d578:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d57c:	9602      	str	r6, [sp, #8]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d57e:	4669      	mov	r1, sp
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d580:	9501      	str	r5, [sp, #4]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d582:	f8ad 501c 	strh.w	r5, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d586:	f88d 501e 	strb.w	r5, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d58a:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d58c:	f88d 3010 	strb.w	r3, [sp, #16]
    iomTransfer.pui32RxBuffer = NULL;
    d590:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d594:	e9cd 3308 	strd	r3, r3, [sp, #32]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d598:	f001 fae8 	bl	eb6c <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d59c:	4604      	mov	r4, r0
    d59e:	b990      	cbnz	r0, d5c6 <platform_read+0x82>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5a0:	4669      	mov	r1, sp
    d5a2:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d5a6:	f88d 401c 	strb.w	r4, [sp, #28]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d5aa:	f88d 5010 	strb.w	r5, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d5ae:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d5b2:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5b4:	f001 fada 	bl	eb6c <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d5b8:	4604      	mov	r4, r0
    d5ba:	b998      	cbnz	r0, d5e4 <platform_read+0xa0>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d5bc:	b00b      	add	sp, #44	; 0x2c
    d5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d5c2:	2001      	movs	r0, #1
}
    d5c4:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d5c6:	4601      	mov	r1, r0
    d5c8:	480a      	ldr	r0, [pc, #40]	; (d5f4 <platform_read+0xb0>)
    d5ca:	f7ff fe73 	bl	d2b4 <am_util_stdio_printf>
        return retVal32;
    d5ce:	4620      	mov	r0, r4
}
    d5d0:	b00b      	add	sp, #44	; 0x2c
    d5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d5d6:	4808      	ldr	r0, [pc, #32]	; (d5f8 <platform_read+0xb4>)
    d5d8:	f7ff fe6c 	bl	d2b4 <am_util_stdio_printf>
    d5dc:	2001      	movs	r0, #1
}
    d5de:	b00b      	add	sp, #44	; 0x2c
    d5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d5e4:	4601      	mov	r1, r0
    d5e6:	4805      	ldr	r0, [pc, #20]	; (d5fc <platform_read+0xb8>)
    d5e8:	f7ff fe64 	bl	d2b4 <am_util_stdio_printf>
        return retVal32;
    d5ec:	4620      	mov	r0, r4
    d5ee:	e7e5      	b.n	d5bc <platform_read+0x78>
    d5f0:	10001004 	.word	0x10001004
    d5f4:	0000fea4 	.word	0x0000fea4
    d5f8:	0000fe8c 	.word	0x0000fe8c
    d5fc:	0000feb4 	.word	0x0000feb4
    d600:	100014fc 	.word	0x100014fc

0000d604 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d604:	2b80      	cmp	r3, #128	; 0x80
    d606:	d83c      	bhi.n	d682 <platform_write+0x7e>
{
    d608:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d60a:	4e25      	ldr	r6, [pc, #148]	; (d6a0 <platform_write+0x9c>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d60c:	4f25      	ldr	r7, [pc, #148]	; (d6a4 <platform_write+0xa0>)
    d60e:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d610:	469c      	mov	ip, r3
    d612:	4614      	mov	r4, r2
    d614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d616:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d618:	466d      	mov	r5, sp
    d61a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d61c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d61e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d620:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d624:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d628:	f8df e088 	ldr.w	lr, [pc, #136]	; d6b4 <platform_write+0xb0>
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d62c:	2200      	movs	r2, #0
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d62e:	2601      	movs	r6, #1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d630:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d634:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d638:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d63a:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d63e:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d642:	f8ad 201c 	strh.w	r2, [sp, #28]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d646:	e9cd 2208 	strd	r2, r2, [sp, #32]
    iomTransfer.pui32RxBuffer = i2cRX;
    d64a:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    if(bufp == NULL){
    d64e:	b30c      	cbz	r4, d694 <platform_write+0x90>
    while(len--){
    d650:	f10c 31ff 	add.w	r1, ip, #4294967295
    d654:	b289      	uxth	r1, r1
    d656:	f1bc 0f00 	cmp.w	ip, #0
    d65a:	d009      	beq.n	d670 <platform_write+0x6c>
    d65c:	1c4b      	adds	r3, r1, #1
    d65e:	18e2      	adds	r2, r4, r3
    d660:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d664:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d668:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d66c:	42bb      	cmp	r3, r7
    d66e:	d1f9      	bne.n	d664 <platform_write+0x60>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d670:	4b0d      	ldr	r3, [pc, #52]	; (d6a8 <platform_write+0xa4>)
    d672:	4669      	mov	r1, sp
    d674:	6818      	ldr	r0, [r3, #0]
    d676:	f001 fa79 	bl	eb6c <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d67a:	4606      	mov	r6, r0
    d67c:	b918      	cbnz	r0, d686 <platform_write+0x82>
}
    d67e:	b00b      	add	sp, #44	; 0x2c
    d680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d682:	2001      	movs	r0, #1
}
    d684:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d686:	4601      	mov	r1, r0
    d688:	4808      	ldr	r0, [pc, #32]	; (d6ac <platform_write+0xa8>)
    d68a:	f7ff fe13 	bl	d2b4 <am_util_stdio_printf>
        return retVal32;
    d68e:	4630      	mov	r0, r6
}
    d690:	b00b      	add	sp, #44	; 0x2c
    d692:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d694:	4806      	ldr	r0, [pc, #24]	; (d6b0 <platform_write+0xac>)
    d696:	f7ff fe0d 	bl	d2b4 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d69a:	4630      	mov	r0, r6
    d69c:	e7ef      	b.n	d67e <platform_write+0x7a>
    d69e:	bf00      	nop
    d6a0:	10001004 	.word	0x10001004
    d6a4:	100012fc 	.word	0x100012fc
    d6a8:	100014fc 	.word	0x100014fc
    d6ac:	0000fee0 	.word	0x0000fee0
    d6b0:	0000fec8 	.word	0x0000fec8
    d6b4:	10001500 	.word	0x10001500

0000d6b8 <initAccelerometer>:
{
    d6b8:	b570      	push	{r4, r5, r6, lr}
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d6ba:	4b2c      	ldr	r3, [pc, #176]	; (d76c <initAccelerometer+0xb4>)
    dev_ctx.write_reg = platform_write;
    d6bc:	4a2c      	ldr	r2, [pc, #176]	; (d770 <initAccelerometer+0xb8>)
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d6be:	4c2d      	ldr	r4, [pc, #180]	; (d774 <initAccelerometer+0xbc>)
    d6c0:	6818      	ldr	r0, [r3, #0]
    dev_ctx.write_reg = platform_write;
    d6c2:	4b2d      	ldr	r3, [pc, #180]	; (d778 <initAccelerometer+0xc0>)
    d6c4:	6013      	str	r3, [r2, #0]
{
    d6c6:	b086      	sub	sp, #24
    am_hal_iom_config_t i2cConfig =
    d6c8:	2300      	movs	r3, #0
    d6ca:	9301      	str	r3, [sp, #4]
    dev_ctx.read_reg = platform_read;
    d6cc:	4e2b      	ldr	r6, [pc, #172]	; (d77c <initAccelerometer+0xc4>)
    am_hal_iom_config_t i2cConfig =
    d6ce:	9305      	str	r3, [sp, #20]
    d6d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d6d4:	2501      	movs	r5, #1
    d6d6:	4b2a      	ldr	r3, [pc, #168]	; (d780 <initAccelerometer+0xc8>)
    dev_ctx.read_reg = platform_read;
    d6d8:	6056      	str	r6, [r2, #4]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d6da:	4621      	mov	r1, r4
    am_hal_iom_config_t i2cConfig =
    d6dc:	f88d 5004 	strb.w	r5, [sp, #4]
    d6e0:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d6e2:	f000 ff65 	bl	e5b0 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d6e6:	b140      	cbz	r0, d6fa <initAccelerometer+0x42>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d6e8:	4c26      	ldr	r4, [pc, #152]	; (d784 <initAccelerometer+0xcc>)
    d6ea:	4821      	ldr	r0, [pc, #132]	; (d770 <initAccelerometer+0xb8>)
    d6ec:	4621      	mov	r1, r4
    d6ee:	f000 f925 	bl	d93c <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d6f2:	7821      	ldrb	r1, [r4, #0]
    d6f4:	2933      	cmp	r1, #51	; 0x33
    d6f6:	d01b      	beq.n	d730 <initAccelerometer+0x78>
        }
    d6f8:	e7fe      	b.n	d6f8 <initAccelerometer+0x40>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d6fa:	4602      	mov	r2, r0
    d6fc:	4601      	mov	r1, r0
    d6fe:	6820      	ldr	r0, [r4, #0]
    d700:	f000 ffee 	bl	e6e0 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d704:	2800      	cmp	r0, #0
    d706:	d1ef      	bne.n	d6e8 <initAccelerometer+0x30>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d708:	a901      	add	r1, sp, #4
    d70a:	6820      	ldr	r0, [r4, #0]
    d70c:	f001 f8f8 	bl	e900 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d710:	2800      	cmp	r0, #0
    d712:	d1e9      	bne.n	d6e8 <initAccelerometer+0x30>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d714:	4b1c      	ldr	r3, [pc, #112]	; (d788 <initAccelerometer+0xd0>)
    d716:	202b      	movs	r0, #43	; 0x2b
    d718:	6819      	ldr	r1, [r3, #0]
    d71a:	f000 fd3b 	bl	e194 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d71e:	4b1b      	ldr	r3, [pc, #108]	; (d78c <initAccelerometer+0xd4>)
    d720:	202a      	movs	r0, #42	; 0x2a
    d722:	6819      	ldr	r1, [r3, #0]
    d724:	f000 fd36 	bl	e194 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d728:	6820      	ldr	r0, [r4, #0]
    d72a:	f000 ff69 	bl	e600 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d72e:	e7db      	b.n	d6e8 <initAccelerometer+0x30>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d730:	4817      	ldr	r0, [pc, #92]	; (d790 <initAccelerometer+0xd8>)
    d732:	f7ff fdbf 	bl	d2b4 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d736:	2101      	movs	r1, #1
    d738:	480d      	ldr	r0, [pc, #52]	; (d770 <initAccelerometer+0xb8>)
    d73a:	f000 f8cb 	bl	d8d4 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d73e:	2103      	movs	r1, #3
    d740:	480b      	ldr	r0, [pc, #44]	; (d770 <initAccelerometer+0xb8>)
    d742:	f000 f82d 	bl	d7a0 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d746:	2103      	movs	r1, #3
    d748:	4809      	ldr	r0, [pc, #36]	; (d770 <initAccelerometer+0xb8>)
    d74a:	f000 f88f 	bl	d86c <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d74e:	2100      	movs	r1, #0
    d750:	4807      	ldr	r0, [pc, #28]	; (d770 <initAccelerometer+0xb8>)
    d752:	f000 f8a5 	bl	d8a0 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d756:	2103      	movs	r1, #3
    d758:	4805      	ldr	r0, [pc, #20]	; (d770 <initAccelerometer+0xb8>)
    d75a:	f000 f821 	bl	d7a0 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d75e:	2100      	movs	r1, #0
    d760:	4803      	ldr	r0, [pc, #12]	; (d770 <initAccelerometer+0xb8>)
    d762:	f000 f837 	bl	d7d4 <lis2dh12_operating_mode_set>
}
    d766:	2000      	movs	r0, #0
    d768:	b006      	add	sp, #24
    d76a:	bd70      	pop	{r4, r5, r6, pc}
    d76c:	10001000 	.word	0x10001000
    d770:	100012f0 	.word	0x100012f0
    d774:	100014fc 	.word	0x100014fc
    d778:	0000d605 	.word	0x0000d605
    d77c:	0000d545 	.word	0x0000d545
    d780:	000186a0 	.word	0x000186a0
    d784:	10001168 	.word	0x10001168
    d788:	0000ff28 	.word	0x0000ff28
    d78c:	0000ff2c 	.word	0x0000ff2c
    d790:	0000fe6c 	.word	0x0000fe6c

0000d794 <lis2dh12_from_fs2_hr_to_mg>:
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d794:	ee00 0a10 	vmov	s0, r0
    d798:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d79c:	4770      	bx	lr
    d79e:	bf00      	nop

0000d7a0 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d7a0:	b570      	push	{r4, r5, r6, lr}
    d7a2:	b082      	sub	sp, #8
    d7a4:	4604      	mov	r4, r0
    d7a6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7a8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d7ac:	aa01      	add	r2, sp, #4
    d7ae:	2301      	movs	r3, #1
    d7b0:	211f      	movs	r1, #31
    d7b2:	47a8      	blx	r5
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d7b4:	b958      	cbnz	r0, d7ce <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d7b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7ba:	6825      	ldr	r5, [r4, #0]
    d7bc:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d7be:	f366 1387 	bfi	r3, r6, #6, #2
    d7c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7c6:	aa01      	add	r2, sp, #4
    d7c8:	2301      	movs	r3, #1
    d7ca:	211f      	movs	r1, #31
    d7cc:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d7ce:	b002      	add	sp, #8
    d7d0:	bd70      	pop	{r4, r5, r6, pc}
    d7d2:	bf00      	nop

0000d7d4 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d7d4:	b570      	push	{r4, r5, r6, lr}
    d7d6:	b082      	sub	sp, #8
    d7d8:	4604      	mov	r4, r0
    d7da:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7dc:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d7e0:	466a      	mov	r2, sp
    d7e2:	2301      	movs	r3, #1
    d7e4:	2120      	movs	r1, #32
    d7e6:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d7e8:	bb00      	cbnz	r0, d82c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7ea:	aa01      	add	r2, sp, #4
    d7ec:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d7f0:	2301      	movs	r3, #1
    d7f2:	2123      	movs	r1, #35	; 0x23
    d7f4:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d7f6:	b9c8      	cbnz	r0, d82c <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d7f8:	b9d5      	cbnz	r5, d830 <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d7fa:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d7fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d802:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d806:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d80a:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d80e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d812:	466a      	mov	r2, sp
    d814:	6825      	ldr	r5, [r4, #0]
    d816:	68a0      	ldr	r0, [r4, #8]
    d818:	2301      	movs	r3, #1
    d81a:	2120      	movs	r1, #32
    d81c:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d81e:	b928      	cbnz	r0, d82c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d820:	aa01      	add	r2, sp, #4
    d822:	6825      	ldr	r5, [r4, #0]
    d824:	68a0      	ldr	r0, [r4, #8]
    d826:	2301      	movs	r3, #1
    d828:	2123      	movs	r1, #35	; 0x23
    d82a:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d82c:	b002      	add	sp, #8
    d82e:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d830:	2d01      	cmp	r5, #1
    d832:	d10c      	bne.n	d84e <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d834:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d838:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d83c:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d840:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d844:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d848:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d84c:	e7e1      	b.n	d812 <lis2dh12_operating_mode_set+0x3e>
    d84e:	2d02      	cmp	r5, #2
    d850:	d1df      	bne.n	d812 <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d852:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d856:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d85a:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d85e:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d862:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d866:	f88d 2004 	strb.w	r2, [sp, #4]
    d86a:	e7d2      	b.n	d812 <lis2dh12_operating_mode_set+0x3e>

0000d86c <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d86c:	b570      	push	{r4, r5, r6, lr}
    d86e:	b082      	sub	sp, #8
    d870:	4604      	mov	r4, r0
    d872:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d874:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d878:	aa01      	add	r2, sp, #4
    d87a:	2301      	movs	r3, #1
    d87c:	2120      	movs	r1, #32
    d87e:	47a8      	blx	r5
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d880:	b958      	cbnz	r0, d89a <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d882:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d886:	6825      	ldr	r5, [r4, #0]
    d888:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d88a:	f366 1307 	bfi	r3, r6, #4, #4
    d88e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d892:	aa01      	add	r2, sp, #4
    d894:	2301      	movs	r3, #1
    d896:	2120      	movs	r1, #32
    d898:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d89a:	b002      	add	sp, #8
    d89c:	bd70      	pop	{r4, r5, r6, pc}
    d89e:	bf00      	nop

0000d8a0 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d8a0:	b570      	push	{r4, r5, r6, lr}
    d8a2:	b082      	sub	sp, #8
    d8a4:	4604      	mov	r4, r0
    d8a6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8a8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d8ac:	aa01      	add	r2, sp, #4
    d8ae:	2301      	movs	r3, #1
    d8b0:	2123      	movs	r1, #35	; 0x23
    d8b2:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d8b4:	b958      	cbnz	r0, d8ce <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d8b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8ba:	6825      	ldr	r5, [r4, #0]
    d8bc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d8be:	f366 1305 	bfi	r3, r6, #4, #2
    d8c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8c6:	aa01      	add	r2, sp, #4
    d8c8:	2301      	movs	r3, #1
    d8ca:	2123      	movs	r1, #35	; 0x23
    d8cc:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d8ce:	b002      	add	sp, #8
    d8d0:	bd70      	pop	{r4, r5, r6, pc}
    d8d2:	bf00      	nop

0000d8d4 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d8d4:	b570      	push	{r4, r5, r6, lr}
    d8d6:	b082      	sub	sp, #8
    d8d8:	4604      	mov	r4, r0
    d8da:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8dc:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d8e0:	aa01      	add	r2, sp, #4
    d8e2:	2301      	movs	r3, #1
    d8e4:	2123      	movs	r1, #35	; 0x23
    d8e6:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d8e8:	b958      	cbnz	r0, d902 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d8ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8ee:	6825      	ldr	r5, [r4, #0]
    d8f0:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d8f2:	f366 13c7 	bfi	r3, r6, #7, #1
    d8f6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8fa:	aa01      	add	r2, sp, #4
    d8fc:	2301      	movs	r3, #1
    d8fe:	2123      	movs	r1, #35	; 0x23
    d900:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d902:	b002      	add	sp, #8
    d904:	bd70      	pop	{r4, r5, r6, pc}
    d906:	bf00      	nop

0000d908 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d908:	b530      	push	{r4, r5, lr}
    d90a:	b083      	sub	sp, #12
    d90c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d90e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d912:	2301      	movs	r3, #1
    d914:	aa01      	add	r2, sp, #4
    d916:	2127      	movs	r1, #39	; 0x27
    d918:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d91a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d91e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d922:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d924:	b003      	add	sp, #12
    d926:	bd30      	pop	{r4, r5, pc}

0000d928 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d928:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d92a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d92e:	460a      	mov	r2, r1
    d930:	46a4      	mov	ip, r4
    d932:	2306      	movs	r3, #6
    d934:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d936:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d93a:	4760      	bx	ip

0000d93c <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d93c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d93e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    d942:	460a      	mov	r2, r1
    d944:	46a4      	mov	ip, r4
    d946:	2301      	movs	r3, #1
    d948:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d94a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d94e:	4760      	bx	ip

0000d950 <am_bsp_uart_string_print>:
    d950:	b510      	push	{r4, lr}
    d952:	b086      	sub	sp, #24
    d954:	7804      	ldrb	r4, [r0, #0]
    d956:	2300      	movs	r3, #0
    d958:	9300      	str	r3, [sp, #0]
    d95a:	b134      	cbz	r4, d96a <am_bsp_uart_string_print+0x1a>
    d95c:	461c      	mov	r4, r3
    d95e:	4603      	mov	r3, r0
    d960:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d964:	3401      	adds	r4, #1
    d966:	2a00      	cmp	r2, #0
    d968:	d1fa      	bne.n	d960 <am_bsp_uart_string_print+0x10>
    d96a:	4b0a      	ldr	r3, [pc, #40]	; (d994 <am_bsp_uart_string_print+0x44>)
    d96c:	9002      	str	r0, [sp, #8]
    d96e:	2200      	movs	r2, #0
    d970:	6818      	ldr	r0, [r3, #0]
    d972:	9403      	str	r4, [sp, #12]
    d974:	f04f 33ff 	mov.w	r3, #4294967295
    d978:	a901      	add	r1, sp, #4
    d97a:	9304      	str	r3, [sp, #16]
    d97c:	9201      	str	r2, [sp, #4]
    d97e:	f8cd d014 	str.w	sp, [sp, #20]
    d982:	f001 fdeb 	bl	f55c <am_hal_uart_transfer>
    d986:	9b00      	ldr	r3, [sp, #0]
    d988:	42a3      	cmp	r3, r4
    d98a:	d000      	beq.n	d98e <am_bsp_uart_string_print+0x3e>
    d98c:	e7fe      	b.n	d98c <am_bsp_uart_string_print+0x3c>
    d98e:	b006      	add	sp, #24
    d990:	bd10      	pop	{r4, pc}
    d992:	bf00      	nop
    d994:	1000116c 	.word	0x1000116c

0000d998 <am_bsp_low_power_init>:
    d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d99a:	f001 fa97 	bl	eecc <am_hal_itm_disable>
    d99e:	2000      	movs	r0, #0
    d9a0:	f7fe ffe2 	bl	c968 <am_util_stdio_printf_init>
    d9a4:	4b12      	ldr	r3, [pc, #72]	; (d9f0 <am_bsp_low_power_init+0x58>)
    d9a6:	4f13      	ldr	r7, [pc, #76]	; (d9f4 <am_bsp_low_power_init+0x5c>)
    d9a8:	6819      	ldr	r1, [r3, #0]
    d9aa:	2021      	movs	r0, #33	; 0x21
    d9ac:	f000 fbf2 	bl	e194 <am_hal_gpio_pinconfig>
    d9b0:	f001 fbce 	bl	f150 <am_hal_pwrctrl_low_power_init>
    d9b4:	2001      	movs	r0, #1
    d9b6:	f001 fc15 	bl	f1e4 <am_hal_rtc_osc_select>
    d9ba:	2100      	movs	r1, #0
    d9bc:	2003      	movs	r0, #3
    d9be:	f000 fa69 	bl	de94 <am_hal_clkgen_control>
    d9c2:	f001 fc1b 	bl	f1fc <am_hal_rtc_osc_disable>
    d9c6:	4b0c      	ldr	r3, [pc, #48]	; (d9f8 <am_bsp_low_power_init+0x60>)
    d9c8:	681e      	ldr	r6, [r3, #0]
    d9ca:	2400      	movs	r4, #0
    d9cc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d9d0:	4631      	mov	r1, r6
    d9d2:	4628      	mov	r0, r5
    d9d4:	f000 fbde 	bl	e194 <am_hal_gpio_pinconfig>
    d9d8:	2103      	movs	r1, #3
    d9da:	4628      	mov	r0, r5
    d9dc:	f000 fd1a 	bl	e414 <am_hal_gpio_state_write>
    d9e0:	3401      	adds	r4, #1
    d9e2:	4628      	mov	r0, r5
    d9e4:	2100      	movs	r1, #0
    d9e6:	f000 fd15 	bl	e414 <am_hal_gpio_state_write>
    d9ea:	2c04      	cmp	r4, #4
    d9ec:	d1ee      	bne.n	d9cc <am_bsp_low_power_init+0x34>
    d9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9f0:	00010068 	.word	0x00010068
    d9f4:	1000102c 	.word	0x1000102c
    d9f8:	0001006c 	.word	0x0001006c

0000d9fc <am_bsp_uart_printf_enable>:
    d9fc:	b510      	push	{r4, lr}
    d9fe:	4c10      	ldr	r4, [pc, #64]	; (da40 <am_bsp_uart_printf_enable+0x44>)
    da00:	4b10      	ldr	r3, [pc, #64]	; (da44 <am_bsp_uart_printf_enable+0x48>)
    da02:	4621      	mov	r1, r4
    da04:	2202      	movs	r2, #2
    da06:	2000      	movs	r0, #0
    da08:	601a      	str	r2, [r3, #0]
    da0a:	f001 fc01 	bl	f210 <am_hal_uart_initialize>
    da0e:	2200      	movs	r2, #0
    da10:	4611      	mov	r1, r2
    da12:	6820      	ldr	r0, [r4, #0]
    da14:	f001 fc24 	bl	f260 <am_hal_uart_power_control>
    da18:	6820      	ldr	r0, [r4, #0]
    da1a:	490b      	ldr	r1, [pc, #44]	; (da48 <am_bsp_uart_printf_enable+0x4c>)
    da1c:	f001 fc92 	bl	f344 <am_hal_uart_configure>
    da20:	4b0a      	ldr	r3, [pc, #40]	; (da4c <am_bsp_uart_printf_enable+0x50>)
    da22:	2030      	movs	r0, #48	; 0x30
    da24:	6819      	ldr	r1, [r3, #0]
    da26:	f000 fbb5 	bl	e194 <am_hal_gpio_pinconfig>
    da2a:	4b09      	ldr	r3, [pc, #36]	; (da50 <am_bsp_uart_printf_enable+0x54>)
    da2c:	2031      	movs	r0, #49	; 0x31
    da2e:	6819      	ldr	r1, [r3, #0]
    da30:	f000 fbb0 	bl	e194 <am_hal_gpio_pinconfig>
    da34:	4807      	ldr	r0, [pc, #28]	; (da54 <am_bsp_uart_printf_enable+0x58>)
    da36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da3a:	f7fe bf95 	b.w	c968 <am_util_stdio_printf_init>
    da3e:	bf00      	nop
    da40:	1000116c 	.word	0x1000116c
    da44:	10001170 	.word	0x10001170
    da48:	0000fef8 	.word	0x0000fef8
    da4c:	0000ff24 	.word	0x0000ff24
    da50:	0000ff20 	.word	0x0000ff20
    da54:	0000d951 	.word	0x0000d951

0000da58 <am_hal_adc_initialize>:
    da58:	b108      	cbz	r0, da5e <am_hal_adc_initialize+0x6>
    da5a:	2005      	movs	r0, #5
    da5c:	4770      	bx	lr
    da5e:	b1a9      	cbz	r1, da8c <am_hal_adc_initialize+0x34>
    da60:	4a0b      	ldr	r2, [pc, #44]	; (da90 <am_hal_adc_initialize+0x38>)
    da62:	78d3      	ldrb	r3, [r2, #3]
    da64:	f013 0001 	ands.w	r0, r3, #1
    da68:	d001      	beq.n	da6e <am_hal_adc_initialize+0x16>
    da6a:	2007      	movs	r0, #7
    da6c:	4770      	bx	lr
    da6e:	b430      	push	{r4, r5}
    da70:	f043 0301 	orr.w	r3, r3, #1
    da74:	70d3      	strb	r3, [r2, #3]
    da76:	6813      	ldr	r3, [r2, #0]
    da78:	4d06      	ldr	r5, [pc, #24]	; (da94 <am_hal_adc_initialize+0x3c>)
    da7a:	4c07      	ldr	r4, [pc, #28]	; (da98 <am_hal_adc_initialize+0x40>)
    da7c:	6050      	str	r0, [r2, #4]
    da7e:	f365 0317 	bfi	r3, r5, #0, #24
    da82:	6013      	str	r3, [r2, #0]
    da84:	6020      	str	r0, [r4, #0]
    da86:	600a      	str	r2, [r1, #0]
    da88:	bc30      	pop	{r4, r5}
    da8a:	4770      	bx	lr
    da8c:	2006      	movs	r0, #6
    da8e:	4770      	bx	lr
    da90:	10001704 	.word	0x10001704
    da94:	00afafaf 	.word	0x00afafaf
    da98:	10001700 	.word	0x10001700

0000da9c <am_hal_adc_deinitialize>:
    da9c:	b128      	cbz	r0, daaa <am_hal_adc_deinitialize+0xe>
    da9e:	6803      	ldr	r3, [r0, #0]
    daa0:	4a0c      	ldr	r2, [pc, #48]	; (dad4 <am_hal_adc_deinitialize+0x38>)
    daa2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    daa6:	4293      	cmp	r3, r2
    daa8:	d001      	beq.n	daae <am_hal_adc_deinitialize+0x12>
    daaa:	2002      	movs	r0, #2
    daac:	4770      	bx	lr
    daae:	78c3      	ldrb	r3, [r0, #3]
    dab0:	079b      	lsls	r3, r3, #30
    dab2:	d508      	bpl.n	dac6 <am_hal_adc_deinitialize+0x2a>
    dab4:	4b08      	ldr	r3, [pc, #32]	; (dad8 <am_hal_adc_deinitialize+0x3c>)
    dab6:	681a      	ldr	r2, [r3, #0]
    dab8:	f36f 0200 	bfc	r2, #0, #1
    dabc:	601a      	str	r2, [r3, #0]
    dabe:	78c3      	ldrb	r3, [r0, #3]
    dac0:	f36f 0341 	bfc	r3, #1, #1
    dac4:	70c3      	strb	r3, [r0, #3]
    dac6:	78c3      	ldrb	r3, [r0, #3]
    dac8:	f36f 0300 	bfc	r3, #0, #1
    dacc:	70c3      	strb	r3, [r0, #3]
    dace:	2000      	movs	r0, #0
    dad0:	4770      	bx	lr
    dad2:	bf00      	nop
    dad4:	01afafaf 	.word	0x01afafaf
    dad8:	50010000 	.word	0x50010000

0000dadc <am_hal_adc_configure>:
    dadc:	b128      	cbz	r0, daea <am_hal_adc_configure+0xe>
    dade:	6803      	ldr	r3, [r0, #0]
    dae0:	4a18      	ldr	r2, [pc, #96]	; (db44 <am_hal_adc_configure+0x68>)
    dae2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dae6:	4293      	cmp	r3, r2
    dae8:	d001      	beq.n	daee <am_hal_adc_configure+0x12>
    daea:	2002      	movs	r0, #2
    daec:	4770      	bx	lr
    daee:	b5f0      	push	{r4, r5, r6, r7, lr}
    daf0:	7808      	ldrb	r0, [r1, #0]
    daf2:	784d      	ldrb	r5, [r1, #1]
    daf4:	788c      	ldrb	r4, [r1, #2]
    daf6:	f891 e003 	ldrb.w	lr, [r1, #3]
    dafa:	790f      	ldrb	r7, [r1, #4]
    dafc:	794a      	ldrb	r2, [r1, #5]
    dafe:	798b      	ldrb	r3, [r1, #6]
    db00:	4e11      	ldr	r6, [pc, #68]	; (db48 <am_hal_adc_configure+0x6c>)
    db02:	0600      	lsls	r0, r0, #24
    db04:	04ed      	lsls	r5, r5, #19
    db06:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    db0a:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    db0e:	4328      	orrs	r0, r5
    db10:	0424      	lsls	r4, r4, #16
    db12:	ea4f 210e 	mov.w	r1, lr, lsl #8
    db16:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    db1a:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    db1e:	4304      	orrs	r4, r0
    db20:	f401 7040 	and.w	r0, r1, #768	; 0x300
    db24:	0139      	lsls	r1, r7, #4
    db26:	4320      	orrs	r0, r4
    db28:	f001 0110 	and.w	r1, r1, #16
    db2c:	00d2      	lsls	r2, r2, #3
    db2e:	4301      	orrs	r1, r0
    db30:	f002 0208 	and.w	r2, r2, #8
    db34:	009b      	lsls	r3, r3, #2
    db36:	430a      	orrs	r2, r1
    db38:	f003 0304 	and.w	r3, r3, #4
    db3c:	4313      	orrs	r3, r2
    db3e:	6033      	str	r3, [r6, #0]
    db40:	2000      	movs	r0, #0
    db42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db44:	01afafaf 	.word	0x01afafaf
    db48:	50010000 	.word	0x50010000

0000db4c <am_hal_adc_configure_slot>:
    db4c:	b128      	cbz	r0, db5a <am_hal_adc_configure_slot+0xe>
    db4e:	6803      	ldr	r3, [r0, #0]
    db50:	4816      	ldr	r0, [pc, #88]	; (dbac <am_hal_adc_configure_slot+0x60>)
    db52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db56:	4283      	cmp	r3, r0
    db58:	d001      	beq.n	db5e <am_hal_adc_configure_slot+0x12>
    db5a:	2002      	movs	r0, #2
    db5c:	4770      	bx	lr
    db5e:	2907      	cmp	r1, #7
    db60:	d901      	bls.n	db66 <am_hal_adc_configure_slot+0x1a>
    db62:	2005      	movs	r0, #5
    db64:	4770      	bx	lr
    db66:	b5f0      	push	{r4, r5, r6, r7, lr}
    db68:	7813      	ldrb	r3, [r2, #0]
    db6a:	7854      	ldrb	r4, [r2, #1]
    db6c:	7890      	ldrb	r0, [r2, #2]
    db6e:	78d7      	ldrb	r7, [r2, #3]
    db70:	f892 e004 	ldrb.w	lr, [r2, #4]
    db74:	4d0e      	ldr	r5, [pc, #56]	; (dbb0 <am_hal_adc_configure_slot+0x64>)
    db76:	4e0f      	ldr	r6, [pc, #60]	; (dbb4 <am_hal_adc_configure_slot+0x68>)
    db78:	061b      	lsls	r3, r3, #24
    db7a:	0424      	lsls	r4, r4, #16
    db7c:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    db80:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    db84:	4323      	orrs	r3, r4
    db86:	0202      	lsls	r2, r0, #8
    db88:	ea43 0e0e 	orr.w	lr, r3, lr
    db8c:	440d      	add	r5, r1
    db8e:	007b      	lsls	r3, r7, #1
    db90:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    db94:	ea4e 0202 	orr.w	r2, lr, r2
    db98:	00ad      	lsls	r5, r5, #2
    db9a:	f003 0302 	and.w	r3, r3, #2
    db9e:	4313      	orrs	r3, r2
    dba0:	602b      	str	r3, [r5, #0]
    dba2:	6833      	ldr	r3, [r6, #0]
    dba4:	3301      	adds	r3, #1
    dba6:	6033      	str	r3, [r6, #0]
    dba8:	2000      	movs	r0, #0
    dbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbac:	01afafaf 	.word	0x01afafaf
    dbb0:	14004003 	.word	0x14004003
    dbb4:	10001700 	.word	0x10001700

0000dbb8 <am_hal_adc_enable>:
    dbb8:	4603      	mov	r3, r0
    dbba:	b128      	cbz	r0, dbc8 <am_hal_adc_enable+0x10>
    dbbc:	6802      	ldr	r2, [r0, #0]
    dbbe:	490c      	ldr	r1, [pc, #48]	; (dbf0 <am_hal_adc_enable+0x38>)
    dbc0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dbc4:	428a      	cmp	r2, r1
    dbc6:	d001      	beq.n	dbcc <am_hal_adc_enable+0x14>
    dbc8:	2002      	movs	r0, #2
    dbca:	4770      	bx	lr
    dbcc:	78c2      	ldrb	r2, [r0, #3]
    dbce:	f002 0202 	and.w	r2, r2, #2
    dbd2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dbd6:	b94a      	cbnz	r2, dbec <am_hal_adc_enable+0x34>
    dbd8:	4906      	ldr	r1, [pc, #24]	; (dbf4 <am_hal_adc_enable+0x3c>)
    dbda:	680a      	ldr	r2, [r1, #0]
    dbdc:	f042 0201 	orr.w	r2, r2, #1
    dbe0:	600a      	str	r2, [r1, #0]
    dbe2:	78da      	ldrb	r2, [r3, #3]
    dbe4:	f042 0202 	orr.w	r2, r2, #2
    dbe8:	70da      	strb	r2, [r3, #3]
    dbea:	4770      	bx	lr
    dbec:	2000      	movs	r0, #0
    dbee:	4770      	bx	lr
    dbf0:	01afafaf 	.word	0x01afafaf
    dbf4:	50010000 	.word	0x50010000

0000dbf8 <am_hal_adc_disable>:
    dbf8:	b128      	cbz	r0, dc06 <am_hal_adc_disable+0xe>
    dbfa:	6803      	ldr	r3, [r0, #0]
    dbfc:	4a08      	ldr	r2, [pc, #32]	; (dc20 <am_hal_adc_disable+0x28>)
    dbfe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc02:	4293      	cmp	r3, r2
    dc04:	d001      	beq.n	dc0a <am_hal_adc_disable+0x12>
    dc06:	2002      	movs	r0, #2
    dc08:	4770      	bx	lr
    dc0a:	4b06      	ldr	r3, [pc, #24]	; (dc24 <am_hal_adc_disable+0x2c>)
    dc0c:	681a      	ldr	r2, [r3, #0]
    dc0e:	f36f 0200 	bfc	r2, #0, #1
    dc12:	601a      	str	r2, [r3, #0]
    dc14:	78c3      	ldrb	r3, [r0, #3]
    dc16:	f36f 0341 	bfc	r3, #1, #1
    dc1a:	70c3      	strb	r3, [r0, #3]
    dc1c:	2000      	movs	r0, #0
    dc1e:	4770      	bx	lr
    dc20:	01afafaf 	.word	0x01afafaf
    dc24:	50010000 	.word	0x50010000

0000dc28 <am_hal_adc_interrupt_enable>:
    dc28:	b128      	cbz	r0, dc36 <am_hal_adc_interrupt_enable+0xe>
    dc2a:	6803      	ldr	r3, [r0, #0]
    dc2c:	4a07      	ldr	r2, [pc, #28]	; (dc4c <am_hal_adc_interrupt_enable+0x24>)
    dc2e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc32:	4293      	cmp	r3, r2
    dc34:	d001      	beq.n	dc3a <am_hal_adc_interrupt_enable+0x12>
    dc36:	2002      	movs	r0, #2
    dc38:	4770      	bx	lr
    dc3a:	4b05      	ldr	r3, [pc, #20]	; (dc50 <am_hal_adc_interrupt_enable+0x28>)
    dc3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dc40:	4311      	orrs	r1, r2
    dc42:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dc46:	2000      	movs	r0, #0
    dc48:	4770      	bx	lr
    dc4a:	bf00      	nop
    dc4c:	01afafaf 	.word	0x01afafaf
    dc50:	50010000 	.word	0x50010000

0000dc54 <am_hal_adc_interrupt_status>:
    dc54:	b128      	cbz	r0, dc62 <am_hal_adc_interrupt_status+0xe>
    dc56:	6803      	ldr	r3, [r0, #0]
    dc58:	480b      	ldr	r0, [pc, #44]	; (dc88 <am_hal_adc_interrupt_status+0x34>)
    dc5a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc5e:	4283      	cmp	r3, r0
    dc60:	d001      	beq.n	dc66 <am_hal_adc_interrupt_status+0x12>
    dc62:	2002      	movs	r0, #2
    dc64:	4770      	bx	lr
    dc66:	b92a      	cbnz	r2, dc74 <am_hal_adc_interrupt_status+0x20>
    dc68:	4b08      	ldr	r3, [pc, #32]	; (dc8c <am_hal_adc_interrupt_status+0x38>)
    dc6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dc6e:	600b      	str	r3, [r1, #0]
    dc70:	4610      	mov	r0, r2
    dc72:	4770      	bx	lr
    dc74:	4a05      	ldr	r2, [pc, #20]	; (dc8c <am_hal_adc_interrupt_status+0x38>)
    dc76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dc7a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dc7e:	4003      	ands	r3, r0
    dc80:	600b      	str	r3, [r1, #0]
    dc82:	2000      	movs	r0, #0
    dc84:	4770      	bx	lr
    dc86:	bf00      	nop
    dc88:	01afafaf 	.word	0x01afafaf
    dc8c:	50010000 	.word	0x50010000

0000dc90 <am_hal_adc_interrupt_clear>:
    dc90:	b128      	cbz	r0, dc9e <am_hal_adc_interrupt_clear+0xe>
    dc92:	6803      	ldr	r3, [r0, #0]
    dc94:	4a05      	ldr	r2, [pc, #20]	; (dcac <am_hal_adc_interrupt_clear+0x1c>)
    dc96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc9a:	4293      	cmp	r3, r2
    dc9c:	d001      	beq.n	dca2 <am_hal_adc_interrupt_clear+0x12>
    dc9e:	2002      	movs	r0, #2
    dca0:	4770      	bx	lr
    dca2:	4b03      	ldr	r3, [pc, #12]	; (dcb0 <am_hal_adc_interrupt_clear+0x20>)
    dca4:	2000      	movs	r0, #0
    dca6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    dcaa:	4770      	bx	lr
    dcac:	01afafaf 	.word	0x01afafaf
    dcb0:	50010000 	.word	0x50010000

0000dcb4 <am_hal_adc_samples_read>:
    dcb4:	b148      	cbz	r0, dcca <am_hal_adc_samples_read+0x16>
    dcb6:	6800      	ldr	r0, [r0, #0]
    dcb8:	b470      	push	{r4, r5, r6}
    dcba:	4c1f      	ldr	r4, [pc, #124]	; (dd38 <am_hal_adc_samples_read+0x84>)
    dcbc:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dcc0:	42a0      	cmp	r0, r4
    dcc2:	d004      	beq.n	dcce <am_hal_adc_samples_read+0x1a>
    dcc4:	2002      	movs	r0, #2
    dcc6:	bc70      	pop	{r4, r5, r6}
    dcc8:	4770      	bx	lr
    dcca:	2002      	movs	r0, #2
    dccc:	4770      	bx	lr
    dcce:	b1db      	cbz	r3, dd08 <am_hal_adc_samples_read+0x54>
    dcd0:	2000      	movs	r0, #0
    dcd2:	6814      	ldr	r4, [r2, #0]
    dcd4:	6010      	str	r0, [r2, #0]
    dcd6:	b1c9      	cbz	r1, dd0c <am_hal_adc_samples_read+0x58>
    dcd8:	4d18      	ldr	r5, [pc, #96]	; (dd3c <am_hal_adc_samples_read+0x88>)
    dcda:	3308      	adds	r3, #8
    dcdc:	3904      	subs	r1, #4
    dcde:	f851 0f04 	ldr.w	r0, [r1, #4]!
    dce2:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    dce4:	f3c0 7002 	ubfx	r0, r0, #28, #3
    dce8:	f843 0c04 	str.w	r0, [r3, #-4]
    dcec:	6808      	ldr	r0, [r1, #0]
    dcee:	f3c0 108d 	ubfx	r0, r0, #6, #14
    dcf2:	f843 0c08 	str.w	r0, [r3, #-8]
    dcf6:	6810      	ldr	r0, [r2, #0]
    dcf8:	3001      	adds	r0, #1
    dcfa:	4284      	cmp	r4, r0
    dcfc:	f103 0308 	add.w	r3, r3, #8
    dd00:	6010      	str	r0, [r2, #0]
    dd02:	d8ec      	bhi.n	dcde <am_hal_adc_samples_read+0x2a>
    dd04:	2000      	movs	r0, #0
    dd06:	e7de      	b.n	dcc6 <am_hal_adc_samples_read+0x12>
    dd08:	2006      	movs	r0, #6
    dd0a:	e7dc      	b.n	dcc6 <am_hal_adc_samples_read+0x12>
    dd0c:	4e0b      	ldr	r6, [pc, #44]	; (dd3c <am_hal_adc_samples_read+0x88>)
    dd0e:	3308      	adds	r3, #8
    dd10:	e001      	b.n	dd16 <am_hal_adc_samples_read+0x62>
    dd12:	4284      	cmp	r4, r0
    dd14:	d9f6      	bls.n	dd04 <am_hal_adc_samples_read+0x50>
    dd16:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    dd18:	f3c1 108d 	ubfx	r0, r1, #6, #14
    dd1c:	f3c1 7502 	ubfx	r5, r1, #28, #3
    dd20:	e903 0021 	stmdb	r3, {r0, r5}
    dd24:	6810      	ldr	r0, [r2, #0]
    dd26:	f3c1 5107 	ubfx	r1, r1, #20, #8
    dd2a:	3001      	adds	r0, #1
    dd2c:	3308      	adds	r3, #8
    dd2e:	6010      	str	r0, [r2, #0]
    dd30:	2900      	cmp	r1, #0
    dd32:	d1ee      	bne.n	dd12 <am_hal_adc_samples_read+0x5e>
    dd34:	e7e6      	b.n	dd04 <am_hal_adc_samples_read+0x50>
    dd36:	bf00      	nop
    dd38:	01afafaf 	.word	0x01afafaf
    dd3c:	50010000 	.word	0x50010000

0000dd40 <am_hal_adc_sw_trigger>:
    dd40:	b128      	cbz	r0, dd4e <am_hal_adc_sw_trigger+0xe>
    dd42:	6803      	ldr	r3, [r0, #0]
    dd44:	4a05      	ldr	r2, [pc, #20]	; (dd5c <am_hal_adc_sw_trigger+0x1c>)
    dd46:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd4a:	4293      	cmp	r3, r2
    dd4c:	d001      	beq.n	dd52 <am_hal_adc_sw_trigger+0x12>
    dd4e:	2002      	movs	r0, #2
    dd50:	4770      	bx	lr
    dd52:	4b03      	ldr	r3, [pc, #12]	; (dd60 <am_hal_adc_sw_trigger+0x20>)
    dd54:	2237      	movs	r2, #55	; 0x37
    dd56:	609a      	str	r2, [r3, #8]
    dd58:	2000      	movs	r0, #0
    dd5a:	4770      	bx	lr
    dd5c:	01afafaf 	.word	0x01afafaf
    dd60:	50010000 	.word	0x50010000

0000dd64 <am_hal_adc_power_control>:
    dd64:	b140      	cbz	r0, dd78 <am_hal_adc_power_control+0x14>
    dd66:	6803      	ldr	r3, [r0, #0]
    dd68:	b570      	push	{r4, r5, r6, lr}
    dd6a:	4c2e      	ldr	r4, [pc, #184]	; (de24 <am_hal_adc_power_control+0xc0>)
    dd6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd70:	42a3      	cmp	r3, r4
    dd72:	d003      	beq.n	dd7c <am_hal_adc_power_control+0x18>
    dd74:	2002      	movs	r0, #2
    dd76:	bd70      	pop	{r4, r5, r6, pc}
    dd78:	2002      	movs	r0, #2
    dd7a:	4770      	bx	lr
    dd7c:	4604      	mov	r4, r0
    dd7e:	4615      	mov	r5, r2
    dd80:	460e      	mov	r6, r1
    dd82:	b329      	cbz	r1, ddd0 <am_hal_adc_power_control+0x6c>
    dd84:	2902      	cmp	r1, #2
    dd86:	d821      	bhi.n	ddcc <am_hal_adc_power_control+0x68>
    dd88:	b1da      	cbz	r2, ddc2 <am_hal_adc_power_control+0x5e>
    dd8a:	4b27      	ldr	r3, [pc, #156]	; (de28 <am_hal_adc_power_control+0xc4>)
    dd8c:	68da      	ldr	r2, [r3, #12]
    dd8e:	6142      	str	r2, [r0, #20]
    dd90:	691a      	ldr	r2, [r3, #16]
    dd92:	6182      	str	r2, [r0, #24]
    dd94:	695a      	ldr	r2, [r3, #20]
    dd96:	61c2      	str	r2, [r0, #28]
    dd98:	699a      	ldr	r2, [r3, #24]
    dd9a:	6202      	str	r2, [r0, #32]
    dd9c:	69da      	ldr	r2, [r3, #28]
    dd9e:	6242      	str	r2, [r0, #36]	; 0x24
    dda0:	6a1a      	ldr	r2, [r3, #32]
    dda2:	6282      	str	r2, [r0, #40]	; 0x28
    dda4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dda6:	62c2      	str	r2, [r0, #44]	; 0x2c
    dda8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddaa:	6302      	str	r2, [r0, #48]	; 0x30
    ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ddae:	6342      	str	r2, [r0, #52]	; 0x34
    ddb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ddb2:	6382      	str	r2, [r0, #56]	; 0x38
    ddb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ddb8:	63c2      	str	r2, [r0, #60]	; 0x3c
    ddba:	681b      	ldr	r3, [r3, #0]
    ddbc:	6103      	str	r3, [r0, #16]
    ddbe:	2301      	movs	r3, #1
    ddc0:	7303      	strb	r3, [r0, #12]
    ddc2:	200a      	movs	r0, #10
    ddc4:	f001 f998 	bl	f0f8 <am_hal_pwrctrl_periph_disable>
    ddc8:	2000      	movs	r0, #0
    ddca:	bd70      	pop	{r4, r5, r6, pc}
    ddcc:	2006      	movs	r0, #6
    ddce:	bd70      	pop	{r4, r5, r6, pc}
    ddd0:	b11a      	cbz	r2, ddda <am_hal_adc_power_control+0x76>
    ddd2:	7b03      	ldrb	r3, [r0, #12]
    ddd4:	b933      	cbnz	r3, dde4 <am_hal_adc_power_control+0x80>
    ddd6:	2007      	movs	r0, #7
    ddd8:	bd70      	pop	{r4, r5, r6, pc}
    ddda:	200a      	movs	r0, #10
    dddc:	f001 f962 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    dde0:	4628      	mov	r0, r5
    dde2:	bd70      	pop	{r4, r5, r6, pc}
    dde4:	200a      	movs	r0, #10
    dde6:	f001 f95d 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    ddea:	4b0f      	ldr	r3, [pc, #60]	; (de28 <am_hal_adc_power_control+0xc4>)
    ddec:	6962      	ldr	r2, [r4, #20]
    ddee:	60da      	str	r2, [r3, #12]
    ddf0:	69a2      	ldr	r2, [r4, #24]
    ddf2:	611a      	str	r2, [r3, #16]
    ddf4:	69e2      	ldr	r2, [r4, #28]
    ddf6:	615a      	str	r2, [r3, #20]
    ddf8:	6a22      	ldr	r2, [r4, #32]
    ddfa:	619a      	str	r2, [r3, #24]
    ddfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ddfe:	61da      	str	r2, [r3, #28]
    de00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    de02:	621a      	str	r2, [r3, #32]
    de04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    de06:	625a      	str	r2, [r3, #36]	; 0x24
    de08:	6b22      	ldr	r2, [r4, #48]	; 0x30
    de0a:	629a      	str	r2, [r3, #40]	; 0x28
    de0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    de0e:	62da      	str	r2, [r3, #44]	; 0x2c
    de10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    de12:	631a      	str	r2, [r3, #48]	; 0x30
    de14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    de16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    de1a:	6922      	ldr	r2, [r4, #16]
    de1c:	601a      	str	r2, [r3, #0]
    de1e:	4630      	mov	r0, r6
    de20:	7326      	strb	r6, [r4, #12]
    de22:	bd70      	pop	{r4, r5, r6, pc}
    de24:	01afafaf 	.word	0x01afafaf
    de28:	50010000 	.word	0x50010000

0000de2c <am_hal_cachectrl_config>:
    de2c:	b530      	push	{r4, r5, lr}
    de2e:	b083      	sub	sp, #12
    de30:	4605      	mov	r5, r0
    de32:	f000 fb3d 	bl	e4b0 <am_hal_interrupt_master_disable>
    de36:	4c11      	ldr	r4, [pc, #68]	; (de7c <am_hal_cachectrl_config+0x50>)
    de38:	9001      	str	r0, [sp, #4]
    de3a:	6823      	ldr	r3, [r4, #0]
    de3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    de40:	6023      	str	r3, [r4, #0]
    de42:	9801      	ldr	r0, [sp, #4]
    de44:	f000 fb38 	bl	e4b8 <am_hal_interrupt_master_set>
    de48:	78eb      	ldrb	r3, [r5, #3]
    de4a:	782a      	ldrb	r2, [r5, #0]
    de4c:	78a8      	ldrb	r0, [r5, #2]
    de4e:	7869      	ldrb	r1, [r5, #1]
    de50:	005b      	lsls	r3, r3, #1
    de52:	0112      	lsls	r2, r2, #4
    de54:	b2d2      	uxtb	r2, r2
    de56:	f003 0302 	and.w	r3, r3, #2
    de5a:	4313      	orrs	r3, r2
    de5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    de60:	0080      	lsls	r0, r0, #2
    de62:	f000 000c 	and.w	r0, r0, #12
    de66:	020a      	lsls	r2, r1, #8
    de68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    de6c:	4303      	orrs	r3, r0
    de6e:	f402 7240 	and.w	r2, r2, #768	; 0x300
    de72:	4313      	orrs	r3, r2
    de74:	2000      	movs	r0, #0
    de76:	6023      	str	r3, [r4, #0]
    de78:	b003      	add	sp, #12
    de7a:	bd30      	pop	{r4, r5, pc}
    de7c:	40018000 	.word	0x40018000

0000de80 <am_hal_cachectrl_enable>:
    de80:	4a03      	ldr	r2, [pc, #12]	; (de90 <am_hal_cachectrl_enable+0x10>)
    de82:	6813      	ldr	r3, [r2, #0]
    de84:	f043 0301 	orr.w	r3, r3, #1
    de88:	6013      	str	r3, [r2, #0]
    de8a:	2000      	movs	r0, #0
    de8c:	4770      	bx	lr
    de8e:	bf00      	nop
    de90:	40018000 	.word	0x40018000

0000de94 <am_hal_clkgen_control>:
    de94:	4b32      	ldr	r3, [pc, #200]	; (df60 <am_hal_clkgen_control+0xcc>)
    de96:	681a      	ldr	r2, [r3, #0]
    de98:	b912      	cbnz	r2, dea0 <am_hal_clkgen_control+0xc>
    de9a:	4a32      	ldr	r2, [pc, #200]	; (df64 <am_hal_clkgen_control+0xd0>)
    de9c:	6812      	ldr	r2, [r2, #0]
    de9e:	601a      	str	r2, [r3, #0]
    dea0:	2809      	cmp	r0, #9
    dea2:	d85a      	bhi.n	df5a <am_hal_clkgen_control+0xc6>
    dea4:	e8df f000 	tbb	[pc, r0]
    dea8:	261e160d 	.word	0x261e160d
    deac:	4640362e 	.word	0x4640362e
    deb0:	054e      	.short	0x054e
    deb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    deb6:	2000      	movs	r0, #0
    deb8:	6a1a      	ldr	r2, [r3, #32]
    deba:	f36f 0200 	bfc	r2, #0, #1
    debe:	621a      	str	r2, [r3, #32]
    dec0:	4770      	bx	lr
    dec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dec6:	2200      	movs	r2, #0
    dec8:	2147      	movs	r1, #71	; 0x47
    deca:	6159      	str	r1, [r3, #20]
    decc:	4610      	mov	r0, r2
    dece:	619a      	str	r2, [r3, #24]
    ded0:	615a      	str	r2, [r3, #20]
    ded2:	4770      	bx	lr
    ded4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ded8:	2000      	movs	r0, #0
    deda:	68d3      	ldr	r3, [r2, #12]
    dedc:	f023 0301 	bic.w	r3, r3, #1
    dee0:	60d3      	str	r3, [r2, #12]
    dee2:	4770      	bx	lr
    dee4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dee8:	2000      	movs	r0, #0
    deea:	68d3      	ldr	r3, [r2, #12]
    deec:	f023 0302 	bic.w	r3, r3, #2
    def0:	60d3      	str	r3, [r2, #12]
    def2:	4770      	bx	lr
    def4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    def8:	2000      	movs	r0, #0
    defa:	68d3      	ldr	r3, [r2, #12]
    defc:	f043 0301 	orr.w	r3, r3, #1
    df00:	60d3      	str	r3, [r2, #12]
    df02:	4770      	bx	lr
    df04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    df08:	2000      	movs	r0, #0
    df0a:	68d3      	ldr	r3, [r2, #12]
    df0c:	f043 0302 	orr.w	r3, r3, #2
    df10:	60d3      	str	r3, [r2, #12]
    df12:	4770      	bx	lr
    df14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    df18:	2200      	movs	r2, #0
    df1a:	2047      	movs	r0, #71	; 0x47
    df1c:	2101      	movs	r1, #1
    df1e:	6158      	str	r0, [r3, #20]
    df20:	6199      	str	r1, [r3, #24]
    df22:	4610      	mov	r0, r2
    df24:	615a      	str	r2, [r3, #20]
    df26:	4770      	bx	lr
    df28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    df2c:	2000      	movs	r0, #0
    df2e:	68da      	ldr	r2, [r3, #12]
    df30:	60da      	str	r2, [r3, #12]
    df32:	4770      	bx	lr
    df34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    df38:	2000      	movs	r0, #0
    df3a:	68d3      	ldr	r3, [r2, #12]
    df3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df40:	60d3      	str	r3, [r2, #12]
    df42:	4770      	bx	lr
    df44:	b139      	cbz	r1, df56 <am_hal_clkgen_control+0xc2>
    df46:	680b      	ldr	r3, [r1, #0]
    df48:	f043 0301 	orr.w	r3, r3, #1
    df4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    df50:	2000      	movs	r0, #0
    df52:	6213      	str	r3, [r2, #32]
    df54:	4770      	bx	lr
    df56:	4b04      	ldr	r3, [pc, #16]	; (df68 <am_hal_clkgen_control+0xd4>)
    df58:	e7f8      	b.n	df4c <am_hal_clkgen_control+0xb8>
    df5a:	2006      	movs	r0, #6
    df5c:	4770      	bx	lr
    df5e:	bf00      	nop
    df60:	10001174 	.word	0x10001174
    df64:	4ffff000 	.word	0x4ffff000
    df68:	0025b801 	.word	0x0025b801

0000df6c <am_hal_ctimer_config_single>:
    df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df6e:	b083      	sub	sp, #12
    df70:	460e      	mov	r6, r1
    df72:	4614      	mov	r4, r2
    df74:	0147      	lsls	r7, r0, #5
    df76:	4605      	mov	r5, r0
    df78:	f000 fa9a 	bl	e4b0 <am_hal_interrupt_master_disable>
    df7c:	4a19      	ldr	r2, [pc, #100]	; (dfe4 <am_hal_ctimer_config_single+0x78>)
    df7e:	9001      	str	r0, [sp, #4]
    df80:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    df84:	58bb      	ldr	r3, [r7, r2]
    df86:	d021      	beq.n	dfcc <am_hal_ctimer_config_single+0x60>
    df88:	ea23 0306 	bic.w	r3, r3, r6
    df8c:	1c71      	adds	r1, r6, #1
    df8e:	ea43 0304 	orr.w	r3, r3, r4
    df92:	d00c      	beq.n	dfae <am_hal_ctimer_config_single+0x42>
    df94:	50bb      	str	r3, [r7, r2]
    df96:	9801      	ldr	r0, [sp, #4]
    df98:	f000 fa8e 	bl	e4b8 <am_hal_interrupt_master_set>
    df9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dfa0:	429e      	cmp	r6, r3
    dfa2:	d01c      	beq.n	dfde <am_hal_ctimer_config_single+0x72>
    dfa4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dfa8:	d017      	beq.n	dfda <am_hal_ctimer_config_single+0x6e>
    dfaa:	b003      	add	sp, #12
    dfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dfb2:	50bb      	str	r3, [r7, r2]
    dfb4:	9801      	ldr	r0, [sp, #4]
    dfb6:	f000 fa7f 	bl	e4b8 <am_hal_interrupt_master_set>
    dfba:	2200      	movs	r2, #0
    dfbc:	4b0a      	ldr	r3, [pc, #40]	; (dfe8 <am_hal_ctimer_config_single+0x7c>)
    dfbe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dfc2:	f3c4 0444 	ubfx	r4, r4, #1, #5
    dfc6:	54ac      	strb	r4, [r5, r2]
    dfc8:	b003      	add	sp, #12
    dfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfcc:	0424      	lsls	r4, r4, #16
    dfce:	b29b      	uxth	r3, r3
    dfd0:	4323      	orrs	r3, r4
    dfd2:	50bb      	str	r3, [r7, r2]
    dfd4:	9801      	ldr	r0, [sp, #4]
    dfd6:	f000 fa6f 	bl	e4b8 <am_hal_interrupt_master_set>
    dfda:	2201      	movs	r2, #1
    dfdc:	e7ee      	b.n	dfbc <am_hal_ctimer_config_single+0x50>
    dfde:	2200      	movs	r2, #0
    dfe0:	e7ec      	b.n	dfbc <am_hal_ctimer_config_single+0x50>
    dfe2:	bf00      	nop
    dfe4:	4000800c 	.word	0x4000800c
    dfe8:	1000104c 	.word	0x1000104c

0000dfec <am_hal_ctimer_start>:
    dfec:	b570      	push	{r4, r5, r6, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	460c      	mov	r4, r1
    dff2:	0146      	lsls	r6, r0, #5
    dff4:	4605      	mov	r5, r0
    dff6:	f000 fa5b 	bl	e4b0 <am_hal_interrupt_master_disable>
    dffa:	4a0f      	ldr	r2, [pc, #60]	; (e038 <am_hal_ctimer_start+0x4c>)
    dffc:	9001      	str	r0, [sp, #4]
    dffe:	58b3      	ldr	r3, [r6, r2]
    e000:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e004:	ea23 0301 	bic.w	r3, r3, r1
    e008:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e00c:	430b      	orrs	r3, r1
    e00e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e012:	bf0c      	ite	eq
    e014:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e018:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e01c:	50b3      	str	r3, [r6, r2]
    e01e:	4b07      	ldr	r3, [pc, #28]	; (e03c <am_hal_ctimer_start+0x50>)
    e020:	9801      	ldr	r0, [sp, #4]
    e022:	bf0c      	ite	eq
    e024:	2101      	moveq	r1, #1
    e026:	2100      	movne	r1, #0
    e028:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e02c:	545c      	strb	r4, [r3, r1]
    e02e:	f000 fa43 	bl	e4b8 <am_hal_interrupt_master_set>
    e032:	b002      	add	sp, #8
    e034:	bd70      	pop	{r4, r5, r6, pc}
    e036:	bf00      	nop
    e038:	4000800c 	.word	0x4000800c
    e03c:	1000104c 	.word	0x1000104c

0000e040 <am_hal_ctimer_period_set>:
    e040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e044:	b082      	sub	sp, #8
    e046:	4689      	mov	r9, r1
    e048:	4698      	mov	r8, r3
    e04a:	0147      	lsls	r7, r0, #5
    e04c:	4614      	mov	r4, r2
    e04e:	f000 fa2f 	bl	e4b0 <am_hal_interrupt_master_disable>
    e052:	f8df a094 	ldr.w	sl, [pc, #148]	; e0e8 <am_hal_ctimer_period_set+0xa8>
    e056:	9001      	str	r0, [sp, #4]
    e058:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e05c:	4d20      	ldr	r5, [pc, #128]	; (e0e0 <am_hal_ctimer_period_set+0xa0>)
    e05e:	4e21      	ldr	r6, [pc, #132]	; (e0e4 <am_hal_ctimer_period_set+0xa4>)
    e060:	f857 300a 	ldr.w	r3, [r7, sl]
    e064:	d01a      	beq.n	e09c <am_hal_ctimer_period_set+0x5c>
    e066:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e06a:	2b80      	cmp	r3, #128	; 0x80
    e06c:	d01b      	beq.n	e0a6 <am_hal_ctimer_period_set+0x66>
    e06e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e072:	2000      	movs	r0, #0
    e074:	4591      	cmp	r9, r2
    e076:	4603      	mov	r3, r0
    e078:	d01e      	beq.n	e0b8 <am_hal_ctimer_period_set+0x78>
    e07a:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e07e:	d025      	beq.n	e0cc <am_hal_ctimer_period_set+0x8c>
    e080:	0c1b      	lsrs	r3, r3, #16
    e082:	b2a2      	uxth	r2, r4
    e084:	041b      	lsls	r3, r3, #16
    e086:	4310      	orrs	r0, r2
    e088:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e08c:	5178      	str	r0, [r7, r5]
    e08e:	51bb      	str	r3, [r7, r6]
    e090:	9801      	ldr	r0, [sp, #4]
    e092:	f000 fa11 	bl	e4b8 <am_hal_interrupt_master_set>
    e096:	b002      	add	sp, #8
    e098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e09c:	0c1b      	lsrs	r3, r3, #16
    e09e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e0a2:	2b80      	cmp	r3, #128	; 0x80
    e0a4:	d111      	bne.n	e0ca <am_hal_ctimer_period_set+0x8a>
    e0a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e0aa:	4591      	cmp	r9, r2
    e0ac:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e0b0:	4623      	mov	r3, r4
    e0b2:	ebc8 0404 	rsb	r4, r8, r4
    e0b6:	d1e0      	bne.n	e07a <am_hal_ctimer_period_set+0x3a>
    e0b8:	b2a3      	uxth	r3, r4
    e0ba:	4318      	orrs	r0, r3
    e0bc:	5178      	str	r0, [r7, r5]
    e0be:	9801      	ldr	r0, [sp, #4]
    e0c0:	f000 f9fa 	bl	e4b8 <am_hal_interrupt_master_set>
    e0c4:	b002      	add	sp, #8
    e0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0ca:	2000      	movs	r0, #0
    e0cc:	b2a3      	uxth	r3, r4
    e0ce:	4318      	orrs	r0, r3
    e0d0:	51b8      	str	r0, [r7, r6]
    e0d2:	9801      	ldr	r0, [sp, #4]
    e0d4:	f000 f9f0 	bl	e4b8 <am_hal_interrupt_master_set>
    e0d8:	b002      	add	sp, #8
    e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0de:	bf00      	nop
    e0e0:	40008004 	.word	0x40008004
    e0e4:	40008008 	.word	0x40008008
    e0e8:	4000800c 	.word	0x4000800c

0000e0ec <am_hal_ctimer_int_enable>:
    e0ec:	b510      	push	{r4, lr}
    e0ee:	b082      	sub	sp, #8
    e0f0:	4604      	mov	r4, r0
    e0f2:	f000 f9dd 	bl	e4b0 <am_hal_interrupt_master_disable>
    e0f6:	4b06      	ldr	r3, [pc, #24]	; (e110 <am_hal_ctimer_int_enable+0x24>)
    e0f8:	9001      	str	r0, [sp, #4]
    e0fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e0fe:	4314      	orrs	r4, r2
    e100:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e104:	9801      	ldr	r0, [sp, #4]
    e106:	f000 f9d7 	bl	e4b8 <am_hal_interrupt_master_set>
    e10a:	b002      	add	sp, #8
    e10c:	bd10      	pop	{r4, pc}
    e10e:	bf00      	nop
    e110:	40008000 	.word	0x40008000

0000e114 <am_hal_ctimer_int_clear>:
    e114:	b510      	push	{r4, lr}
    e116:	b082      	sub	sp, #8
    e118:	4604      	mov	r4, r0
    e11a:	f000 f9c9 	bl	e4b0 <am_hal_interrupt_master_disable>
    e11e:	4b04      	ldr	r3, [pc, #16]	; (e130 <am_hal_ctimer_int_clear+0x1c>)
    e120:	9001      	str	r0, [sp, #4]
    e122:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e126:	9801      	ldr	r0, [sp, #4]
    e128:	f000 f9c6 	bl	e4b8 <am_hal_interrupt_master_set>
    e12c:	b002      	add	sp, #8
    e12e:	bd10      	pop	{r4, pc}
    e130:	40008000 	.word	0x40008000

0000e134 <am_hal_flash_delay>:
    e134:	4b00      	ldr	r3, [pc, #0]	; (e138 <am_hal_flash_delay+0x4>)
    e136:	4718      	bx	r3
    e138:	0800009d 	.word	0x0800009d

0000e13c <am_hal_flash_delay_status_check>:
    e13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e140:	f89d 4018 	ldrb.w	r4, [sp, #24]
    e144:	460d      	mov	r5, r1
    e146:	4616      	mov	r6, r2
    e148:	461f      	mov	r7, r3
    e14a:	b17c      	cbz	r4, e16c <am_hal_flash_delay_status_check+0x30>
    e14c:	4604      	mov	r4, r0
    e14e:	f8df 8040 	ldr.w	r8, [pc, #64]	; e190 <am_hal_flash_delay_status_check+0x54>
    e152:	e002      	b.n	e15a <am_hal_flash_delay_status_check+0x1e>
    e154:	b1c4      	cbz	r4, e188 <am_hal_flash_delay_status_check+0x4c>
    e156:	47c0      	blx	r8
    e158:	3c01      	subs	r4, #1
    e15a:	682b      	ldr	r3, [r5, #0]
    e15c:	4033      	ands	r3, r6
    e15e:	429f      	cmp	r7, r3
    e160:	f04f 0001 	mov.w	r0, #1
    e164:	d1f6      	bne.n	e154 <am_hal_flash_delay_status_check+0x18>
    e166:	2000      	movs	r0, #0
    e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e16c:	f8df 8020 	ldr.w	r8, [pc, #32]	; e190 <am_hal_flash_delay_status_check+0x54>
    e170:	4604      	mov	r4, r0
    e172:	e002      	b.n	e17a <am_hal_flash_delay_status_check+0x3e>
    e174:	b144      	cbz	r4, e188 <am_hal_flash_delay_status_check+0x4c>
    e176:	47c0      	blx	r8
    e178:	3c01      	subs	r4, #1
    e17a:	682b      	ldr	r3, [r5, #0]
    e17c:	4033      	ands	r3, r6
    e17e:	429f      	cmp	r7, r3
    e180:	f04f 0001 	mov.w	r0, #1
    e184:	d0f6      	beq.n	e174 <am_hal_flash_delay_status_check+0x38>
    e186:	e7ee      	b.n	e166 <am_hal_flash_delay_status_check+0x2a>
    e188:	2004      	movs	r0, #4
    e18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e18e:	bf00      	nop
    e190:	0800009d 	.word	0x0800009d

0000e194 <am_hal_gpio_pinconfig>:
    e194:	2831      	cmp	r0, #49	; 0x31
    e196:	d901      	bls.n	e19c <am_hal_gpio_pinconfig+0x8>
    e198:	2006      	movs	r0, #6
    e19a:	4770      	bx	lr
    e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1a0:	f001 0307 	and.w	r3, r1, #7
    e1a4:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    e1a8:	b085      	sub	sp, #20
    e1aa:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e1ae:	d014      	beq.n	e1da <am_hal_gpio_pinconfig+0x46>
    e1b0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e1b4:	1db4      	adds	r4, r6, #6
    e1b6:	f004 0407 	and.w	r4, r4, #7
    e1ba:	2c03      	cmp	r4, #3
    e1bc:	f042 0201 	orr.w	r2, r2, #1
    e1c0:	f200 80ae 	bhi.w	e320 <am_hal_gpio_pinconfig+0x18c>
    e1c4:	4c85      	ldr	r4, [pc, #532]	; (e3dc <am_hal_gpio_pinconfig+0x248>)
    e1c6:	5c24      	ldrb	r4, [r4, r0]
    e1c8:	07e7      	lsls	r7, r4, #31
    e1ca:	d403      	bmi.n	e1d4 <am_hal_gpio_pinconfig+0x40>
    e1cc:	4884      	ldr	r0, [pc, #528]	; (e3e0 <am_hal_gpio_pinconfig+0x24c>)
    e1ce:	b005      	add	sp, #20
    e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1d4:	3e02      	subs	r6, #2
    e1d6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e1da:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e1de:	2c00      	cmp	r4, #0
    e1e0:	f040 8098 	bne.w	e314 <am_hal_gpio_pinconfig+0x180>
    e1e4:	4c7f      	ldr	r4, [pc, #508]	; (e3e4 <am_hal_gpio_pinconfig+0x250>)
    e1e6:	4d80      	ldr	r5, [pc, #512]	; (e3e8 <am_hal_gpio_pinconfig+0x254>)
    e1e8:	5c24      	ldrb	r4, [r4, r0]
    e1ea:	5c2d      	ldrb	r5, [r5, r0]
    e1ec:	411c      	asrs	r4, r3
    e1ee:	f014 0f01 	tst.w	r4, #1
    e1f2:	bf0c      	ite	eq
    e1f4:	2400      	moveq	r4, #0
    e1f6:	2402      	movne	r4, #2
    e1f8:	42ab      	cmp	r3, r5
    e1fa:	ea42 0204 	orr.w	r2, r2, r4
    e1fe:	f000 809b 	beq.w	e338 <am_hal_gpio_pinconfig+0x1a4>
    e202:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e206:	105d      	asrs	r5, r3, #1
    e208:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e20c:	00db      	lsls	r3, r3, #3
    e20e:	f3c1 2707 	ubfx	r7, r1, #8, #8
    e212:	f003 0408 	and.w	r4, r3, #8
    e216:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e21a:	f007 060c 	and.w	r6, r7, #12
    e21e:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e222:	2e04      	cmp	r6, #4
    e224:	ea43 0304 	orr.w	r3, r3, r4
    e228:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e22c:	462c      	mov	r4, r5
    e22e:	f000 8090 	beq.w	e352 <am_hal_gpio_pinconfig+0x1be>
    e232:	4c6e      	ldr	r4, [pc, #440]	; (e3ec <am_hal_gpio_pinconfig+0x258>)
    e234:	6824      	ldr	r4, [r4, #0]
    e236:	ebc4 0901 	rsb	r9, r4, r1
    e23a:	fab9 f989 	clz	r9, r9
    e23e:	ea4f 1959 	mov.w	r9, r9, lsr #5
    e242:	f017 0f60 	tst.w	r7, #96	; 0x60
    e246:	bf04      	itt	eq
    e248:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e24c:	f364 0300 	bfieq	r3, r4, #0, #1
    e250:	0084      	lsls	r4, r0, #2
    e252:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e256:	2902      	cmp	r1, #2
    e258:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e25c:	d07c      	beq.n	e358 <am_hal_gpio_pinconfig+0x1c4>
    e25e:	f200 8082 	bhi.w	e366 <am_hal_gpio_pinconfig+0x1d2>
    e262:	2901      	cmp	r1, #1
    e264:	bf08      	it	eq
    e266:	f042 0204 	orreq.w	r2, r2, #4
    e26a:	f005 0518 	and.w	r5, r5, #24
    e26e:	f04f 0800 	mov.w	r8, #0
    e272:	f004 041c 	and.w	r4, r4, #28
    e276:	0841      	lsrs	r1, r0, #1
    e278:	f020 0a03 	bic.w	sl, r0, #3
    e27c:	270f      	movs	r7, #15
    e27e:	f021 0103 	bic.w	r1, r1, #3
    e282:	40a7      	lsls	r7, r4
    e284:	26ff      	movs	r6, #255	; 0xff
    e286:	fa03 f404 	lsl.w	r4, r3, r4
    e28a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e28e:	40ae      	lsls	r6, r5
    e290:	9101      	str	r1, [sp, #4]
    e292:	9300      	str	r3, [sp, #0]
    e294:	4683      	mov	fp, r0
    e296:	fa02 f505 	lsl.w	r5, r2, r5
    e29a:	f000 f909 	bl	e4b0 <am_hal_interrupt_master_disable>
    e29e:	9b00      	ldr	r3, [sp, #0]
    e2a0:	9003      	str	r0, [sp, #12]
    e2a2:	43ff      	mvns	r7, r7
    e2a4:	43f6      	mvns	r6, r6
    e2a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e2aa:	f8df e160 	ldr.w	lr, [pc, #352]	; e40c <am_hal_gpio_pinconfig+0x278>
    e2ae:	4850      	ldr	r0, [pc, #320]	; (e3f0 <am_hal_gpio_pinconfig+0x25c>)
    e2b0:	9901      	ldr	r1, [sp, #4]
    e2b2:	f1b9 0f00 	cmp.w	r9, #0
    e2b6:	d00b      	beq.n	e2d0 <am_hal_gpio_pinconfig+0x13c>
    e2b8:	f00b 021f 	and.w	r2, fp, #31
    e2bc:	f04f 0901 	mov.w	r9, #1
    e2c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    e2c4:	f8df c148 	ldr.w	ip, [pc, #328]	; e410 <am_hal_gpio_pinconfig+0x27c>
    e2c8:	fa09 f202 	lsl.w	r2, r9, r2
    e2cc:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    e2d0:	4a48      	ldr	r2, [pc, #288]	; (e3f4 <am_hal_gpio_pinconfig+0x260>)
    e2d2:	f04f 0c73 	mov.w	ip, #115	; 0x73
    e2d6:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    e2da:	f8d3 c000 	ldr.w	ip, [r3]
    e2de:	ea06 0c0c 	and.w	ip, r6, ip
    e2e2:	ea4c 0505 	orr.w	r5, ip, r5
    e2e6:	601d      	str	r5, [r3, #0]
    e2e8:	f851 300e 	ldr.w	r3, [r1, lr]
    e2ec:	403b      	ands	r3, r7
    e2ee:	4323      	orrs	r3, r4
    e2f0:	f841 300e 	str.w	r3, [r1, lr]
    e2f4:	f85a 3000 	ldr.w	r3, [sl, r0]
    e2f8:	401e      	ands	r6, r3
    e2fa:	2400      	movs	r4, #0
    e2fc:	ea46 0608 	orr.w	r6, r6, r8
    e300:	f84a 6000 	str.w	r6, [sl, r0]
    e304:	6614      	str	r4, [r2, #96]	; 0x60
    e306:	9803      	ldr	r0, [sp, #12]
    e308:	f000 f8d6 	bl	e4b8 <am_hal_interrupt_master_set>
    e30c:	4620      	mov	r0, r4
    e30e:	b005      	add	sp, #20
    e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e314:	2c01      	cmp	r4, #1
    e316:	d015      	beq.n	e344 <am_hal_gpio_pinconfig+0x1b0>
    e318:	2c02      	cmp	r4, #2
    e31a:	d032      	beq.n	e382 <am_hal_gpio_pinconfig+0x1ee>
    e31c:	4836      	ldr	r0, [pc, #216]	; (e3f8 <am_hal_gpio_pinconfig+0x264>)
    e31e:	e756      	b.n	e1ce <am_hal_gpio_pinconfig+0x3a>
    e320:	2dc0      	cmp	r5, #192	; 0xc0
    e322:	d029      	beq.n	e378 <am_hal_gpio_pinconfig+0x1e4>
    e324:	2d20      	cmp	r5, #32
    e326:	f47f af58 	bne.w	e1da <am_hal_gpio_pinconfig+0x46>
    e32a:	4c2c      	ldr	r4, [pc, #176]	; (e3dc <am_hal_gpio_pinconfig+0x248>)
    e32c:	5c24      	ldrb	r4, [r4, r0]
    e32e:	f014 0f09 	tst.w	r4, #9
    e332:	f47f af4b 	bne.w	e1cc <am_hal_gpio_pinconfig+0x38>
    e336:	e750      	b.n	e1da <am_hal_gpio_pinconfig+0x46>
    e338:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e33c:	2c07      	cmp	r4, #7
    e33e:	d127      	bne.n	e390 <am_hal_gpio_pinconfig+0x1fc>
    e340:	482e      	ldr	r0, [pc, #184]	; (e3fc <am_hal_gpio_pinconfig+0x268>)
    e342:	e744      	b.n	e1ce <am_hal_gpio_pinconfig+0x3a>
    e344:	4c25      	ldr	r4, [pc, #148]	; (e3dc <am_hal_gpio_pinconfig+0x248>)
    e346:	5c24      	ldrb	r4, [r4, r0]
    e348:	07a5      	lsls	r5, r4, #30
    e34a:	d5e7      	bpl.n	e31c <am_hal_gpio_pinconfig+0x188>
    e34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e350:	e748      	b.n	e1e4 <am_hal_gpio_pinconfig+0x50>
    e352:	f04f 0901 	mov.w	r9, #1
    e356:	e774      	b.n	e242 <am_hal_gpio_pinconfig+0xae>
    e358:	f005 0518 	and.w	r5, r5, #24
    e35c:	f04f 0801 	mov.w	r8, #1
    e360:	fa08 f805 	lsl.w	r8, r8, r5
    e364:	e785      	b.n	e272 <am_hal_gpio_pinconfig+0xde>
    e366:	f005 0518 	and.w	r5, r5, #24
    e36a:	f04f 0801 	mov.w	r8, #1
    e36e:	f042 0204 	orr.w	r2, r2, #4
    e372:	fa08 f805 	lsl.w	r8, r8, r5
    e376:	e77c      	b.n	e272 <am_hal_gpio_pinconfig+0xde>
    e378:	2814      	cmp	r0, #20
    e37a:	f43f af2e 	beq.w	e1da <am_hal_gpio_pinconfig+0x46>
    e37e:	4820      	ldr	r0, [pc, #128]	; (e400 <am_hal_gpio_pinconfig+0x26c>)
    e380:	e725      	b.n	e1ce <am_hal_gpio_pinconfig+0x3a>
    e382:	4c16      	ldr	r4, [pc, #88]	; (e3dc <am_hal_gpio_pinconfig+0x248>)
    e384:	5c24      	ldrb	r4, [r4, r0]
    e386:	0764      	lsls	r4, r4, #29
    e388:	d5c8      	bpl.n	e31c <am_hal_gpio_pinconfig+0x188>
    e38a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e38e:	e729      	b.n	e1e4 <am_hal_gpio_pinconfig+0x50>
    e390:	4d1c      	ldr	r5, [pc, #112]	; (e404 <am_hal_gpio_pinconfig+0x270>)
    e392:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e396:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e39a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e39e:	429e      	cmp	r6, r3
    e3a0:	d00c      	beq.n	e3bc <am_hal_gpio_pinconfig+0x228>
    e3a2:	0084      	lsls	r4, r0, #2
    e3a4:	4425      	add	r5, r4
    e3a6:	786e      	ldrb	r6, [r5, #1]
    e3a8:	429e      	cmp	r6, r3
    e3aa:	d013      	beq.n	e3d4 <am_hal_gpio_pinconfig+0x240>
    e3ac:	78ae      	ldrb	r6, [r5, #2]
    e3ae:	429e      	cmp	r6, r3
    e3b0:	d00e      	beq.n	e3d0 <am_hal_gpio_pinconfig+0x23c>
    e3b2:	78ed      	ldrb	r5, [r5, #3]
    e3b4:	429d      	cmp	r5, r3
    e3b6:	d00f      	beq.n	e3d8 <am_hal_gpio_pinconfig+0x244>
    e3b8:	4813      	ldr	r0, [pc, #76]	; (e408 <am_hal_gpio_pinconfig+0x274>)
    e3ba:	e708      	b.n	e1ce <am_hal_gpio_pinconfig+0x3a>
    e3bc:	2300      	movs	r3, #0
    e3be:	0084      	lsls	r4, r0, #2
    e3c0:	005b      	lsls	r3, r3, #1
    e3c2:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e3c6:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e3ca:	f04f 0900 	mov.w	r9, #0
    e3ce:	e740      	b.n	e252 <am_hal_gpio_pinconfig+0xbe>
    e3d0:	2302      	movs	r3, #2
    e3d2:	e7f5      	b.n	e3c0 <am_hal_gpio_pinconfig+0x22c>
    e3d4:	2301      	movs	r3, #1
    e3d6:	e7f3      	b.n	e3c0 <am_hal_gpio_pinconfig+0x22c>
    e3d8:	2303      	movs	r3, #3
    e3da:	e7f1      	b.n	e3c0 <am_hal_gpio_pinconfig+0x22c>
    e3dc:	0000ff38 	.word	0x0000ff38
    e3e0:	08000100 	.word	0x08000100
    e3e4:	00010034 	.word	0x00010034
    e3e8:	00010070 	.word	0x00010070
    e3ec:	00010068 	.word	0x00010068
    e3f0:	400100e0 	.word	0x400100e0
    e3f4:	40010000 	.word	0x40010000
    e3f8:	08000102 	.word	0x08000102
    e3fc:	08000103 	.word	0x08000103
    e400:	08000101 	.word	0x08000101
    e404:	0000ff6c 	.word	0x0000ff6c
    e408:	08000104 	.word	0x08000104
    e40c:	40010040 	.word	0x40010040
    e410:	400100b4 	.word	0x400100b4

0000e414 <am_hal_gpio_state_write>:
    e414:	2831      	cmp	r0, #49	; 0x31
    e416:	d901      	bls.n	e41c <am_hal_gpio_state_write+0x8>
    e418:	2005      	movs	r0, #5
    e41a:	4770      	bx	lr
    e41c:	2905      	cmp	r1, #5
    e41e:	d901      	bls.n	e424 <am_hal_gpio_state_write+0x10>
    e420:	2006      	movs	r0, #6
    e422:	4770      	bx	lr
    e424:	b570      	push	{r4, r5, r6, lr}
    e426:	f000 031f 	and.w	r3, r0, #31
    e42a:	b082      	sub	sp, #8
    e42c:	2201      	movs	r2, #1
    e42e:	460d      	mov	r5, r1
    e430:	4604      	mov	r4, r0
    e432:	fa02 f603 	lsl.w	r6, r2, r3
    e436:	f000 f83b 	bl	e4b0 <am_hal_interrupt_master_disable>
    e43a:	1e69      	subs	r1, r5, #1
    e43c:	9001      	str	r0, [sp, #4]
    e43e:	0960      	lsrs	r0, r4, #5
    e440:	2904      	cmp	r1, #4
    e442:	d81c      	bhi.n	e47e <am_hal_gpio_state_write+0x6a>
    e444:	e8df f001 	tbb	[pc, r1]
    e448:	030c1017 	.word	0x030c1017
    e44c:	1f          	.byte	0x1f
    e44d:	00          	.byte	0x00
    e44e:	4b11      	ldr	r3, [pc, #68]	; (e494 <am_hal_gpio_state_write+0x80>)
    e450:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e454:	9801      	ldr	r0, [sp, #4]
    e456:	f000 f82f 	bl	e4b8 <am_hal_interrupt_master_set>
    e45a:	2000      	movs	r0, #0
    e45c:	b002      	add	sp, #8
    e45e:	bd70      	pop	{r4, r5, r6, pc}
    e460:	4b0d      	ldr	r3, [pc, #52]	; (e498 <am_hal_gpio_state_write+0x84>)
    e462:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e466:	e7f5      	b.n	e454 <am_hal_gpio_state_write+0x40>
    e468:	4a0c      	ldr	r2, [pc, #48]	; (e49c <am_hal_gpio_state_write+0x88>)
    e46a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e46e:	4073      	eors	r3, r6
    e470:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e474:	e7ee      	b.n	e454 <am_hal_gpio_state_write+0x40>
    e476:	4b0a      	ldr	r3, [pc, #40]	; (e4a0 <am_hal_gpio_state_write+0x8c>)
    e478:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e47c:	e7ea      	b.n	e454 <am_hal_gpio_state_write+0x40>
    e47e:	4b09      	ldr	r3, [pc, #36]	; (e4a4 <am_hal_gpio_state_write+0x90>)
    e480:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    e484:	e7e6      	b.n	e454 <am_hal_gpio_state_write+0x40>
    e486:	4a04      	ldr	r2, [pc, #16]	; (e498 <am_hal_gpio_state_write+0x84>)
    e488:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    e48c:	4073      	eors	r3, r6
    e48e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    e492:	e7df      	b.n	e454 <am_hal_gpio_state_write+0x40>
    e494:	400100a8 	.word	0x400100a8
    e498:	400100b4 	.word	0x400100b4
    e49c:	40010088 	.word	0x40010088
    e4a0:	40010090 	.word	0x40010090
    e4a4:	40010098 	.word	0x40010098

0000e4a8 <am_hal_interrupt_master_enable>:
    e4a8:	f3ef 8010 	mrs	r0, PRIMASK
    e4ac:	b662      	cpsie	i
    e4ae:	4770      	bx	lr

0000e4b0 <am_hal_interrupt_master_disable>:
    e4b0:	f3ef 8010 	mrs	r0, PRIMASK
    e4b4:	b672      	cpsid	i
    e4b6:	4770      	bx	lr

0000e4b8 <am_hal_interrupt_master_set>:
    e4b8:	f380 8810 	msr	PRIMASK, r0
    e4bc:	4770      	bx	lr
    e4be:	bf00      	nop

0000e4c0 <internal_iom_reset_on_error>:
    e4c0:	b570      	push	{r4, r5, r6, lr}
    e4c2:	6844      	ldr	r4, [r0, #4]
    e4c4:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e4c8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e4cc:	3404      	adds	r4, #4
    e4ce:	0324      	lsls	r4, r4, #12
    e4d0:	2300      	movs	r3, #0
    e4d2:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e4d6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e4da:	050b      	lsls	r3, r1, #20
    e4dc:	d52a      	bpl.n	e534 <internal_iom_reset_on_error+0x74>
    e4de:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e4e2:	079e      	lsls	r6, r3, #30
    e4e4:	d450      	bmi.n	e588 <internal_iom_reset_on_error+0xc8>
    e4e6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e4ea:	079a      	lsls	r2, r3, #30
    e4ec:	d508      	bpl.n	e500 <internal_iom_reset_on_error+0x40>
    e4ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e4f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e4f6:	2b03      	cmp	r3, #3
    e4f8:	d9f5      	bls.n	e4e6 <internal_iom_reset_on_error+0x26>
    e4fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e4fe:	e7f6      	b.n	e4ee <internal_iom_reset_on_error+0x2e>
    e500:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e504:	f003 0306 	and.w	r3, r3, #6
    e508:	2b04      	cmp	r3, #4
    e50a:	d1f9      	bne.n	e500 <internal_iom_reset_on_error+0x40>
    e50c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e510:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e514:	b173      	cbz	r3, e534 <internal_iom_reset_on_error+0x74>
    e516:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e51a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e51e:	2b03      	cmp	r3, #3
    e520:	d9f4      	bls.n	e50c <internal_iom_reset_on_error+0x4c>
    e522:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e526:	e7f6      	b.n	e516 <internal_iom_reset_on_error+0x56>
    e528:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e52c:	f003 0306 	and.w	r3, r3, #6
    e530:	2b04      	cmp	r3, #4
    e532:	d1f9      	bne.n	e528 <internal_iom_reset_on_error+0x68>
    e534:	06cb      	lsls	r3, r1, #27
    e536:	d520      	bpl.n	e57a <internal_iom_reset_on_error+0xba>
    e538:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e53c:	f003 0306 	and.w	r3, r3, #6
    e540:	2b04      	cmp	r3, #4
    e542:	d1f9      	bne.n	e538 <internal_iom_reset_on_error+0x78>
    e544:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e548:	f36f 1304 	bfc	r3, #4, #1
    e54c:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e550:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e554:	f36f 0341 	bfc	r3, #1, #1
    e558:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e55c:	0040      	lsls	r0, r0, #1
    e55e:	f7ff fde9 	bl	e134 <am_hal_flash_delay>
    e562:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e566:	f043 0302 	orr.w	r3, r3, #2
    e56a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e56e:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e572:	f043 0310 	orr.w	r3, r3, #16
    e576:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e57a:	f04f 33ff 	mov.w	r3, #4294967295
    e57e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e582:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e586:	bd70      	pop	{r4, r5, r6, pc}
    e588:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e58c:	4e07      	ldr	r6, [pc, #28]	; (e5ac <internal_iom_reset_on_error+0xec>)
    e58e:	2a00      	cmp	r2, #0
    e590:	d0ca      	beq.n	e528 <internal_iom_reset_on_error+0x68>
    e592:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e596:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e59a:	2b03      	cmp	r3, #3
    e59c:	d9f9      	bls.n	e592 <internal_iom_reset_on_error+0xd2>
    e59e:	2a04      	cmp	r2, #4
    e5a0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e5a4:	d9c0      	bls.n	e528 <internal_iom_reset_on_error+0x68>
    e5a6:	3a04      	subs	r2, #4
    e5a8:	e7f1      	b.n	e58e <internal_iom_reset_on_error+0xce>
    e5aa:	bf00      	nop
    e5ac:	deadbeef 	.word	0xdeadbeef

0000e5b0 <am_hal_iom_initialize>:
    e5b0:	2805      	cmp	r0, #5
    e5b2:	d901      	bls.n	e5b8 <am_hal_iom_initialize+0x8>
    e5b4:	2005      	movs	r0, #5
    e5b6:	4770      	bx	lr
    e5b8:	b1e1      	cbz	r1, e5f4 <am_hal_iom_initialize+0x44>
    e5ba:	b4f0      	push	{r4, r5, r6, r7}
    e5bc:	f640 049c 	movw	r4, #2204	; 0x89c
    e5c0:	4e0d      	ldr	r6, [pc, #52]	; (e5f8 <am_hal_iom_initialize+0x48>)
    e5c2:	fb04 f400 	mul.w	r4, r4, r0
    e5c6:	1935      	adds	r5, r6, r4
    e5c8:	4602      	mov	r2, r0
    e5ca:	78e8      	ldrb	r0, [r5, #3]
    e5cc:	f010 0301 	ands.w	r3, r0, #1
    e5d0:	d002      	beq.n	e5d8 <am_hal_iom_initialize+0x28>
    e5d2:	2007      	movs	r0, #7
    e5d4:	bcf0      	pop	{r4, r5, r6, r7}
    e5d6:	4770      	bx	lr
    e5d8:	f040 0001 	orr.w	r0, r0, #1
    e5dc:	f363 0041 	bfi	r0, r3, #1, #1
    e5e0:	70e8      	strb	r0, [r5, #3]
    e5e2:	5937      	ldr	r7, [r6, r4]
    e5e4:	4805      	ldr	r0, [pc, #20]	; (e5fc <am_hal_iom_initialize+0x4c>)
    e5e6:	f360 0717 	bfi	r7, r0, #0, #24
    e5ea:	5137      	str	r7, [r6, r4]
    e5ec:	4618      	mov	r0, r3
    e5ee:	606a      	str	r2, [r5, #4]
    e5f0:	600d      	str	r5, [r1, #0]
    e5f2:	e7ef      	b.n	e5d4 <am_hal_iom_initialize+0x24>
    e5f4:	2006      	movs	r0, #6
    e5f6:	4770      	bx	lr
    e5f8:	10001744 	.word	0x10001744
    e5fc:	00123456 	.word	0x00123456

0000e600 <am_hal_iom_enable>:
    e600:	b128      	cbz	r0, e60e <am_hal_iom_enable+0xe>
    e602:	6803      	ldr	r3, [r0, #0]
    e604:	4a34      	ldr	r2, [pc, #208]	; (e6d8 <am_hal_iom_enable+0xd8>)
    e606:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e60a:	4293      	cmp	r3, r2
    e60c:	d001      	beq.n	e612 <am_hal_iom_enable+0x12>
    e60e:	2002      	movs	r0, #2
    e610:	4770      	bx	lr
    e612:	78c3      	ldrb	r3, [r0, #3]
    e614:	079b      	lsls	r3, r3, #30
    e616:	d45d      	bmi.n	e6d4 <am_hal_iom_enable+0xd4>
    e618:	6843      	ldr	r3, [r0, #4]
    e61a:	7a01      	ldrb	r1, [r0, #8]
    e61c:	b570      	push	{r4, r5, r6, lr}
    e61e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e622:	3304      	adds	r3, #4
    e624:	031b      	lsls	r3, r3, #12
    e626:	3100      	adds	r1, #0
    e628:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e62c:	bf18      	it	ne
    e62e:	2101      	movne	r1, #1
    e630:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e634:	4291      	cmp	r1, r2
    e636:	bf0c      	ite	eq
    e638:	2201      	moveq	r2, #1
    e63a:	2210      	movne	r2, #16
    e63c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e640:	68c3      	ldr	r3, [r0, #12]
    e642:	b084      	sub	sp, #16
    e644:	4604      	mov	r4, r0
    e646:	2b00      	cmp	r3, #0
    e648:	d039      	beq.n	e6be <am_hal_iom_enable+0xbe>
    e64a:	6843      	ldr	r3, [r0, #4]
    e64c:	4923      	ldr	r1, [pc, #140]	; (e6dc <am_hal_iom_enable+0xdc>)
    e64e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e652:	3304      	adds	r3, #4
    e654:	031a      	lsls	r2, r3, #12
    e656:	2300      	movs	r3, #0
    e658:	6243      	str	r3, [r0, #36]	; 0x24
    e65a:	61c3      	str	r3, [r0, #28]
    e65c:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    e660:	6902      	ldr	r2, [r0, #16]
    e662:	6840      	ldr	r0, [r0, #4]
    e664:	68e6      	ldr	r6, [r4, #12]
    e666:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    e66a:	2501      	movs	r5, #1
    e66c:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    e670:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    e674:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    e678:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    e67c:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    e680:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    e684:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    e688:	6223      	str	r3, [r4, #32]
    e68a:	b2c0      	uxtb	r0, r0
    e68c:	fa22 f305 	lsr.w	r3, r2, r5
    e690:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    e694:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e698:	a901      	add	r1, sp, #4
    e69a:	9301      	str	r3, [sp, #4]
    e69c:	9602      	str	r6, [sp, #8]
    e69e:	f88d 500c 	strb.w	r5, [sp, #12]
    e6a2:	f001 f995 	bl	f9d0 <am_hal_cmdq_init>
    e6a6:	6863      	ldr	r3, [r4, #4]
    e6a8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6ac:	3304      	adds	r3, #4
    e6ae:	031b      	lsls	r3, r3, #12
    e6b0:	b960      	cbnz	r0, e6cc <am_hal_iom_enable+0xcc>
    e6b2:	f44f 7180 	mov.w	r1, #256	; 0x100
    e6b6:	2202      	movs	r2, #2
    e6b8:	6221      	str	r1, [r4, #32]
    e6ba:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e6be:	78e3      	ldrb	r3, [r4, #3]
    e6c0:	f043 0302 	orr.w	r3, r3, #2
    e6c4:	70e3      	strb	r3, [r4, #3]
    e6c6:	2000      	movs	r0, #0
    e6c8:	b004      	add	sp, #16
    e6ca:	bd70      	pop	{r4, r5, r6, pc}
    e6cc:	2202      	movs	r2, #2
    e6ce:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e6d2:	e7f9      	b.n	e6c8 <am_hal_iom_enable+0xc8>
    e6d4:	2000      	movs	r0, #0
    e6d6:	4770      	bx	lr
    e6d8:	01123456 	.word	0x01123456
    e6dc:	00800040 	.word	0x00800040

0000e6e0 <am_hal_iom_power_ctrl>:
    e6e0:	b140      	cbz	r0, e6f4 <am_hal_iom_power_ctrl+0x14>
    e6e2:	b538      	push	{r3, r4, r5, lr}
    e6e4:	6803      	ldr	r3, [r0, #0]
    e6e6:	4c85      	ldr	r4, [pc, #532]	; (e8fc <am_hal_iom_power_ctrl+0x21c>)
    e6e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6ec:	42a3      	cmp	r3, r4
    e6ee:	d003      	beq.n	e6f8 <am_hal_iom_power_ctrl+0x18>
    e6f0:	2002      	movs	r0, #2
    e6f2:	bd38      	pop	{r3, r4, r5, pc}
    e6f4:	2002      	movs	r0, #2
    e6f6:	4770      	bx	lr
    e6f8:	4604      	mov	r4, r0
    e6fa:	4615      	mov	r5, r2
    e6fc:	b199      	cbz	r1, e726 <am_hal_iom_power_ctrl+0x46>
    e6fe:	2902      	cmp	r1, #2
    e700:	d80f      	bhi.n	e722 <am_hal_iom_power_ctrl+0x42>
    e702:	78c3      	ldrb	r3, [r0, #3]
    e704:	6840      	ldr	r0, [r0, #4]
    e706:	079a      	lsls	r2, r3, #30
    e708:	d519      	bpl.n	e73e <am_hal_iom_power_ctrl+0x5e>
    e70a:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e70e:	3304      	adds	r3, #4
    e710:	031b      	lsls	r3, r3, #12
    e712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e716:	f003 0306 	and.w	r3, r3, #6
    e71a:	2b04      	cmp	r3, #4
    e71c:	d00c      	beq.n	e738 <am_hal_iom_power_ctrl+0x58>
    e71e:	2003      	movs	r0, #3
    e720:	bd38      	pop	{r3, r4, r5, pc}
    e722:	2006      	movs	r0, #6
    e724:	bd38      	pop	{r3, r4, r5, pc}
    e726:	2a00      	cmp	r2, #0
    e728:	f000 80cf 	beq.w	e8ca <am_hal_iom_power_ctrl+0x1ea>
    e72c:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    e730:	2b00      	cmp	r3, #0
    e732:	d146      	bne.n	e7c2 <am_hal_iom_power_ctrl+0xe2>
    e734:	2007      	movs	r0, #7
    e736:	bd38      	pop	{r3, r4, r5, pc}
    e738:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e73a:	2b00      	cmp	r3, #0
    e73c:	d1ef      	bne.n	e71e <am_hal_iom_power_ctrl+0x3e>
    e73e:	b3d5      	cbz	r5, e7b6 <am_hal_iom_power_ctrl+0xd6>
    e740:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e744:	3304      	adds	r3, #4
    e746:	031b      	lsls	r3, r3, #12
    e748:	2201      	movs	r2, #1
    e74a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e74e:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    e752:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e756:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e75a:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e75e:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    e762:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e766:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e76a:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e76e:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e772:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e776:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e77a:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e77e:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e782:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e786:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e78a:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e78e:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e792:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e796:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e79a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e79e:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e7a2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e7a6:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e7aa:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e7ae:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    e7b2:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    e7b6:	3002      	adds	r0, #2
    e7b8:	b2c0      	uxtb	r0, r0
    e7ba:	f000 fc9d 	bl	f0f8 <am_hal_pwrctrl_periph_disable>
    e7be:	2000      	movs	r0, #0
    e7c0:	bd38      	pop	{r3, r4, r5, pc}
    e7c2:	6843      	ldr	r3, [r0, #4]
    e7c4:	1c98      	adds	r0, r3, #2
    e7c6:	b2c0      	uxtb	r0, r0
    e7c8:	f000 fc6c 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    e7cc:	6863      	ldr	r3, [r4, #4]
    e7ce:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    e7d2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7d6:	3304      	adds	r3, #4
    e7d8:	031b      	lsls	r3, r3, #12
    e7da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e7de:	6863      	ldr	r3, [r4, #4]
    e7e0:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    e7e4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7e8:	3304      	adds	r3, #4
    e7ea:	031b      	lsls	r3, r3, #12
    e7ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e7f0:	6863      	ldr	r3, [r4, #4]
    e7f2:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    e7f6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7fa:	3304      	adds	r3, #4
    e7fc:	031b      	lsls	r3, r3, #12
    e7fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e802:	6863      	ldr	r3, [r4, #4]
    e804:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    e808:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e80c:	3304      	adds	r3, #4
    e80e:	031b      	lsls	r3, r3, #12
    e810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    e814:	6863      	ldr	r3, [r4, #4]
    e816:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e81a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e81e:	3304      	adds	r3, #4
    e820:	031b      	lsls	r3, r3, #12
    e822:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    e826:	6863      	ldr	r3, [r4, #4]
    e828:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    e82c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e830:	3304      	adds	r3, #4
    e832:	031b      	lsls	r3, r3, #12
    e834:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    e838:	6863      	ldr	r3, [r4, #4]
    e83a:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    e83e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e842:	3304      	adds	r3, #4
    e844:	031b      	lsls	r3, r3, #12
    e846:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    e84a:	6863      	ldr	r3, [r4, #4]
    e84c:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    e850:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e854:	3304      	adds	r3, #4
    e856:	031b      	lsls	r3, r3, #12
    e858:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    e85c:	6863      	ldr	r3, [r4, #4]
    e85e:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    e862:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e866:	3304      	adds	r3, #4
    e868:	031b      	lsls	r3, r3, #12
    e86a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e86e:	6863      	ldr	r3, [r4, #4]
    e870:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    e874:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e878:	3304      	adds	r3, #4
    e87a:	031b      	lsls	r3, r3, #12
    e87c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e880:	6863      	ldr	r3, [r4, #4]
    e882:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    e886:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e88a:	3304      	adds	r3, #4
    e88c:	031b      	lsls	r3, r3, #12
    e88e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e892:	6863      	ldr	r3, [r4, #4]
    e894:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    e898:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e89c:	3304      	adds	r3, #4
    e89e:	031b      	lsls	r3, r3, #12
    e8a0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e8a4:	6863      	ldr	r3, [r4, #4]
    e8a6:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    e8aa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e8ae:	3304      	adds	r3, #4
    e8b0:	031b      	lsls	r3, r3, #12
    e8b2:	f022 0201 	bic.w	r2, r2, #1
    e8b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    e8ba:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    e8be:	07db      	lsls	r3, r3, #31
    e8c0:	d40a      	bmi.n	e8d8 <am_hal_iom_power_ctrl+0x1f8>
    e8c2:	2000      	movs	r0, #0
    e8c4:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    e8c8:	bd38      	pop	{r3, r4, r5, pc}
    e8ca:	6840      	ldr	r0, [r0, #4]
    e8cc:	3002      	adds	r0, #2
    e8ce:	b2c0      	uxtb	r0, r0
    e8d0:	f000 fbe8 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    e8d4:	4628      	mov	r0, r5
    e8d6:	bd38      	pop	{r3, r4, r5, pc}
    e8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8da:	b953      	cbnz	r3, e8f2 <am_hal_iom_power_ctrl+0x212>
    e8dc:	6863      	ldr	r3, [r4, #4]
    e8de:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e8e2:	3304      	adds	r3, #4
    e8e4:	031b      	lsls	r3, r3, #12
    e8e6:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e8ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e8ee:	e883 000c 	stmia.w	r3, {r2, r3}
    e8f2:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e8f6:	f001 f8cf 	bl	fa98 <am_hal_cmdq_enable>
    e8fa:	e7e2      	b.n	e8c2 <am_hal_iom_power_ctrl+0x1e2>
    e8fc:	01123456 	.word	0x01123456

0000e900 <am_hal_iom_configure>:
    e900:	b128      	cbz	r0, e90e <am_hal_iom_configure+0xe>
    e902:	6803      	ldr	r3, [r0, #0]
    e904:	4a8b      	ldr	r2, [pc, #556]	; (eb34 <am_hal_iom_configure+0x234>)
    e906:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e90a:	4293      	cmp	r3, r2
    e90c:	d001      	beq.n	e912 <am_hal_iom_configure+0x12>
    e90e:	2002      	movs	r0, #2
    e910:	4770      	bx	lr
    e912:	b111      	cbz	r1, e91a <am_hal_iom_configure+0x1a>
    e914:	6843      	ldr	r3, [r0, #4]
    e916:	2b05      	cmp	r3, #5
    e918:	d901      	bls.n	e91e <am_hal_iom_configure+0x1e>
    e91a:	2006      	movs	r0, #6
    e91c:	4770      	bx	lr
    e91e:	78c2      	ldrb	r2, [r0, #3]
    e920:	0792      	lsls	r2, r2, #30
    e922:	d501      	bpl.n	e928 <am_hal_iom_configure+0x28>
    e924:	2007      	movs	r0, #7
    e926:	4770      	bx	lr
    e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e92c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e930:	3304      	adds	r3, #4
    e932:	780a      	ldrb	r2, [r1, #0]
    e934:	7202      	strb	r2, [r0, #8]
    e936:	031b      	lsls	r3, r3, #12
    e938:	f241 0410 	movw	r4, #4112	; 0x1010
    e93c:	b083      	sub	sp, #12
    e93e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e942:	b942      	cbnz	r2, e956 <am_hal_iom_configure+0x56>
    e944:	f891 c008 	ldrb.w	ip, [r1, #8]
    e948:	f1bc 0f03 	cmp.w	ip, #3
    e94c:	d908      	bls.n	e960 <am_hal_iom_configure+0x60>
    e94e:	2006      	movs	r0, #6
    e950:	b003      	add	sp, #12
    e952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e956:	2a01      	cmp	r2, #1
    e958:	f000 80c3 	beq.w	eae2 <am_hal_iom_configure+0x1e2>
    e95c:	2005      	movs	r0, #5
    e95e:	e7f7      	b.n	e950 <am_hal_iom_configure+0x50>
    e960:	684f      	ldr	r7, [r1, #4]
    e962:	2f00      	cmp	r7, #0
    e964:	f000 80bb 	beq.w	eade <am_hal_iom_configure+0x1de>
    e968:	4e73      	ldr	r6, [pc, #460]	; (eb38 <am_hal_iom_configure+0x238>)
    e96a:	fbb6 f6f7 	udiv	r6, r6, r7
    e96e:	fb07 f206 	mul.w	r2, r7, r6
    e972:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    e976:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    e97a:	2a00      	cmp	r2, #0
    e97c:	bf18      	it	ne
    e97e:	3601      	addne	r6, #1
    e980:	4274      	negs	r4, r6
    e982:	4034      	ands	r4, r6
    e984:	fab4 f484 	clz	r4, r4
    e988:	f1c4 041f 	rsb	r4, r4, #31
    e98c:	2c06      	cmp	r4, #6
    e98e:	bfa8      	it	ge
    e990:	2406      	movge	r4, #6
    e992:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    e996:	f240 80b7 	bls.w	eb08 <am_hal_iom_configure+0x208>
    e99a:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    e99e:	4d67      	ldr	r5, [pc, #412]	; (eb3c <am_hal_iom_configure+0x23c>)
    e9a0:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    e9a4:	42aa      	cmp	r2, r5
    e9a6:	bf8c      	ite	hi
    e9a8:	f04f 0e00 	movhi.w	lr, #0
    e9ac:	f04f 0e01 	movls.w	lr, #1
    e9b0:	ea4f 024e 	mov.w	r2, lr, lsl #1
    e9b4:	3201      	adds	r2, #1
    e9b6:	fa02 f804 	lsl.w	r8, r2, r4
    e9ba:	fbb6 f5f8 	udiv	r5, r6, r8
    e9be:	fb08 6815 	mls	r8, r8, r5, r6
    e9c2:	f1b8 0f00 	cmp.w	r8, #0
    e9c6:	bf18      	it	ne
    e9c8:	3501      	addne	r5, #1
    e9ca:	fab5 f885 	clz	r8, r5
    e9ce:	f1c8 081f 	rsb	r8, r8, #31
    e9d2:	f1b8 0f07 	cmp.w	r8, #7
    e9d6:	f240 8094 	bls.w	eb02 <am_hal_iom_configure+0x202>
    e9da:	3c07      	subs	r4, #7
    e9dc:	4444      	add	r4, r8
    e9de:	f104 0901 	add.w	r9, r4, #1
    e9e2:	f1b9 0f07 	cmp.w	r9, #7
    e9e6:	d87a      	bhi.n	eade <am_hal_iom_configure+0x1de>
    e9e8:	f1a8 0807 	sub.w	r8, r8, #7
    e9ec:	f04f 0a01 	mov.w	sl, #1
    e9f0:	fa0a fa08 	lsl.w	sl, sl, r8
    e9f4:	f10a 3aff 	add.w	sl, sl, #4294967295
    e9f8:	ea0a 0a05 	and.w	sl, sl, r5
    e9fc:	fa25 f508 	lsr.w	r5, r5, r8
    ea00:	f1ba 0f00 	cmp.w	sl, #0
    ea04:	bf18      	it	ne
    ea06:	3501      	addne	r5, #1
    ea08:	f8df 8158 	ldr.w	r8, [pc, #344]	; eb64 <am_hal_iom_configure+0x264>
    ea0c:	4547      	cmp	r7, r8
    ea0e:	d87e      	bhi.n	eb0e <am_hal_iom_configure+0x20e>
    ea10:	f04f 0801 	mov.w	r8, #1
    ea14:	fa08 f804 	lsl.w	r8, r8, r4
    ea18:	ebb8 0806 	subs.w	r8, r8, r6
    ea1c:	bf18      	it	ne
    ea1e:	f04f 0801 	movne.w	r8, #1
    ea22:	ea4f 066c 	mov.w	r6, ip, asr #1
    ea26:	2e01      	cmp	r6, #1
    ea28:	d074      	beq.n	eb14 <am_hal_iom_configure+0x214>
    ea2a:	3d01      	subs	r5, #1
    ea2c:	086e      	lsrs	r6, r5, #1
    ea2e:	9600      	str	r6, [sp, #0]
    ea30:	fb05 fa08 	mul.w	sl, r5, r8
    ea34:	40a2      	lsls	r2, r4
    ea36:	fb0a 2202 	mla	r2, sl, r2, r2
    ea3a:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    ea3e:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    ea42:	f8df 90f4 	ldr.w	r9, [pc, #244]	; eb38 <am_hal_iom_configure+0x238>
    ea46:	fbb9 fbf2 	udiv	fp, r9, r2
    ea4a:	fb02 fa0b 	mul.w	sl, r2, fp
    ea4e:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    ea52:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    ea56:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    ea5a:	9601      	str	r6, [sp, #4]
    ea5c:	0852      	lsrs	r2, r2, #1
    ea5e:	9e00      	ldr	r6, [sp, #0]
    ea60:	4552      	cmp	r2, sl
    ea62:	bf2c      	ite	cs
    ea64:	465a      	movcs	r2, fp
    ea66:	f10b 0201 	addcc.w	r2, fp, #1
    ea6a:	f8df b0fc 	ldr.w	fp, [pc, #252]	; eb68 <am_hal_iom_configure+0x268>
    ea6e:	fbb2 fafb 	udiv	sl, r2, fp
    ea72:	0436      	lsls	r6, r6, #16
    ea74:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    ea78:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    ea7c:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    ea80:	fb0b 2b1a 	mls	fp, fp, sl, r2
    ea84:	432e      	orrs	r6, r5
    ea86:	f1bb 0f00 	cmp.w	fp, #0
    ea8a:	d10a      	bne.n	eaa2 <am_hal_iom_configure+0x1a2>
    ea8c:	f1ba 0f00 	cmp.w	sl, #0
    ea90:	d007      	beq.n	eaa2 <am_hal_iom_configure+0x1a2>
    ea92:	f10a 35ff 	add.w	r5, sl, #4294967295
    ea96:	ea15 0f0a 	tst.w	r5, sl
    ea9a:	d102      	bne.n	eaa2 <am_hal_iom_configure+0x1a2>
    ea9c:	9d01      	ldr	r5, [sp, #4]
    ea9e:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    eaa2:	2400      	movs	r4, #0
    eaa4:	4334      	orrs	r4, r6
    eaa6:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    eaaa:	f044 0401 	orr.w	r4, r4, #1
    eaae:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    eab2:	68cb      	ldr	r3, [r1, #12]
    eab4:	690a      	ldr	r2, [r1, #16]
    eab6:	60c3      	str	r3, [r0, #12]
    eab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eabc:	2300      	movs	r3, #0
    eabe:	6102      	str	r2, [r0, #16]
    eac0:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    eac4:	4a1c      	ldr	r2, [pc, #112]	; (eb38 <am_hal_iom_configure+0x238>)
    eac6:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    eaca:	fbb2 f7f7 	udiv	r7, r2, r7
    eace:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    ead2:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    ead6:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    eada:	4618      	mov	r0, r3
    eadc:	e738      	b.n	e950 <am_hal_iom_configure+0x50>
    eade:	2400      	movs	r4, #0
    eae0:	e7e1      	b.n	eaa6 <am_hal_iom_configure+0x1a6>
    eae2:	684f      	ldr	r7, [r1, #4]
    eae4:	4a16      	ldr	r2, [pc, #88]	; (eb40 <am_hal_iom_configure+0x240>)
    eae6:	4297      	cmp	r7, r2
    eae8:	d01e      	beq.n	eb28 <am_hal_iom_configure+0x228>
    eaea:	4a16      	ldr	r2, [pc, #88]	; (eb44 <am_hal_iom_configure+0x244>)
    eaec:	4297      	cmp	r7, r2
    eaee:	d016      	beq.n	eb1e <am_hal_iom_configure+0x21e>
    eaf0:	4a15      	ldr	r2, [pc, #84]	; (eb48 <am_hal_iom_configure+0x248>)
    eaf2:	4297      	cmp	r7, r2
    eaf4:	f47f af2b 	bne.w	e94e <am_hal_iom_configure+0x4e>
    eaf8:	4a14      	ldr	r2, [pc, #80]	; (eb4c <am_hal_iom_configure+0x24c>)
    eafa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eafe:	4c14      	ldr	r4, [pc, #80]	; (eb50 <am_hal_iom_configure+0x250>)
    eb00:	e7d3      	b.n	eaaa <am_hal_iom_configure+0x1aa>
    eb02:	f104 0901 	add.w	r9, r4, #1
    eb06:	e77f      	b.n	ea08 <am_hal_iom_configure+0x108>
    eb08:	f04f 0e01 	mov.w	lr, #1
    eb0c:	e750      	b.n	e9b0 <am_hal_iom_configure+0xb0>
    eb0e:	f04f 0800 	mov.w	r8, #0
    eb12:	e786      	b.n	ea22 <am_hal_iom_configure+0x122>
    eb14:	1eae      	subs	r6, r5, #2
    eb16:	0876      	lsrs	r6, r6, #1
    eb18:	9600      	str	r6, [sp, #0]
    eb1a:	3d01      	subs	r5, #1
    eb1c:	e788      	b.n	ea30 <am_hal_iom_configure+0x130>
    eb1e:	4a0d      	ldr	r2, [pc, #52]	; (eb54 <am_hal_iom_configure+0x254>)
    eb20:	4c0d      	ldr	r4, [pc, #52]	; (eb58 <am_hal_iom_configure+0x258>)
    eb22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eb26:	e7c0      	b.n	eaaa <am_hal_iom_configure+0x1aa>
    eb28:	4a0c      	ldr	r2, [pc, #48]	; (eb5c <am_hal_iom_configure+0x25c>)
    eb2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eb2e:	4c0c      	ldr	r4, [pc, #48]	; (eb60 <am_hal_iom_configure+0x260>)
    eb30:	e7bb      	b.n	eaaa <am_hal_iom_configure+0x1aa>
    eb32:	bf00      	nop
    eb34:	01123456 	.word	0x01123456
    eb38:	02dc6c00 	.word	0x02dc6c00
    eb3c:	007a11ff 	.word	0x007a11ff
    eb40:	00061a80 	.word	0x00061a80
    eb44:	000f4240 	.word	0x000f4240
    eb48:	000186a0 	.word	0x000186a0
    eb4c:	0003f070 	.word	0x0003f070
    eb50:	773b1201 	.word	0x773b1201
    eb54:	00213040 	.word	0x00213040
    eb58:	06031301 	.word	0x06031301
    eb5c:	0003f270 	.word	0x0003f270
    eb60:	1d0e1201 	.word	0x1d0e1201
    eb64:	00b71aff 	.word	0x00b71aff
    eb68:	0003d090 	.word	0x0003d090

0000eb6c <am_hal_iom_blocking_transfer>:
    eb6c:	b128      	cbz	r0, eb7a <am_hal_iom_blocking_transfer+0xe>
    eb6e:	6803      	ldr	r3, [r0, #0]
    eb70:	4ac1      	ldr	r2, [pc, #772]	; (ee78 <am_hal_iom_blocking_transfer+0x30c>)
    eb72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb76:	4293      	cmp	r3, r2
    eb78:	d001      	beq.n	eb7e <am_hal_iom_blocking_transfer+0x12>
    eb7a:	2002      	movs	r0, #2
    eb7c:	4770      	bx	lr
    eb7e:	b159      	cbz	r1, eb98 <am_hal_iom_blocking_transfer+0x2c>
    eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb84:	f891 8010 	ldrb.w	r8, [r1, #16]
    eb88:	f1b8 0f01 	cmp.w	r8, #1
    eb8c:	b087      	sub	sp, #28
    eb8e:	d905      	bls.n	eb9c <am_hal_iom_blocking_transfer+0x30>
    eb90:	2007      	movs	r0, #7
    eb92:	b007      	add	sp, #28
    eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb98:	2006      	movs	r0, #6
    eb9a:	4770      	bx	lr
    eb9c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    eba0:	f1ba 0f00 	cmp.w	sl, #0
    eba4:	d102      	bne.n	ebac <am_hal_iom_blocking_transfer+0x40>
    eba6:	f881 a010 	strb.w	sl, [r1, #16]
    ebaa:	46d0      	mov	r8, sl
    ebac:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ebb0:	f1b9 0f03 	cmp.w	r9, #3
    ebb4:	d901      	bls.n	ebba <am_hal_iom_blocking_transfer+0x4e>
    ebb6:	2006      	movs	r0, #6
    ebb8:	e7eb      	b.n	eb92 <am_hal_iom_blocking_transfer+0x26>
    ebba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    ebbe:	f04f 33ff 	mov.w	r3, #4294967295
    ebc2:	f8d1 b008 	ldr.w	fp, [r1, #8]
    ebc6:	4093      	lsls	r3, r2
    ebc8:	ea13 0f0b 	tst.w	r3, fp
    ebcc:	d1f3      	bne.n	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ebce:	f1ba 0f00 	cmp.w	sl, #0
    ebd2:	f000 80bb 	beq.w	ed4c <am_hal_iom_blocking_transfer+0x1e0>
    ebd6:	f1b8 0f00 	cmp.w	r8, #0
    ebda:	f000 80c7 	beq.w	ed6c <am_hal_iom_blocking_transfer+0x200>
    ebde:	698b      	ldr	r3, [r1, #24]
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d0e8      	beq.n	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ebe4:	7a03      	ldrb	r3, [r0, #8]
    ebe6:	2b01      	cmp	r3, #1
    ebe8:	f040 80b4 	bne.w	ed54 <am_hal_iom_blocking_transfer+0x1e8>
    ebec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    ebf0:	d8e1      	bhi.n	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ebf2:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    ebf6:	2b02      	cmp	r3, #2
    ebf8:	d0ca      	beq.n	eb90 <am_hal_iom_blocking_transfer+0x24>
    ebfa:	7f0b      	ldrb	r3, [r1, #28]
    ebfc:	694f      	ldr	r7, [r1, #20]
    ebfe:	f8d1 e018 	ldr.w	lr, [r1, #24]
    ec02:	9303      	str	r3, [sp, #12]
    ec04:	4604      	mov	r4, r0
    ec06:	2301      	movs	r3, #1
    ec08:	460d      	mov	r5, r1
    ec0a:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    ec0e:	6866      	ldr	r6, [r4, #4]
    ec10:	9300      	str	r3, [sp, #0]
    ec12:	f04f 32ff 	mov.w	r2, #4294967295
    ec16:	2300      	movs	r3, #0
    ec18:	f104 0124 	add.w	r1, r4, #36	; 0x24
    ec1c:	4598      	cmp	r8, r3
    ec1e:	bf18      	it	ne
    ec20:	4677      	movne	r7, lr
    ec22:	f7ff fa8b 	bl	e13c <am_hal_flash_delay_status_check>
    ec26:	2800      	cmp	r0, #0
    ec28:	d1b3      	bne.n	eb92 <am_hal_iom_blocking_transfer+0x26>
    ec2a:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    ec2e:	3604      	adds	r6, #4
    ec30:	2301      	movs	r3, #1
    ec32:	0336      	lsls	r6, r6, #12
    ec34:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    ec38:	9300      	str	r3, [sp, #0]
    ec3a:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    ec3e:	9304      	str	r3, [sp, #16]
    ec40:	4619      	mov	r1, r3
    ec42:	2206      	movs	r2, #6
    ec44:	2304      	movs	r3, #4
    ec46:	f7ff fa79 	bl	e13c <am_hal_flash_delay_status_check>
    ec4a:	2800      	cmp	r0, #0
    ec4c:	d1a1      	bne.n	eb92 <am_hal_iom_blocking_transfer+0x26>
    ec4e:	f04f 33ff 	mov.w	r3, #4294967295
    ec52:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    ec56:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    ec5a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    ec5e:	682b      	ldr	r3, [r5, #0]
    ec60:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    ec64:	682b      	ldr	r3, [r5, #0]
    ec66:	9205      	str	r2, [sp, #20]
    ec68:	4423      	add	r3, r4
    ec6a:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    ec6e:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    ec72:	7a23      	ldrb	r3, [r4, #8]
    ec74:	b903      	cbnz	r3, ec78 <am_hal_iom_blocking_transfer+0x10c>
    ec76:	6828      	ldr	r0, [r5, #0]
    ec78:	4a80      	ldr	r2, [pc, #512]	; (ee7c <am_hal_iom_blocking_transfer+0x310>)
    ec7a:	0500      	lsls	r0, r0, #20
    ec7c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    ec80:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    ec84:	ea0a 0202 	and.w	r2, sl, r2
    ec88:	f1b8 0f01 	cmp.w	r8, #1
    ec8c:	ea42 0203 	orr.w	r2, r2, r3
    ec90:	d074      	beq.n	ed7c <am_hal_iom_blocking_transfer+0x210>
    ec92:	f3cb 230f 	ubfx	r3, fp, #8, #16
    ec96:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    ec9a:	ea4f 1149 	mov.w	r1, r9, lsl #5
    ec9e:	ea4f 600b 	mov.w	r0, fp, lsl #24
    eca2:	f040 0001 	orr.w	r0, r0, #1
    eca6:	f001 0160 	and.w	r1, r1, #96	; 0x60
    ecaa:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ecae:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ecb2:	4301      	orrs	r1, r0
    ecb4:	9803      	ldr	r0, [sp, #12]
    ecb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ecba:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    ecbe:	2b03      	cmp	r3, #3
    ecc0:	ea42 0201 	orr.w	r2, r2, r1
    ecc4:	f240 80b3 	bls.w	ee2e <am_hal_iom_blocking_transfer+0x2c2>
    ecc8:	f1b8 0f00 	cmp.w	r8, #0
    eccc:	d00a      	beq.n	ece4 <am_hal_iom_blocking_transfer+0x178>
    ecce:	4641      	mov	r1, r8
    ecd0:	f857 0b04 	ldr.w	r0, [r7], #4
    ecd4:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    ecd8:	2903      	cmp	r1, #3
    ecda:	f1a3 0304 	sub.w	r3, r3, #4
    ecde:	f1a1 0104 	sub.w	r1, r1, #4
    ece2:	d82e      	bhi.n	ed42 <am_hal_iom_blocking_transfer+0x1d6>
    ece4:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ece8:	f04f 0800 	mov.w	r8, #0
    ecec:	2701      	movs	r7, #1
    ecee:	9904      	ldr	r1, [sp, #16]
    ecf0:	9700      	str	r7, [sp, #0]
    ecf2:	2304      	movs	r3, #4
    ecf4:	2206      	movs	r2, #6
    ecf6:	4862      	ldr	r0, [pc, #392]	; (ee80 <am_hal_iom_blocking_transfer+0x314>)
    ecf8:	f7ff fa20 	bl	e13c <am_hal_flash_delay_status_check>
    ecfc:	4605      	mov	r5, r0
    ecfe:	b970      	cbnz	r0, ed1e <am_hal_iom_blocking_transfer+0x1b2>
    ed00:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ed04:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    ed08:	d135      	bne.n	ed76 <am_hal_iom_blocking_transfer+0x20a>
    ed0a:	0599      	lsls	r1, r3, #22
    ed0c:	f100 80cf 	bmi.w	eeae <am_hal_iom_blocking_transfer+0x342>
    ed10:	06da      	lsls	r2, r3, #27
    ed12:	f100 80ce 	bmi.w	eeb2 <am_hal_iom_blocking_transfer+0x346>
    ed16:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    ed1a:	d00e      	beq.n	ed3a <am_hal_iom_blocking_transfer+0x1ce>
    ed1c:	463d      	mov	r5, r7
    ed1e:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    ed22:	4620      	mov	r0, r4
    ed24:	f7ff fbcc 	bl	e4c0 <internal_iom_reset_on_error>
    ed28:	f04f 33ff 	mov.w	r3, #4294967295
    ed2c:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    ed30:	9b05      	ldr	r3, [sp, #20]
    ed32:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    ed36:	4628      	mov	r0, r5
    ed38:	e72b      	b.n	eb92 <am_hal_iom_blocking_transfer+0x26>
    ed3a:	f1b8 0f00 	cmp.w	r8, #0
    ed3e:	d0f3      	beq.n	ed28 <am_hal_iom_blocking_transfer+0x1bc>
    ed40:	e7ec      	b.n	ed1c <am_hal_iom_blocking_transfer+0x1b0>
    ed42:	2b03      	cmp	r3, #3
    ed44:	d972      	bls.n	ee2c <am_hal_iom_blocking_transfer+0x2c0>
    ed46:	2900      	cmp	r1, #0
    ed48:	d1c2      	bne.n	ecd0 <am_hal_iom_blocking_transfer+0x164>
    ed4a:	e7cb      	b.n	ece4 <am_hal_iom_blocking_transfer+0x178>
    ed4c:	7a03      	ldrb	r3, [r0, #8]
    ed4e:	2b01      	cmp	r3, #1
    ed50:	f43f af4f 	beq.w	ebf2 <am_hal_iom_blocking_transfer+0x86>
    ed54:	2b00      	cmp	r3, #0
    ed56:	f47f af4c 	bne.w	ebf2 <am_hal_iom_blocking_transfer+0x86>
    ed5a:	680b      	ldr	r3, [r1, #0]
    ed5c:	2b03      	cmp	r3, #3
    ed5e:	f63f af2a 	bhi.w	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ed62:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    ed66:	f4bf af26 	bcs.w	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ed6a:	e742      	b.n	ebf2 <am_hal_iom_blocking_transfer+0x86>
    ed6c:	694b      	ldr	r3, [r1, #20]
    ed6e:	2b00      	cmp	r3, #0
    ed70:	f47f af38 	bne.w	ebe4 <am_hal_iom_blocking_transfer+0x78>
    ed74:	e71f      	b.n	ebb6 <am_hal_iom_blocking_transfer+0x4a>
    ed76:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ed7a:	e7d0      	b.n	ed1e <am_hal_iom_blocking_transfer+0x1b2>
    ed7c:	ea4f 1349 	mov.w	r3, r9, lsl #5
    ed80:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    ed84:	ea4f 610b 	mov.w	r1, fp, lsl #24
    ed88:	9b03      	ldr	r3, [sp, #12]
    ed8a:	f041 0102 	orr.w	r1, r1, #2
    ed8e:	f3cb 200f 	ubfx	r0, fp, #8, #16
    ed92:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    ed96:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    ed9a:	ea4e 0301 	orr.w	r3, lr, r1
    ed9e:	f8d5 800c 	ldr.w	r8, [r5, #12]
    eda2:	431a      	orrs	r2, r3
    eda4:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    eda8:	2200      	movs	r2, #0
    edaa:	f1b8 0f00 	cmp.w	r8, #0
    edae:	d09b      	beq.n	ece8 <am_hal_iom_blocking_transfer+0x17c>
    edb0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    edb4:	f3c3 4307 	ubfx	r3, r3, #16, #8
    edb8:	2b03      	cmp	r3, #3
    edba:	d81e      	bhi.n	edfa <am_hal_iom_blocking_transfer+0x28e>
    edbc:	4d30      	ldr	r5, [pc, #192]	; (ee80 <am_hal_iom_blocking_transfer+0x314>)
    edbe:	e001      	b.n	edc4 <am_hal_iom_blocking_transfer+0x258>
    edc0:	3d01      	subs	r5, #1
    edc2:	d093      	beq.n	ecec <am_hal_iom_blocking_transfer+0x180>
    edc4:	2001      	movs	r0, #1
    edc6:	b10a      	cbz	r2, edcc <am_hal_iom_blocking_transfer+0x260>
    edc8:	4598      	cmp	r8, r3
    edca:	d88f      	bhi.n	ecec <am_hal_iom_blocking_transfer+0x180>
    edcc:	f7ff f9b2 	bl	e134 <am_hal_flash_delay>
    edd0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    edd4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    edd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eddc:	2b03      	cmp	r3, #3
    edde:	f002 0201 	and.w	r2, r2, #1
    ede2:	d9ed      	bls.n	edc0 <am_hal_iom_blocking_transfer+0x254>
    ede4:	e009      	b.n	edfa <am_hal_iom_blocking_transfer+0x28e>
    ede6:	2b03      	cmp	r3, #3
    ede8:	6039      	str	r1, [r7, #0]
    edea:	f1a8 0804 	sub.w	r8, r8, #4
    edee:	d962      	bls.n	eeb6 <am_hal_iom_blocking_transfer+0x34a>
    edf0:	f1b8 0f00 	cmp.w	r8, #0
    edf4:	f43f af78 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    edf8:	4607      	mov	r7, r0
    edfa:	f1b8 0f03 	cmp.w	r8, #3
    edfe:	f1a3 0304 	sub.w	r3, r3, #4
    ee02:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    ee06:	f107 0004 	add.w	r0, r7, #4
    ee0a:	d8ec      	bhi.n	ede6 <am_hal_iom_blocking_transfer+0x27a>
    ee0c:	f1b8 0f01 	cmp.w	r8, #1
    ee10:	7039      	strb	r1, [r7, #0]
    ee12:	ea4f 2311 	mov.w	r3, r1, lsr #8
    ee16:	f43f af67 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    ee1a:	f1b8 0f02 	cmp.w	r8, #2
    ee1e:	707b      	strb	r3, [r7, #1]
    ee20:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ee24:	f43f af60 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    ee28:	70b9      	strb	r1, [r7, #2]
    ee2a:	e75d      	b.n	ece8 <am_hal_iom_blocking_transfer+0x17c>
    ee2c:	4688      	mov	r8, r1
    ee2e:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ee32:	f1b8 0f00 	cmp.w	r8, #0
    ee36:	f43f af57 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    ee3a:	463b      	mov	r3, r7
    ee3c:	4647      	mov	r7, r8
    ee3e:	4698      	mov	r8, r3
    ee40:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ee44:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ee48:	2b03      	cmp	r3, #3
    ee4a:	d81e      	bhi.n	ee8a <am_hal_iom_blocking_transfer+0x31e>
    ee4c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ee50:	07d8      	lsls	r0, r3, #31
    ee52:	d42a      	bmi.n	eeaa <am_hal_iom_blocking_transfer+0x33e>
    ee54:	4d0a      	ldr	r5, [pc, #40]	; (ee80 <am_hal_iom_blocking_transfer+0x314>)
    ee56:	e005      	b.n	ee64 <am_hal_iom_blocking_transfer+0x2f8>
    ee58:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ee5c:	07db      	lsls	r3, r3, #31
    ee5e:	d424      	bmi.n	eeaa <am_hal_iom_blocking_transfer+0x33e>
    ee60:	3d01      	subs	r5, #1
    ee62:	d022      	beq.n	eeaa <am_hal_iom_blocking_transfer+0x33e>
    ee64:	2001      	movs	r0, #1
    ee66:	f7ff f965 	bl	e134 <am_hal_flash_delay>
    ee6a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ee6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ee72:	2b03      	cmp	r3, #3
    ee74:	d9f0      	bls.n	ee58 <am_hal_iom_blocking_transfer+0x2ec>
    ee76:	e008      	b.n	ee8a <am_hal_iom_blocking_transfer+0x31e>
    ee78:	01123456 	.word	0x01123456
    ee7c:	000fff00 	.word	0x000fff00
    ee80:	0007a120 	.word	0x0007a120
    ee84:	2f00      	cmp	r7, #0
    ee86:	f43f af2f 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    ee8a:	f858 2b04 	ldr.w	r2, [r8], #4
    ee8e:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    ee92:	2f03      	cmp	r7, #3
    ee94:	f1a3 0304 	sub.w	r3, r3, #4
    ee98:	f1a7 0704 	sub.w	r7, r7, #4
    ee9c:	f67f af24 	bls.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    eea0:	2b03      	cmp	r3, #3
    eea2:	d8ef      	bhi.n	ee84 <am_hal_iom_blocking_transfer+0x318>
    eea4:	2f00      	cmp	r7, #0
    eea6:	d1cb      	bne.n	ee40 <am_hal_iom_blocking_transfer+0x2d4>
    eea8:	e71e      	b.n	ece8 <am_hal_iom_blocking_transfer+0x17c>
    eeaa:	46b8      	mov	r8, r7
    eeac:	e71e      	b.n	ecec <am_hal_iom_blocking_transfer+0x180>
    eeae:	4d05      	ldr	r5, [pc, #20]	; (eec4 <am_hal_iom_blocking_transfer+0x358>)
    eeb0:	e735      	b.n	ed1e <am_hal_iom_blocking_transfer+0x1b2>
    eeb2:	4d05      	ldr	r5, [pc, #20]	; (eec8 <am_hal_iom_blocking_transfer+0x35c>)
    eeb4:	e733      	b.n	ed1e <am_hal_iom_blocking_transfer+0x1b2>
    eeb6:	f1b8 0f00 	cmp.w	r8, #0
    eeba:	f43f af15 	beq.w	ece8 <am_hal_iom_blocking_transfer+0x17c>
    eebe:	4607      	mov	r7, r0
    eec0:	e776      	b.n	edb0 <am_hal_iom_blocking_transfer+0x244>
    eec2:	bf00      	nop
    eec4:	08000001 	.word	0x08000001
    eec8:	08000002 	.word	0x08000002

0000eecc <am_hal_itm_disable>:
    eecc:	b510      	push	{r4, lr}
    eece:	4b25      	ldr	r3, [pc, #148]	; (ef64 <am_hal_itm_disable+0x98>)
    eed0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    eed4:	b9b3      	cbnz	r3, ef04 <am_hal_itm_disable+0x38>
    eed6:	4b24      	ldr	r3, [pc, #144]	; (ef68 <am_hal_itm_disable+0x9c>)
    eed8:	68da      	ldr	r2, [r3, #12]
    eeda:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    eede:	60da      	str	r2, [r3, #12]
    eee0:	68da      	ldr	r2, [r3, #12]
    eee2:	01d2      	lsls	r2, r2, #7
    eee4:	d5fc      	bpl.n	eee0 <am_hal_itm_disable+0x14>
    eee6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    eeea:	4920      	ldr	r1, [pc, #128]	; (ef6c <am_hal_itm_disable+0xa0>)
    eeec:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    eef0:	4a1f      	ldr	r2, [pc, #124]	; (ef70 <am_hal_itm_disable+0xa4>)
    eef2:	200f      	movs	r0, #15
    eef4:	f04f 31ff 	mov.w	r1, #4294967295
    eef8:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    eefc:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ef00:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ef04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ef08:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ef0c:	021b      	lsls	r3, r3, #8
    ef0e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ef12:	d4f9      	bmi.n	ef08 <am_hal_itm_disable+0x3c>
    ef14:	f240 20f7 	movw	r0, #759	; 0x2f7
    ef18:	f7ff f90c 	bl	e134 <am_hal_flash_delay>
    ef1c:	4b13      	ldr	r3, [pc, #76]	; (ef6c <am_hal_itm_disable+0xa0>)
    ef1e:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ef22:	4621      	mov	r1, r4
    ef24:	2064      	movs	r0, #100	; 0x64
    ef26:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ef2a:	f023 0301 	bic.w	r3, r3, #1
    ef2e:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ef32:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ef36:	4b0f      	ldr	r3, [pc, #60]	; (ef74 <am_hal_itm_disable+0xa8>)
    ef38:	4013      	ands	r3, r2
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d1f9      	bne.n	ef32 <am_hal_itm_disable+0x66>
    ef3e:	3801      	subs	r0, #1
    ef40:	d1f1      	bne.n	ef26 <am_hal_itm_disable+0x5a>
    ef42:	4a09      	ldr	r2, [pc, #36]	; (ef68 <am_hal_itm_disable+0x9c>)
    ef44:	68d3      	ldr	r3, [r2, #12]
    ef46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ef4a:	60d3      	str	r3, [r2, #12]
    ef4c:	68d3      	ldr	r3, [r2, #12]
    ef4e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ef52:	d1fb      	bne.n	ef4c <am_hal_itm_disable+0x80>
    ef54:	4a03      	ldr	r2, [pc, #12]	; (ef64 <am_hal_itm_disable+0x98>)
    ef56:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ef5a:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    ef5e:	2b00      	cmp	r3, #0
    ef60:	d1fb      	bne.n	ef5a <am_hal_itm_disable+0x8e>
    ef62:	bd10      	pop	{r4, pc}
    ef64:	40020000 	.word	0x40020000
    ef68:	e000edf0 	.word	0xe000edf0
    ef6c:	c5acce55 	.word	0xc5acce55
    ef70:	00150511 	.word	0x00150511
    ef74:	00800001 	.word	0x00800001

0000ef78 <am_hal_mcuctrl_info_get>:
    ef78:	b4f0      	push	{r4, r5, r6, r7}
    ef7a:	b121      	cbz	r1, ef86 <am_hal_mcuctrl_info_get+0xe>
    ef7c:	2801      	cmp	r0, #1
    ef7e:	d038      	beq.n	eff2 <am_hal_mcuctrl_info_get+0x7a>
    ef80:	d320      	bcc.n	efc4 <am_hal_mcuctrl_info_get+0x4c>
    ef82:	2802      	cmp	r0, #2
    ef84:	d002      	beq.n	ef8c <am_hal_mcuctrl_info_get+0x14>
    ef86:	2006      	movs	r0, #6
    ef88:	bcf0      	pop	{r4, r5, r6, r7}
    ef8a:	4770      	bx	lr
    ef8c:	4a41      	ldr	r2, [pc, #260]	; (f094 <am_hal_mcuctrl_info_get+0x11c>)
    ef8e:	684d      	ldr	r5, [r1, #4]
    ef90:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    ef94:	694c      	ldr	r4, [r1, #20]
    ef96:	f003 0601 	and.w	r6, r3, #1
    ef9a:	f3c3 0040 	ubfx	r0, r3, #1, #1
    ef9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    efa2:	700e      	strb	r6, [r1, #0]
    efa4:	7208      	strb	r0, [r1, #8]
    efa6:	740b      	strb	r3, [r1, #16]
    efa8:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    efac:	60cb      	str	r3, [r1, #12]
    efae:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    efb2:	4328      	orrs	r0, r5
    efb4:	6048      	str	r0, [r1, #4]
    efb6:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    efba:	4323      	orrs	r3, r4
    efbc:	2000      	movs	r0, #0
    efbe:	614b      	str	r3, [r1, #20]
    efc0:	bcf0      	pop	{r4, r5, r6, r7}
    efc2:	4770      	bx	lr
    efc4:	4a33      	ldr	r2, [pc, #204]	; (f094 <am_hal_mcuctrl_info_get+0x11c>)
    efc6:	6993      	ldr	r3, [r2, #24]
    efc8:	f3c3 1080 	ubfx	r0, r3, #6, #1
    efcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    efd0:	7008      	strb	r0, [r1, #0]
    efd2:	704b      	strb	r3, [r1, #1]
    efd4:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    efd8:	f3c3 6381 	ubfx	r3, r3, #26, #2
    efdc:	710b      	strb	r3, [r1, #4]
    efde:	6953      	ldr	r3, [r2, #20]
    efe0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    efe4:	f003 0301 	and.w	r3, r3, #1
    efe8:	2000      	movs	r0, #0
    efea:	708a      	strb	r2, [r1, #2]
    efec:	70cb      	strb	r3, [r1, #3]
    efee:	bcf0      	pop	{r4, r5, r6, r7}
    eff0:	4770      	bx	lr
    eff2:	4b28      	ldr	r3, [pc, #160]	; (f094 <am_hal_mcuctrl_info_get+0x11c>)
    eff4:	4c28      	ldr	r4, [pc, #160]	; (f098 <am_hal_mcuctrl_info_get+0x120>)
    eff6:	681a      	ldr	r2, [r3, #0]
    eff8:	600a      	str	r2, [r1, #0]
    effa:	6858      	ldr	r0, [r3, #4]
    effc:	6048      	str	r0, [r1, #4]
    effe:	6898      	ldr	r0, [r3, #8]
    f000:	6088      	str	r0, [r1, #8]
    f002:	68d8      	ldr	r0, [r3, #12]
    f004:	60c8      	str	r0, [r1, #12]
    f006:	691d      	ldr	r5, [r3, #16]
    f008:	4824      	ldr	r0, [pc, #144]	; (f09c <am_hal_mcuctrl_info_get+0x124>)
    f00a:	610d      	str	r5, [r1, #16]
    f00c:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f010:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f014:	695d      	ldr	r5, [r3, #20]
    f016:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f01a:	4b21      	ldr	r3, [pc, #132]	; (f0a0 <am_hal_mcuctrl_info_get+0x128>)
    f01c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f020:	6208      	str	r0, [r1, #32]
    f022:	f002 0201 	and.w	r2, r2, #1
    f026:	614d      	str	r5, [r1, #20]
    f028:	61cc      	str	r4, [r1, #28]
    f02a:	618a      	str	r2, [r1, #24]
    f02c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f030:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f034:	b2d0      	uxtb	r0, r2
    f036:	f004 020f 	and.w	r2, r4, #15
    f03a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f03e:	624a      	str	r2, [r1, #36]	; 0x24
    f040:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f044:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f048:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f04c:	f004 020f 	and.w	r2, r4, #15
    f050:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f054:	628a      	str	r2, [r1, #40]	; 0x28
    f056:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f05a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f05e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f062:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f066:	4302      	orrs	r2, r0
    f068:	62ca      	str	r2, [r1, #44]	; 0x2c
    f06a:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f06e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f072:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f076:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f07a:	b2c0      	uxtb	r0, r0
    f07c:	0400      	lsls	r0, r0, #16
    f07e:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f082:	b2d2      	uxtb	r2, r2
    f084:	431a      	orrs	r2, r3
    f086:	b2e3      	uxtb	r3, r4
    f088:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f08c:	630b      	str	r3, [r1, #48]	; 0x30
    f08e:	2000      	movs	r0, #0
    f090:	bcf0      	pop	{r4, r5, r6, r7}
    f092:	4770      	bx	lr
    f094:	40020000 	.word	0x40020000
    f098:	000100a8 	.word	0x000100a8
    f09c:	000100e8 	.word	0x000100e8
    f0a0:	f0000f00 	.word	0xf0000f00

0000f0a4 <am_hal_pwrctrl_periph_enable>:
    f0a4:	b570      	push	{r4, r5, r6, lr}
    f0a6:	b082      	sub	sp, #8
    f0a8:	4604      	mov	r4, r0
    f0aa:	f7ff fa01 	bl	e4b0 <am_hal_interrupt_master_disable>
    f0ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f0b2:	4d0f      	ldr	r5, [pc, #60]	; (f0f0 <am_hal_pwrctrl_periph_enable+0x4c>)
    f0b4:	4e0f      	ldr	r6, [pc, #60]	; (f0f4 <am_hal_pwrctrl_periph_enable+0x50>)
    f0b6:	9001      	str	r0, [sp, #4]
    f0b8:	00a4      	lsls	r4, r4, #2
    f0ba:	68aa      	ldr	r2, [r5, #8]
    f0bc:	5933      	ldr	r3, [r6, r4]
    f0be:	4313      	orrs	r3, r2
    f0c0:	60ab      	str	r3, [r5, #8]
    f0c2:	9801      	ldr	r0, [sp, #4]
    f0c4:	4434      	add	r4, r6
    f0c6:	f7ff f9f7 	bl	e4b8 <am_hal_interrupt_master_set>
    f0ca:	2077      	movs	r0, #119	; 0x77
    f0cc:	f7ff f832 	bl	e134 <am_hal_flash_delay>
    f0d0:	69ab      	ldr	r3, [r5, #24]
    f0d2:	6864      	ldr	r4, [r4, #4]
    f0d4:	4223      	tst	r3, r4
    f0d6:	d103      	bne.n	f0e0 <am_hal_pwrctrl_periph_enable+0x3c>
    f0d8:	2077      	movs	r0, #119	; 0x77
    f0da:	f7ff f82b 	bl	e134 <am_hal_flash_delay>
    f0de:	69ab      	ldr	r3, [r5, #24]
    f0e0:	4b03      	ldr	r3, [pc, #12]	; (f0f0 <am_hal_pwrctrl_periph_enable+0x4c>)
    f0e2:	699b      	ldr	r3, [r3, #24]
    f0e4:	4223      	tst	r3, r4
    f0e6:	bf0c      	ite	eq
    f0e8:	2001      	moveq	r0, #1
    f0ea:	2000      	movne	r0, #0
    f0ec:	b002      	add	sp, #8
    f0ee:	bd70      	pop	{r4, r5, r6, pc}
    f0f0:	40021000 	.word	0x40021000
    f0f4:	00010128 	.word	0x00010128

0000f0f8 <am_hal_pwrctrl_periph_disable>:
    f0f8:	b570      	push	{r4, r5, r6, lr}
    f0fa:	b082      	sub	sp, #8
    f0fc:	4604      	mov	r4, r0
    f0fe:	f7ff f9d7 	bl	e4b0 <am_hal_interrupt_master_disable>
    f102:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f106:	4d10      	ldr	r5, [pc, #64]	; (f148 <am_hal_pwrctrl_periph_disable+0x50>)
    f108:	4e10      	ldr	r6, [pc, #64]	; (f14c <am_hal_pwrctrl_periph_disable+0x54>)
    f10a:	9001      	str	r0, [sp, #4]
    f10c:	00a4      	lsls	r4, r4, #2
    f10e:	68ab      	ldr	r3, [r5, #8]
    f110:	5932      	ldr	r2, [r6, r4]
    f112:	ea23 0302 	bic.w	r3, r3, r2
    f116:	60ab      	str	r3, [r5, #8]
    f118:	9801      	ldr	r0, [sp, #4]
    f11a:	4434      	add	r4, r6
    f11c:	f7ff f9cc 	bl	e4b8 <am_hal_interrupt_master_set>
    f120:	2077      	movs	r0, #119	; 0x77
    f122:	f7ff f807 	bl	e134 <am_hal_flash_delay>
    f126:	69ab      	ldr	r3, [r5, #24]
    f128:	6864      	ldr	r4, [r4, #4]
    f12a:	4223      	tst	r3, r4
    f12c:	d003      	beq.n	f136 <am_hal_pwrctrl_periph_disable+0x3e>
    f12e:	2077      	movs	r0, #119	; 0x77
    f130:	f7ff f800 	bl	e134 <am_hal_flash_delay>
    f134:	69ab      	ldr	r3, [r5, #24]
    f136:	4b04      	ldr	r3, [pc, #16]	; (f148 <am_hal_pwrctrl_periph_disable+0x50>)
    f138:	699b      	ldr	r3, [r3, #24]
    f13a:	4223      	tst	r3, r4
    f13c:	bf14      	ite	ne
    f13e:	2001      	movne	r0, #1
    f140:	2000      	moveq	r0, #0
    f142:	b002      	add	sp, #8
    f144:	bd70      	pop	{r4, r5, r6, pc}
    f146:	bf00      	nop
    f148:	40021000 	.word	0x40021000
    f14c:	00010128 	.word	0x00010128

0000f150 <am_hal_pwrctrl_low_power_init>:
    f150:	b530      	push	{r4, r5, lr}
    f152:	4b1f      	ldr	r3, [pc, #124]	; (f1d0 <am_hal_pwrctrl_low_power_init+0x80>)
    f154:	681a      	ldr	r2, [r3, #0]
    f156:	b083      	sub	sp, #12
    f158:	b912      	cbnz	r2, f160 <am_hal_pwrctrl_low_power_init+0x10>
    f15a:	4a1e      	ldr	r2, [pc, #120]	; (f1d4 <am_hal_pwrctrl_low_power_init+0x84>)
    f15c:	6812      	ldr	r2, [r2, #0]
    f15e:	601a      	str	r2, [r3, #0]
    f160:	4c1d      	ldr	r4, [pc, #116]	; (f1d8 <am_hal_pwrctrl_low_power_init+0x88>)
    f162:	69a3      	ldr	r3, [r4, #24]
    f164:	05db      	lsls	r3, r3, #23
    f166:	d502      	bpl.n	f16e <am_hal_pwrctrl_low_power_init+0x1e>
    f168:	2000      	movs	r0, #0
    f16a:	b003      	add	sp, #12
    f16c:	bd30      	pop	{r4, r5, pc}
    f16e:	4d1b      	ldr	r5, [pc, #108]	; (f1dc <am_hal_pwrctrl_low_power_init+0x8c>)
    f170:	491b      	ldr	r1, [pc, #108]	; (f1e0 <am_hal_pwrctrl_low_power_init+0x90>)
    f172:	7e2a      	ldrb	r2, [r5, #24]
    f174:	2001      	movs	r0, #1
    f176:	4302      	orrs	r2, r0
    f178:	2307      	movs	r3, #7
    f17a:	762a      	strb	r2, [r5, #24]
    f17c:	9000      	str	r0, [sp, #0]
    f17e:	461a      	mov	r2, r3
    f180:	f242 7010 	movw	r0, #10000	; 0x2710
    f184:	f7fe ffda 	bl	e13c <am_hal_flash_delay_status_check>
    f188:	b110      	cbz	r0, f190 <am_hal_pwrctrl_low_power_init+0x40>
    f18a:	2004      	movs	r0, #4
    f18c:	b003      	add	sp, #12
    f18e:	bd30      	pop	{r4, r5, pc}
    f190:	6823      	ldr	r3, [r4, #0]
    f192:	f043 0301 	orr.w	r3, r3, #1
    f196:	6023      	str	r3, [r4, #0]
    f198:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f19e:	6263      	str	r3, [r4, #36]	; 0x24
    f1a0:	68eb      	ldr	r3, [r5, #12]
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	2b11      	cmp	r3, #17
    f1a6:	d1df      	bne.n	f168 <am_hal_pwrctrl_low_power_init+0x18>
    f1a8:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f1ac:	f360 5356 	bfi	r3, r0, #21, #2
    f1b0:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f1b4:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f1b8:	220f      	movs	r2, #15
    f1ba:	f362 138b 	bfi	r3, r2, #6, #6
    f1be:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f1c2:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f1c6:	f362 0305 	bfi	r3, r2, #0, #6
    f1ca:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f1ce:	e7cc      	b.n	f16a <am_hal_pwrctrl_low_power_init+0x1a>
    f1d0:	10001174 	.word	0x10001174
    f1d4:	4ffff000 	.word	0x4ffff000
    f1d8:	40021000 	.word	0x40021000
    f1dc:	40020000 	.word	0x40020000
    f1e0:	40020018 	.word	0x40020018

0000f1e4 <am_hal_rtc_osc_select>:
    f1e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f1e8:	2801      	cmp	r0, #1
    f1ea:	68d3      	ldr	r3, [r2, #12]
    f1ec:	bf0c      	ite	eq
    f1ee:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    f1f2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    f1f6:	60d3      	str	r3, [r2, #12]
    f1f8:	4770      	bx	lr
    f1fa:	bf00      	nop

0000f1fc <am_hal_rtc_osc_disable>:
    f1fc:	4a03      	ldr	r2, [pc, #12]	; (f20c <am_hal_rtc_osc_disable+0x10>)
    f1fe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f202:	f043 0310 	orr.w	r3, r3, #16
    f206:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f20a:	4770      	bx	lr
    f20c:	40004200 	.word	0x40004200

0000f210 <am_hal_uart_initialize>:
    f210:	2801      	cmp	r0, #1
    f212:	d901      	bls.n	f218 <am_hal_uart_initialize+0x8>
    f214:	2005      	movs	r0, #5
    f216:	4770      	bx	lr
    f218:	b169      	cbz	r1, f236 <am_hal_uart_initialize+0x26>
    f21a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f21c:	2264      	movs	r2, #100	; 0x64
    f21e:	4e0e      	ldr	r6, [pc, #56]	; (f258 <am_hal_uart_initialize+0x48>)
    f220:	fb02 f200 	mul.w	r2, r2, r0
    f224:	18b4      	adds	r4, r6, r2
    f226:	4603      	mov	r3, r0
    f228:	78e0      	ldrb	r0, [r4, #3]
    f22a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f22e:	b2fd      	uxtb	r5, r7
    f230:	b11d      	cbz	r5, f23a <am_hal_uart_initialize+0x2a>
    f232:	2007      	movs	r0, #7
    f234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f236:	2006      	movs	r0, #6
    f238:	4770      	bx	lr
    f23a:	f040 0001 	orr.w	r0, r0, #1
    f23e:	70e0      	strb	r0, [r4, #3]
    f240:	58b0      	ldr	r0, [r6, r2]
    f242:	f8df e018 	ldr.w	lr, [pc, #24]	; f25c <am_hal_uart_initialize+0x4c>
    f246:	f36e 0017 	bfi	r0, lr, #0, #24
    f24a:	50b0      	str	r0, [r6, r2]
    f24c:	6263      	str	r3, [r4, #36]	; 0x24
    f24e:	7127      	strb	r7, [r4, #4]
    f250:	6625      	str	r5, [r4, #96]	; 0x60
    f252:	4628      	mov	r0, r5
    f254:	600c      	str	r4, [r1, #0]
    f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f258:	10004aec 	.word	0x10004aec
    f25c:	00ea9e06 	.word	0x00ea9e06

0000f260 <am_hal_uart_power_control>:
    f260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f264:	6804      	ldr	r4, [r0, #0]
    f266:	4b36      	ldr	r3, [pc, #216]	; (f340 <am_hal_uart_power_control+0xe0>)
    f268:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f26c:	429c      	cmp	r4, r3
    f26e:	b083      	sub	sp, #12
    f270:	d003      	beq.n	f27a <am_hal_uart_power_control+0x1a>
    f272:	2002      	movs	r0, #2
    f274:	b003      	add	sp, #12
    f276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f27a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f27c:	4605      	mov	r5, r0
    f27e:	f107 0008 	add.w	r0, r7, #8
    f282:	4691      	mov	r9, r2
    f284:	460e      	mov	r6, r1
    f286:	fa5f f880 	uxtb.w	r8, r0
    f28a:	b181      	cbz	r1, f2ae <am_hal_uart_power_control+0x4e>
    f28c:	2902      	cmp	r1, #2
    f28e:	d80c      	bhi.n	f2aa <am_hal_uart_power_control+0x4a>
    f290:	b992      	cbnz	r2, f2b8 <am_hal_uart_power_control+0x58>
    f292:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f296:	371c      	adds	r7, #28
    f298:	033f      	lsls	r7, r7, #12
    f29a:	f04f 33ff 	mov.w	r3, #4294967295
    f29e:	647b      	str	r3, [r7, #68]	; 0x44
    f2a0:	4640      	mov	r0, r8
    f2a2:	f7ff ff29 	bl	f0f8 <am_hal_pwrctrl_periph_disable>
    f2a6:	2000      	movs	r0, #0
    f2a8:	e7e4      	b.n	f274 <am_hal_uart_power_control+0x14>
    f2aa:	2006      	movs	r0, #6
    f2ac:	e7e2      	b.n	f274 <am_hal_uart_power_control+0x14>
    f2ae:	b322      	cbz	r2, f2fa <am_hal_uart_power_control+0x9a>
    f2b0:	792b      	ldrb	r3, [r5, #4]
    f2b2:	bb3b      	cbnz	r3, f304 <am_hal_uart_power_control+0xa4>
    f2b4:	2007      	movs	r0, #7
    f2b6:	e7dd      	b.n	f274 <am_hal_uart_power_control+0x14>
    f2b8:	f7ff f8fa 	bl	e4b0 <am_hal_interrupt_master_disable>
    f2bc:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f2c0:	331c      	adds	r3, #28
    f2c2:	031b      	lsls	r3, r3, #12
    f2c4:	9001      	str	r0, [sp, #4]
    f2c6:	6a1a      	ldr	r2, [r3, #32]
    f2c8:	60aa      	str	r2, [r5, #8]
    f2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f2cc:	60ea      	str	r2, [r5, #12]
    f2ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f2d0:	612a      	str	r2, [r5, #16]
    f2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2d4:	616a      	str	r2, [r5, #20]
    f2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f2d8:	61aa      	str	r2, [r5, #24]
    f2da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f2dc:	61ea      	str	r2, [r5, #28]
    f2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f2e0:	622b      	str	r3, [r5, #32]
    f2e2:	2301      	movs	r3, #1
    f2e4:	712b      	strb	r3, [r5, #4]
    f2e6:	9801      	ldr	r0, [sp, #4]
    f2e8:	f7ff f8e6 	bl	e4b8 <am_hal_interrupt_master_set>
    f2ec:	682b      	ldr	r3, [r5, #0]
    f2ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2f2:	42a3      	cmp	r3, r4
    f2f4:	d1d4      	bne.n	f2a0 <am_hal_uart_power_control+0x40>
    f2f6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f2f8:	e7cb      	b.n	f292 <am_hal_uart_power_control+0x32>
    f2fa:	4640      	mov	r0, r8
    f2fc:	f7ff fed2 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    f300:	4648      	mov	r0, r9
    f302:	e7b7      	b.n	f274 <am_hal_uart_power_control+0x14>
    f304:	4640      	mov	r0, r8
    f306:	f7ff fecd 	bl	f0a4 <am_hal_pwrctrl_periph_enable>
    f30a:	f7ff f8d1 	bl	e4b0 <am_hal_interrupt_master_disable>
    f30e:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f312:	331c      	adds	r3, #28
    f314:	031b      	lsls	r3, r3, #12
    f316:	68aa      	ldr	r2, [r5, #8]
    f318:	9000      	str	r0, [sp, #0]
    f31a:	621a      	str	r2, [r3, #32]
    f31c:	68ea      	ldr	r2, [r5, #12]
    f31e:	625a      	str	r2, [r3, #36]	; 0x24
    f320:	692a      	ldr	r2, [r5, #16]
    f322:	629a      	str	r2, [r3, #40]	; 0x28
    f324:	696a      	ldr	r2, [r5, #20]
    f326:	62da      	str	r2, [r3, #44]	; 0x2c
    f328:	69aa      	ldr	r2, [r5, #24]
    f32a:	631a      	str	r2, [r3, #48]	; 0x30
    f32c:	69ea      	ldr	r2, [r5, #28]
    f32e:	635a      	str	r2, [r3, #52]	; 0x34
    f330:	6a2a      	ldr	r2, [r5, #32]
    f332:	639a      	str	r2, [r3, #56]	; 0x38
    f334:	9800      	ldr	r0, [sp, #0]
    f336:	712e      	strb	r6, [r5, #4]
    f338:	f7ff f8be 	bl	e4b8 <am_hal_interrupt_master_set>
    f33c:	4630      	mov	r0, r6
    f33e:	e799      	b.n	f274 <am_hal_uart_power_control+0x14>
    f340:	01ea9e06 	.word	0x01ea9e06

0000f344 <am_hal_uart_configure>:
    f344:	6803      	ldr	r3, [r0, #0]
    f346:	4a7a      	ldr	r2, [pc, #488]	; (f530 <am_hal_uart_configure+0x1ec>)
    f348:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f34c:	4293      	cmp	r3, r2
    f34e:	d001      	beq.n	f354 <am_hal_uart_configure+0x10>
    f350:	2002      	movs	r0, #2
    f352:	4770      	bx	lr
    f354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f358:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f35a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f35e:	351c      	adds	r5, #28
    f360:	032d      	lsls	r5, r5, #12
    f362:	2700      	movs	r7, #0
    f364:	b084      	sub	sp, #16
    f366:	632f      	str	r7, [r5, #48]	; 0x30
    f368:	460e      	mov	r6, r1
    f36a:	4604      	mov	r4, r0
    f36c:	f7ff f8a0 	bl	e4b0 <am_hal_interrupt_master_disable>
    f370:	9001      	str	r0, [sp, #4]
    f372:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f374:	f043 0308 	orr.w	r3, r3, #8
    f378:	862b      	strh	r3, [r5, #48]	; 0x30
    f37a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f37c:	2201      	movs	r2, #1
    f37e:	f362 1306 	bfi	r3, r2, #4, #3
    f382:	862b      	strh	r3, [r5, #48]	; 0x30
    f384:	9801      	ldr	r0, [sp, #4]
    f386:	f7ff f897 	bl	e4b8 <am_hal_interrupt_master_set>
    f38a:	f7ff f891 	bl	e4b0 <am_hal_interrupt_master_disable>
    f38e:	9002      	str	r0, [sp, #8]
    f390:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f392:	f367 0300 	bfi	r3, r7, #0, #1
    f396:	862b      	strh	r3, [r5, #48]	; 0x30
    f398:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f39a:	f367 2349 	bfi	r3, r7, #9, #1
    f39e:	862b      	strh	r3, [r5, #48]	; 0x30
    f3a0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f3a2:	f367 2308 	bfi	r3, r7, #8, #1
    f3a6:	862b      	strh	r3, [r5, #48]	; 0x30
    f3a8:	9802      	ldr	r0, [sp, #8]
    f3aa:	f7ff f885 	bl	e4b8 <am_hal_interrupt_master_set>
    f3ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f3b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f3b4:	3b01      	subs	r3, #1
    f3b6:	2b03      	cmp	r3, #3
    f3b8:	d854      	bhi.n	f464 <am_hal_uart_configure+0x120>
    f3ba:	e8df f003 	tbb	[pc, r3]
    f3be:	020e      	.short	0x020e
    f3c0:	1114      	.short	0x1114
    f3c2:	495c      	ldr	r1, [pc, #368]	; (f534 <am_hal_uart_configure+0x1f0>)
    f3c4:	485c      	ldr	r0, [pc, #368]	; (f538 <am_hal_uart_configure+0x1f4>)
    f3c6:	6832      	ldr	r2, [r6, #0]
    f3c8:	0112      	lsls	r2, r2, #4
    f3ca:	fbb0 f3f2 	udiv	r3, r0, r2
    f3ce:	b96b      	cbnz	r3, f3ec <am_hal_uart_configure+0xa8>
    f3d0:	485a      	ldr	r0, [pc, #360]	; (f53c <am_hal_uart_configure+0x1f8>)
    f3d2:	6623      	str	r3, [r4, #96]	; 0x60
    f3d4:	b004      	add	sp, #16
    f3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3da:	4959      	ldr	r1, [pc, #356]	; (f540 <am_hal_uart_configure+0x1fc>)
    f3dc:	4859      	ldr	r0, [pc, #356]	; (f544 <am_hal_uart_configure+0x200>)
    f3de:	e7f2      	b.n	f3c6 <am_hal_uart_configure+0x82>
    f3e0:	4959      	ldr	r1, [pc, #356]	; (f548 <am_hal_uart_configure+0x204>)
    f3e2:	485a      	ldr	r0, [pc, #360]	; (f54c <am_hal_uart_configure+0x208>)
    f3e4:	e7ef      	b.n	f3c6 <am_hal_uart_configure+0x82>
    f3e6:	495a      	ldr	r1, [pc, #360]	; (f550 <am_hal_uart_configure+0x20c>)
    f3e8:	485a      	ldr	r0, [pc, #360]	; (f554 <am_hal_uart_configure+0x210>)
    f3ea:	e7ec      	b.n	f3c6 <am_hal_uart_configure+0x82>
    f3ec:	fbb1 f2f2 	udiv	r2, r1, r2
    f3f0:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f3f4:	626b      	str	r3, [r5, #36]	; 0x24
    f3f6:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    f3fa:	626b      	str	r3, [r5, #36]	; 0x24
    f3fc:	fbb0 f0f1 	udiv	r0, r0, r1
    f400:	62aa      	str	r2, [r5, #40]	; 0x28
    f402:	6620      	str	r0, [r4, #96]	; 0x60
    f404:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f406:	f36f 338e 	bfc	r3, #14, #1
    f40a:	862b      	strh	r3, [r5, #48]	; 0x30
    f40c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f40e:	f36f 33cf 	bfc	r3, #15, #1
    f412:	862b      	strh	r3, [r5, #48]	; 0x30
    f414:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f416:	6933      	ldr	r3, [r6, #16]
    f418:	4313      	orrs	r3, r2
    f41a:	632b      	str	r3, [r5, #48]	; 0x30
    f41c:	6973      	ldr	r3, [r6, #20]
    f41e:	636b      	str	r3, [r5, #52]	; 0x34
    f420:	6871      	ldr	r1, [r6, #4]
    f422:	68b3      	ldr	r3, [r6, #8]
    f424:	68f2      	ldr	r2, [r6, #12]
    f426:	430b      	orrs	r3, r1
    f428:	f043 0310 	orr.w	r3, r3, #16
    f42c:	4313      	orrs	r3, r2
    f42e:	62eb      	str	r3, [r5, #44]	; 0x2c
    f430:	f7ff f83e 	bl	e4b0 <am_hal_interrupt_master_disable>
    f434:	9003      	str	r0, [sp, #12]
    f436:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f438:	f043 0301 	orr.w	r3, r3, #1
    f43c:	862b      	strh	r3, [r5, #48]	; 0x30
    f43e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f444:	862b      	strh	r3, [r5, #48]	; 0x30
    f446:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f44c:	862b      	strh	r3, [r5, #48]	; 0x30
    f44e:	9803      	ldr	r0, [sp, #12]
    f450:	f7ff f832 	bl	e4b8 <am_hal_interrupt_master_set>
    f454:	6825      	ldr	r5, [r4, #0]
    f456:	4b36      	ldr	r3, [pc, #216]	; (f530 <am_hal_uart_configure+0x1ec>)
    f458:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f45c:	429d      	cmp	r5, r3
    f45e:	d005      	beq.n	f46c <am_hal_uart_configure+0x128>
    f460:	2000      	movs	r0, #0
    f462:	e7b7      	b.n	f3d4 <am_hal_uart_configure+0x90>
    f464:	2300      	movs	r3, #0
    f466:	6623      	str	r3, [r4, #96]	; 0x60
    f468:	483b      	ldr	r0, [pc, #236]	; (f558 <am_hal_uart_configure+0x214>)
    f46a:	e7b3      	b.n	f3d4 <am_hal_uart_configure+0x90>
    f46c:	69b1      	ldr	r1, [r6, #24]
    f46e:	6a37      	ldr	r7, [r6, #32]
    f470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    f474:	b109      	cbz	r1, f47a <am_hal_uart_configure+0x136>
    f476:	69f3      	ldr	r3, [r6, #28]
    f478:	bb3b      	cbnz	r3, f4ca <am_hal_uart_configure+0x186>
    f47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f47c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f480:	f103 021c 	add.w	r2, r3, #28
    f484:	0312      	lsls	r2, r2, #12
    f486:	2100      	movs	r1, #0
    f488:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    f48c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f48e:	f021 0120 	bic.w	r1, r1, #32
    f492:	6391      	str	r1, [r2, #56]	; 0x38
    f494:	b1b7      	cbz	r7, f4c4 <am_hal_uart_configure+0x180>
    f496:	f1b8 0f00 	cmp.w	r8, #0
    f49a:	d12e      	bne.n	f4fa <am_hal_uart_configure+0x1b6>
    f49c:	6823      	ldr	r3, [r4, #0]
    f49e:	4a24      	ldr	r2, [pc, #144]	; (f530 <am_hal_uart_configure+0x1ec>)
    f4a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4a4:	2100      	movs	r1, #0
    f4a6:	4293      	cmp	r3, r2
    f4a8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    f4ac:	d1d8      	bne.n	f460 <am_hal_uart_configure+0x11c>
    f4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f4b0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f4b4:	331c      	adds	r3, #28
    f4b6:	031b      	lsls	r3, r3, #12
    f4b8:	2000      	movs	r0, #0
    f4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f4bc:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f4c0:	639a      	str	r2, [r3, #56]	; 0x38
    f4c2:	e787      	b.n	f3d4 <am_hal_uart_configure+0x90>
    f4c4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f4c8:	e7f4      	b.n	f4b4 <am_hal_uart_configure+0x170>
    f4ca:	2201      	movs	r2, #1
    f4cc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f4d0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f4d4:	f000 fb00 	bl	fad8 <am_hal_queue_init>
    f4d8:	6823      	ldr	r3, [r4, #0]
    f4da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4de:	42ab      	cmp	r3, r5
    f4e0:	d1be      	bne.n	f460 <am_hal_uart_configure+0x11c>
    f4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f4e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f4e8:	331c      	adds	r3, #28
    f4ea:	031b      	lsls	r3, r3, #12
    f4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f4ee:	f042 0220 	orr.w	r2, r2, #32
    f4f2:	639a      	str	r2, [r3, #56]	; 0x38
    f4f4:	2f00      	cmp	r7, #0
    f4f6:	d1ce      	bne.n	f496 <am_hal_uart_configure+0x152>
    f4f8:	e7d0      	b.n	f49c <am_hal_uart_configure+0x158>
    f4fa:	2201      	movs	r2, #1
    f4fc:	4643      	mov	r3, r8
    f4fe:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f502:	4639      	mov	r1, r7
    f504:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f508:	f000 fae6 	bl	fad8 <am_hal_queue_init>
    f50c:	6823      	ldr	r3, [r4, #0]
    f50e:	4a08      	ldr	r2, [pc, #32]	; (f530 <am_hal_uart_configure+0x1ec>)
    f510:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f514:	4293      	cmp	r3, r2
    f516:	d1a3      	bne.n	f460 <am_hal_uart_configure+0x11c>
    f518:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f51a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f51e:	331c      	adds	r3, #28
    f520:	031b      	lsls	r3, r3, #12
    f522:	2000      	movs	r0, #0
    f524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f526:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f52a:	639a      	str	r2, [r3, #56]	; 0x38
    f52c:	e752      	b.n	f3d4 <am_hal_uart_configure+0x90>
    f52e:	bf00      	nop
    f530:	01ea9e06 	.word	0x01ea9e06
    f534:	2dc6c000 	.word	0x2dc6c000
    f538:	00b71b00 	.word	0x00b71b00
    f53c:	08000003 	.word	0x08000003
    f540:	5b8d8000 	.word	0x5b8d8000
    f544:	016e3600 	.word	0x016e3600
    f548:	0b71b000 	.word	0x0b71b000
    f54c:	002dc6c0 	.word	0x002dc6c0
    f550:	16e36000 	.word	0x16e36000
    f554:	005b8d80 	.word	0x005b8d80
    f558:	08000002 	.word	0x08000002

0000f55c <am_hal_uart_transfer>:
    f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f560:	680f      	ldr	r7, [r1, #0]
    f562:	b091      	sub	sp, #68	; 0x44
    f564:	4605      	mov	r5, r0
    f566:	b13f      	cbz	r7, f578 <am_hal_uart_transfer+0x1c>
    f568:	2f01      	cmp	r7, #1
    f56a:	bf18      	it	ne
    f56c:	2707      	movne	r7, #7
    f56e:	d024      	beq.n	f5ba <am_hal_uart_transfer+0x5e>
    f570:	4638      	mov	r0, r7
    f572:	b011      	add	sp, #68	; 0x44
    f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f578:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f57c:	690b      	ldr	r3, [r1, #16]
    f57e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f582:	688e      	ldr	r6, [r1, #8]
    f584:	9300      	str	r3, [sp, #0]
    f586:	f1b9 0f00 	cmp.w	r9, #0
    f58a:	d031      	beq.n	f5f0 <am_hal_uart_transfer+0x94>
    f58c:	2e00      	cmp	r6, #0
    f58e:	f000 819c 	beq.w	f8ca <am_hal_uart_transfer+0x36e>
    f592:	2800      	cmp	r0, #0
    f594:	f000 8097 	beq.w	f6c6 <am_hal_uart_transfer+0x16a>
    f598:	6803      	ldr	r3, [r0, #0]
    f59a:	4aa9      	ldr	r2, [pc, #676]	; (f840 <am_hal_uart_transfer+0x2e4>)
    f59c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f5a0:	4293      	cmp	r3, r2
    f5a2:	f000 8092 	beq.w	f6ca <am_hal_uart_transfer+0x16e>
    f5a6:	46b8      	mov	r8, r7
    f5a8:	9b00      	ldr	r3, [sp, #0]
    f5aa:	b10b      	cbz	r3, f5b0 <am_hal_uart_transfer+0x54>
    f5ac:	f8c3 8000 	str.w	r8, [r3]
    f5b0:	2702      	movs	r7, #2
    f5b2:	4638      	mov	r0, r7
    f5b4:	b011      	add	sp, #68	; 0x44
    f5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5ba:	1d0b      	adds	r3, r1, #4
    f5bc:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f5c0:	f1b9 0f00 	cmp.w	r9, #0
    f5c4:	d043      	beq.n	f64e <am_hal_uart_transfer+0xf2>
    f5c6:	2f00      	cmp	r7, #0
    f5c8:	f000 8185 	beq.w	f8d6 <am_hal_uart_transfer+0x37a>
    f5cc:	2800      	cmp	r0, #0
    f5ce:	f000 80eb 	beq.w	f7a8 <am_hal_uart_transfer+0x24c>
    f5d2:	6802      	ldr	r2, [r0, #0]
    f5d4:	499a      	ldr	r1, [pc, #616]	; (f840 <am_hal_uart_transfer+0x2e4>)
    f5d6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f5da:	428a      	cmp	r2, r1
    f5dc:	f000 80e7 	beq.w	f7ae <am_hal_uart_transfer+0x252>
    f5e0:	2600      	movs	r6, #0
    f5e2:	2702      	movs	r7, #2
    f5e4:	f1bb 0f00 	cmp.w	fp, #0
    f5e8:	d0c2      	beq.n	f570 <am_hal_uart_transfer+0x14>
    f5ea:	f8cb 6000 	str.w	r6, [fp]
    f5ee:	e7bf      	b.n	f570 <am_hal_uart_transfer+0x14>
    f5f0:	2800      	cmp	r0, #0
    f5f2:	d0dd      	beq.n	f5b0 <am_hal_uart_transfer+0x54>
    f5f4:	6803      	ldr	r3, [r0, #0]
    f5f6:	4a92      	ldr	r2, [pc, #584]	; (f840 <am_hal_uart_transfer+0x2e4>)
    f5f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f5fc:	4293      	cmp	r3, r2
    f5fe:	d1d7      	bne.n	f5b0 <am_hal_uart_transfer+0x54>
    f600:	9b00      	ldr	r3, [sp, #0]
    f602:	b10b      	cbz	r3, f608 <am_hal_uart_transfer+0xac>
    f604:	f8c3 9000 	str.w	r9, [r3]
    f608:	b1fe      	cbz	r6, f64a <am_hal_uart_transfer+0xee>
    f60a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f60e:	2b00      	cmp	r3, #0
    f610:	f040 8165 	bne.w	f8de <am_hal_uart_transfer+0x382>
    f614:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f616:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f61a:	311c      	adds	r1, #28
    f61c:	0309      	lsls	r1, r1, #12
    f61e:	698a      	ldr	r2, [r1, #24]
    f620:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f624:	2a00      	cmp	r2, #0
    f626:	f040 818d 	bne.w	f944 <am_hal_uart_transfer+0x3e8>
    f62a:	f10a 33ff 	add.w	r3, sl, #4294967295
    f62e:	e003      	b.n	f638 <am_hal_uart_transfer+0xdc>
    f630:	6988      	ldr	r0, [r1, #24]
    f632:	0680      	lsls	r0, r0, #26
    f634:	f100 8151 	bmi.w	f8da <am_hal_uart_transfer+0x37e>
    f638:	3201      	adds	r2, #1
    f63a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f63e:	6008      	str	r0, [r1, #0]
    f640:	4296      	cmp	r6, r2
    f642:	d1f5      	bne.n	f630 <am_hal_uart_transfer+0xd4>
    f644:	9b00      	ldr	r3, [sp, #0]
    f646:	b103      	cbz	r3, f64a <am_hal_uart_transfer+0xee>
    f648:	601e      	str	r6, [r3, #0]
    f64a:	2700      	movs	r7, #0
    f64c:	e790      	b.n	f570 <am_hal_uart_transfer+0x14>
    f64e:	2800      	cmp	r0, #0
    f650:	d0ae      	beq.n	f5b0 <am_hal_uart_transfer+0x54>
    f652:	6802      	ldr	r2, [r0, #0]
    f654:	497a      	ldr	r1, [pc, #488]	; (f840 <am_hal_uart_transfer+0x2e4>)
    f656:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f65a:	428a      	cmp	r2, r1
    f65c:	d1a8      	bne.n	f5b0 <am_hal_uart_transfer+0x54>
    f65e:	f1bb 0f00 	cmp.w	fp, #0
    f662:	d001      	beq.n	f668 <am_hal_uart_transfer+0x10c>
    f664:	f8cb 9000 	str.w	r9, [fp]
    f668:	2f00      	cmp	r7, #0
    f66a:	d0ee      	beq.n	f64a <am_hal_uart_transfer+0xee>
    f66c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    f670:	2c00      	cmp	r4, #0
    f672:	f040 816c 	bne.w	f94e <am_hal_uart_transfer+0x3f2>
    f676:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f678:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f67c:	321c      	adds	r2, #28
    f67e:	0312      	lsls	r2, r2, #12
    f680:	6990      	ldr	r0, [r2, #24]
    f682:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f686:	2800      	cmp	r0, #0
    f688:	f040 819d 	bne.w	f9c6 <am_hal_uart_transfer+0x46a>
    f68c:	6811      	ldr	r1, [r2, #0]
    f68e:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    f692:	bf08      	it	eq
    f694:	f103 33ff 	addeq.w	r3, r3, #4294967295
    f698:	d008      	beq.n	f6ac <am_hal_uart_transfer+0x150>
    f69a:	e190      	b.n	f9be <am_hal_uart_transfer+0x462>
    f69c:	6991      	ldr	r1, [r2, #24]
    f69e:	06c8      	lsls	r0, r1, #27
    f6a0:	d409      	bmi.n	f6b6 <am_hal_uart_transfer+0x15a>
    f6a2:	6811      	ldr	r1, [r2, #0]
    f6a4:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f6a8:	f040 814e 	bne.w	f948 <am_hal_uart_transfer+0x3ec>
    f6ac:	3401      	adds	r4, #1
    f6ae:	42a7      	cmp	r7, r4
    f6b0:	f803 1f01 	strb.w	r1, [r3, #1]!
    f6b4:	d1f2      	bne.n	f69c <am_hal_uart_transfer+0x140>
    f6b6:	2700      	movs	r7, #0
    f6b8:	f1bb 0f00 	cmp.w	fp, #0
    f6bc:	f43f af58 	beq.w	f570 <am_hal_uart_transfer+0x14>
    f6c0:	f8cb 4000 	str.w	r4, [fp]
    f6c4:	e754      	b.n	f570 <am_hal_uart_transfer+0x14>
    f6c6:	4680      	mov	r8, r0
    f6c8:	e76e      	b.n	f5a8 <am_hal_uart_transfer+0x4c>
    f6ca:	9301      	str	r3, [sp, #4]
    f6cc:	4651      	mov	r1, sl
    f6ce:	46bb      	mov	fp, r7
    f6d0:	46b8      	mov	r8, r7
    f6d2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f6d6:	b9f2      	cbnz	r2, f716 <am_hal_uart_transfer+0x1ba>
    f6d8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f6da:	b19e      	cbz	r6, f704 <am_hal_uart_transfer+0x1a8>
    f6dc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f6e0:	321c      	adds	r2, #28
    f6e2:	0312      	lsls	r2, r2, #12
    f6e4:	3901      	subs	r1, #1
    f6e6:	6994      	ldr	r4, [r2, #24]
    f6e8:	f3c4 1440 	ubfx	r4, r4, #5, #1
    f6ec:	b11c      	cbz	r4, f6f6 <am_hal_uart_transfer+0x19a>
    f6ee:	e047      	b.n	f780 <am_hal_uart_transfer+0x224>
    f6f0:	6993      	ldr	r3, [r2, #24]
    f6f2:	069b      	lsls	r3, r3, #26
    f6f4:	d441      	bmi.n	f77a <am_hal_uart_transfer+0x21e>
    f6f6:	3401      	adds	r4, #1
    f6f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    f6fc:	6013      	str	r3, [r2, #0]
    f6fe:	42b4      	cmp	r4, r6
    f700:	d1f6      	bne.n	f6f0 <am_hal_uart_transfer+0x194>
    f702:	44a0      	add	r8, r4
    f704:	9b00      	ldr	r3, [sp, #0]
    f706:	2b00      	cmp	r3, #0
    f708:	d09f      	beq.n	f64a <am_hal_uart_transfer+0xee>
    f70a:	4638      	mov	r0, r7
    f70c:	f8c3 8000 	str.w	r8, [r3]
    f710:	b011      	add	sp, #68	; 0x44
    f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f716:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f718:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    f71a:	1b14      	subs	r4, r2, r4
    f71c:	42b4      	cmp	r4, r6
    f71e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    f722:	bf28      	it	cs
    f724:	4634      	movcs	r4, r6
    f726:	4622      	mov	r2, r4
    f728:	4618      	mov	r0, r3
    f72a:	9302      	str	r3, [sp, #8]
    f72c:	f000 f9e0 	bl	faf0 <am_hal_queue_item_add>
    f730:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f732:	9303      	str	r3, [sp, #12]
    f734:	f7fe febc 	bl	e4b0 <am_hal_interrupt_master_disable>
    f738:	9b03      	ldr	r3, [sp, #12]
    f73a:	9008      	str	r0, [sp, #32]
    f73c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f740:	331c      	adds	r3, #28
    f742:	031b      	lsls	r3, r3, #12
    f744:	9303      	str	r3, [sp, #12]
    f746:	e00d      	b.n	f764 <am_hal_uart_transfer+0x208>
    f748:	f000 fa0a 	bl	fb60 <am_hal_queue_item_get>
    f74c:	b190      	cbz	r0, f774 <am_hal_uart_transfer+0x218>
    f74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f750:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f754:	331c      	adds	r3, #28
    f756:	031b      	lsls	r3, r3, #12
    f758:	699a      	ldr	r2, [r3, #24]
    f75a:	0692      	lsls	r2, r2, #26
    f75c:	bf5c      	itt	pl
    f75e:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    f762:	601a      	strpl	r2, [r3, #0]
    f764:	9b03      	ldr	r3, [sp, #12]
    f766:	9802      	ldr	r0, [sp, #8]
    f768:	699b      	ldr	r3, [r3, #24]
    f76a:	069b      	lsls	r3, r3, #26
    f76c:	f04f 0201 	mov.w	r2, #1
    f770:	a907      	add	r1, sp, #28
    f772:	d5e9      	bpl.n	f748 <am_hal_uart_transfer+0x1ec>
    f774:	9808      	ldr	r0, [sp, #32]
    f776:	f7fe fe9f 	bl	e4b8 <am_hal_interrupt_master_set>
    f77a:	1b36      	subs	r6, r6, r4
    f77c:	44a0      	add	r8, r4
    f77e:	d0c1      	beq.n	f704 <am_hal_uart_transfer+0x1a8>
    f780:	2001      	movs	r0, #1
    f782:	f7fe fcd7 	bl	e134 <am_hal_flash_delay>
    f786:	f1b9 3fff 	cmp.w	r9, #4294967295
    f78a:	d001      	beq.n	f790 <am_hal_uart_transfer+0x234>
    f78c:	f10b 0b01 	add.w	fp, fp, #1
    f790:	45d9      	cmp	r9, fp
    f792:	d9b7      	bls.n	f704 <am_hal_uart_transfer+0x1a8>
    f794:	682a      	ldr	r2, [r5, #0]
    f796:	9b01      	ldr	r3, [sp, #4]
    f798:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f79c:	429a      	cmp	r2, r3
    f79e:	eb0a 0108 	add.w	r1, sl, r8
    f7a2:	f47f af01 	bne.w	f5a8 <am_hal_uart_transfer+0x4c>
    f7a6:	e794      	b.n	f6d2 <am_hal_uart_transfer+0x176>
    f7a8:	4606      	mov	r6, r0
    f7aa:	2702      	movs	r7, #2
    f7ac:	e71a      	b.n	f5e4 <am_hal_uart_transfer+0x88>
    f7ae:	9200      	str	r2, [sp, #0]
    f7b0:	f100 0248 	add.w	r2, r0, #72	; 0x48
    f7b4:	f04f 0a00 	mov.w	sl, #0
    f7b8:	9202      	str	r2, [sp, #8]
    f7ba:	465a      	mov	r2, fp
    f7bc:	4698      	mov	r8, r3
    f7be:	469b      	mov	fp, r3
    f7c0:	4656      	mov	r6, sl
    f7c2:	4613      	mov	r3, r2
    f7c4:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    f7c8:	2a00      	cmp	r2, #0
    f7ca:	d152      	bne.n	f872 <am_hal_uart_transfer+0x316>
    f7cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f7ce:	b3a7      	cbz	r7, f83a <am_hal_uart_transfer+0x2de>
    f7d0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f7d4:	311c      	adds	r1, #28
    f7d6:	0309      	lsls	r1, r1, #12
    f7d8:	698a      	ldr	r2, [r1, #24]
    f7da:	06d0      	lsls	r0, r2, #27
    f7dc:	d432      	bmi.n	f844 <am_hal_uart_transfer+0x2e8>
    f7de:	680a      	ldr	r2, [r1, #0]
    f7e0:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    f7e4:	f040 80aa 	bne.w	f93c <am_hal_uart_transfer+0x3e0>
    f7e8:	f108 38ff 	add.w	r8, r8, #4294967295
    f7ec:	e006      	b.n	f7fc <am_hal_uart_transfer+0x2a0>
    f7ee:	698a      	ldr	r2, [r1, #24]
    f7f0:	06d2      	lsls	r2, r2, #27
    f7f2:	d41f      	bmi.n	f834 <am_hal_uart_transfer+0x2d8>
    f7f4:	680a      	ldr	r2, [r1, #0]
    f7f6:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f7fa:	d161      	bne.n	f8c0 <am_hal_uart_transfer+0x364>
    f7fc:	3401      	adds	r4, #1
    f7fe:	42bc      	cmp	r4, r7
    f800:	f808 2f01 	strb.w	r2, [r8, #1]!
    f804:	d1f3      	bne.n	f7ee <am_hal_uart_transfer+0x292>
    f806:	469b      	mov	fp, r3
    f808:	4426      	add	r6, r4
    f80a:	f1bb 0f00 	cmp.w	fp, #0
    f80e:	f43f af1c 	beq.w	f64a <am_hal_uart_transfer+0xee>
    f812:	f8cb 6000 	str.w	r6, [fp]
    f816:	2700      	movs	r7, #0
    f818:	e6aa      	b.n	f570 <am_hal_uart_transfer+0x14>
    f81a:	9807      	ldr	r0, [sp, #28]
    f81c:	f7fe fe4c 	bl	e4b8 <am_hal_interrupt_master_set>
    f820:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f822:	9802      	ldr	r0, [sp, #8]
    f824:	42bc      	cmp	r4, r7
    f826:	bf28      	it	cs
    f828:	463c      	movcs	r4, r7
    f82a:	4641      	mov	r1, r8
    f82c:	4622      	mov	r2, r4
    f82e:	f000 f997 	bl	fb60 <am_hal_queue_item_get>
    f832:	9b01      	ldr	r3, [sp, #4]
    f834:	1b3f      	subs	r7, r7, r4
    f836:	4426      	add	r6, r4
    f838:	d104      	bne.n	f844 <am_hal_uart_transfer+0x2e8>
    f83a:	469b      	mov	fp, r3
    f83c:	e7e5      	b.n	f80a <am_hal_uart_transfer+0x2ae>
    f83e:	bf00      	nop
    f840:	01ea9e06 	.word	0x01ea9e06
    f844:	2001      	movs	r0, #1
    f846:	9301      	str	r3, [sp, #4]
    f848:	f7fe fc74 	bl	e134 <am_hal_flash_delay>
    f84c:	f1b9 3fff 	cmp.w	r9, #4294967295
    f850:	9b01      	ldr	r3, [sp, #4]
    f852:	d001      	beq.n	f858 <am_hal_uart_transfer+0x2fc>
    f854:	f10a 0a01 	add.w	sl, sl, #1
    f858:	45d1      	cmp	r9, sl
    f85a:	d9ee      	bls.n	f83a <am_hal_uart_transfer+0x2de>
    f85c:	682a      	ldr	r2, [r5, #0]
    f85e:	9900      	ldr	r1, [sp, #0]
    f860:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f864:	428a      	cmp	r2, r1
    f866:	eb0b 0806 	add.w	r8, fp, r6
    f86a:	d0ab      	beq.n	f7c4 <am_hal_uart_transfer+0x268>
    f86c:	469b      	mov	fp, r3
    f86e:	2702      	movs	r7, #2
    f870:	e6b8      	b.n	f5e4 <am_hal_uart_transfer+0x88>
    f872:	9301      	str	r3, [sp, #4]
    f874:	f7fe fe1c 	bl	e4b0 <am_hal_interrupt_master_disable>
    f878:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f87a:	9007      	str	r0, [sp, #28]
    f87c:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    f880:	301c      	adds	r0, #28
    f882:	9b01      	ldr	r3, [sp, #4]
    f884:	0300      	lsls	r0, r0, #12
    f886:	ac08      	add	r4, sp, #32
    f888:	2200      	movs	r2, #0
    f88a:	6981      	ldr	r1, [r0, #24]
    f88c:	06c9      	lsls	r1, r1, #27
    f88e:	d409      	bmi.n	f8a4 <am_hal_uart_transfer+0x348>
    f890:	6801      	ldr	r1, [r0, #0]
    f892:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f896:	f102 0201 	add.w	r2, r2, #1
    f89a:	d118      	bne.n	f8ce <am_hal_uart_transfer+0x372>
    f89c:	2a20      	cmp	r2, #32
    f89e:	f804 1b01 	strb.w	r1, [r4], #1
    f8a2:	d1f2      	bne.n	f88a <am_hal_uart_transfer+0x32e>
    f8a4:	a908      	add	r1, sp, #32
    f8a6:	9802      	ldr	r0, [sp, #8]
    f8a8:	9301      	str	r3, [sp, #4]
    f8aa:	f000 f921 	bl	faf0 <am_hal_queue_item_add>
    f8ae:	9b01      	ldr	r3, [sp, #4]
    f8b0:	2800      	cmp	r0, #0
    f8b2:	d1b2      	bne.n	f81a <am_hal_uart_transfer+0x2be>
    f8b4:	4f45      	ldr	r7, [pc, #276]	; (f9cc <am_hal_uart_transfer+0x470>)
    f8b6:	469b      	mov	fp, r3
    f8b8:	9807      	ldr	r0, [sp, #28]
    f8ba:	f7fe fdfd 	bl	e4b8 <am_hal_interrupt_master_set>
    f8be:	e691      	b.n	f5e4 <am_hal_uart_transfer+0x88>
    f8c0:	469b      	mov	fp, r3
    f8c2:	4426      	add	r6, r4
    f8c4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f8c8:	e68c      	b.n	f5e4 <am_hal_uart_transfer+0x88>
    f8ca:	46b8      	mov	r8, r7
    f8cc:	e71a      	b.n	f704 <am_hal_uart_transfer+0x1a8>
    f8ce:	469b      	mov	fp, r3
    f8d0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f8d4:	e7f0      	b.n	f8b8 <am_hal_uart_transfer+0x35c>
    f8d6:	463e      	mov	r6, r7
    f8d8:	e797      	b.n	f80a <am_hal_uart_transfer+0x2ae>
    f8da:	4616      	mov	r6, r2
    f8dc:	e6b2      	b.n	f644 <am_hal_uart_transfer+0xe8>
    f8de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f8e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f8e2:	1a9b      	subs	r3, r3, r2
    f8e4:	429e      	cmp	r6, r3
    f8e6:	bf28      	it	cs
    f8e8:	461e      	movcs	r6, r3
    f8ea:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    f8ee:	4651      	mov	r1, sl
    f8f0:	4632      	mov	r2, r6
    f8f2:	4620      	mov	r0, r4
    f8f4:	f000 f8fc 	bl	faf0 <am_hal_queue_item_add>
    f8f8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f8fa:	f7fe fdd9 	bl	e4b0 <am_hal_interrupt_master_disable>
    f8fe:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f902:	371c      	adds	r7, #28
    f904:	033f      	lsls	r7, r7, #12
    f906:	9005      	str	r0, [sp, #20]
    f908:	e00d      	b.n	f926 <am_hal_uart_transfer+0x3ca>
    f90a:	f000 f929 	bl	fb60 <am_hal_queue_item_get>
    f90e:	b188      	cbz	r0, f934 <am_hal_uart_transfer+0x3d8>
    f910:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f912:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f916:	331c      	adds	r3, #28
    f918:	031b      	lsls	r3, r3, #12
    f91a:	699a      	ldr	r2, [r3, #24]
    f91c:	0692      	lsls	r2, r2, #26
    f91e:	bf5c      	itt	pl
    f920:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    f924:	601a      	strpl	r2, [r3, #0]
    f926:	69bb      	ldr	r3, [r7, #24]
    f928:	069b      	lsls	r3, r3, #26
    f92a:	f04f 0201 	mov.w	r2, #1
    f92e:	a908      	add	r1, sp, #32
    f930:	4620      	mov	r0, r4
    f932:	d5ea      	bpl.n	f90a <am_hal_uart_transfer+0x3ae>
    f934:	9805      	ldr	r0, [sp, #20]
    f936:	f7fe fdbf 	bl	e4b8 <am_hal_interrupt_master_set>
    f93a:	e683      	b.n	f644 <am_hal_uart_transfer+0xe8>
    f93c:	469b      	mov	fp, r3
    f93e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f942:	e64f      	b.n	f5e4 <am_hal_uart_transfer+0x88>
    f944:	461e      	mov	r6, r3
    f946:	e67d      	b.n	f644 <am_hal_uart_transfer+0xe8>
    f948:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f94c:	e6b4      	b.n	f6b8 <am_hal_uart_transfer+0x15c>
    f94e:	9300      	str	r3, [sp, #0]
    f950:	f7fe fdae 	bl	e4b0 <am_hal_interrupt_master_disable>
    f954:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f956:	9006      	str	r0, [sp, #24]
    f958:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f95c:	321c      	adds	r2, #28
    f95e:	0311      	lsls	r1, r2, #12
    f960:	a808      	add	r0, sp, #32
    f962:	2200      	movs	r2, #0
    f964:	9b00      	ldr	r3, [sp, #0]
    f966:	e009      	b.n	f97c <am_hal_uart_transfer+0x420>
    f968:	680c      	ldr	r4, [r1, #0]
    f96a:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    f96e:	f102 0201 	add.w	r2, r2, #1
    f972:	d121      	bne.n	f9b8 <am_hal_uart_transfer+0x45c>
    f974:	2a20      	cmp	r2, #32
    f976:	f800 4b01 	strb.w	r4, [r0], #1
    f97a:	d002      	beq.n	f982 <am_hal_uart_transfer+0x426>
    f97c:	698c      	ldr	r4, [r1, #24]
    f97e:	06e4      	lsls	r4, r4, #27
    f980:	d5f2      	bpl.n	f968 <am_hal_uart_transfer+0x40c>
    f982:	f105 0648 	add.w	r6, r5, #72	; 0x48
    f986:	a908      	add	r1, sp, #32
    f988:	4630      	mov	r0, r6
    f98a:	9300      	str	r3, [sp, #0]
    f98c:	f000 f8b0 	bl	faf0 <am_hal_queue_item_add>
    f990:	b920      	cbnz	r0, f99c <am_hal_uart_transfer+0x440>
    f992:	4f0e      	ldr	r7, [pc, #56]	; (f9cc <am_hal_uart_transfer+0x470>)
    f994:	9806      	ldr	r0, [sp, #24]
    f996:	f7fe fd8f 	bl	e4b8 <am_hal_interrupt_master_set>
    f99a:	e5e9      	b.n	f570 <am_hal_uart_transfer+0x14>
    f99c:	9806      	ldr	r0, [sp, #24]
    f99e:	f7fe fd8b 	bl	e4b8 <am_hal_interrupt_master_set>
    f9a2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f9a4:	9b00      	ldr	r3, [sp, #0]
    f9a6:	42bc      	cmp	r4, r7
    f9a8:	bf28      	it	cs
    f9aa:	463c      	movcs	r4, r7
    f9ac:	4619      	mov	r1, r3
    f9ae:	4630      	mov	r0, r6
    f9b0:	4622      	mov	r2, r4
    f9b2:	f000 f8d5 	bl	fb60 <am_hal_queue_item_get>
    f9b6:	e67e      	b.n	f6b6 <am_hal_uart_transfer+0x15a>
    f9b8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f9bc:	e7ea      	b.n	f994 <am_hal_uart_transfer+0x438>
    f9be:	4604      	mov	r4, r0
    f9c0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f9c4:	e678      	b.n	f6b8 <am_hal_uart_transfer+0x15c>
    f9c6:	4627      	mov	r7, r4
    f9c8:	e676      	b.n	f6b8 <am_hal_uart_transfer+0x15c>
    f9ca:	bf00      	nop
    f9cc:	08000001 	.word	0x08000001

0000f9d0 <am_hal_cmdq_init>:
    f9d0:	2807      	cmp	r0, #7
    f9d2:	d901      	bls.n	f9d8 <am_hal_cmdq_init+0x8>
    f9d4:	2005      	movs	r0, #5
    f9d6:	4770      	bx	lr
    f9d8:	b1c9      	cbz	r1, fa0e <am_hal_cmdq_init+0x3e>
    f9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9de:	684c      	ldr	r4, [r1, #4]
    f9e0:	b194      	cbz	r4, fa08 <am_hal_cmdq_init+0x38>
    f9e2:	b18a      	cbz	r2, fa08 <am_hal_cmdq_init+0x38>
    f9e4:	680e      	ldr	r6, [r1, #0]
    f9e6:	2e01      	cmp	r6, #1
    f9e8:	d90e      	bls.n	fa08 <am_hal_cmdq_init+0x38>
    f9ea:	272c      	movs	r7, #44	; 0x2c
    f9ec:	f8df c09c 	ldr.w	ip, [pc, #156]	; fa8c <am_hal_cmdq_init+0xbc>
    f9f0:	fb07 f700 	mul.w	r7, r7, r0
    f9f4:	eb0c 0507 	add.w	r5, ip, r7
    f9f8:	f895 e003 	ldrb.w	lr, [r5, #3]
    f9fc:	f01e 0301 	ands.w	r3, lr, #1
    fa00:	d007      	beq.n	fa12 <am_hal_cmdq_init+0x42>
    fa02:	2007      	movs	r0, #7
    fa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa08:	2006      	movs	r0, #6
    fa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa0e:	2006      	movs	r0, #6
    fa10:	4770      	bx	lr
    fa12:	f04e 0e01 	orr.w	lr, lr, #1
    fa16:	00f6      	lsls	r6, r6, #3
    fa18:	f363 0e41 	bfi	lr, r3, #1, #1
    fa1c:	f885 e003 	strb.w	lr, [r5, #3]
    fa20:	eb06 0804 	add.w	r8, r6, r4
    fa24:	f8df e068 	ldr.w	lr, [pc, #104]	; fa90 <am_hal_cmdq_init+0xc0>
    fa28:	f8c5 8008 	str.w	r8, [r5, #8]
    fa2c:	606c      	str	r4, [r5, #4]
    fa2e:	60ec      	str	r4, [r5, #12]
    fa30:	616c      	str	r4, [r5, #20]
    fa32:	612c      	str	r4, [r5, #16]
    fa34:	61ae      	str	r6, [r5, #24]
    fa36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fa3a:	f85c 6007 	ldr.w	r6, [ip, r7]
    fa3e:	f8df 8054 	ldr.w	r8, [pc, #84]	; fa94 <am_hal_cmdq_init+0xc4>
    fa42:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    fa46:	f368 0617 	bfi	r6, r8, #0, #24
    fa4a:	f8d0 e008 	ldr.w	lr, [r0, #8]
    fa4e:	f84c 6007 	str.w	r6, [ip, r7]
    fa52:	6268      	str	r0, [r5, #36]	; 0x24
    fa54:	61eb      	str	r3, [r5, #28]
    fa56:	622b      	str	r3, [r5, #32]
    fa58:	f8ce 3000 	str.w	r3, [lr]
    fa5c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fa5e:	7a09      	ldrb	r1, [r1, #8]
    fa60:	68c0      	ldr	r0, [r0, #12]
    fa62:	6003      	str	r3, [r0, #0]
    fa64:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fa66:	6906      	ldr	r6, [r0, #16]
    fa68:	6940      	ldr	r0, [r0, #20]
    fa6a:	6837      	ldr	r7, [r6, #0]
    fa6c:	4338      	orrs	r0, r7
    fa6e:	6030      	str	r0, [r6, #0]
    fa70:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fa72:	6840      	ldr	r0, [r0, #4]
    fa74:	6004      	str	r4, [r0, #0]
    fa76:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fa78:	0049      	lsls	r1, r1, #1
    fa7a:	6804      	ldr	r4, [r0, #0]
    fa7c:	f001 0102 	and.w	r1, r1, #2
    fa80:	6021      	str	r1, [r4, #0]
    fa82:	4618      	mov	r0, r3
    fa84:	6015      	str	r5, [r2, #0]
    fa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa8a:	bf00      	nop
    fa8c:	10001178 	.word	0x10001178
    fa90:	000101dc 	.word	0x000101dc
    fa94:	00cdcdcd 	.word	0x00cdcdcd

0000fa98 <am_hal_cmdq_enable>:
    fa98:	4603      	mov	r3, r0
    fa9a:	b128      	cbz	r0, faa8 <am_hal_cmdq_enable+0x10>
    fa9c:	6802      	ldr	r2, [r0, #0]
    fa9e:	490d      	ldr	r1, [pc, #52]	; (fad4 <am_hal_cmdq_enable+0x3c>)
    faa0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    faa4:	428a      	cmp	r2, r1
    faa6:	d001      	beq.n	faac <am_hal_cmdq_enable+0x14>
    faa8:	2002      	movs	r0, #2
    faaa:	4770      	bx	lr
    faac:	78c2      	ldrb	r2, [r0, #3]
    faae:	f002 0202 	and.w	r2, r2, #2
    fab2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    fab6:	b952      	cbnz	r2, face <am_hal_cmdq_enable+0x36>
    fab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    faba:	6811      	ldr	r1, [r2, #0]
    fabc:	680a      	ldr	r2, [r1, #0]
    fabe:	f042 0201 	orr.w	r2, r2, #1
    fac2:	600a      	str	r2, [r1, #0]
    fac4:	78da      	ldrb	r2, [r3, #3]
    fac6:	f042 0202 	orr.w	r2, r2, #2
    faca:	70da      	strb	r2, [r3, #3]
    facc:	4770      	bx	lr
    face:	2000      	movs	r0, #0
    fad0:	4770      	bx	lr
    fad2:	bf00      	nop
    fad4:	01cdcdcd 	.word	0x01cdcdcd

0000fad8 <am_hal_queue_init>:
    fad8:	b410      	push	{r4}
    fada:	2400      	movs	r4, #0
    fadc:	6004      	str	r4, [r0, #0]
    fade:	6044      	str	r4, [r0, #4]
    fae0:	6084      	str	r4, [r0, #8]
    fae2:	60c3      	str	r3, [r0, #12]
    fae4:	6102      	str	r2, [r0, #16]
    fae6:	6141      	str	r1, [r0, #20]
    fae8:	f85d 4b04 	ldr.w	r4, [sp], #4
    faec:	4770      	bx	lr
    faee:	bf00      	nop

0000faf0 <am_hal_queue_item_add>:
    faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    faf2:	4604      	mov	r4, r0
    faf4:	6906      	ldr	r6, [r0, #16]
    faf6:	b083      	sub	sp, #12
    faf8:	fb06 f602 	mul.w	r6, r6, r2
    fafc:	460d      	mov	r5, r1
    fafe:	f7fe fcd7 	bl	e4b0 <am_hal_interrupt_master_disable>
    fb02:	68e7      	ldr	r7, [r4, #12]
    fb04:	68a2      	ldr	r2, [r4, #8]
    fb06:	9001      	str	r0, [sp, #4]
    fb08:	1abb      	subs	r3, r7, r2
    fb0a:	429e      	cmp	r6, r3
    fb0c:	d826      	bhi.n	fb5c <am_hal_queue_item_add+0x6c>
    fb0e:	b196      	cbz	r6, fb36 <am_hal_queue_item_add+0x46>
    fb10:	6823      	ldr	r3, [r4, #0]
    fb12:	4629      	mov	r1, r5
    fb14:	b1c5      	cbz	r5, fb48 <am_hal_queue_item_add+0x58>
    fb16:	19af      	adds	r7, r5, r6
    fb18:	6962      	ldr	r2, [r4, #20]
    fb1a:	f811 0b01 	ldrb.w	r0, [r1], #1
    fb1e:	54d0      	strb	r0, [r2, r3]
    fb20:	6823      	ldr	r3, [r4, #0]
    fb22:	68e5      	ldr	r5, [r4, #12]
    fb24:	3301      	adds	r3, #1
    fb26:	42b9      	cmp	r1, r7
    fb28:	fbb3 f0f5 	udiv	r0, r3, r5
    fb2c:	fb05 3310 	mls	r3, r5, r0, r3
    fb30:	6023      	str	r3, [r4, #0]
    fb32:	d1f1      	bne.n	fb18 <am_hal_queue_item_add+0x28>
    fb34:	68a2      	ldr	r2, [r4, #8]
    fb36:	4432      	add	r2, r6
    fb38:	60a2      	str	r2, [r4, #8]
    fb3a:	2401      	movs	r4, #1
    fb3c:	9801      	ldr	r0, [sp, #4]
    fb3e:	f7fe fcbb 	bl	e4b8 <am_hal_interrupt_master_set>
    fb42:	4620      	mov	r0, r4
    fb44:	b003      	add	sp, #12
    fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb48:	3101      	adds	r1, #1
    fb4a:	3301      	adds	r3, #1
    fb4c:	428e      	cmp	r6, r1
    fb4e:	fbb3 f0f7 	udiv	r0, r3, r7
    fb52:	fb07 3310 	mls	r3, r7, r0, r3
    fb56:	d1f7      	bne.n	fb48 <am_hal_queue_item_add+0x58>
    fb58:	6023      	str	r3, [r4, #0]
    fb5a:	e7ec      	b.n	fb36 <am_hal_queue_item_add+0x46>
    fb5c:	2400      	movs	r4, #0
    fb5e:	e7ed      	b.n	fb3c <am_hal_queue_item_add+0x4c>

0000fb60 <am_hal_queue_item_get>:
    fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb62:	4604      	mov	r4, r0
    fb64:	6906      	ldr	r6, [r0, #16]
    fb66:	b083      	sub	sp, #12
    fb68:	fb06 f602 	mul.w	r6, r6, r2
    fb6c:	460d      	mov	r5, r1
    fb6e:	f7fe fc9f 	bl	e4b0 <am_hal_interrupt_master_disable>
    fb72:	68a2      	ldr	r2, [r4, #8]
    fb74:	9001      	str	r0, [sp, #4]
    fb76:	4296      	cmp	r6, r2
    fb78:	d81c      	bhi.n	fbb4 <am_hal_queue_item_get+0x54>
    fb7a:	b196      	cbz	r6, fba2 <am_hal_queue_item_get+0x42>
    fb7c:	6863      	ldr	r3, [r4, #4]
    fb7e:	b1dd      	cbz	r5, fbb8 <am_hal_queue_item_get+0x58>
    fb80:	4629      	mov	r1, r5
    fb82:	19af      	adds	r7, r5, r6
    fb84:	6962      	ldr	r2, [r4, #20]
    fb86:	5cd3      	ldrb	r3, [r2, r3]
    fb88:	f801 3b01 	strb.w	r3, [r1], #1
    fb8c:	6863      	ldr	r3, [r4, #4]
    fb8e:	68e5      	ldr	r5, [r4, #12]
    fb90:	3301      	adds	r3, #1
    fb92:	428f      	cmp	r7, r1
    fb94:	fbb3 f0f5 	udiv	r0, r3, r5
    fb98:	fb05 3310 	mls	r3, r5, r0, r3
    fb9c:	6063      	str	r3, [r4, #4]
    fb9e:	d1f1      	bne.n	fb84 <am_hal_queue_item_get+0x24>
    fba0:	68a2      	ldr	r2, [r4, #8]
    fba2:	1b92      	subs	r2, r2, r6
    fba4:	60a2      	str	r2, [r4, #8]
    fba6:	2401      	movs	r4, #1
    fba8:	9801      	ldr	r0, [sp, #4]
    fbaa:	f7fe fc85 	bl	e4b8 <am_hal_interrupt_master_set>
    fbae:	4620      	mov	r0, r4
    fbb0:	b003      	add	sp, #12
    fbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbb4:	2400      	movs	r4, #0
    fbb6:	e7f7      	b.n	fba8 <am_hal_queue_item_get+0x48>
    fbb8:	68e0      	ldr	r0, [r4, #12]
    fbba:	4629      	mov	r1, r5
    fbbc:	3101      	adds	r1, #1
    fbbe:	3301      	adds	r3, #1
    fbc0:	428e      	cmp	r6, r1
    fbc2:	fbb3 f5f0 	udiv	r5, r3, r0
    fbc6:	fb00 3315 	mls	r3, r0, r5, r3
    fbca:	d1f7      	bne.n	fbbc <am_hal_queue_item_get+0x5c>
    fbcc:	6063      	str	r3, [r4, #4]
    fbce:	e7e8      	b.n	fba2 <am_hal_queue_item_get+0x42>
    fbd0:	72617053 	.word	0x72617053
    fbd4:	6e75466b 	.word	0x6e75466b
    fbd8:	67644520 	.word	0x67644520
    fbdc:	6f422065 	.word	0x6f422065
    fbe0:	20647261 	.word	0x20647261
    fbe4:	74736554 	.word	0x74736554
    fbe8:	0000000a 	.word	0x0000000a
    fbec:	353a3331 	.word	0x353a3331
    fbf0:	37303a35 	.word	0x37303a35
    fbf4:	00000000 	.word	0x00000000
    fbf8:	20626546 	.word	0x20626546
    fbfc:	32203820 	.word	0x32203820
    fc00:	00393130 	.word	0x00393130
    fc04:	706d6f43 	.word	0x706d6f43
    fc08:	64656c69 	.word	0x64656c69
    fc0c:	206e6f20 	.word	0x206e6f20
    fc10:	202c7325 	.word	0x202c7325
    fc14:	0a0a7325 	.word	0x0a0a7325
    fc18:	00000000 	.word	0x00000000
    fc1c:	72617053 	.word	0x72617053
    fc20:	6e75466b 	.word	0x6e75466b
    fc24:	6e655420 	.word	0x6e655420
    fc28:	66726f73 	.word	0x66726f73
    fc2c:	20776f6c 	.word	0x20776f6c
    fc30:	75626544 	.word	0x75626544
    fc34:	754f2067 	.word	0x754f2067
    fc38:	74757074 	.word	0x74757074
    fc3c:	57532820 	.word	0x57532820
    fc40:	0a0d294f 	.word	0x0a0d294f
    fc44:	00000000 	.word	0x00000000
    fc48:	6c6c6548 	.word	0x6c6c6548
    fc4c:	55202c6f 	.word	0x55202c6f
    fc50:	21545241 	.word	0x21545241
    fc54:	00000a0d 	.word	0x00000a0d
    fc58:	65636341 	.word	0x65636341
    fc5c:	6f72656c 	.word	0x6f72656c
    fc60:	6574656d 	.word	0x6574656d
    fc64:	6e692072 	.word	0x6e692072
    fc68:	72207469 	.word	0x72207469
    fc6c:	72757465 	.word	0x72757465
    fc70:	2064656e 	.word	0x2064656e
    fc74:	0d783825 	.word	0x0d783825
    fc78:	0000000a 	.word	0x0000000a
    fc7c:	2e343025 	.word	0x2e343025
    fc80:	202c6632 	.word	0x202c6632
    fc84:	2e343025 	.word	0x2e343025
    fc88:	202c6632 	.word	0x202c6632
    fc8c:	2e343025 	.word	0x2e343025
    fc90:	202c6632 	.word	0x202c6632
    fc94:	2e343025 	.word	0x2e343025
    fc98:	0a0d6632 	.word	0x0a0d6632
    fc9c:	00000000 	.word	0x00000000
    fca0:	0a0a0a0a 	.word	0x0a0a0a0a
    fca4:	0a0a0a0a 	.word	0x0a0a0a0a
    fca8:	0a0a0a0a 	.word	0x0a0a0a0a
    fcac:	0a0a0a0a 	.word	0x0a0a0a0a
    fcb0:	00000a0a 	.word	0x00000a0a
    fcb4:	6f727245 	.word	0x6f727245
    fcb8:	65722072 	.word	0x65722072
    fcbc:	6e696461 	.word	0x6e696461
    fcc0:	44412067 	.word	0x44412067
    fcc4:	6e692043 	.word	0x6e692043
    fcc8:	72726574 	.word	0x72726574
    fccc:	20747075 	.word	0x20747075
    fcd0:	74617473 	.word	0x74617473
    fcd4:	000a7375 	.word	0x000a7375
    fcd8:	6f727245 	.word	0x6f727245
    fcdc:	6c632072 	.word	0x6c632072
    fce0:	69726165 	.word	0x69726165
    fce4:	4120676e 	.word	0x4120676e
    fce8:	69204344 	.word	0x69204344
    fcec:	7265746e 	.word	0x7265746e
    fcf0:	74707572 	.word	0x74707572
    fcf4:	61747320 	.word	0x61747320
    fcf8:	0a737574 	.word	0x0a737574
    fcfc:	00000000 	.word	0x00000000
    fd00:	6f727245 	.word	0x6f727245
    fd04:	202d2072 	.word	0x202d2072
    fd08:	20434441 	.word	0x20434441
    fd0c:	706d6173 	.word	0x706d6173
    fd10:	7220656c 	.word	0x7220656c
    fd14:	20646165 	.word	0x20646165
    fd18:	6d6f7266 	.word	0x6d6f7266
    fd1c:	46494620 	.word	0x46494620
    fd20:	6166204f 	.word	0x6166204f
    fd24:	64656c69 	.word	0x64656c69
    fd28:	00000a2e 	.word	0x00000a2e
    fd2c:	6f727245 	.word	0x6f727245
    fd30:	202d2072 	.word	0x202d2072
    fd34:	61736964 	.word	0x61736964
    fd38:	20656c62 	.word	0x20656c62
    fd3c:	20434441 	.word	0x20434441
    fd40:	6c696166 	.word	0x6c696166
    fd44:	0a2e6465 	.word	0x0a2e6465
    fd48:	00000000 	.word	0x00000000
    fd4c:	6f727245 	.word	0x6f727245
    fd50:	202d2072 	.word	0x202d2072
    fd54:	61736964 	.word	0x61736964
    fd58:	6e696c62 	.word	0x6e696c62
    fd5c:	68742067 	.word	0x68742067
    fd60:	44412065 	.word	0x44412065
    fd64:	6f702043 	.word	0x6f702043
    fd68:	20726577 	.word	0x20726577
    fd6c:	616d6f64 	.word	0x616d6f64
    fd70:	66206e69 	.word	0x66206e69
    fd74:	656c6961 	.word	0x656c6961
    fd78:	000a2e64 	.word	0x000a2e64
    fd7c:	6f727245 	.word	0x6f727245
    fd80:	202d2072 	.word	0x202d2072
    fd84:	75746572 	.word	0x75746572
    fd88:	6f206e72 	.word	0x6f206e72
    fd8c:	68742066 	.word	0x68742066
    fd90:	44412065 	.word	0x44412065
    fd94:	6e692043 	.word	0x6e692043
    fd98:	6e617473 	.word	0x6e617473
    fd9c:	66206563 	.word	0x66206563
    fda0:	656c6961 	.word	0x656c6961
    fda4:	000a2e64 	.word	0x000a2e64
    fda8:	6f727245 	.word	0x6f727245
    fdac:	202d2072 	.word	0x202d2072
    fdb0:	65736572 	.word	0x65736572
    fdb4:	74617672 	.word	0x74617672
    fdb8:	206e6f69 	.word	0x206e6f69
    fdbc:	7420666f 	.word	0x7420666f
    fdc0:	41206568 	.word	0x41206568
    fdc4:	69204344 	.word	0x69204344
    fdc8:	6174736e 	.word	0x6174736e
    fdcc:	2065636e 	.word	0x2065636e
    fdd0:	6c696166 	.word	0x6c696166
    fdd4:	0a2e6465 	.word	0x0a2e6465
    fdd8:	00000000 	.word	0x00000000
    fddc:	6f727245 	.word	0x6f727245
    fde0:	202d2072 	.word	0x202d2072
    fde4:	20434441 	.word	0x20434441
    fde8:	65776f70 	.word	0x65776f70
    fdec:	6e6f2072 	.word	0x6e6f2072
    fdf0:	69616620 	.word	0x69616620
    fdf4:	2e64656c 	.word	0x2e64656c
    fdf8:	0000000a 	.word	0x0000000a
    fdfc:	6f727245 	.word	0x6f727245
    fe00:	202d2072 	.word	0x202d2072
    fe04:	666e6f63 	.word	0x666e6f63
    fe08:	72756769 	.word	0x72756769
    fe0c:	20676e69 	.word	0x20676e69
    fe10:	20434441 	.word	0x20434441
    fe14:	6c696166 	.word	0x6c696166
    fe18:	0a2e6465 	.word	0x0a2e6465
    fe1c:	00000000 	.word	0x00000000
    fe20:	6f727245 	.word	0x6f727245
    fe24:	202d2072 	.word	0x202d2072
    fe28:	666e6f63 	.word	0x666e6f63
    fe2c:	72756769 	.word	0x72756769
    fe30:	20676e69 	.word	0x20676e69
    fe34:	20434441 	.word	0x20434441
    fe38:	746f6c53 	.word	0x746f6c53
    fe3c:	66203020 	.word	0x66203020
    fe40:	656c6961 	.word	0x656c6961
    fe44:	000a2e64 	.word	0x000a2e64
    fe48:	6f727245 	.word	0x6f727245
    fe4c:	202d2072 	.word	0x202d2072
    fe50:	62616e65 	.word	0x62616e65
    fe54:	676e696c 	.word	0x676e696c
    fe58:	43444120 	.word	0x43444120
    fe5c:	69616620 	.word	0x69616620
    fe60:	2e64656c 	.word	0x2e64656c
    fe64:	0000000a 	.word	0x0000000a

0000fe68 <g_AM_PIN_11_ADCSE2>:
    fe68:	00000000 616f6857 2820696d 756f6873     ....Whoami (shou
    fe78:	6220646c 78302065 3a293333 25783020     ld be 0x33): 0x%
    fe88:	000a7832 52206f4e 75622058 72656666     2x..No RX buffer
    fe98:	6f727020 65646976 00000a64 646e6553      provided...Send
    fea8:	72726520 6425203a 0000000a 65636552      err: %d....Rece
    feb8:	20657669 3a727265 0a642520 00000000     ive err: %d.....
    fec8:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
    fed8:	65646976 00000a64 646e6553 72726520     vided...Send err
    fee8:	68702820 20657361 203a2931 000a6425      (phase 1): %d..

0000fef8 <g_sBspUartConfig>:
    fef8:	0001c200 00000060 00000000 00000000     ....`...........
    ff08:	00000000 00000012 00000000 00000000     ................
	...

0000ff20 <g_AM_BSP_GPIO_COM_UART_RX>:
    ff20:	00000000                                ....

0000ff24 <g_AM_BSP_GPIO_COM_UART_TX>:
    ff24:	00000000                                ....

0000ff28 <g_AM_BSP_GPIO_IOM4_SCL>:
    ff28:	00040b44                                D...

0000ff2c <g_AM_BSP_GPIO_IOM4_SDA>:
    ff2c:	00040b44                                D...

0000ff30 <am_hal_cachectrl_defaults>:
    ff30:	00000308                                ....

0000ff34 <g_AM_HAL_GPIO_INPUT>:
    ff34:	00001003                                ....

0000ff38 <g_ui8Bit76Capabilities>:
    ff38:	02800101 80010180 80800101 80808080     ................
    ff48:	80808080 80808008 01800180 80808080     ................
    ff58:	80808080 01800402 01010401 80808080     ................
    ff68:	00000101                                ....

0000ff6c <g_ui8NCEtable>:
    ff6c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ff7c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ff8c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ff9c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ffac:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ffbc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ffcc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ffdc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ffec:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    fffc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   1000c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   1001c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   1002c:	32221202 43231303                       .."2..#C

00010034 <g_ui8Inpen>:
   10034:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   10044:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   10054:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   10064:	00003130                                01..

00010068 <g_AM_HAL_GPIO_DISABLE>:
   10068:	00000003                                ....

0001006c <g_AM_HAL_GPIO_OUTPUT>:
   1006c:	00000403                                ....

00010070 <g_ui8nCEpins>:
   10070:	02070707 00080802 01020202 01010101     ................
   10080:	01010101 01010101 01010101 01010101     ................
   10090:	01010101 08010101 01010008 01010101     ................
   100a0:	00000101                                ....

000100a4 <g_AM_HAL_GPIO_OUTPUT_12>:
   100a4:	00000703                                ....

000100a8 <g_am_hal_mcuctrl_flash_size>:
   100a8:	00004000 00008000 00010000 00020000     .@..............
   100b8:	00040000 00080000 00100000 00200000     .............. .
	...

000100e8 <g_am_hal_mcuctrl_sram_size>:
   100e8:	00004000 00008000 00010000 00020000     .@..............
   100f8:	00040000 00080000 00100000 00060000     ................
	...

00010128 <am_hal_pwrctrl_peripheral_control>:
	...
   10134:	00000001 00000004 00000004 00000002     ................
   10144:	00000008 00000008 00000004 00000008     ................
   10154:	00000008 00000008 00000008 00000008     ................
   10164:	00000010 00000010 00000010 00000020     ............ ...
   10174:	00000010 00000010 00000040 00000010     ........@.......
   10184:	00000010 00000080 00000004 00000004     ................
   10194:	00000100 00000004 00000004 00000200     ................
   101a4:	00000020 00000020 00000400 00000004      ... ...........
   101b4:	00000004 00000800 00000040 00000040     ........@...@...
   101c4:	00001000 00000080 00000080 00002000     ............. ..
   101d4:	00000100 00000100                       ........

000101dc <gAmHalCmdQReg>:
   101dc:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   101ec:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   101fc:	00000004 00000002 50005294 50005298     .........R.P.R.P
   1020c:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   1021c:	5000529c 00000001 00000004 00000002     .R.P............
   1022c:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   1023c:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   1024c:	00000004 00000002 50007294 50007298     .........r.P.r.P
   1025c:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   1026c:	5000729c 00000001 00000004 00000002     .r.P............
   1027c:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   1028c:	500082a8 00008000 5000829c 00000001     ...P.......P....
   1029c:	00000004 00000002 50009294 50009298     ...........P...P
   102ac:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   102bc:	5000929c 00000001 00000004 00000002     ...P............
   102cc:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   102dc:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   102ec:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   102fc:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   1030c:	5000c250 00000001 00000004 00000002     P..P............
