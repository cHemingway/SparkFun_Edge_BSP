
bin/tensorflow_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 dd ce 00 00 d5 ce 00 00 79 c2 00 00     ............y...
    c010:	79 c2 00 00 79 c2 00 00 79 c2 00 00 00 00 00 00     y...y...y.......
	...
    c02c:	d9 ce 00 00 d9 ce 00 00 00 00 00 00 d9 ce 00 00     ................
    c03c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c04c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c05c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c06c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c07c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c08c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c09c:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c0ac:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c0bc:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    c0cc:	d9 ce 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1a0:	b510      	push	{r4, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
{
    c1a4:	b082      	sub	sp, #8
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	4608      	mov	r0, r1
    c1a8:	f000 ffba 	bl	d120 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	4827      	ldr	r0, [pc, #156]	; (c24c <main+0xac>)
    c1ae:	f000 ff83 	bl	d0b8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b2:	f000 ffab 	bl	d10c <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1b6:	f000 fee9 	bl	cf8c <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1ba:	f000 ff4f 	bl	d05c <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1be:	4b24      	ldr	r3, [pc, #144]	; (c250 <main+0xb0>)
    c1c0:	681c      	ldr	r4, [r3, #0]
    c1c2:	202e      	movs	r0, #46	; 0x2e
    c1c4:	4621      	mov	r1, r4
    c1c6:	f001 f847 	bl	d258 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1ca:	4621      	mov	r1, r4
    c1cc:	2025      	movs	r0, #37	; 0x25
    c1ce:	f001 f843 	bl	d258 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1d2:	4621      	mov	r1, r4
    c1d4:	202c      	movs	r0, #44	; 0x2c
    c1d6:	f001 f83f 	bl	d258 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1da:	4621      	mov	r1, r4
    c1dc:	202f      	movs	r0, #47	; 0x2f
    c1de:	f001 f83b 	bl	d258 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c1e2:	4b1c      	ldr	r3, [pc, #112]	; (c254 <main+0xb4>)
    c1e4:	200e      	movs	r0, #14
    c1e6:	6819      	ldr	r1, [r3, #0]
    c1e8:	f001 f836 	bl	d258 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1ec:	4b1a      	ldr	r3, [pc, #104]	; (c258 <main+0xb8>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1f6:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1f8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c1fc:	601c      	str	r4, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1fe:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c200:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c202:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c204:	f000 fe60 	bl	cec8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c208:	4814      	ldr	r0, [pc, #80]	; (c25c <main+0xbc>)
    c20a:	f000 fe41 	bl	ce90 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c20e:	4a14      	ldr	r2, [pc, #80]	; (c260 <main+0xc0>)
    c210:	4914      	ldr	r1, [pc, #80]	; (c264 <main+0xc4>)
    c212:	4815      	ldr	r0, [pc, #84]	; (c268 <main+0xc8>)
    c214:	f000 fe3c 	bl	ce90 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Edge Debug Output (UART)\r\n");
    c218:	4814      	ldr	r0, [pc, #80]	; (c26c <main+0xcc>)
    c21a:	f000 fe39 	bl	ce90 <am_util_stdio_printf>
    uint32_t pin14Val = 0; // Default to 0 to illustrate pull-up on hardware
    c21e:	2400      	movs	r4, #0
    am_bsp_uart_string_print("Hello, World!\r\n");  // Sting_print has less overhead than printf (and less risky behavior since no varargs)
    c220:	4813      	ldr	r0, [pc, #76]	; (c270 <main+0xd0>)
    c222:	f000 fe8f 	bl	cf44 <am_bsp_uart_string_print>
    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c226:	aa01      	add	r2, sp, #4
    c228:	4621      	mov	r1, r4
    c22a:	200e      	movs	r0, #14
    uint32_t pin14Val = 0; // Default to 0 to illustrate pull-up on hardware
    c22c:	9401      	str	r4, [sp, #4]
    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c22e:	f001 f953 	bl	d4d8 <am_hal_gpio_state_read>
    am_util_stdio_printf("Value on button 14 is: %d\r\n", pin14Val);
    c232:	9901      	ldr	r1, [sp, #4]
    c234:	480f      	ldr	r0, [pc, #60]	; (c274 <main+0xd4>)
    c236:	f000 fe2b 	bl	ce90 <am_util_stdio_printf>
    am_bsp_debug_printf_disable();
    c23a:	f000 fed9 	bl	cff0 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c23e:	2001      	movs	r0, #1
    c240:	f001 fb72 	bl	d928 <am_hal_sysctrl_sleep>
}
    c244:	4620      	mov	r0, r4
    c246:	b002      	add	sp, #8
    c248:	bd10      	pop	{r4, pc}
    c24a:	bf00      	nop
    c24c:	0000e3a4 	.word	0x0000e3a4
    c250:	0000e518 	.word	0x0000e518
    c254:	0000e3a8 	.word	0x0000e3a8
    c258:	40010094 	.word	0x40010094
    c25c:	0000e2c4 	.word	0x0000e2c4
    c260:	0000e2e0 	.word	0x0000e2e0
    c264:	0000e2ec 	.word	0x0000e2ec
    c268:	0000e2f8 	.word	0x0000e2f8
    c26c:	0000e310 	.word	0x0000e310
    c270:	0000e334 	.word	0x0000e334
    c274:	0000e344 	.word	0x0000e344

0000c278 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c278:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c27a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c27e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c280:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c284:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c288:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c28c:	f000 f806 	bl	c29c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c290:	bd01      	pop	{r0, pc}
    c292:	bf00      	nop

0000c294 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c294:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c296:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c298:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c29a:	4770      	bx	lr

0000c29c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c29c:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c29e:	2300      	movs	r3, #0
{
    c2a0:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2a2:	e9cd 3300 	strd	r3, r3, [sp]
    c2a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c2aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2ae:	4a27      	ldr	r2, [pc, #156]	; (c34c <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c2b0:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2b2:	6813      	ldr	r3, [r2, #0]
    c2b4:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2b8:	b2db      	uxtb	r3, r3
    c2ba:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c2c4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c2c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2ca:	0c1b      	lsrs	r3, r3, #16
    c2cc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2d0:	6913      	ldr	r3, [r2, #16]
    c2d2:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2d4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c2d8:	0792      	lsls	r2, r2, #30
{
    c2da:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2dc:	d430      	bmi.n	c340 <am_util_faultisr_collect_data+0xa4>
    c2de:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2e2:	4619      	mov	r1, r3
    c2e4:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2e6:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2e8:	f7ff ffd4 	bl	c294 <getStackedReg>
    c2ec:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2ee:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2f0:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2f2:	f7ff ffcf 	bl	c294 <getStackedReg>
    c2f6:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2f8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2fa:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2fc:	f7ff ffca 	bl	c294 <getStackedReg>
    c300:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c302:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c304:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c306:	f7ff ffc5 	bl	c294 <getStackedReg>
    c30a:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c30c:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c30e:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c310:	f7ff ffc0 	bl	c294 <getStackedReg>
    c314:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c316:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c318:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c31a:	f7ff ffbb 	bl	c294 <getStackedReg>
    c31e:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c320:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c322:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c324:	f7ff ffb6 	bl	c294 <getStackedReg>
    c328:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c32a:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c32c:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c32e:	f7ff ffb1 	bl	c294 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c332:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c334:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c336:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c338:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c33a:	f001 f9a9 	bl	d690 <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c33e:	e7fe      	b.n	c33e <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c340:	4601      	mov	r1, r0
    c342:	2006      	movs	r0, #6
    c344:	f7ff ffa6 	bl	c294 <getStackedReg>
    c348:	4602      	mov	r2, r0
    c34a:	e7ca      	b.n	c2e2 <am_util_faultisr_collect_data+0x46>
    c34c:	e000ed28 	.word	0xe000ed28

0000c350 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c350:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c352:	460d      	mov	r5, r1
    c354:	2600      	movs	r6, #0
    c356:	ea55 0306 	orrs.w	r3, r5, r6
    c35a:	d046      	beq.n	c3ea <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c35c:	0842      	lsrs	r2, r0, #1
    c35e:	0883      	lsrs	r3, r0, #2
    c360:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c364:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c368:	18d2      	adds	r2, r2, r3
    c36a:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c36e:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c372:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c376:	0914      	lsrs	r4, r2, #4
    c378:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c37c:	1912      	adds	r2, r2, r4
    c37e:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c382:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c386:	0a14      	lsrs	r4, r2, #8
    c388:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c38c:	1912      	adds	r2, r2, r4
    c38e:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c392:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c396:	0c14      	lsrs	r4, r2, #16
    c398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c39c:	1912      	adds	r2, r2, r4
    c39e:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c3a2:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c3a6:	18d2      	adds	r2, r2, r3
    c3a8:	4634      	mov	r4, r6
    c3aa:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c3ae:	08d3      	lsrs	r3, r2, #3
    c3b0:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c3b4:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c3b6:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c3b8:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c3bc:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c3c0:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c3c2:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c3c6:	18e4      	adds	r4, r4, r3
    c3c8:	eb42 0505 	adc.w	r5, r2, r5
    c3cc:	1924      	adds	r4, r4, r4
    c3ce:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c3d0:	1b00      	subs	r0, r0, r4
    c3d2:	eb61 0105 	sbc.w	r1, r1, r5
    c3d6:	0900      	lsrs	r0, r0, #4
    c3d8:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c3dc:	18c0      	adds	r0, r0, r3
    c3de:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c3e2:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c3e6:	bc70      	pop	{r4, r5, r6}
    c3e8:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c3ea:	0883      	lsrs	r3, r0, #2
    c3ec:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c3f0:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c3f4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c3f8:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c3fc:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c3fe:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c400:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c404:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c408:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c40c:	2100      	movs	r1, #0
}
    c40e:	bc70      	pop	{r4, r5, r6}
    c410:	4770      	bx	lr
    c412:	bf00      	nop

0000c414 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c418:	b08b      	sub	sp, #44	; 0x2c
    c41a:	f10d 080c 	add.w	r8, sp, #12
    c41e:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c420:	f04f 0b00 	mov.w	fp, #0
    c424:	e049      	b.n	c4ba <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c426:	eb12 020e 	adds.w	r2, r2, lr
    c42a:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c42e:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c432:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c436:	eb12 020e 	adds.w	r2, r2, lr
    c43a:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c43e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c442:	0a13      	lsrs	r3, r2, #8
    c444:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c448:	18d2      	adds	r2, r2, r3
    c44a:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c44e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c452:	0c13      	lsrs	r3, r2, #16
    c454:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c458:	18d2      	adds	r2, r2, r3
    c45a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c45e:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c462:	1912      	adds	r2, r2, r4
    c464:	463b      	mov	r3, r7
    c466:	eb44 0303 	adc.w	r3, r4, r3
    c46a:	461c      	mov	r4, r3
        q64 >>= 3;
    c46c:	08d3      	lsrs	r3, r2, #3
    c46e:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c472:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c474:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c476:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c47a:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c47e:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c480:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c484:	18e4      	adds	r4, r4, r3
    c486:	eb42 0505 	adc.w	r5, r2, r5
    c48a:	1924      	adds	r4, r4, r4
    c48c:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c48e:	1b00      	subs	r0, r0, r4
    c490:	eb61 0105 	sbc.w	r1, r1, r5
    c494:	0900      	lsrs	r0, r0, #4
    c496:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c49a:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c49c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c4a0:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c4a4:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c4a8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c4ac:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c4b0:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c4b4:	f108 0801 	add.w	r8, r8, #1
{
    c4b8:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4ba:	0883      	lsrs	r3, r0, #2
    c4bc:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c4c0:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c4c4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c4c8:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c4cc:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c4ce:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4d2:	1d83      	adds	r3, r0, #6
    c4d4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c4d8:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c4dc:	2700      	movs	r7, #0
    c4de:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c4e0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4e4:	0842      	lsrs	r2, r0, #1
    c4e6:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c4ea:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c4ee:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c4f4:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c4f8:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c4fc:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c500:	9700      	str	r7, [sp, #0]
    c502:	f10b 0901 	add.w	r9, fp, #1
    c506:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c508:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c50c:	d18b      	bne.n	c426 <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c50e:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c512:	4618      	mov	r0, r3
    c514:	2100      	movs	r1, #0
    } while ( ui64Val );
    c516:	2b00      	cmp	r3, #0
    c518:	d1cc      	bne.n	c4b4 <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c51a:	9a01      	ldr	r2, [sp, #4]
    c51c:	b172      	cbz	r2, c53c <uint64_to_str+0x128>
    c51e:	ab03      	add	r3, sp, #12
    c520:	444b      	add	r3, r9
    c522:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c524:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c528:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c52c:	a903      	add	r1, sp, #12
    c52e:	4299      	cmp	r1, r3
    c530:	d1f8      	bne.n	c524 <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c532:	9b01      	ldr	r3, [sp, #4]
    c534:	445b      	add	r3, fp
    c536:	461a      	mov	r2, r3
    c538:	2300      	movs	r3, #0
    c53a:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c53c:	4648      	mov	r0, r9
    c53e:	b00b      	add	sp, #44	; 0x2c
    c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c544 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c544:	4b01      	ldr	r3, [pc, #4]	; (c54c <am_util_stdio_printf_init+0x8>)
    c546:	6018      	str	r0, [r3, #0]
}
    c548:	4770      	bx	lr
    c54a:	bf00      	nop
    c54c:	10001134 	.word	0x10001134

0000c550 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c554:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c556:	780b      	ldrb	r3, [r1, #0]
{
    c558:	9200      	str	r2, [sp, #0]
    c55a:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c55c:	2b00      	cmp	r3, #0
    c55e:	f000 8355 	beq.w	cc0c <am_util_stdio_vsprintf+0x6bc>
    c562:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c564:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c568:	2b25      	cmp	r3, #37	; 0x25
    c56a:	f10a 0701 	add.w	r7, sl, #1
    c56e:	d018      	beq.n	c5a2 <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c570:	f10b 0201 	add.w	r2, fp, #1
    c574:	2c00      	cmp	r4, #0
    c576:	f000 8092 	beq.w	c69e <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c57a:	2b0a      	cmp	r3, #10
    c57c:	f104 0101 	add.w	r1, r4, #1
    c580:	f000 808f 	beq.w	c6a2 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c584:	7023      	strb	r3, [r4, #0]
    c586:	4693      	mov	fp, r2
    c588:	460c      	mov	r4, r1
            }

            ++pcFmt;
    c58a:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    c58c:	f89a 3000 	ldrb.w	r3, [sl]
    c590:	2b00      	cmp	r3, #0
    c592:	d1e9      	bne.n	c568 <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c594:	b10c      	cbz	r4, c59a <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    c596:	2300      	movs	r3, #0
    c598:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    c59a:	4658      	mov	r0, fp
    c59c:	b009      	add	sp, #36	; 0x24
    c59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c5a2:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c5a6:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    c5a8:	bf03      	ittte	eq
    c5aa:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    c5ae:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    c5b2:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    c5b4:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    c5b6:	2a2d      	cmp	r2, #45	; 0x2d
    c5b8:	f000 8083 	beq.w	c6c2 <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c5c0:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5c2:	2909      	cmp	r1, #9
    bool bNeg = false;
    c5c4:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    c5c6:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5c8:	f200 8085 	bhi.w	c6d6 <am_util_stdio_vsprintf+0x186>
    c5cc:	3501      	adds	r5, #1
    c5ce:	1aed      	subs	r5, r5, r3
    c5d0:	2100      	movs	r1, #0
        ui32Val *= 10;
    c5d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c5d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c5da:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c5e2:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c5e6:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c5e8:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5ec:	d9f1      	bls.n	c5d2 <am_util_stdio_vsprintf+0x82>
    c5ee:	f817 200e 	ldrb.w	r2, [r7, lr]
    c5f2:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    c5f6:	f1bc 0f00 	cmp.w	ip, #0
    c5fa:	d000      	beq.n	c5fe <am_util_stdio_vsprintf+0xae>
    c5fc:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c5fe:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c600:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c602:	f103 0a01 	add.w	sl, r3, #1
    c606:	f000 81ca 	beq.w	c99e <am_util_stdio_vsprintf+0x44e>
    c60a:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    c60e:	2a2e      	cmp	r2, #46	; 0x2e
    c610:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    c614:	f000 815c 	beq.w	c8d0 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    c618:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    c61a:	2a6c      	cmp	r2, #108	; 0x6c
    c61c:	d105      	bne.n	c62a <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c61e:	785a      	ldrb	r2, [r3, #1]
    c620:	2a6c      	cmp	r2, #108	; 0x6c
    c622:	f000 820a 	beq.w	ca3a <am_util_stdio_vsprintf+0x4ea>
    c626:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    c62a:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    c62e:	2b32      	cmp	r3, #50	; 0x32
    c630:	f200 8141 	bhi.w	c8b6 <am_util_stdio_vsprintf+0x366>
    c634:	e8df f013 	tbh	[pc, r3, lsl #1]
    c638:	013f005b 	.word	0x013f005b
    c63c:	013f013f 	.word	0x013f013f
    c640:	013f013f 	.word	0x013f013f
    c644:	013f013f 	.word	0x013f013f
    c648:	013f013f 	.word	0x013f013f
    c64c:	013f013f 	.word	0x013f013f
    c650:	013f013f 	.word	0x013f013f
    c654:	013f013f 	.word	0x013f013f
    c658:	013f013f 	.word	0x013f013f
    c65c:	013f00d6 	.word	0x013f00d6
    c660:	013f013f 	.word	0x013f013f
    c664:	013f013f 	.word	0x013f013f
    c668:	013f013f 	.word	0x013f013f
    c66c:	013f013f 	.word	0x013f013f
    c670:	0051013f 	.word	0x0051013f
    c674:	013f00ed 	.word	0x013f00ed
    c678:	013f005b 	.word	0x013f005b
    c67c:	00ed013f 	.word	0x00ed013f
    c680:	013f013f 	.word	0x013f013f
    c684:	013f013f 	.word	0x013f013f
    c688:	013f013f 	.word	0x013f013f
    c68c:	013f013f 	.word	0x013f013f
    c690:	01b3013f 	.word	0x01b3013f
    c694:	00d9013f 	.word	0x00d9013f
    c698:	013f013f 	.word	0x013f013f
    c69c:	00bc      	.short	0x00bc
    c69e:	4693      	mov	fp, r2
    c6a0:	e773      	b.n	c58a <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c6a2:	48ce      	ldr	r0, [pc, #824]	; (c9dc <am_util_stdio_vsprintf+0x48c>)
    c6a4:	7800      	ldrb	r0, [r0, #0]
    c6a6:	2800      	cmp	r0, #0
    c6a8:	f43f af6c 	beq.w	c584 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c6ac:	4620      	mov	r0, r4
    c6ae:	230d      	movs	r3, #13
    c6b0:	f800 3b02 	strb.w	r3, [r0], #2
    c6b4:	460c      	mov	r4, r1
    c6b6:	f89a 3000 	ldrb.w	r3, [sl]
    c6ba:	f10b 0202 	add.w	r2, fp, #2
    c6be:	4601      	mov	r1, r0
    c6c0:	e760      	b.n	c584 <am_util_stdio_vsprintf+0x34>
        pcStr++;
    c6c2:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    c6c8:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6ca:	2909      	cmp	r1, #9
        bNeg = true;
    c6cc:	46ac      	mov	ip, r5
        pcStr++;
    c6ce:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6d2:	f67f af7b 	bls.w	c5cc <am_util_stdio_vsprintf+0x7c>
    c6d6:	2100      	movs	r1, #0
    c6d8:	e78d      	b.n	c5f6 <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6da:	9a00      	ldr	r2, [sp, #0]
    c6dc:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c6de:	b114      	cbz	r4, c6e6 <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6e0:	6812      	ldr	r2, [r2, #0]
    c6e2:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c6e6:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c6ea:	9300      	str	r3, [sp, #0]
                break;
    c6ec:	e74e      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    c6ee:	2c00      	cmp	r4, #0
    c6f0:	f43f af4c 	beq.w	c58c <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    c6f4:	9b00      	ldr	r3, [sp, #0]
    c6f6:	3307      	adds	r3, #7
    c6f8:	f023 0307 	bic.w	r3, r3, #7
    c6fc:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    c700:	9300      	str	r3, [sp, #0]
    c702:	f7ff fcfd 	bl	c100 <__aeabi_d2f>
    c706:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c70a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c70e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c714:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    c716:	f000 8372 	beq.w	cdfe <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c71a:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c71e:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c722:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c724:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c726:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c72a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c72e:	f300 8387 	bgt.w	ce40 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    c732:	f112 0f17 	cmn.w	r2, #23
    c736:	f2c0 8381 	blt.w	ce3c <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    c73a:	2a16      	cmp	r2, #22
    c73c:	f104 0601 	add.w	r6, r4, #1
    c740:	f340 82a1 	ble.w	cc86 <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    c744:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c746:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c748:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c74c:	f2c0 82e6 	blt.w	cd1c <am_util_stdio_vsprintf+0x7cc>
    c750:	46a0      	mov	r8, r4
    i32FracPart = 0;
    c752:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    c754:	2800      	cmp	r0, #0
    c756:	f000 8350 	beq.w	cdfa <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    c75a:	f300 82a3 	bgt.w	cca4 <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    c75e:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    c760:	232d      	movs	r3, #45	; 0x2d
    c762:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    c766:	4632      	mov	r2, r6
    c768:	17c1      	asrs	r1, r0, #31
    c76a:	f7ff fe53 	bl	c414 <uint64_to_str>
            *pcBuf++ = '-';
    c76e:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    c770:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    c772:	f898 3000 	ldrb.w	r3, [r8]
    c776:	b90b      	cbnz	r3, c77c <am_util_stdio_vsprintf+0x22c>
    c778:	e380      	b.n	ce7c <am_util_stdio_vsprintf+0x92c>
    c77a:	46b0      	mov	r8, r6
    c77c:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    c780:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    c784:	2b00      	cmp	r3, #0
    c786:	d1f8      	bne.n	c77a <am_util_stdio_vsprintf+0x22a>
    c788:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    c78c:	232e      	movs	r3, #46	; 0x2e
    c78e:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    c790:	2d00      	cmp	r5, #0
    c792:	f040 82e5 	bne.w	cd60 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    c796:	1cb1      	adds	r1, r6, #2
    c798:	2330      	movs	r3, #48	; 0x30
    c79a:	1b08      	subs	r0, r1, r4
    c79c:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    c79e:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c7a0:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    c7a2:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    c7a4:	f2c0 8310 	blt.w	cdc8 <am_util_stdio_vsprintf+0x878>
    c7a8:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    c7aa:	449b      	add	fp, r3
                    pcBuf += iVal;
    c7ac:	441c      	add	r4, r3
    c7ae:	e6ed      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    c7b0:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    c7b4:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7b6:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c7ba:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7bc:	2300      	movs	r3, #0
                if ( iWidth )
    c7be:	2900      	cmp	r1, #0
    c7c0:	f040 81d5 	bne.w	cb6e <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    c7c4:	ea52 0103 	orrs.w	r1, r2, r3
    c7c8:	f040 80ac 	bne.w	c924 <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    c7cc:	2c00      	cmp	r4, #0
    c7ce:	d07b      	beq.n	c8c8 <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    c7d0:	4623      	mov	r3, r4
    c7d2:	2230      	movs	r2, #48	; 0x30
    c7d4:	f803 2b01 	strb.w	r2, [r3], #1
    c7d8:	2001      	movs	r0, #1
    c7da:	461c      	mov	r4, r3
        *pcBuf = 0;
    c7dc:	2200      	movs	r2, #0
    c7de:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    c7e0:	4483      	add	fp, r0
                break;
    c7e2:	e6d3      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    c7e4:	f04f 0900 	mov.w	r9, #0
    c7e8:	e7e4      	b.n	c7b4 <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    c7ea:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7ec:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c7f0:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7f2:	4690      	mov	r8, r2
    c7f4:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    c7f8:	2900      	cmp	r1, #0
    c7fa:	f040 8213 	bne.w	cc24 <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c7fe:	4640      	mov	r0, r8
    c800:	4649      	mov	r1, r9
    c802:	4622      	mov	r2, r4
    c804:	f7ff fe06 	bl	c414 <uint64_to_str>
                if ( pcBuf )
    c808:	2c00      	cmp	r4, #0
    c80a:	d05e      	beq.n	c8ca <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    c80c:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    c80e:	4483      	add	fp, r0
                break;
    c810:	e6bc      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    c812:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c814:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    c818:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c81a:	4690      	mov	r8, r2
    c81c:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    c820:	f1b8 0f00 	cmp.w	r8, #0
    c824:	f179 0300 	sbcs.w	r3, r9, #0
    c828:	f2c0 8178 	blt.w	cb1c <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    c82c:	2900      	cmp	r1, #0
    c82e:	d039      	beq.n	c8a4 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    c830:	ea58 0309 	orrs.w	r3, r8, r9
    c834:	bf0c      	ite	eq
    c836:	2701      	moveq	r7, #1
    c838:	2700      	movne	r7, #0
    while ( ui64Val )
    c83a:	ea58 0309 	orrs.w	r3, r8, r9
    c83e:	f000 8317 	beq.w	ce70 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    c842:	2300      	movs	r3, #0
    c844:	9301      	str	r3, [sp, #4]
    c846:	4640      	mov	r0, r8
    c848:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    c84a:	f7ff fd81 	bl	c350 <divu64_10>
    while ( ui64Val )
    c84e:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    c852:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    c856:	d1f8      	bne.n	c84a <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    c858:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    c85a:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    c85c:	b123      	cbz	r3, c868 <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    c85e:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    c860:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    c864:	f000 8253 	beq.w	cd0e <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    c868:	2d00      	cmp	r5, #0
    c86a:	f340 82c4 	ble.w	cdf6 <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    c86e:	1e6b      	subs	r3, r5, #1
    c870:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    c872:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    c874:	463d      	mov	r5, r7
    c876:	1e58      	subs	r0, r3, #1
    c878:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    c87a:	2f00      	cmp	r7, #0
    c87c:	f000 8168 	beq.w	cb50 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    c880:	f805 6b01 	strb.w	r6, [r5], #1
    c884:	4684      	mov	ip, r0
    c886:	462f      	mov	r7, r5
    c888:	4618      	mov	r0, r3
    c88a:	460a      	mov	r2, r1
    c88c:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    c88e:	2800      	cmp	r0, #0
    c890:	d1f0      	bne.n	c874 <am_util_stdio_vsprintf+0x324>
    c892:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    c894:	2c00      	cmp	r4, #0
    c896:	f000 829f 	beq.w	cdd8 <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c89a:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    c89c:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c89e:	2b00      	cmp	r3, #0
    c8a0:	f040 81b6 	bne.w	cc10 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c8a4:	4640      	mov	r0, r8
    c8a6:	4649      	mov	r1, r9
    c8a8:	4622      	mov	r2, r4
    c8aa:	f7ff fdb3 	bl	c414 <uint64_to_str>
                if ( pcBuf )
    c8ae:	2c00      	cmp	r4, #0
    c8b0:	d096      	beq.n	c7e0 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    c8b2:	4404      	add	r4, r0
    c8b4:	e7ab      	b.n	c80e <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    c8b6:	b10c      	cbz	r4, c8bc <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    c8b8:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c8bc:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c8c0:	e664      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    c8c2:	ea52 0103 	orrs.w	r1, r2, r3
    c8c6:	d12d      	bne.n	c924 <am_util_stdio_vsprintf+0x3d4>
    c8c8:	2001      	movs	r0, #1
                if ( pcBuf )
    c8ca:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    c8cc:	4483      	add	fp, r0
                break;
    c8ce:	e65d      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    c8d0:	785a      	ldrb	r2, [r3, #1]
    c8d2:	2a2d      	cmp	r2, #45	; 0x2d
    c8d4:	f000 818e 	beq.w	cbf4 <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c8dc:	2b09      	cmp	r3, #9
    c8de:	f200 8298 	bhi.w	ce12 <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    c8e2:	2000      	movs	r0, #0
    bool bNeg = false;
    c8e4:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8e6:	46d6      	mov	lr, sl
    c8e8:	4653      	mov	r3, sl
    c8ea:	3001      	adds	r0, #1
    c8ec:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    c8f0:	2700      	movs	r7, #0
        ui32Val *= 10;
    c8f2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    c8f6:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    c8fa:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c902:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c906:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c908:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c90c:	d9f1      	bls.n	c8f2 <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    c90e:	f1b8 0f00 	cmp.w	r8, #0
    c912:	d000      	beq.n	c916 <am_util_stdio_vsprintf+0x3c6>
    c914:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    c916:	eb0a 030c 	add.w	r3, sl, ip
    c91a:	f81a 200c 	ldrb.w	r2, [sl, ip]
    c91e:	f103 0a01 	add.w	sl, r3, #1
    c922:	e67a      	b.n	c61a <am_util_stdio_vsprintf+0xca>
    c924:	f1b9 0f00 	cmp.w	r9, #0
    c928:	bf14      	ite	ne
    c92a:	2627      	movne	r6, #39	; 0x27
    c92c:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    c92e:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    c932:	2700      	movs	r7, #0
    c934:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    c936:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    c938:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    c93c:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    c93e:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    c940:	ea4f 1913 	mov.w	r9, r3, lsr #4
    c944:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    c948:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c94c:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    c950:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    c954:	d908      	bls.n	c968 <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    c956:	462a      	mov	r2, r5
    c958:	464b      	mov	r3, r9
    while ( ui64Val )
    c95a:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    c95e:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    c962:	d00a      	beq.n	c97a <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    c964:	4627      	mov	r7, r4
    c966:	e7e6      	b.n	c936 <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    c968:	462a      	mov	r2, r5
    c96a:	464b      	mov	r3, r9
    while ( ui64Val )
    c96c:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    c970:	f107 0401 	add.w	r4, r7, #1
    c974:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    c978:	d1f4      	bne.n	c964 <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    c97a:	4626      	mov	r6, r4
    c97c:	9c01      	ldr	r4, [sp, #4]
    c97e:	4630      	mov	r0, r6
    c980:	2c00      	cmp	r4, #0
    c982:	d0a2      	beq.n	c8ca <am_util_stdio_vsprintf+0x37a>
    c984:	ab03      	add	r3, sp, #12
    c986:	4433      	add	r3, r6
    c988:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    c98a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c98e:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    c992:	a903      	add	r1, sp, #12
    c994:	428b      	cmp	r3, r1
    c996:	d1f8      	bne.n	c98a <am_util_stdio_vsprintf+0x43a>
    c998:	4434      	add	r4, r6
    c99a:	4623      	mov	r3, r4
    c99c:	e71e      	b.n	c7dc <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    c99e:	f8dd c000 	ldr.w	ip, [sp]
    c9a2:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	f000 8181 	beq.w	ccae <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    c9ac:	4618      	mov	r0, r3
    c9ae:	f810 1b01 	ldrb.w	r1, [r0], #1
    c9b2:	2900      	cmp	r1, #0
    c9b4:	f000 8231 	beq.w	ce1a <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    c9b8:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    c9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    c9be:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    c9c0:	2a00      	cmp	r2, #0
    c9c2:	d1fa      	bne.n	c9ba <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    c9c4:	2d00      	cmp	r5, #0
    c9c6:	dd02      	ble.n	c9ce <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    c9c8:	42bd      	cmp	r5, r7
    c9ca:	f200 819c 	bhi.w	cd06 <am_util_stdio_vsprintf+0x7b6>
    c9ce:	f1c3 0801 	rsb	r8, r3, #1
    c9d2:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    c9d6:	4622      	mov	r2, r4
    c9d8:	e003      	b.n	c9e2 <am_util_stdio_vsprintf+0x492>
    c9da:	bf00      	nop
    c9dc:	10001020 	.word	0x10001020
                        *pcBuf++ = *pcStr;
    c9e0:	4622      	mov	r2, r4
    c9e2:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    c9e6:	2c00      	cmp	r4, #0
    c9e8:	f000 80b8 	beq.w	cb5c <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    c9ec:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    c9ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    c9f2:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    c9f4:	2900      	cmp	r1, #0
    c9f6:	d1f3      	bne.n	c9e0 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    c9f8:	46f3      	mov	fp, lr
                if ( iWidth )
    c9fa:	b1dd      	cbz	r5, ca34 <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    c9fc:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    c9fe:	42bd      	cmp	r5, r7
    ca00:	d918      	bls.n	ca34 <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    ca02:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    ca04:	2d00      	cmp	r5, #0
    ca06:	f340 8217 	ble.w	ce38 <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    ca0a:	1e6b      	subs	r3, r5, #1
    ca0c:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    ca0e:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    ca10:	463d      	mov	r5, r7
    ca12:	1c51      	adds	r1, r2, #1
    ca14:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    ca16:	2f00      	cmp	r7, #0
    ca18:	f000 80e3 	beq.w	cbe2 <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    ca1c:	f805 6b01 	strb.w	r6, [r5], #1
    ca20:	4686      	mov	lr, r0
    ca22:	4618      	mov	r0, r3
    ca24:	462f      	mov	r7, r5
    ca26:	460a      	mov	r2, r1
    ca28:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    ca2a:	2800      	cmp	r0, #0
    ca2c:	d1f0      	bne.n	ca10 <am_util_stdio_vsprintf+0x4c0>
    ca2e:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    ca30:	b104      	cbz	r4, ca34 <am_util_stdio_vsprintf+0x4e4>
    ca32:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    ca34:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    ca38:	e5a8      	b.n	c58c <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    ca3a:	789a      	ldrb	r2, [r3, #2]
    ca3c:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    ca40:	f103 0a03 	add.w	sl, r3, #3
    ca44:	2832      	cmp	r0, #50	; 0x32
    ca46:	f63f af36 	bhi.w	c8b6 <am_util_stdio_vsprintf+0x366>
    ca4a:	a301      	add	r3, pc, #4	; (adr r3, ca50 <am_util_stdio_vsprintf+0x500>)
    ca4c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    ca50:	0000c6ef 	.word	0x0000c6ef
    ca54:	0000c8b7 	.word	0x0000c8b7
    ca58:	0000c8b7 	.word	0x0000c8b7
    ca5c:	0000c8b7 	.word	0x0000c8b7
    ca60:	0000c8b7 	.word	0x0000c8b7
    ca64:	0000c8b7 	.word	0x0000c8b7
    ca68:	0000c8b7 	.word	0x0000c8b7
    ca6c:	0000c8b7 	.word	0x0000c8b7
    ca70:	0000c8b7 	.word	0x0000c8b7
    ca74:	0000c8b7 	.word	0x0000c8b7
    ca78:	0000c8b7 	.word	0x0000c8b7
    ca7c:	0000c8b7 	.word	0x0000c8b7
    ca80:	0000c8b7 	.word	0x0000c8b7
    ca84:	0000c8b7 	.word	0x0000c8b7
    ca88:	0000c8b7 	.word	0x0000c8b7
    ca8c:	0000c8b7 	.word	0x0000c8b7
    ca90:	0000c8b7 	.word	0x0000c8b7
    ca94:	0000c8b7 	.word	0x0000c8b7
    ca98:	0000cd01 	.word	0x0000cd01
    ca9c:	0000c8b7 	.word	0x0000c8b7
    caa0:	0000c8b7 	.word	0x0000c8b7
    caa4:	0000c8b7 	.word	0x0000c8b7
    caa8:	0000c8b7 	.word	0x0000c8b7
    caac:	0000c8b7 	.word	0x0000c8b7
    cab0:	0000c8b7 	.word	0x0000c8b7
    cab4:	0000c8b7 	.word	0x0000c8b7
    cab8:	0000c8b7 	.word	0x0000c8b7
    cabc:	0000c8b7 	.word	0x0000c8b7
    cac0:	0000c8b7 	.word	0x0000c8b7
    cac4:	0000c6db 	.word	0x0000c6db
    cac8:	0000cb41 	.word	0x0000cb41
    cacc:	0000c8b7 	.word	0x0000c8b7
    cad0:	0000c6ef 	.word	0x0000c6ef
    cad4:	0000c8b7 	.word	0x0000c8b7
    cad8:	0000c8b7 	.word	0x0000c8b7
    cadc:	0000cb41 	.word	0x0000cb41
    cae0:	0000c8b7 	.word	0x0000c8b7
    cae4:	0000c8b7 	.word	0x0000c8b7
    cae8:	0000c8b7 	.word	0x0000c8b7
    caec:	0000c8b7 	.word	0x0000c8b7
    caf0:	0000c8b7 	.word	0x0000c8b7
    caf4:	0000c8b7 	.word	0x0000c8b7
    caf8:	0000c8b7 	.word	0x0000c8b7
    cafc:	0000c8b7 	.word	0x0000c8b7
    cb00:	0000c8b7 	.word	0x0000c8b7
    cb04:	0000c99f 	.word	0x0000c99f
    cb08:	0000c8b7 	.word	0x0000c8b7
    cb0c:	0000cb31 	.word	0x0000cb31
    cb10:	0000c8b7 	.word	0x0000c8b7
    cb14:	0000c8b7 	.word	0x0000c8b7
    cb18:	0000cceb 	.word	0x0000cceb
                    ui64Val = -i64Val;          // Get absolute value
    cb1c:	f1d8 0800 	rsbs	r8, r8, #0
    cb20:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cb24:	2900      	cmp	r1, #0
    cb26:	d076      	beq.n	cc16 <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cb28:	2301      	movs	r3, #1
    cb2a:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cb2c:	2700      	movs	r7, #0
    cb2e:	e68a      	b.n	c846 <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cb30:	9b00      	ldr	r3, [sp, #0]
    cb32:	3307      	adds	r3, #7
    cb34:	f023 0307 	bic.w	r3, r3, #7
    cb38:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cb3c:	9300      	str	r3, [sp, #0]
    cb3e:	e65b      	b.n	c7f8 <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cb40:	9b00      	ldr	r3, [sp, #0]
    cb42:	3307      	adds	r3, #7
    cb44:	f023 0307 	bic.w	r3, r3, #7
    cb48:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cb4c:	9300      	str	r3, [sp, #0]
    cb4e:	e667      	b.n	c820 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cb50:	2b00      	cmp	r3, #0
    cb52:	f000 815b 	beq.w	ce0c <am_util_stdio_vsprintf+0x8bc>
    cb56:	3b02      	subs	r3, #2
    cb58:	3202      	adds	r2, #2
    cb5a:	e698      	b.n	c88e <am_util_stdio_vsprintf+0x33e>
    cb5c:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cb60:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cb62:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cb66:	2900      	cmp	r1, #0
    cb68:	d1fa      	bne.n	cb60 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cb6a:	4683      	mov	fp, r0
    cb6c:	e745      	b.n	c9fa <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cb6e:	ea52 0103 	orrs.w	r1, r2, r3
    cb72:	bf0c      	ite	eq
    cb74:	f04f 0c01 	moveq.w	ip, #1
    cb78:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    cb7c:	ea52 0103 	orrs.w	r1, r2, r3
    cb80:	d00d      	beq.n	cb9e <am_util_stdio_vsprintf+0x64e>
    cb82:	4610      	mov	r0, r2
    cb84:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cb86:	0907      	lsrs	r7, r0, #4
    cb88:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    cb8c:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cb90:	4638      	mov	r0, r7
    cb92:	4671      	mov	r1, lr
    while ( ui64Val )
    cb94:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    cb98:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    cb9c:	d1f3      	bne.n	cb86 <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    cb9e:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    cba2:	2900      	cmp	r1, #0
    cba4:	f340 8125 	ble.w	cdf2 <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    cba8:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    cbaa:	2000      	movs	r0, #0
    cbac:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    cbae:	46ac      	mov	ip, r5
    cbb0:	1e4f      	subs	r7, r1, #1
    cbb2:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    cbb6:	b175      	cbz	r5, cbd6 <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    cbb8:	f80c 6b01 	strb.w	r6, [ip], #1
    cbbc:	46b8      	mov	r8, r7
    cbbe:	4665      	mov	r5, ip
    cbc0:	460f      	mov	r7, r1
    cbc2:	4670      	mov	r0, lr
    cbc4:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    cbc6:	2f00      	cmp	r7, #0
    cbc8:	d1f1      	bne.n	cbae <am_util_stdio_vsprintf+0x65e>
    cbca:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cbcc:	2c00      	cmp	r4, #0
    cbce:	f43f ae78 	beq.w	c8c2 <am_util_stdio_vsprintf+0x372>
    cbd2:	4404      	add	r4, r0
                    iWidth = 0;
    cbd4:	e5f6      	b.n	c7c4 <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    cbd6:	2900      	cmp	r1, #0
    cbd8:	f000 8115 	beq.w	ce06 <am_util_stdio_vsprintf+0x8b6>
    cbdc:	3902      	subs	r1, #2
    cbde:	3002      	adds	r0, #2
    cbe0:	e7f1      	b.n	cbc6 <am_util_stdio_vsprintf+0x676>
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	f000 8136 	beq.w	ce54 <am_util_stdio_vsprintf+0x904>
    cbe8:	3b02      	subs	r3, #2
    cbea:	3202      	adds	r2, #2
    cbec:	2800      	cmp	r0, #0
    cbee:	f47f af0f 	bne.w	ca10 <am_util_stdio_vsprintf+0x4c0>
    cbf2:	e71c      	b.n	ca2e <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    cbf4:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cbf6:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cbfa:	2809      	cmp	r0, #9
        pcStr++;
    cbfc:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc00:	f200 8124 	bhi.w	ce4c <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    cc04:	2001      	movs	r0, #1
        bNeg = true;
    cc06:	4680      	mov	r8, r0
        pcStr++;
    cc08:	469e      	mov	lr, r3
    cc0a:	e66e      	b.n	c8ea <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc0c:	469b      	mov	fp, r3
    cc0e:	e4c1      	b.n	c594 <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cc10:	2e20      	cmp	r6, #32
    cc12:	f47f ae47 	bne.w	c8a4 <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    cc16:	b114      	cbz	r4, cc1e <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    cc18:	232d      	movs	r3, #45	; 0x2d
    cc1a:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    cc1e:	f10b 0b01 	add.w	fp, fp, #1
    cc22:	e63f      	b.n	c8a4 <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    cc24:	ea58 0309 	orrs.w	r3, r8, r9
    cc28:	bf0c      	ite	eq
    cc2a:	2701      	moveq	r7, #1
    cc2c:	2700      	movne	r7, #0
    while ( ui64Val )
    cc2e:	ea58 0309 	orrs.w	r3, r8, r9
    cc32:	d008      	beq.n	cc46 <am_util_stdio_vsprintf+0x6f6>
    cc34:	4640      	mov	r0, r8
    cc36:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    cc38:	f7ff fb8a 	bl	c350 <divu64_10>
    while ( ui64Val )
    cc3c:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cc40:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    cc44:	d1f8      	bne.n	cc38 <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    cc46:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    cc48:	2b00      	cmp	r3, #0
    cc4a:	f340 80f3 	ble.w	ce34 <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    cc4e:	3b01      	subs	r3, #1
    cc50:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    cc52:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cc54:	4628      	mov	r0, r5
    cc56:	1c51      	adds	r1, r2, #1
    cc58:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    cc5a:	b16d      	cbz	r5, cc78 <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    cc5c:	f800 6b01 	strb.w	r6, [r0], #1
    cc60:	460a      	mov	r2, r1
    cc62:	4605      	mov	r5, r0
    cc64:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cc66:	463b      	mov	r3, r7
    cc68:	2900      	cmp	r1, #0
    cc6a:	d1f3      	bne.n	cc54 <am_util_stdio_vsprintf+0x704>
    cc6c:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    cc6e:	2c00      	cmp	r4, #0
    cc70:	f000 80da 	beq.w	ce28 <am_util_stdio_vsprintf+0x8d8>
    cc74:	4414      	add	r4, r2
                    iWidth = 0;
    cc76:	e5c2      	b.n	c7fe <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    cc78:	2b00      	cmp	r3, #0
    cc7a:	f000 80ee 	beq.w	ce5a <am_util_stdio_vsprintf+0x90a>
    cc7e:	4639      	mov	r1, r7
    cc80:	3202      	adds	r2, #2
    cc82:	1e9f      	subs	r7, r3, #2
    cc84:	e7ef      	b.n	cc66 <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    cc86:	2a00      	cmp	r2, #0
    cc88:	db50      	blt.n	cd2c <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc8a:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    cc8e:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    cc92:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    cc96:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc98:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    cc9c:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    cca0:	db3d      	blt.n	cd1e <am_util_stdio_vsprintf+0x7ce>
    cca2:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    cca4:	4642      	mov	r2, r8
    cca6:	17c1      	asrs	r1, r0, #31
    cca8:	f7ff fbb4 	bl	c414 <uint64_to_str>
    ccac:	e561      	b.n	c772 <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    ccae:	2d00      	cmp	r5, #0
    ccb0:	dd49      	ble.n	cd46 <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    ccb2:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    ccb4:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    ccb6:	2200      	movs	r2, #0
    ccb8:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    ccba:	4608      	mov	r0, r1
    ccbc:	f105 3eff 	add.w	lr, r5, #4294967295
    ccc0:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    ccc4:	2900      	cmp	r1, #0
    ccc6:	d044      	beq.n	cd52 <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    ccc8:	f800 6b01 	strb.w	r6, [r0], #1
    cccc:	4642      	mov	r2, r8
    ccce:	4601      	mov	r1, r0
    ccd0:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    ccd2:	4675      	mov	r5, lr
    ccd4:	2800      	cmp	r0, #0
    ccd6:	d1f0      	bne.n	ccba <am_util_stdio_vsprintf+0x76a>
    ccd8:	7819      	ldrb	r1, [r3, #0]
    ccda:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    ccdc:	b104      	cbz	r4, cce0 <am_util_stdio_vsprintf+0x790>
    ccde:	4414      	add	r4, r2
                        iWidth = 0;
    cce0:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    cce2:	2900      	cmp	r1, #0
    cce4:	f47f ae73 	bne.w	c9ce <am_util_stdio_vsprintf+0x47e>
    cce8:	e6a4      	b.n	ca34 <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    ccea:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ccee:	9b00      	ldr	r3, [sp, #0]
    ccf0:	3307      	adds	r3, #7
    ccf2:	f023 0307 	bic.w	r3, r3, #7
    ccf6:	4618      	mov	r0, r3
    ccf8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ccfc:	9000      	str	r0, [sp, #0]
    ccfe:	e55e      	b.n	c7be <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    cd00:	f04f 0900 	mov.w	r9, #0
    cd04:	e7f3      	b.n	ccee <am_util_stdio_vsprintf+0x79e>
    cd06:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cd08:	2d00      	cmp	r5, #0
    cd0a:	dde7      	ble.n	ccdc <am_util_stdio_vsprintf+0x78c>
    cd0c:	e7d2      	b.n	ccb4 <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    cd0e:	b114      	cbz	r4, cd16 <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    cd10:	232d      	movs	r3, #45	; 0x2d
    cd12:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    cd16:	f10b 0b01 	add.w	fp, fp, #1
    cd1a:	e5a5      	b.n	c868 <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    cd1c:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    cd1e:	4623      	mov	r3, r4
    cd20:	222d      	movs	r2, #45	; 0x2d
    cd22:	f803 2b02 	strb.w	r2, [r3], #2
    cd26:	46b0      	mov	r8, r6
    cd28:	461e      	mov	r6, r3
    cd2a:	e513      	b.n	c754 <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cd2c:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    cd2e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cd30:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    cd34:	f104 0202 	add.w	r2, r4, #2
    cd38:	f2c0 8092 	blt.w	ce60 <am_util_stdio_vsprintf+0x910>
    cd3c:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    cd3e:	2330      	movs	r3, #48	; 0x30
    cd40:	f888 3000 	strb.w	r3, [r8]
    cd44:	e522      	b.n	c78c <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    cd46:	7819      	ldrb	r1, [r3, #0]
    cd48:	b909      	cbnz	r1, cd4e <am_util_stdio_vsprintf+0x7fe>
    cd4a:	460f      	mov	r7, r1
    cd4c:	e655      	b.n	c9fa <am_util_stdio_vsprintf+0x4aa>
    cd4e:	461f      	mov	r7, r3
    cd50:	e63d      	b.n	c9ce <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    cd52:	2d00      	cmp	r5, #0
    cd54:	d076      	beq.n	ce44 <am_util_stdio_vsprintf+0x8f4>
    cd56:	4670      	mov	r0, lr
    cd58:	3202      	adds	r2, #2
    cd5a:	f1a5 0e02 	sub.w	lr, r5, #2
    cd5e:	e7b8      	b.n	ccd2 <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd60:	1b10      	subs	r0, r2, r4
    cd62:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd66:	429f      	cmp	r7, r3
    cd68:	bfa8      	it	ge
    cd6a:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    cd6c:	2f00      	cmp	r7, #0
    cd6e:	f340 8083 	ble.w	ce78 <am_util_stdio_vsprintf+0x928>
    cd72:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    cd74:	4610      	mov	r0, r2
            i32FracPart *= 10;
    cd76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cd7a:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd7c:	162b      	asrs	r3, r5, #24
    cd7e:	3330      	adds	r3, #48	; 0x30
    cd80:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    cd84:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    cd86:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cd8a:	d1f4      	bne.n	cd76 <am_util_stdio_vsprintf+0x826>
    cd8c:	3f01      	subs	r7, #1
    cd8e:	19d6      	adds	r6, r2, r7
    cd90:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cd96:	f345 52c7 	sbfx	r2, r5, #23, #8
    cd9a:	2a04      	cmp	r2, #4
    cd9c:	f77f acff 	ble.w	c79e <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    cda0:	42a6      	cmp	r6, r4
    cda2:	f4ff acfc 	bcc.w	c79e <am_util_stdio_vsprintf+0x24e>
    cda6:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    cda8:	2630      	movs	r6, #48	; 0x30
    cdaa:	e003      	b.n	cdb4 <am_util_stdio_vsprintf+0x864>
    cdac:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    cdae:	429c      	cmp	r4, r3
    cdb0:	f63f acf5 	bhi.w	c79e <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    cdb4:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    cdb6:	f813 2901 	ldrb.w	r2, [r3], #-1
    cdba:	2a2e      	cmp	r2, #46	; 0x2e
    cdbc:	d0f7      	beq.n	cdae <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    cdbe:	2a39      	cmp	r2, #57	; 0x39
    cdc0:	d0f4      	beq.n	cdac <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    cdc2:	3201      	adds	r2, #1
    cdc4:	702a      	strb	r2, [r5, #0]
                    break;
    cdc6:	e4ea      	b.n	c79e <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cdc8:	1c43      	adds	r3, r0, #1
    cdca:	d037      	beq.n	ce3c <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cdcc:	3002      	adds	r0, #2
    cdce:	d037      	beq.n	ce40 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cdd0:	4b2c      	ldr	r3, [pc, #176]	; (ce84 <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cdd2:	6023      	str	r3, [r4, #0]
    cdd4:	2303      	movs	r3, #3
    cdd6:	e4e8      	b.n	c7aa <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cdd8:	9b01      	ldr	r3, [sp, #4]
    cdda:	b113      	cbz	r3, cde2 <am_util_stdio_vsprintf+0x892>
    cddc:	2e20      	cmp	r6, #32
    cdde:	f43f af1e 	beq.w	cc1e <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cde2:	4640      	mov	r0, r8
    cde4:	4649      	mov	r1, r9
    cde6:	4622      	mov	r2, r4
    cde8:	f7ff fb14 	bl	c414 <uint64_to_str>
                ui32CharCnt += iVal;
    cdec:	4483      	add	fp, r0
                break;
    cdee:	f7ff bbcd 	b.w	c58c <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    cdf2:	2000      	movs	r0, #0
    cdf4:	e6ea      	b.n	cbcc <am_util_stdio_vsprintf+0x67c>
    cdf6:	2200      	movs	r2, #0
    cdf8:	e54c      	b.n	c894 <am_util_stdio_vsprintf+0x344>
    cdfa:	1c72      	adds	r2, r6, #1
    cdfc:	e79f      	b.n	cd3e <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cdfe:	4b22      	ldr	r3, [pc, #136]	; (ce88 <am_util_stdio_vsprintf+0x938>)
    ce00:	6023      	str	r3, [r4, #0]
    ce02:	2303      	movs	r3, #3
    ce04:	e4d1      	b.n	c7aa <am_util_stdio_vsprintf+0x25a>
    ce06:	4670      	mov	r0, lr
    ce08:	44f3      	add	fp, lr
    ce0a:	e6df      	b.n	cbcc <am_util_stdio_vsprintf+0x67c>
    ce0c:	460a      	mov	r2, r1
    ce0e:	448b      	add	fp, r1
    ce10:	e540      	b.n	c894 <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    ce12:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce16:	4667      	mov	r7, ip
    ce18:	e57d      	b.n	c916 <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    ce1a:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    ce1c:	bfc8      	it	gt
    ce1e:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    ce20:	f73f af48 	bgt.w	ccb4 <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    ce24:	460f      	mov	r7, r1
    ce26:	e5e8      	b.n	c9fa <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce28:	4622      	mov	r2, r4
    ce2a:	4640      	mov	r0, r8
    ce2c:	4649      	mov	r1, r9
    ce2e:	f7ff faf1 	bl	c414 <uint64_to_str>
                if ( pcBuf )
    ce32:	e54a      	b.n	c8ca <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    ce34:	2200      	movs	r2, #0
    ce36:	e71a      	b.n	cc6e <am_util_stdio_vsprintf+0x71e>
    ce38:	2200      	movs	r2, #0
    ce3a:	e5f9      	b.n	ca30 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    ce3c:	4b12      	ldr	r3, [pc, #72]	; (ce88 <am_util_stdio_vsprintf+0x938>)
    ce3e:	e7c8      	b.n	cdd2 <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    ce40:	4b12      	ldr	r3, [pc, #72]	; (ce8c <am_util_stdio_vsprintf+0x93c>)
    ce42:	e7c6      	b.n	cdd2 <am_util_stdio_vsprintf+0x882>
    ce44:	4642      	mov	r2, r8
    ce46:	44c3      	add	fp, r8
    ce48:	7819      	ldrb	r1, [r3, #0]
    ce4a:	e747      	b.n	ccdc <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    ce4c:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce50:	2700      	movs	r7, #0
    ce52:	e55f      	b.n	c914 <am_util_stdio_vsprintf+0x3c4>
    ce54:	460a      	mov	r2, r1
    ce56:	448b      	add	fp, r1
    ce58:	e5ea      	b.n	ca30 <am_util_stdio_vsprintf+0x4e0>
    ce5a:	460a      	mov	r2, r1
    ce5c:	448b      	add	fp, r1
    ce5e:	e706      	b.n	cc6e <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    ce60:	4623      	mov	r3, r4
    ce62:	212d      	movs	r1, #45	; 0x2d
    ce64:	f803 1b03 	strb.w	r1, [r3], #3
    ce68:	46b0      	mov	r8, r6
    ce6a:	4616      	mov	r6, r2
    ce6c:	461a      	mov	r2, r3
    ce6e:	e766      	b.n	cd3e <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    ce70:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    ce72:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    ce74:	9301      	str	r3, [sp, #4]
    ce76:	e4f7      	b.n	c868 <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    ce78:	4611      	mov	r1, r2
    ce7a:	e78a      	b.n	cd92 <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    ce7c:	4632      	mov	r2, r6
    ce7e:	4646      	mov	r6, r8
    ce80:	e484      	b.n	c78c <am_util_stdio_vsprintf+0x23c>
    ce82:	bf00      	nop
    ce84:	003f2e3f 	.word	0x003f2e3f
    ce88:	00302e30 	.word	0x00302e30
    ce8c:	00232e23 	.word	0x00232e23

0000ce90 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    ce90:	b40f      	push	{r0, r1, r2, r3}
    ce92:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    ce94:	4d0a      	ldr	r5, [pc, #40]	; (cec0 <am_util_stdio_printf+0x30>)
    ce96:	682c      	ldr	r4, [r5, #0]
{
    ce98:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    ce9a:	b154      	cbz	r4, ceb2 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ce9c:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ce9e:	461a      	mov	r2, r3
    cea0:	9906      	ldr	r1, [sp, #24]
    cea2:	4808      	ldr	r0, [pc, #32]	; (cec4 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    cea4:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cea6:	f7ff fb53 	bl	c550 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    ceaa:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ceac:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    ceae:	4805      	ldr	r0, [pc, #20]	; (cec4 <am_util_stdio_printf+0x34>)
    ceb0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    ceb2:	4620      	mov	r0, r4
    ceb4:	b003      	add	sp, #12
    ceb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ceba:	b004      	add	sp, #16
    cebc:	4770      	bx	lr
    cebe:	bf00      	nop
    cec0:	10001134 	.word	0x10001134
    cec4:	10001024 	.word	0x10001024

0000cec8 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    cec8:	4801      	ldr	r0, [pc, #4]	; (ced0 <am_util_stdio_terminal_clear+0x8>)
    ceca:	f7ff bfe1 	b.w	ce90 <am_util_stdio_printf>
    cece:	bf00      	nop
    ced0:	0000e360 	.word	0x0000e360

0000ced4 <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    ced4:	e7fe      	b.n	ced4 <NMI_Handler>
    ced6:	bf00      	nop

0000ced8 <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    ced8:	e7fe      	b.n	ced8 <DebugMon_Handler>
    ceda:	bf00      	nop

0000cedc <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    cedc:	4811      	ldr	r0, [pc, #68]	; (cf24 <zero_loop+0x12>)
    cede:	4912      	ldr	r1, [pc, #72]	; (cf28 <zero_loop+0x16>)
    cee0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    cee2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    cee6:	4811      	ldr	r0, [pc, #68]	; (cf2c <zero_loop+0x1a>)
    cee8:	6801      	ldr	r1, [r0, #0]
    ceea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ceee:	6001      	str	r1, [r0, #0]
    cef0:	f3bf 8f4f 	dsb	sy
    cef4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    cef8:	480d      	ldr	r0, [pc, #52]	; (cf30 <zero_loop+0x1e>)
    cefa:	490e      	ldr	r1, [pc, #56]	; (cf34 <zero_loop+0x22>)
    cefc:	4a0e      	ldr	r2, [pc, #56]	; (cf38 <zero_loop+0x26>)

0000cefe <copy_loop>:
    cefe:	f850 3b04 	ldr.w	r3, [r0], #4
    cf02:	f841 3b04 	str.w	r3, [r1], #4
    cf06:	4291      	cmp	r1, r2
    cf08:	dbf9      	blt.n	cefe <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    cf0a:	480c      	ldr	r0, [pc, #48]	; (cf3c <zero_loop+0x2a>)
    cf0c:	490c      	ldr	r1, [pc, #48]	; (cf40 <zero_loop+0x2e>)
    cf0e:	f04f 0200 	mov.w	r2, #0

0000cf12 <zero_loop>:
    cf12:	4288      	cmp	r0, r1
    cf14:	bfb8      	it	lt
    cf16:	f840 2b04 	strlt.w	r2, [r0], #4
    cf1a:	dbfa      	blt.n	cf12 <zero_loop>
    main();
    cf1c:	f7ff f940 	bl	c1a0 <main>
    __asm("    bkpt     ");
    cf20:	be00      	bkpt	0x0000
}
    cf22:	0000      	.short	0x0000
    cf24:	e000ed08 	.word	0xe000ed08
    cf28:	0000c000 	.word	0x0000c000
    cf2c:	e000ed88 	.word	0xe000ed88
    cf30:	0000e650 	.word	0x0000e650
    cf34:	10001000 	.word	0x10001000
    cf38:	10001020 	.word	0x10001020
    cf3c:	10001020 	.word	0x10001020
    cf40:	10001200 	.word	0x10001200

0000cf44 <am_bsp_uart_string_print>:
    cf44:	b510      	push	{r4, lr}
    cf46:	b086      	sub	sp, #24
    cf48:	7804      	ldrb	r4, [r0, #0]
    cf4a:	2300      	movs	r3, #0
    cf4c:	9300      	str	r3, [sp, #0]
    cf4e:	b134      	cbz	r4, cf5e <am_bsp_uart_string_print+0x1a>
    cf50:	461c      	mov	r4, r3
    cf52:	4603      	mov	r3, r0
    cf54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cf58:	3401      	adds	r4, #1
    cf5a:	2a00      	cmp	r2, #0
    cf5c:	d1fa      	bne.n	cf54 <am_bsp_uart_string_print+0x10>
    cf5e:	4b0a      	ldr	r3, [pc, #40]	; (cf88 <am_bsp_uart_string_print+0x44>)
    cf60:	9002      	str	r0, [sp, #8]
    cf62:	2200      	movs	r2, #0
    cf64:	6818      	ldr	r0, [r3, #0]
    cf66:	9403      	str	r4, [sp, #12]
    cf68:	f04f 33ff 	mov.w	r3, #4294967295
    cf6c:	a901      	add	r1, sp, #4
    cf6e:	9304      	str	r3, [sp, #16]
    cf70:	9201      	str	r2, [sp, #4]
    cf72:	f8cd d014 	str.w	sp, [sp, #20]
    cf76:	f000 febd 	bl	dcf4 <am_hal_uart_transfer>
    cf7a:	9b00      	ldr	r3, [sp, #0]
    cf7c:	42a3      	cmp	r3, r4
    cf7e:	d000      	beq.n	cf82 <am_bsp_uart_string_print+0x3e>
    cf80:	e7fe      	b.n	cf80 <am_bsp_uart_string_print+0x3c>
    cf82:	b006      	add	sp, #24
    cf84:	bd10      	pop	{r4, pc}
    cf86:	bf00      	nop
    cf88:	10001124 	.word	0x10001124

0000cf8c <am_bsp_low_power_init>:
    cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf8e:	f000 fb29 	bl	d5e4 <am_hal_itm_disable>
    cf92:	2000      	movs	r0, #0
    cf94:	f7ff fad6 	bl	c544 <am_util_stdio_printf_init>
    cf98:	4b12      	ldr	r3, [pc, #72]	; (cfe4 <am_bsp_low_power_init+0x58>)
    cf9a:	4f13      	ldr	r7, [pc, #76]	; (cfe8 <am_bsp_low_power_init+0x5c>)
    cf9c:	6819      	ldr	r1, [r3, #0]
    cf9e:	2021      	movs	r0, #33	; 0x21
    cfa0:	f000 f95a 	bl	d258 <am_hal_gpio_pinconfig>
    cfa4:	f000 fc60 	bl	d868 <am_hal_pwrctrl_low_power_init>
    cfa8:	2001      	movs	r0, #1
    cfaa:	f000 fca7 	bl	d8fc <am_hal_rtc_osc_select>
    cfae:	2100      	movs	r1, #0
    cfb0:	2003      	movs	r0, #3
    cfb2:	f000 f8b5 	bl	d120 <am_hal_clkgen_control>
    cfb6:	f000 fcad 	bl	d914 <am_hal_rtc_osc_disable>
    cfba:	4b0c      	ldr	r3, [pc, #48]	; (cfec <am_bsp_low_power_init+0x60>)
    cfbc:	681e      	ldr	r6, [r3, #0]
    cfbe:	2400      	movs	r4, #0
    cfc0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    cfc4:	4631      	mov	r1, r6
    cfc6:	4628      	mov	r0, r5
    cfc8:	f000 f946 	bl	d258 <am_hal_gpio_pinconfig>
    cfcc:	2103      	movs	r1, #3
    cfce:	4628      	mov	r0, r5
    cfd0:	f000 fab6 	bl	d540 <am_hal_gpio_state_write>
    cfd4:	3401      	adds	r4, #1
    cfd6:	4628      	mov	r0, r5
    cfd8:	2100      	movs	r1, #0
    cfda:	f000 fab1 	bl	d540 <am_hal_gpio_state_write>
    cfde:	2c04      	cmp	r4, #4
    cfe0:	d1ee      	bne.n	cfc0 <am_bsp_low_power_init+0x34>
    cfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfe4:	0000e4dc 	.word	0x0000e4dc
    cfe8:	10001000 	.word	0x10001000
    cfec:	0000e4e0 	.word	0x0000e4e0

0000cff0 <am_bsp_debug_printf_disable>:
    cff0:	b538      	push	{r3, r4, r5, lr}
    cff2:	4b17      	ldr	r3, [pc, #92]	; (d050 <am_bsp_debug_printf_disable+0x60>)
    cff4:	681c      	ldr	r4, [r3, #0]
    cff6:	2c01      	cmp	r4, #1
    cff8:	d01d      	beq.n	d036 <am_bsp_debug_printf_disable+0x46>
    cffa:	2c02      	cmp	r4, #2
    cffc:	d000      	beq.n	d000 <am_bsp_debug_printf_disable+0x10>
    cffe:	bd38      	pop	{r3, r4, r5, pc}
    d000:	4d14      	ldr	r5, [pc, #80]	; (d054 <am_bsp_debug_printf_disable+0x64>)
    d002:	6828      	ldr	r0, [r5, #0]
    d004:	f001 f8b0 	bl	e168 <am_hal_uart_tx_flush>
    d008:	2000      	movs	r0, #0
    d00a:	f7ff fa9b 	bl	c544 <am_util_stdio_printf_init>
    d00e:	4621      	mov	r1, r4
    d010:	2200      	movs	r2, #0
    d012:	6828      	ldr	r0, [r5, #0]
    d014:	f000 fcf0 	bl	d9f8 <am_hal_uart_power_control>
    d018:	6828      	ldr	r0, [r5, #0]
    d01a:	f000 fcd9 	bl	d9d0 <am_hal_uart_deinitialize>
    d01e:	4b0e      	ldr	r3, [pc, #56]	; (d058 <am_bsp_debug_printf_disable+0x68>)
    d020:	681c      	ldr	r4, [r3, #0]
    d022:	2030      	movs	r0, #48	; 0x30
    d024:	4621      	mov	r1, r4
    d026:	f000 f917 	bl	d258 <am_hal_gpio_pinconfig>
    d02a:	4621      	mov	r1, r4
    d02c:	2031      	movs	r0, #49	; 0x31
    d02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d032:	f000 b911 	b.w	d258 <am_hal_gpio_pinconfig>
    d036:	f000 fad5 	bl	d5e4 <am_hal_itm_disable>
    d03a:	2000      	movs	r0, #0
    d03c:	f7ff fa82 	bl	c544 <am_util_stdio_printf_init>
    d040:	4b05      	ldr	r3, [pc, #20]	; (d058 <am_bsp_debug_printf_disable+0x68>)
    d042:	2021      	movs	r0, #33	; 0x21
    d044:	6819      	ldr	r1, [r3, #0]
    d046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d04a:	f000 b905 	b.w	d258 <am_hal_gpio_pinconfig>
    d04e:	bf00      	nop
    d050:	10001128 	.word	0x10001128
    d054:	10001124 	.word	0x10001124
    d058:	0000e4dc 	.word	0x0000e4dc

0000d05c <am_bsp_uart_printf_enable>:
    d05c:	b510      	push	{r4, lr}
    d05e:	4c10      	ldr	r4, [pc, #64]	; (d0a0 <am_bsp_uart_printf_enable+0x44>)
    d060:	4b10      	ldr	r3, [pc, #64]	; (d0a4 <am_bsp_uart_printf_enable+0x48>)
    d062:	4621      	mov	r1, r4
    d064:	2202      	movs	r2, #2
    d066:	2000      	movs	r0, #0
    d068:	601a      	str	r2, [r3, #0]
    d06a:	f000 fc89 	bl	d980 <am_hal_uart_initialize>
    d06e:	2200      	movs	r2, #0
    d070:	4611      	mov	r1, r2
    d072:	6820      	ldr	r0, [r4, #0]
    d074:	f000 fcc0 	bl	d9f8 <am_hal_uart_power_control>
    d078:	6820      	ldr	r0, [r4, #0]
    d07a:	490b      	ldr	r1, [pc, #44]	; (d0a8 <am_bsp_uart_printf_enable+0x4c>)
    d07c:	f000 fd2e 	bl	dadc <am_hal_uart_configure>
    d080:	4b0a      	ldr	r3, [pc, #40]	; (d0ac <am_bsp_uart_printf_enable+0x50>)
    d082:	2030      	movs	r0, #48	; 0x30
    d084:	6819      	ldr	r1, [r3, #0]
    d086:	f000 f8e7 	bl	d258 <am_hal_gpio_pinconfig>
    d08a:	4b09      	ldr	r3, [pc, #36]	; (d0b0 <am_bsp_uart_printf_enable+0x54>)
    d08c:	2031      	movs	r0, #49	; 0x31
    d08e:	6819      	ldr	r1, [r3, #0]
    d090:	f000 f8e2 	bl	d258 <am_hal_gpio_pinconfig>
    d094:	4807      	ldr	r0, [pc, #28]	; (d0b4 <am_bsp_uart_printf_enable+0x58>)
    d096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d09a:	f7ff ba53 	b.w	c544 <am_util_stdio_printf_init>
    d09e:	bf00      	nop
    d0a0:	10001124 	.word	0x10001124
    d0a4:	10001128 	.word	0x10001128
    d0a8:	0000e374 	.word	0x0000e374
    d0ac:	0000e3a0 	.word	0x0000e3a0
    d0b0:	0000e39c 	.word	0x0000e39c
    d0b4:	0000cf45 	.word	0x0000cf45

0000d0b8 <am_hal_cachectrl_config>:
    d0b8:	b530      	push	{r4, r5, lr}
    d0ba:	b083      	sub	sp, #12
    d0bc:	4605      	mov	r5, r0
    d0be:	f000 fa89 	bl	d5d4 <am_hal_interrupt_master_disable>
    d0c2:	4c11      	ldr	r4, [pc, #68]	; (d108 <am_hal_cachectrl_config+0x50>)
    d0c4:	9001      	str	r0, [sp, #4]
    d0c6:	6823      	ldr	r3, [r4, #0]
    d0c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d0cc:	6023      	str	r3, [r4, #0]
    d0ce:	9801      	ldr	r0, [sp, #4]
    d0d0:	f000 fa84 	bl	d5dc <am_hal_interrupt_master_set>
    d0d4:	78eb      	ldrb	r3, [r5, #3]
    d0d6:	782a      	ldrb	r2, [r5, #0]
    d0d8:	78a8      	ldrb	r0, [r5, #2]
    d0da:	7869      	ldrb	r1, [r5, #1]
    d0dc:	005b      	lsls	r3, r3, #1
    d0de:	0112      	lsls	r2, r2, #4
    d0e0:	b2d2      	uxtb	r2, r2
    d0e2:	f003 0302 	and.w	r3, r3, #2
    d0e6:	4313      	orrs	r3, r2
    d0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d0ec:	0080      	lsls	r0, r0, #2
    d0ee:	f000 000c 	and.w	r0, r0, #12
    d0f2:	020a      	lsls	r2, r1, #8
    d0f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d0f8:	4303      	orrs	r3, r0
    d0fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d0fe:	4313      	orrs	r3, r2
    d100:	2000      	movs	r0, #0
    d102:	6023      	str	r3, [r4, #0]
    d104:	b003      	add	sp, #12
    d106:	bd30      	pop	{r4, r5, pc}
    d108:	40018000 	.word	0x40018000

0000d10c <am_hal_cachectrl_enable>:
    d10c:	4a03      	ldr	r2, [pc, #12]	; (d11c <am_hal_cachectrl_enable+0x10>)
    d10e:	6813      	ldr	r3, [r2, #0]
    d110:	f043 0301 	orr.w	r3, r3, #1
    d114:	6013      	str	r3, [r2, #0]
    d116:	2000      	movs	r0, #0
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	40018000 	.word	0x40018000

0000d120 <am_hal_clkgen_control>:
    d120:	4b32      	ldr	r3, [pc, #200]	; (d1ec <am_hal_clkgen_control+0xcc>)
    d122:	681a      	ldr	r2, [r3, #0]
    d124:	b912      	cbnz	r2, d12c <am_hal_clkgen_control+0xc>
    d126:	4a32      	ldr	r2, [pc, #200]	; (d1f0 <am_hal_clkgen_control+0xd0>)
    d128:	6812      	ldr	r2, [r2, #0]
    d12a:	601a      	str	r2, [r3, #0]
    d12c:	2809      	cmp	r0, #9
    d12e:	d85a      	bhi.n	d1e6 <am_hal_clkgen_control+0xc6>
    d130:	e8df f000 	tbb	[pc, r0]
    d134:	261e160d 	.word	0x261e160d
    d138:	4640362e 	.word	0x4640362e
    d13c:	054e      	.short	0x054e
    d13e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d142:	2000      	movs	r0, #0
    d144:	6a1a      	ldr	r2, [r3, #32]
    d146:	f36f 0200 	bfc	r2, #0, #1
    d14a:	621a      	str	r2, [r3, #32]
    d14c:	4770      	bx	lr
    d14e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d152:	2200      	movs	r2, #0
    d154:	2147      	movs	r1, #71	; 0x47
    d156:	6159      	str	r1, [r3, #20]
    d158:	4610      	mov	r0, r2
    d15a:	619a      	str	r2, [r3, #24]
    d15c:	615a      	str	r2, [r3, #20]
    d15e:	4770      	bx	lr
    d160:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d164:	2000      	movs	r0, #0
    d166:	68d3      	ldr	r3, [r2, #12]
    d168:	f023 0301 	bic.w	r3, r3, #1
    d16c:	60d3      	str	r3, [r2, #12]
    d16e:	4770      	bx	lr
    d170:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d174:	2000      	movs	r0, #0
    d176:	68d3      	ldr	r3, [r2, #12]
    d178:	f023 0302 	bic.w	r3, r3, #2
    d17c:	60d3      	str	r3, [r2, #12]
    d17e:	4770      	bx	lr
    d180:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d184:	2000      	movs	r0, #0
    d186:	68d3      	ldr	r3, [r2, #12]
    d188:	f043 0301 	orr.w	r3, r3, #1
    d18c:	60d3      	str	r3, [r2, #12]
    d18e:	4770      	bx	lr
    d190:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d194:	2000      	movs	r0, #0
    d196:	68d3      	ldr	r3, [r2, #12]
    d198:	f043 0302 	orr.w	r3, r3, #2
    d19c:	60d3      	str	r3, [r2, #12]
    d19e:	4770      	bx	lr
    d1a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d1a4:	2200      	movs	r2, #0
    d1a6:	2047      	movs	r0, #71	; 0x47
    d1a8:	2101      	movs	r1, #1
    d1aa:	6158      	str	r0, [r3, #20]
    d1ac:	6199      	str	r1, [r3, #24]
    d1ae:	4610      	mov	r0, r2
    d1b0:	615a      	str	r2, [r3, #20]
    d1b2:	4770      	bx	lr
    d1b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d1b8:	2000      	movs	r0, #0
    d1ba:	68da      	ldr	r2, [r3, #12]
    d1bc:	60da      	str	r2, [r3, #12]
    d1be:	4770      	bx	lr
    d1c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d1c4:	2000      	movs	r0, #0
    d1c6:	68d3      	ldr	r3, [r2, #12]
    d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d1cc:	60d3      	str	r3, [r2, #12]
    d1ce:	4770      	bx	lr
    d1d0:	b139      	cbz	r1, d1e2 <am_hal_clkgen_control+0xc2>
    d1d2:	680b      	ldr	r3, [r1, #0]
    d1d4:	f043 0301 	orr.w	r3, r3, #1
    d1d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d1dc:	2000      	movs	r0, #0
    d1de:	6213      	str	r3, [r2, #32]
    d1e0:	4770      	bx	lr
    d1e2:	4b04      	ldr	r3, [pc, #16]	; (d1f4 <am_hal_clkgen_control+0xd4>)
    d1e4:	e7f8      	b.n	d1d8 <am_hal_clkgen_control+0xb8>
    d1e6:	2006      	movs	r0, #6
    d1e8:	4770      	bx	lr
    d1ea:	bf00      	nop
    d1ec:	1000112c 	.word	0x1000112c
    d1f0:	4ffff000 	.word	0x4ffff000
    d1f4:	0025b801 	.word	0x0025b801

0000d1f8 <am_hal_flash_delay>:
    d1f8:	4b00      	ldr	r3, [pc, #0]	; (d1fc <am_hal_flash_delay+0x4>)
    d1fa:	4718      	bx	r3
    d1fc:	0800009d 	.word	0x0800009d

0000d200 <am_hal_flash_delay_status_check>:
    d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d204:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d208:	460d      	mov	r5, r1
    d20a:	4616      	mov	r6, r2
    d20c:	461f      	mov	r7, r3
    d20e:	b17c      	cbz	r4, d230 <am_hal_flash_delay_status_check+0x30>
    d210:	4604      	mov	r4, r0
    d212:	f8df 8040 	ldr.w	r8, [pc, #64]	; d254 <am_hal_flash_delay_status_check+0x54>
    d216:	e002      	b.n	d21e <am_hal_flash_delay_status_check+0x1e>
    d218:	b1c4      	cbz	r4, d24c <am_hal_flash_delay_status_check+0x4c>
    d21a:	47c0      	blx	r8
    d21c:	3c01      	subs	r4, #1
    d21e:	682b      	ldr	r3, [r5, #0]
    d220:	4033      	ands	r3, r6
    d222:	429f      	cmp	r7, r3
    d224:	f04f 0001 	mov.w	r0, #1
    d228:	d1f6      	bne.n	d218 <am_hal_flash_delay_status_check+0x18>
    d22a:	2000      	movs	r0, #0
    d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d230:	f8df 8020 	ldr.w	r8, [pc, #32]	; d254 <am_hal_flash_delay_status_check+0x54>
    d234:	4604      	mov	r4, r0
    d236:	e002      	b.n	d23e <am_hal_flash_delay_status_check+0x3e>
    d238:	b144      	cbz	r4, d24c <am_hal_flash_delay_status_check+0x4c>
    d23a:	47c0      	blx	r8
    d23c:	3c01      	subs	r4, #1
    d23e:	682b      	ldr	r3, [r5, #0]
    d240:	4033      	ands	r3, r6
    d242:	429f      	cmp	r7, r3
    d244:	f04f 0001 	mov.w	r0, #1
    d248:	d0f6      	beq.n	d238 <am_hal_flash_delay_status_check+0x38>
    d24a:	e7ee      	b.n	d22a <am_hal_flash_delay_status_check+0x2a>
    d24c:	2004      	movs	r0, #4
    d24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d252:	bf00      	nop
    d254:	0800009d 	.word	0x0800009d

0000d258 <am_hal_gpio_pinconfig>:
    d258:	2831      	cmp	r0, #49	; 0x31
    d25a:	d901      	bls.n	d260 <am_hal_gpio_pinconfig+0x8>
    d25c:	2006      	movs	r0, #6
    d25e:	4770      	bx	lr
    d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d264:	f001 0307 	and.w	r3, r1, #7
    d268:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d26c:	b085      	sub	sp, #20
    d26e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d272:	d014      	beq.n	d29e <am_hal_gpio_pinconfig+0x46>
    d274:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d278:	1db4      	adds	r4, r6, #6
    d27a:	f004 0407 	and.w	r4, r4, #7
    d27e:	2c03      	cmp	r4, #3
    d280:	f042 0201 	orr.w	r2, r2, #1
    d284:	f200 80ae 	bhi.w	d3e4 <am_hal_gpio_pinconfig+0x18c>
    d288:	4c85      	ldr	r4, [pc, #532]	; (d4a0 <am_hal_gpio_pinconfig+0x248>)
    d28a:	5c24      	ldrb	r4, [r4, r0]
    d28c:	07e7      	lsls	r7, r4, #31
    d28e:	d403      	bmi.n	d298 <am_hal_gpio_pinconfig+0x40>
    d290:	4884      	ldr	r0, [pc, #528]	; (d4a4 <am_hal_gpio_pinconfig+0x24c>)
    d292:	b005      	add	sp, #20
    d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d298:	3e02      	subs	r6, #2
    d29a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d29e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d2a2:	2c00      	cmp	r4, #0
    d2a4:	f040 8098 	bne.w	d3d8 <am_hal_gpio_pinconfig+0x180>
    d2a8:	4c7f      	ldr	r4, [pc, #508]	; (d4a8 <am_hal_gpio_pinconfig+0x250>)
    d2aa:	4d80      	ldr	r5, [pc, #512]	; (d4ac <am_hal_gpio_pinconfig+0x254>)
    d2ac:	5c24      	ldrb	r4, [r4, r0]
    d2ae:	5c2d      	ldrb	r5, [r5, r0]
    d2b0:	411c      	asrs	r4, r3
    d2b2:	f014 0f01 	tst.w	r4, #1
    d2b6:	bf0c      	ite	eq
    d2b8:	2400      	moveq	r4, #0
    d2ba:	2402      	movne	r4, #2
    d2bc:	42ab      	cmp	r3, r5
    d2be:	ea42 0204 	orr.w	r2, r2, r4
    d2c2:	f000 809b 	beq.w	d3fc <am_hal_gpio_pinconfig+0x1a4>
    d2c6:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d2ca:	105d      	asrs	r5, r3, #1
    d2cc:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d2d0:	00db      	lsls	r3, r3, #3
    d2d2:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d2d6:	f003 0408 	and.w	r4, r3, #8
    d2da:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d2de:	f007 060c 	and.w	r6, r7, #12
    d2e2:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d2e6:	2e04      	cmp	r6, #4
    d2e8:	ea43 0304 	orr.w	r3, r3, r4
    d2ec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d2f0:	462c      	mov	r4, r5
    d2f2:	f000 8090 	beq.w	d416 <am_hal_gpio_pinconfig+0x1be>
    d2f6:	4c6e      	ldr	r4, [pc, #440]	; (d4b0 <am_hal_gpio_pinconfig+0x258>)
    d2f8:	6824      	ldr	r4, [r4, #0]
    d2fa:	ebc4 0901 	rsb	r9, r4, r1
    d2fe:	fab9 f989 	clz	r9, r9
    d302:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d306:	f017 0f60 	tst.w	r7, #96	; 0x60
    d30a:	bf04      	itt	eq
    d30c:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d310:	f364 0300 	bfieq	r3, r4, #0, #1
    d314:	0084      	lsls	r4, r0, #2
    d316:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d31a:	2902      	cmp	r1, #2
    d31c:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d320:	d07c      	beq.n	d41c <am_hal_gpio_pinconfig+0x1c4>
    d322:	f200 8082 	bhi.w	d42a <am_hal_gpio_pinconfig+0x1d2>
    d326:	2901      	cmp	r1, #1
    d328:	bf08      	it	eq
    d32a:	f042 0204 	orreq.w	r2, r2, #4
    d32e:	f005 0518 	and.w	r5, r5, #24
    d332:	f04f 0800 	mov.w	r8, #0
    d336:	f004 041c 	and.w	r4, r4, #28
    d33a:	0841      	lsrs	r1, r0, #1
    d33c:	f020 0a03 	bic.w	sl, r0, #3
    d340:	270f      	movs	r7, #15
    d342:	f021 0103 	bic.w	r1, r1, #3
    d346:	40a7      	lsls	r7, r4
    d348:	26ff      	movs	r6, #255	; 0xff
    d34a:	fa03 f404 	lsl.w	r4, r3, r4
    d34e:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d352:	40ae      	lsls	r6, r5
    d354:	9101      	str	r1, [sp, #4]
    d356:	9300      	str	r3, [sp, #0]
    d358:	4683      	mov	fp, r0
    d35a:	fa02 f505 	lsl.w	r5, r2, r5
    d35e:	f000 f939 	bl	d5d4 <am_hal_interrupt_master_disable>
    d362:	9b00      	ldr	r3, [sp, #0]
    d364:	9003      	str	r0, [sp, #12]
    d366:	43ff      	mvns	r7, r7
    d368:	43f6      	mvns	r6, r6
    d36a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d36e:	f8df e160 	ldr.w	lr, [pc, #352]	; d4d0 <am_hal_gpio_pinconfig+0x278>
    d372:	4850      	ldr	r0, [pc, #320]	; (d4b4 <am_hal_gpio_pinconfig+0x25c>)
    d374:	9901      	ldr	r1, [sp, #4]
    d376:	f1b9 0f00 	cmp.w	r9, #0
    d37a:	d00b      	beq.n	d394 <am_hal_gpio_pinconfig+0x13c>
    d37c:	f00b 021f 	and.w	r2, fp, #31
    d380:	f04f 0901 	mov.w	r9, #1
    d384:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    d388:	f8df c148 	ldr.w	ip, [pc, #328]	; d4d4 <am_hal_gpio_pinconfig+0x27c>
    d38c:	fa09 f202 	lsl.w	r2, r9, r2
    d390:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    d394:	4a48      	ldr	r2, [pc, #288]	; (d4b8 <am_hal_gpio_pinconfig+0x260>)
    d396:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d39a:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    d39e:	f8d3 c000 	ldr.w	ip, [r3]
    d3a2:	ea06 0c0c 	and.w	ip, r6, ip
    d3a6:	ea4c 0505 	orr.w	r5, ip, r5
    d3aa:	601d      	str	r5, [r3, #0]
    d3ac:	f851 300e 	ldr.w	r3, [r1, lr]
    d3b0:	403b      	ands	r3, r7
    d3b2:	4323      	orrs	r3, r4
    d3b4:	f841 300e 	str.w	r3, [r1, lr]
    d3b8:	f85a 3000 	ldr.w	r3, [sl, r0]
    d3bc:	401e      	ands	r6, r3
    d3be:	2400      	movs	r4, #0
    d3c0:	ea46 0608 	orr.w	r6, r6, r8
    d3c4:	f84a 6000 	str.w	r6, [sl, r0]
    d3c8:	6614      	str	r4, [r2, #96]	; 0x60
    d3ca:	9803      	ldr	r0, [sp, #12]
    d3cc:	f000 f906 	bl	d5dc <am_hal_interrupt_master_set>
    d3d0:	4620      	mov	r0, r4
    d3d2:	b005      	add	sp, #20
    d3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3d8:	2c01      	cmp	r4, #1
    d3da:	d015      	beq.n	d408 <am_hal_gpio_pinconfig+0x1b0>
    d3dc:	2c02      	cmp	r4, #2
    d3de:	d032      	beq.n	d446 <am_hal_gpio_pinconfig+0x1ee>
    d3e0:	4836      	ldr	r0, [pc, #216]	; (d4bc <am_hal_gpio_pinconfig+0x264>)
    d3e2:	e756      	b.n	d292 <am_hal_gpio_pinconfig+0x3a>
    d3e4:	2dc0      	cmp	r5, #192	; 0xc0
    d3e6:	d029      	beq.n	d43c <am_hal_gpio_pinconfig+0x1e4>
    d3e8:	2d20      	cmp	r5, #32
    d3ea:	f47f af58 	bne.w	d29e <am_hal_gpio_pinconfig+0x46>
    d3ee:	4c2c      	ldr	r4, [pc, #176]	; (d4a0 <am_hal_gpio_pinconfig+0x248>)
    d3f0:	5c24      	ldrb	r4, [r4, r0]
    d3f2:	f014 0f09 	tst.w	r4, #9
    d3f6:	f47f af4b 	bne.w	d290 <am_hal_gpio_pinconfig+0x38>
    d3fa:	e750      	b.n	d29e <am_hal_gpio_pinconfig+0x46>
    d3fc:	f3c1 4402 	ubfx	r4, r1, #16, #3
    d400:	2c07      	cmp	r4, #7
    d402:	d127      	bne.n	d454 <am_hal_gpio_pinconfig+0x1fc>
    d404:	482e      	ldr	r0, [pc, #184]	; (d4c0 <am_hal_gpio_pinconfig+0x268>)
    d406:	e744      	b.n	d292 <am_hal_gpio_pinconfig+0x3a>
    d408:	4c25      	ldr	r4, [pc, #148]	; (d4a0 <am_hal_gpio_pinconfig+0x248>)
    d40a:	5c24      	ldrb	r4, [r4, r0]
    d40c:	07a5      	lsls	r5, r4, #30
    d40e:	d5e7      	bpl.n	d3e0 <am_hal_gpio_pinconfig+0x188>
    d410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d414:	e748      	b.n	d2a8 <am_hal_gpio_pinconfig+0x50>
    d416:	f04f 0901 	mov.w	r9, #1
    d41a:	e774      	b.n	d306 <am_hal_gpio_pinconfig+0xae>
    d41c:	f005 0518 	and.w	r5, r5, #24
    d420:	f04f 0801 	mov.w	r8, #1
    d424:	fa08 f805 	lsl.w	r8, r8, r5
    d428:	e785      	b.n	d336 <am_hal_gpio_pinconfig+0xde>
    d42a:	f005 0518 	and.w	r5, r5, #24
    d42e:	f04f 0801 	mov.w	r8, #1
    d432:	f042 0204 	orr.w	r2, r2, #4
    d436:	fa08 f805 	lsl.w	r8, r8, r5
    d43a:	e77c      	b.n	d336 <am_hal_gpio_pinconfig+0xde>
    d43c:	2814      	cmp	r0, #20
    d43e:	f43f af2e 	beq.w	d29e <am_hal_gpio_pinconfig+0x46>
    d442:	4820      	ldr	r0, [pc, #128]	; (d4c4 <am_hal_gpio_pinconfig+0x26c>)
    d444:	e725      	b.n	d292 <am_hal_gpio_pinconfig+0x3a>
    d446:	4c16      	ldr	r4, [pc, #88]	; (d4a0 <am_hal_gpio_pinconfig+0x248>)
    d448:	5c24      	ldrb	r4, [r4, r0]
    d44a:	0764      	lsls	r4, r4, #29
    d44c:	d5c8      	bpl.n	d3e0 <am_hal_gpio_pinconfig+0x188>
    d44e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d452:	e729      	b.n	d2a8 <am_hal_gpio_pinconfig+0x50>
    d454:	4d1c      	ldr	r5, [pc, #112]	; (d4c8 <am_hal_gpio_pinconfig+0x270>)
    d456:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    d45a:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    d45e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    d462:	429e      	cmp	r6, r3
    d464:	d00c      	beq.n	d480 <am_hal_gpio_pinconfig+0x228>
    d466:	0084      	lsls	r4, r0, #2
    d468:	4425      	add	r5, r4
    d46a:	786e      	ldrb	r6, [r5, #1]
    d46c:	429e      	cmp	r6, r3
    d46e:	d013      	beq.n	d498 <am_hal_gpio_pinconfig+0x240>
    d470:	78ae      	ldrb	r6, [r5, #2]
    d472:	429e      	cmp	r6, r3
    d474:	d00e      	beq.n	d494 <am_hal_gpio_pinconfig+0x23c>
    d476:	78ed      	ldrb	r5, [r5, #3]
    d478:	429d      	cmp	r5, r3
    d47a:	d00f      	beq.n	d49c <am_hal_gpio_pinconfig+0x244>
    d47c:	4813      	ldr	r0, [pc, #76]	; (d4cc <am_hal_gpio_pinconfig+0x274>)
    d47e:	e708      	b.n	d292 <am_hal_gpio_pinconfig+0x3a>
    d480:	2300      	movs	r3, #0
    d482:	0084      	lsls	r4, r0, #2
    d484:	005b      	lsls	r3, r3, #1
    d486:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d48a:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    d48e:	f04f 0900 	mov.w	r9, #0
    d492:	e740      	b.n	d316 <am_hal_gpio_pinconfig+0xbe>
    d494:	2302      	movs	r3, #2
    d496:	e7f5      	b.n	d484 <am_hal_gpio_pinconfig+0x22c>
    d498:	2301      	movs	r3, #1
    d49a:	e7f3      	b.n	d484 <am_hal_gpio_pinconfig+0x22c>
    d49c:	2303      	movs	r3, #3
    d49e:	e7f1      	b.n	d484 <am_hal_gpio_pinconfig+0x22c>
    d4a0:	0000e3ac 	.word	0x0000e3ac
    d4a4:	08000100 	.word	0x08000100
    d4a8:	0000e4a8 	.word	0x0000e4a8
    d4ac:	0000e4e4 	.word	0x0000e4e4
    d4b0:	0000e4dc 	.word	0x0000e4dc
    d4b4:	400100e0 	.word	0x400100e0
    d4b8:	40010000 	.word	0x40010000
    d4bc:	08000102 	.word	0x08000102
    d4c0:	08000103 	.word	0x08000103
    d4c4:	08000101 	.word	0x08000101
    d4c8:	0000e3e0 	.word	0x0000e3e0
    d4cc:	08000104 	.word	0x08000104
    d4d0:	40010040 	.word	0x40010040
    d4d4:	400100b4 	.word	0x400100b4

0000d4d8 <am_hal_gpio_state_read>:
    d4d8:	b1ca      	cbz	r2, d50e <am_hal_gpio_state_read+0x36>
    d4da:	2831      	cmp	r0, #49	; 0x31
    d4dc:	d904      	bls.n	d4e8 <am_hal_gpio_state_read+0x10>
    d4de:	f04f 33ff 	mov.w	r3, #4294967295
    d4e2:	6013      	str	r3, [r2, #0]
    d4e4:	2005      	movs	r0, #5
    d4e6:	4770      	bx	lr
    d4e8:	2901      	cmp	r1, #1
    d4ea:	ea4f 1350 	mov.w	r3, r0, lsr #5
    d4ee:	f000 001f 	and.w	r0, r0, #31
    d4f2:	d00e      	beq.n	d512 <am_hal_gpio_state_read+0x3a>
    d4f4:	d315      	bcc.n	d522 <am_hal_gpio_state_read+0x4a>
    d4f6:	2902      	cmp	r1, #2
    d4f8:	d109      	bne.n	d50e <am_hal_gpio_state_read+0x36>
    d4fa:	490e      	ldr	r1, [pc, #56]	; (d534 <am_hal_gpio_state_read+0x5c>)
    d4fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d500:	fa23 f000 	lsr.w	r0, r3, r0
    d504:	f000 0001 	and.w	r0, r0, #1
    d508:	6010      	str	r0, [r2, #0]
    d50a:	2000      	movs	r0, #0
    d50c:	4770      	bx	lr
    d50e:	2006      	movs	r0, #6
    d510:	4770      	bx	lr
    d512:	4909      	ldr	r1, [pc, #36]	; (d538 <am_hal_gpio_state_read+0x60>)
    d514:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d518:	fa23 f000 	lsr.w	r0, r3, r0
    d51c:	f000 0001 	and.w	r0, r0, #1
    d520:	e7f2      	b.n	d508 <am_hal_gpio_state_read+0x30>
    d522:	4906      	ldr	r1, [pc, #24]	; (d53c <am_hal_gpio_state_read+0x64>)
    d524:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d528:	fa23 f000 	lsr.w	r0, r3, r0
    d52c:	f000 0001 	and.w	r0, r0, #1
    d530:	e7ea      	b.n	d508 <am_hal_gpio_state_read+0x30>
    d532:	bf00      	nop
    d534:	400100a0 	.word	0x400100a0
    d538:	40010088 	.word	0x40010088
    d53c:	40010080 	.word	0x40010080

0000d540 <am_hal_gpio_state_write>:
    d540:	2831      	cmp	r0, #49	; 0x31
    d542:	d901      	bls.n	d548 <am_hal_gpio_state_write+0x8>
    d544:	2005      	movs	r0, #5
    d546:	4770      	bx	lr
    d548:	2905      	cmp	r1, #5
    d54a:	d901      	bls.n	d550 <am_hal_gpio_state_write+0x10>
    d54c:	2006      	movs	r0, #6
    d54e:	4770      	bx	lr
    d550:	b570      	push	{r4, r5, r6, lr}
    d552:	f000 031f 	and.w	r3, r0, #31
    d556:	b082      	sub	sp, #8
    d558:	2201      	movs	r2, #1
    d55a:	460d      	mov	r5, r1
    d55c:	4604      	mov	r4, r0
    d55e:	fa02 f603 	lsl.w	r6, r2, r3
    d562:	f000 f837 	bl	d5d4 <am_hal_interrupt_master_disable>
    d566:	1e69      	subs	r1, r5, #1
    d568:	9001      	str	r0, [sp, #4]
    d56a:	0960      	lsrs	r0, r4, #5
    d56c:	2904      	cmp	r1, #4
    d56e:	d81c      	bhi.n	d5aa <am_hal_gpio_state_write+0x6a>
    d570:	e8df f001 	tbb	[pc, r1]
    d574:	030c1017 	.word	0x030c1017
    d578:	1f          	.byte	0x1f
    d579:	00          	.byte	0x00
    d57a:	4b11      	ldr	r3, [pc, #68]	; (d5c0 <am_hal_gpio_state_write+0x80>)
    d57c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d580:	9801      	ldr	r0, [sp, #4]
    d582:	f000 f82b 	bl	d5dc <am_hal_interrupt_master_set>
    d586:	2000      	movs	r0, #0
    d588:	b002      	add	sp, #8
    d58a:	bd70      	pop	{r4, r5, r6, pc}
    d58c:	4b0d      	ldr	r3, [pc, #52]	; (d5c4 <am_hal_gpio_state_write+0x84>)
    d58e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d592:	e7f5      	b.n	d580 <am_hal_gpio_state_write+0x40>
    d594:	4a0c      	ldr	r2, [pc, #48]	; (d5c8 <am_hal_gpio_state_write+0x88>)
    d596:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    d59a:	4073      	eors	r3, r6
    d59c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    d5a0:	e7ee      	b.n	d580 <am_hal_gpio_state_write+0x40>
    d5a2:	4b0a      	ldr	r3, [pc, #40]	; (d5cc <am_hal_gpio_state_write+0x8c>)
    d5a4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d5a8:	e7ea      	b.n	d580 <am_hal_gpio_state_write+0x40>
    d5aa:	4b09      	ldr	r3, [pc, #36]	; (d5d0 <am_hal_gpio_state_write+0x90>)
    d5ac:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    d5b0:	e7e6      	b.n	d580 <am_hal_gpio_state_write+0x40>
    d5b2:	4a04      	ldr	r2, [pc, #16]	; (d5c4 <am_hal_gpio_state_write+0x84>)
    d5b4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    d5b8:	4073      	eors	r3, r6
    d5ba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    d5be:	e7df      	b.n	d580 <am_hal_gpio_state_write+0x40>
    d5c0:	400100a8 	.word	0x400100a8
    d5c4:	400100b4 	.word	0x400100b4
    d5c8:	40010088 	.word	0x40010088
    d5cc:	40010090 	.word	0x40010090
    d5d0:	40010098 	.word	0x40010098

0000d5d4 <am_hal_interrupt_master_disable>:
    d5d4:	f3ef 8010 	mrs	r0, PRIMASK
    d5d8:	b672      	cpsid	i
    d5da:	4770      	bx	lr

0000d5dc <am_hal_interrupt_master_set>:
    d5dc:	f380 8810 	msr	PRIMASK, r0
    d5e0:	4770      	bx	lr
    d5e2:	bf00      	nop

0000d5e4 <am_hal_itm_disable>:
    d5e4:	b510      	push	{r4, lr}
    d5e6:	4b25      	ldr	r3, [pc, #148]	; (d67c <am_hal_itm_disable+0x98>)
    d5e8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    d5ec:	b9b3      	cbnz	r3, d61c <am_hal_itm_disable+0x38>
    d5ee:	4b24      	ldr	r3, [pc, #144]	; (d680 <am_hal_itm_disable+0x9c>)
    d5f0:	68da      	ldr	r2, [r3, #12]
    d5f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    d5f6:	60da      	str	r2, [r3, #12]
    d5f8:	68da      	ldr	r2, [r3, #12]
    d5fa:	01d2      	lsls	r2, r2, #7
    d5fc:	d5fc      	bpl.n	d5f8 <am_hal_itm_disable+0x14>
    d5fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    d602:	4920      	ldr	r1, [pc, #128]	; (d684 <am_hal_itm_disable+0xa0>)
    d604:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    d608:	4a1f      	ldr	r2, [pc, #124]	; (d688 <am_hal_itm_disable+0xa4>)
    d60a:	200f      	movs	r0, #15
    d60c:	f04f 31ff 	mov.w	r1, #4294967295
    d610:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    d614:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    d618:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    d61c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    d620:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    d624:	021b      	lsls	r3, r3, #8
    d626:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    d62a:	d4f9      	bmi.n	d620 <am_hal_itm_disable+0x3c>
    d62c:	f240 20f7 	movw	r0, #759	; 0x2f7
    d630:	f7ff fde2 	bl	d1f8 <am_hal_flash_delay>
    d634:	4b13      	ldr	r3, [pc, #76]	; (d684 <am_hal_itm_disable+0xa0>)
    d636:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    d63a:	4621      	mov	r1, r4
    d63c:	2064      	movs	r0, #100	; 0x64
    d63e:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    d642:	f023 0301 	bic.w	r3, r3, #1
    d646:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    d64a:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    d64e:	4b0f      	ldr	r3, [pc, #60]	; (d68c <am_hal_itm_disable+0xa8>)
    d650:	4013      	ands	r3, r2
    d652:	2b00      	cmp	r3, #0
    d654:	d1f9      	bne.n	d64a <am_hal_itm_disable+0x66>
    d656:	3801      	subs	r0, #1
    d658:	d1f1      	bne.n	d63e <am_hal_itm_disable+0x5a>
    d65a:	4a09      	ldr	r2, [pc, #36]	; (d680 <am_hal_itm_disable+0x9c>)
    d65c:	68d3      	ldr	r3, [r2, #12]
    d65e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d662:	60d3      	str	r3, [r2, #12]
    d664:	68d3      	ldr	r3, [r2, #12]
    d666:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    d66a:	d1fb      	bne.n	d664 <am_hal_itm_disable+0x80>
    d66c:	4a03      	ldr	r2, [pc, #12]	; (d67c <am_hal_itm_disable+0x98>)
    d66e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    d672:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    d676:	2b00      	cmp	r3, #0
    d678:	d1fb      	bne.n	d672 <am_hal_itm_disable+0x8e>
    d67a:	bd10      	pop	{r4, pc}
    d67c:	40020000 	.word	0x40020000
    d680:	e000edf0 	.word	0xe000edf0
    d684:	c5acce55 	.word	0xc5acce55
    d688:	00150511 	.word	0x00150511
    d68c:	00800001 	.word	0x00800001

0000d690 <am_hal_mcuctrl_info_get>:
    d690:	b4f0      	push	{r4, r5, r6, r7}
    d692:	b121      	cbz	r1, d69e <am_hal_mcuctrl_info_get+0xe>
    d694:	2801      	cmp	r0, #1
    d696:	d038      	beq.n	d70a <am_hal_mcuctrl_info_get+0x7a>
    d698:	d320      	bcc.n	d6dc <am_hal_mcuctrl_info_get+0x4c>
    d69a:	2802      	cmp	r0, #2
    d69c:	d002      	beq.n	d6a4 <am_hal_mcuctrl_info_get+0x14>
    d69e:	2006      	movs	r0, #6
    d6a0:	bcf0      	pop	{r4, r5, r6, r7}
    d6a2:	4770      	bx	lr
    d6a4:	4a41      	ldr	r2, [pc, #260]	; (d7ac <am_hal_mcuctrl_info_get+0x11c>)
    d6a6:	684d      	ldr	r5, [r1, #4]
    d6a8:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    d6ac:	694c      	ldr	r4, [r1, #20]
    d6ae:	f003 0601 	and.w	r6, r3, #1
    d6b2:	f3c3 0040 	ubfx	r0, r3, #1, #1
    d6b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d6ba:	700e      	strb	r6, [r1, #0]
    d6bc:	7208      	strb	r0, [r1, #8]
    d6be:	740b      	strb	r3, [r1, #16]
    d6c0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    d6c4:	60cb      	str	r3, [r1, #12]
    d6c6:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    d6ca:	4328      	orrs	r0, r5
    d6cc:	6048      	str	r0, [r1, #4]
    d6ce:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    d6d2:	4323      	orrs	r3, r4
    d6d4:	2000      	movs	r0, #0
    d6d6:	614b      	str	r3, [r1, #20]
    d6d8:	bcf0      	pop	{r4, r5, r6, r7}
    d6da:	4770      	bx	lr
    d6dc:	4a33      	ldr	r2, [pc, #204]	; (d7ac <am_hal_mcuctrl_info_get+0x11c>)
    d6de:	6993      	ldr	r3, [r2, #24]
    d6e0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    d6e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d6e8:	7008      	strb	r0, [r1, #0]
    d6ea:	704b      	strb	r3, [r1, #1]
    d6ec:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    d6f0:	f3c3 6381 	ubfx	r3, r3, #26, #2
    d6f4:	710b      	strb	r3, [r1, #4]
    d6f6:	6953      	ldr	r3, [r2, #20]
    d6f8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d6fc:	f003 0301 	and.w	r3, r3, #1
    d700:	2000      	movs	r0, #0
    d702:	708a      	strb	r2, [r1, #2]
    d704:	70cb      	strb	r3, [r1, #3]
    d706:	bcf0      	pop	{r4, r5, r6, r7}
    d708:	4770      	bx	lr
    d70a:	4b28      	ldr	r3, [pc, #160]	; (d7ac <am_hal_mcuctrl_info_get+0x11c>)
    d70c:	4c28      	ldr	r4, [pc, #160]	; (d7b0 <am_hal_mcuctrl_info_get+0x120>)
    d70e:	681a      	ldr	r2, [r3, #0]
    d710:	600a      	str	r2, [r1, #0]
    d712:	6858      	ldr	r0, [r3, #4]
    d714:	6048      	str	r0, [r1, #4]
    d716:	6898      	ldr	r0, [r3, #8]
    d718:	6088      	str	r0, [r1, #8]
    d71a:	68d8      	ldr	r0, [r3, #12]
    d71c:	60c8      	str	r0, [r1, #12]
    d71e:	691d      	ldr	r5, [r3, #16]
    d720:	4824      	ldr	r0, [pc, #144]	; (d7b4 <am_hal_mcuctrl_info_get+0x124>)
    d722:	610d      	str	r5, [r1, #16]
    d724:	f3c2 5703 	ubfx	r7, r2, #20, #4
    d728:	f3c2 4603 	ubfx	r6, r2, #16, #4
    d72c:	695d      	ldr	r5, [r3, #20]
    d72e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    d732:	4b21      	ldr	r3, [pc, #132]	; (d7b8 <am_hal_mcuctrl_info_get+0x128>)
    d734:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    d738:	6208      	str	r0, [r1, #32]
    d73a:	f002 0201 	and.w	r2, r2, #1
    d73e:	614d      	str	r5, [r1, #20]
    d740:	61cc      	str	r4, [r1, #28]
    d742:	618a      	str	r2, [r1, #24]
    d744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    d748:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    d74c:	b2d0      	uxtb	r0, r2
    d74e:	f004 020f 	and.w	r2, r4, #15
    d752:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    d756:	624a      	str	r2, [r1, #36]	; 0x24
    d758:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    d75c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    d760:	f3c2 1003 	ubfx	r0, r2, #4, #4
    d764:	f004 020f 	and.w	r2, r4, #15
    d768:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d76c:	628a      	str	r2, [r1, #40]	; 0x28
    d76e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    d772:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    d776:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    d77a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    d77e:	4302      	orrs	r2, r0
    d780:	62ca      	str	r2, [r1, #44]	; 0x2c
    d782:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    d786:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    d78a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    d78e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    d792:	b2c0      	uxtb	r0, r0
    d794:	0400      	lsls	r0, r0, #16
    d796:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    d79a:	b2d2      	uxtb	r2, r2
    d79c:	431a      	orrs	r2, r3
    d79e:	b2e3      	uxtb	r3, r4
    d7a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    d7a4:	630b      	str	r3, [r1, #48]	; 0x30
    d7a6:	2000      	movs	r0, #0
    d7a8:	bcf0      	pop	{r4, r5, r6, r7}
    d7aa:	4770      	bx	lr
    d7ac:	40020000 	.word	0x40020000
    d7b0:	0000e51c 	.word	0x0000e51c
    d7b4:	0000e55c 	.word	0x0000e55c
    d7b8:	f0000f00 	.word	0xf0000f00

0000d7bc <am_hal_pwrctrl_periph_enable>:
    d7bc:	b570      	push	{r4, r5, r6, lr}
    d7be:	b082      	sub	sp, #8
    d7c0:	4604      	mov	r4, r0
    d7c2:	f7ff ff07 	bl	d5d4 <am_hal_interrupt_master_disable>
    d7c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d7ca:	4d0f      	ldr	r5, [pc, #60]	; (d808 <am_hal_pwrctrl_periph_enable+0x4c>)
    d7cc:	4e0f      	ldr	r6, [pc, #60]	; (d80c <am_hal_pwrctrl_periph_enable+0x50>)
    d7ce:	9001      	str	r0, [sp, #4]
    d7d0:	00a4      	lsls	r4, r4, #2
    d7d2:	68aa      	ldr	r2, [r5, #8]
    d7d4:	5933      	ldr	r3, [r6, r4]
    d7d6:	4313      	orrs	r3, r2
    d7d8:	60ab      	str	r3, [r5, #8]
    d7da:	9801      	ldr	r0, [sp, #4]
    d7dc:	4434      	add	r4, r6
    d7de:	f7ff fefd 	bl	d5dc <am_hal_interrupt_master_set>
    d7e2:	2077      	movs	r0, #119	; 0x77
    d7e4:	f7ff fd08 	bl	d1f8 <am_hal_flash_delay>
    d7e8:	69ab      	ldr	r3, [r5, #24]
    d7ea:	6864      	ldr	r4, [r4, #4]
    d7ec:	4223      	tst	r3, r4
    d7ee:	d103      	bne.n	d7f8 <am_hal_pwrctrl_periph_enable+0x3c>
    d7f0:	2077      	movs	r0, #119	; 0x77
    d7f2:	f7ff fd01 	bl	d1f8 <am_hal_flash_delay>
    d7f6:	69ab      	ldr	r3, [r5, #24]
    d7f8:	4b03      	ldr	r3, [pc, #12]	; (d808 <am_hal_pwrctrl_periph_enable+0x4c>)
    d7fa:	699b      	ldr	r3, [r3, #24]
    d7fc:	4223      	tst	r3, r4
    d7fe:	bf0c      	ite	eq
    d800:	2001      	moveq	r0, #1
    d802:	2000      	movne	r0, #0
    d804:	b002      	add	sp, #8
    d806:	bd70      	pop	{r4, r5, r6, pc}
    d808:	40021000 	.word	0x40021000
    d80c:	0000e59c 	.word	0x0000e59c

0000d810 <am_hal_pwrctrl_periph_disable>:
    d810:	b570      	push	{r4, r5, r6, lr}
    d812:	b082      	sub	sp, #8
    d814:	4604      	mov	r4, r0
    d816:	f7ff fedd 	bl	d5d4 <am_hal_interrupt_master_disable>
    d81a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d81e:	4d10      	ldr	r5, [pc, #64]	; (d860 <am_hal_pwrctrl_periph_disable+0x50>)
    d820:	4e10      	ldr	r6, [pc, #64]	; (d864 <am_hal_pwrctrl_periph_disable+0x54>)
    d822:	9001      	str	r0, [sp, #4]
    d824:	00a4      	lsls	r4, r4, #2
    d826:	68ab      	ldr	r3, [r5, #8]
    d828:	5932      	ldr	r2, [r6, r4]
    d82a:	ea23 0302 	bic.w	r3, r3, r2
    d82e:	60ab      	str	r3, [r5, #8]
    d830:	9801      	ldr	r0, [sp, #4]
    d832:	4434      	add	r4, r6
    d834:	f7ff fed2 	bl	d5dc <am_hal_interrupt_master_set>
    d838:	2077      	movs	r0, #119	; 0x77
    d83a:	f7ff fcdd 	bl	d1f8 <am_hal_flash_delay>
    d83e:	69ab      	ldr	r3, [r5, #24]
    d840:	6864      	ldr	r4, [r4, #4]
    d842:	4223      	tst	r3, r4
    d844:	d003      	beq.n	d84e <am_hal_pwrctrl_periph_disable+0x3e>
    d846:	2077      	movs	r0, #119	; 0x77
    d848:	f7ff fcd6 	bl	d1f8 <am_hal_flash_delay>
    d84c:	69ab      	ldr	r3, [r5, #24]
    d84e:	4b04      	ldr	r3, [pc, #16]	; (d860 <am_hal_pwrctrl_periph_disable+0x50>)
    d850:	699b      	ldr	r3, [r3, #24]
    d852:	4223      	tst	r3, r4
    d854:	bf14      	ite	ne
    d856:	2001      	movne	r0, #1
    d858:	2000      	moveq	r0, #0
    d85a:	b002      	add	sp, #8
    d85c:	bd70      	pop	{r4, r5, r6, pc}
    d85e:	bf00      	nop
    d860:	40021000 	.word	0x40021000
    d864:	0000e59c 	.word	0x0000e59c

0000d868 <am_hal_pwrctrl_low_power_init>:
    d868:	b530      	push	{r4, r5, lr}
    d86a:	4b1f      	ldr	r3, [pc, #124]	; (d8e8 <am_hal_pwrctrl_low_power_init+0x80>)
    d86c:	681a      	ldr	r2, [r3, #0]
    d86e:	b083      	sub	sp, #12
    d870:	b912      	cbnz	r2, d878 <am_hal_pwrctrl_low_power_init+0x10>
    d872:	4a1e      	ldr	r2, [pc, #120]	; (d8ec <am_hal_pwrctrl_low_power_init+0x84>)
    d874:	6812      	ldr	r2, [r2, #0]
    d876:	601a      	str	r2, [r3, #0]
    d878:	4c1d      	ldr	r4, [pc, #116]	; (d8f0 <am_hal_pwrctrl_low_power_init+0x88>)
    d87a:	69a3      	ldr	r3, [r4, #24]
    d87c:	05db      	lsls	r3, r3, #23
    d87e:	d502      	bpl.n	d886 <am_hal_pwrctrl_low_power_init+0x1e>
    d880:	2000      	movs	r0, #0
    d882:	b003      	add	sp, #12
    d884:	bd30      	pop	{r4, r5, pc}
    d886:	4d1b      	ldr	r5, [pc, #108]	; (d8f4 <am_hal_pwrctrl_low_power_init+0x8c>)
    d888:	491b      	ldr	r1, [pc, #108]	; (d8f8 <am_hal_pwrctrl_low_power_init+0x90>)
    d88a:	7e2a      	ldrb	r2, [r5, #24]
    d88c:	2001      	movs	r0, #1
    d88e:	4302      	orrs	r2, r0
    d890:	2307      	movs	r3, #7
    d892:	762a      	strb	r2, [r5, #24]
    d894:	9000      	str	r0, [sp, #0]
    d896:	461a      	mov	r2, r3
    d898:	f242 7010 	movw	r0, #10000	; 0x2710
    d89c:	f7ff fcb0 	bl	d200 <am_hal_flash_delay_status_check>
    d8a0:	b110      	cbz	r0, d8a8 <am_hal_pwrctrl_low_power_init+0x40>
    d8a2:	2004      	movs	r0, #4
    d8a4:	b003      	add	sp, #12
    d8a6:	bd30      	pop	{r4, r5, pc}
    d8a8:	6823      	ldr	r3, [r4, #0]
    d8aa:	f043 0301 	orr.w	r3, r3, #1
    d8ae:	6023      	str	r3, [r4, #0]
    d8b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8b6:	6263      	str	r3, [r4, #36]	; 0x24
    d8b8:	68eb      	ldr	r3, [r5, #12]
    d8ba:	b2db      	uxtb	r3, r3
    d8bc:	2b11      	cmp	r3, #17
    d8be:	d1df      	bne.n	d880 <am_hal_pwrctrl_low_power_init+0x18>
    d8c0:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    d8c4:	f360 5356 	bfi	r3, r0, #21, #2
    d8c8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    d8cc:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    d8d0:	220f      	movs	r2, #15
    d8d2:	f362 138b 	bfi	r3, r2, #6, #6
    d8d6:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    d8da:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    d8de:	f362 0305 	bfi	r3, r2, #0, #6
    d8e2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    d8e6:	e7cc      	b.n	d882 <am_hal_pwrctrl_low_power_init+0x1a>
    d8e8:	1000112c 	.word	0x1000112c
    d8ec:	4ffff000 	.word	0x4ffff000
    d8f0:	40021000 	.word	0x40021000
    d8f4:	40020000 	.word	0x40020000
    d8f8:	40020018 	.word	0x40020018

0000d8fc <am_hal_rtc_osc_select>:
    d8fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d900:	2801      	cmp	r0, #1
    d902:	68d3      	ldr	r3, [r2, #12]
    d904:	bf0c      	ite	eq
    d906:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    d90a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    d90e:	60d3      	str	r3, [r2, #12]
    d910:	4770      	bx	lr
    d912:	bf00      	nop

0000d914 <am_hal_rtc_osc_disable>:
    d914:	4a03      	ldr	r2, [pc, #12]	; (d924 <am_hal_rtc_osc_disable+0x10>)
    d916:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d91a:	f043 0310 	orr.w	r3, r3, #16
    d91e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    d922:	4770      	bx	lr
    d924:	40004200 	.word	0x40004200

0000d928 <am_hal_sysctrl_sleep>:
    d928:	b510      	push	{r4, lr}
    d92a:	b082      	sub	sp, #8
    d92c:	4604      	mov	r4, r0
    d92e:	f7ff fe51 	bl	d5d4 <am_hal_interrupt_master_disable>
    d932:	4a0f      	ldr	r2, [pc, #60]	; (d970 <am_hal_sysctrl_sleep+0x48>)
    d934:	9001      	str	r0, [sp, #4]
    d936:	b124      	cbz	r4, d942 <am_hal_sysctrl_sleep+0x1a>
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <am_hal_sysctrl_sleep+0x4c>)
    d93a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    d93e:	07db      	lsls	r3, r3, #31
    d940:	d511      	bpl.n	d966 <am_hal_sysctrl_sleep+0x3e>
    d942:	6913      	ldr	r3, [r2, #16]
    d944:	f023 0304 	bic.w	r3, r3, #4
    d948:	6113      	str	r3, [r2, #16]
    d94a:	f3bf 8f4f 	dsb	sy
    d94e:	4a0a      	ldr	r2, [pc, #40]	; (d978 <am_hal_sysctrl_sleep+0x50>)
    d950:	4b0a      	ldr	r3, [pc, #40]	; (d97c <am_hal_sysctrl_sleep+0x54>)
    d952:	6812      	ldr	r2, [r2, #0]
    d954:	601a      	str	r2, [r3, #0]
    d956:	bf30      	wfi
    d958:	f3bf 8f6f 	isb	sy
    d95c:	9801      	ldr	r0, [sp, #4]
    d95e:	f7ff fe3d 	bl	d5dc <am_hal_interrupt_master_set>
    d962:	b002      	add	sp, #8
    d964:	bd10      	pop	{r4, pc}
    d966:	6913      	ldr	r3, [r2, #16]
    d968:	f043 0304 	orr.w	r3, r3, #4
    d96c:	6113      	str	r3, [r2, #16]
    d96e:	e7ec      	b.n	d94a <am_hal_sysctrl_sleep+0x22>
    d970:	e000ed00 	.word	0xe000ed00
    d974:	40020000 	.word	0x40020000
    d978:	5fff0000 	.word	0x5fff0000
    d97c:	10001130 	.word	0x10001130

0000d980 <am_hal_uart_initialize>:
    d980:	2801      	cmp	r0, #1
    d982:	d901      	bls.n	d988 <am_hal_uart_initialize+0x8>
    d984:	2005      	movs	r0, #5
    d986:	4770      	bx	lr
    d988:	b169      	cbz	r1, d9a6 <am_hal_uart_initialize+0x26>
    d98a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d98c:	2264      	movs	r2, #100	; 0x64
    d98e:	4e0e      	ldr	r6, [pc, #56]	; (d9c8 <am_hal_uart_initialize+0x48>)
    d990:	fb02 f200 	mul.w	r2, r2, r0
    d994:	18b4      	adds	r4, r6, r2
    d996:	4603      	mov	r3, r0
    d998:	78e0      	ldrb	r0, [r4, #3]
    d99a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    d99e:	b2fd      	uxtb	r5, r7
    d9a0:	b11d      	cbz	r5, d9aa <am_hal_uart_initialize+0x2a>
    d9a2:	2007      	movs	r0, #7
    d9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9a6:	2006      	movs	r0, #6
    d9a8:	4770      	bx	lr
    d9aa:	f040 0001 	orr.w	r0, r0, #1
    d9ae:	70e0      	strb	r0, [r4, #3]
    d9b0:	58b0      	ldr	r0, [r6, r2]
    d9b2:	f8df e018 	ldr.w	lr, [pc, #24]	; d9cc <am_hal_uart_initialize+0x4c>
    d9b6:	f36e 0017 	bfi	r0, lr, #0, #24
    d9ba:	50b0      	str	r0, [r6, r2]
    d9bc:	6263      	str	r3, [r4, #36]	; 0x24
    d9be:	7127      	strb	r7, [r4, #4]
    d9c0:	6625      	str	r5, [r4, #96]	; 0x60
    d9c2:	4628      	mov	r0, r5
    d9c4:	600c      	str	r4, [r1, #0]
    d9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9c8:	10001138 	.word	0x10001138
    d9cc:	00ea9e06 	.word	0x00ea9e06

0000d9d0 <am_hal_uart_deinitialize>:
    d9d0:	b128      	cbz	r0, d9de <am_hal_uart_deinitialize+0xe>
    d9d2:	6803      	ldr	r3, [r0, #0]
    d9d4:	4a07      	ldr	r2, [pc, #28]	; (d9f4 <am_hal_uart_deinitialize+0x24>)
    d9d6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d9da:	4293      	cmp	r3, r2
    d9dc:	d001      	beq.n	d9e2 <am_hal_uart_deinitialize+0x12>
    d9de:	2002      	movs	r0, #2
    d9e0:	4770      	bx	lr
    d9e2:	78c2      	ldrb	r2, [r0, #3]
    d9e4:	2300      	movs	r3, #0
    d9e6:	f36f 0200 	bfc	r2, #0, #1
    d9ea:	70c2      	strb	r2, [r0, #3]
    d9ec:	6243      	str	r3, [r0, #36]	; 0x24
    d9ee:	7103      	strb	r3, [r0, #4]
    d9f0:	4618      	mov	r0, r3
    d9f2:	4770      	bx	lr
    d9f4:	01ea9e06 	.word	0x01ea9e06

0000d9f8 <am_hal_uart_power_control>:
    d9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d9fc:	6804      	ldr	r4, [r0, #0]
    d9fe:	4b36      	ldr	r3, [pc, #216]	; (dad8 <am_hal_uart_power_control+0xe0>)
    da00:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    da04:	429c      	cmp	r4, r3
    da06:	b083      	sub	sp, #12
    da08:	d003      	beq.n	da12 <am_hal_uart_power_control+0x1a>
    da0a:	2002      	movs	r0, #2
    da0c:	b003      	add	sp, #12
    da0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da12:	6a47      	ldr	r7, [r0, #36]	; 0x24
    da14:	4605      	mov	r5, r0
    da16:	f107 0008 	add.w	r0, r7, #8
    da1a:	4691      	mov	r9, r2
    da1c:	460e      	mov	r6, r1
    da1e:	fa5f f880 	uxtb.w	r8, r0
    da22:	b181      	cbz	r1, da46 <am_hal_uart_power_control+0x4e>
    da24:	2902      	cmp	r1, #2
    da26:	d80c      	bhi.n	da42 <am_hal_uart_power_control+0x4a>
    da28:	b992      	cbnz	r2, da50 <am_hal_uart_power_control+0x58>
    da2a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    da2e:	371c      	adds	r7, #28
    da30:	033f      	lsls	r7, r7, #12
    da32:	f04f 33ff 	mov.w	r3, #4294967295
    da36:	647b      	str	r3, [r7, #68]	; 0x44
    da38:	4640      	mov	r0, r8
    da3a:	f7ff fee9 	bl	d810 <am_hal_pwrctrl_periph_disable>
    da3e:	2000      	movs	r0, #0
    da40:	e7e4      	b.n	da0c <am_hal_uart_power_control+0x14>
    da42:	2006      	movs	r0, #6
    da44:	e7e2      	b.n	da0c <am_hal_uart_power_control+0x14>
    da46:	b322      	cbz	r2, da92 <am_hal_uart_power_control+0x9a>
    da48:	792b      	ldrb	r3, [r5, #4]
    da4a:	bb3b      	cbnz	r3, da9c <am_hal_uart_power_control+0xa4>
    da4c:	2007      	movs	r0, #7
    da4e:	e7dd      	b.n	da0c <am_hal_uart_power_control+0x14>
    da50:	f7ff fdc0 	bl	d5d4 <am_hal_interrupt_master_disable>
    da54:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    da58:	331c      	adds	r3, #28
    da5a:	031b      	lsls	r3, r3, #12
    da5c:	9001      	str	r0, [sp, #4]
    da5e:	6a1a      	ldr	r2, [r3, #32]
    da60:	60aa      	str	r2, [r5, #8]
    da62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    da64:	60ea      	str	r2, [r5, #12]
    da66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    da68:	612a      	str	r2, [r5, #16]
    da6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    da6c:	616a      	str	r2, [r5, #20]
    da6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    da70:	61aa      	str	r2, [r5, #24]
    da72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    da74:	61ea      	str	r2, [r5, #28]
    da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    da78:	622b      	str	r3, [r5, #32]
    da7a:	2301      	movs	r3, #1
    da7c:	712b      	strb	r3, [r5, #4]
    da7e:	9801      	ldr	r0, [sp, #4]
    da80:	f7ff fdac 	bl	d5dc <am_hal_interrupt_master_set>
    da84:	682b      	ldr	r3, [r5, #0]
    da86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    da8a:	42a3      	cmp	r3, r4
    da8c:	d1d4      	bne.n	da38 <am_hal_uart_power_control+0x40>
    da8e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    da90:	e7cb      	b.n	da2a <am_hal_uart_power_control+0x32>
    da92:	4640      	mov	r0, r8
    da94:	f7ff fe92 	bl	d7bc <am_hal_pwrctrl_periph_enable>
    da98:	4648      	mov	r0, r9
    da9a:	e7b7      	b.n	da0c <am_hal_uart_power_control+0x14>
    da9c:	4640      	mov	r0, r8
    da9e:	f7ff fe8d 	bl	d7bc <am_hal_pwrctrl_periph_enable>
    daa2:	f7ff fd97 	bl	d5d4 <am_hal_interrupt_master_disable>
    daa6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    daaa:	331c      	adds	r3, #28
    daac:	031b      	lsls	r3, r3, #12
    daae:	68aa      	ldr	r2, [r5, #8]
    dab0:	9000      	str	r0, [sp, #0]
    dab2:	621a      	str	r2, [r3, #32]
    dab4:	68ea      	ldr	r2, [r5, #12]
    dab6:	625a      	str	r2, [r3, #36]	; 0x24
    dab8:	692a      	ldr	r2, [r5, #16]
    daba:	629a      	str	r2, [r3, #40]	; 0x28
    dabc:	696a      	ldr	r2, [r5, #20]
    dabe:	62da      	str	r2, [r3, #44]	; 0x2c
    dac0:	69aa      	ldr	r2, [r5, #24]
    dac2:	631a      	str	r2, [r3, #48]	; 0x30
    dac4:	69ea      	ldr	r2, [r5, #28]
    dac6:	635a      	str	r2, [r3, #52]	; 0x34
    dac8:	6a2a      	ldr	r2, [r5, #32]
    daca:	639a      	str	r2, [r3, #56]	; 0x38
    dacc:	9800      	ldr	r0, [sp, #0]
    dace:	712e      	strb	r6, [r5, #4]
    dad0:	f7ff fd84 	bl	d5dc <am_hal_interrupt_master_set>
    dad4:	4630      	mov	r0, r6
    dad6:	e799      	b.n	da0c <am_hal_uart_power_control+0x14>
    dad8:	01ea9e06 	.word	0x01ea9e06

0000dadc <am_hal_uart_configure>:
    dadc:	6803      	ldr	r3, [r0, #0]
    dade:	4a7a      	ldr	r2, [pc, #488]	; (dcc8 <am_hal_uart_configure+0x1ec>)
    dae0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dae4:	4293      	cmp	r3, r2
    dae6:	d001      	beq.n	daec <am_hal_uart_configure+0x10>
    dae8:	2002      	movs	r0, #2
    daea:	4770      	bx	lr
    daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    daf2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    daf6:	351c      	adds	r5, #28
    daf8:	032d      	lsls	r5, r5, #12
    dafa:	2700      	movs	r7, #0
    dafc:	b084      	sub	sp, #16
    dafe:	632f      	str	r7, [r5, #48]	; 0x30
    db00:	460e      	mov	r6, r1
    db02:	4604      	mov	r4, r0
    db04:	f7ff fd66 	bl	d5d4 <am_hal_interrupt_master_disable>
    db08:	9001      	str	r0, [sp, #4]
    db0a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db0c:	f043 0308 	orr.w	r3, r3, #8
    db10:	862b      	strh	r3, [r5, #48]	; 0x30
    db12:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db14:	2201      	movs	r2, #1
    db16:	f362 1306 	bfi	r3, r2, #4, #3
    db1a:	862b      	strh	r3, [r5, #48]	; 0x30
    db1c:	9801      	ldr	r0, [sp, #4]
    db1e:	f7ff fd5d 	bl	d5dc <am_hal_interrupt_master_set>
    db22:	f7ff fd57 	bl	d5d4 <am_hal_interrupt_master_disable>
    db26:	9002      	str	r0, [sp, #8]
    db28:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db2a:	f367 0300 	bfi	r3, r7, #0, #1
    db2e:	862b      	strh	r3, [r5, #48]	; 0x30
    db30:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db32:	f367 2349 	bfi	r3, r7, #9, #1
    db36:	862b      	strh	r3, [r5, #48]	; 0x30
    db38:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db3a:	f367 2308 	bfi	r3, r7, #8, #1
    db3e:	862b      	strh	r3, [r5, #48]	; 0x30
    db40:	9802      	ldr	r0, [sp, #8]
    db42:	f7ff fd4b 	bl	d5dc <am_hal_interrupt_master_set>
    db46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    db48:	f3c3 1302 	ubfx	r3, r3, #4, #3
    db4c:	3b01      	subs	r3, #1
    db4e:	2b03      	cmp	r3, #3
    db50:	d854      	bhi.n	dbfc <am_hal_uart_configure+0x120>
    db52:	e8df f003 	tbb	[pc, r3]
    db56:	020e      	.short	0x020e
    db58:	1114      	.short	0x1114
    db5a:	495c      	ldr	r1, [pc, #368]	; (dccc <am_hal_uart_configure+0x1f0>)
    db5c:	485c      	ldr	r0, [pc, #368]	; (dcd0 <am_hal_uart_configure+0x1f4>)
    db5e:	6832      	ldr	r2, [r6, #0]
    db60:	0112      	lsls	r2, r2, #4
    db62:	fbb0 f3f2 	udiv	r3, r0, r2
    db66:	b96b      	cbnz	r3, db84 <am_hal_uart_configure+0xa8>
    db68:	485a      	ldr	r0, [pc, #360]	; (dcd4 <am_hal_uart_configure+0x1f8>)
    db6a:	6623      	str	r3, [r4, #96]	; 0x60
    db6c:	b004      	add	sp, #16
    db6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db72:	4959      	ldr	r1, [pc, #356]	; (dcd8 <am_hal_uart_configure+0x1fc>)
    db74:	4859      	ldr	r0, [pc, #356]	; (dcdc <am_hal_uart_configure+0x200>)
    db76:	e7f2      	b.n	db5e <am_hal_uart_configure+0x82>
    db78:	4959      	ldr	r1, [pc, #356]	; (dce0 <am_hal_uart_configure+0x204>)
    db7a:	485a      	ldr	r0, [pc, #360]	; (dce4 <am_hal_uart_configure+0x208>)
    db7c:	e7ef      	b.n	db5e <am_hal_uart_configure+0x82>
    db7e:	495a      	ldr	r1, [pc, #360]	; (dce8 <am_hal_uart_configure+0x20c>)
    db80:	485a      	ldr	r0, [pc, #360]	; (dcec <am_hal_uart_configure+0x210>)
    db82:	e7ec      	b.n	db5e <am_hal_uart_configure+0x82>
    db84:	fbb1 f2f2 	udiv	r2, r1, r2
    db88:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    db8c:	626b      	str	r3, [r5, #36]	; 0x24
    db8e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    db92:	626b      	str	r3, [r5, #36]	; 0x24
    db94:	fbb0 f0f1 	udiv	r0, r0, r1
    db98:	62aa      	str	r2, [r5, #40]	; 0x28
    db9a:	6620      	str	r0, [r4, #96]	; 0x60
    db9c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    db9e:	f36f 338e 	bfc	r3, #14, #1
    dba2:	862b      	strh	r3, [r5, #48]	; 0x30
    dba4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dba6:	f36f 33cf 	bfc	r3, #15, #1
    dbaa:	862b      	strh	r3, [r5, #48]	; 0x30
    dbac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dbae:	6933      	ldr	r3, [r6, #16]
    dbb0:	4313      	orrs	r3, r2
    dbb2:	632b      	str	r3, [r5, #48]	; 0x30
    dbb4:	6973      	ldr	r3, [r6, #20]
    dbb6:	636b      	str	r3, [r5, #52]	; 0x34
    dbb8:	6871      	ldr	r1, [r6, #4]
    dbba:	68b3      	ldr	r3, [r6, #8]
    dbbc:	68f2      	ldr	r2, [r6, #12]
    dbbe:	430b      	orrs	r3, r1
    dbc0:	f043 0310 	orr.w	r3, r3, #16
    dbc4:	4313      	orrs	r3, r2
    dbc6:	62eb      	str	r3, [r5, #44]	; 0x2c
    dbc8:	f7ff fd04 	bl	d5d4 <am_hal_interrupt_master_disable>
    dbcc:	9003      	str	r0, [sp, #12]
    dbce:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbd0:	f043 0301 	orr.w	r3, r3, #1
    dbd4:	862b      	strh	r3, [r5, #48]	; 0x30
    dbd6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dbdc:	862b      	strh	r3, [r5, #48]	; 0x30
    dbde:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    dbe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    dbe4:	862b      	strh	r3, [r5, #48]	; 0x30
    dbe6:	9803      	ldr	r0, [sp, #12]
    dbe8:	f7ff fcf8 	bl	d5dc <am_hal_interrupt_master_set>
    dbec:	6825      	ldr	r5, [r4, #0]
    dbee:	4b36      	ldr	r3, [pc, #216]	; (dcc8 <am_hal_uart_configure+0x1ec>)
    dbf0:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    dbf4:	429d      	cmp	r5, r3
    dbf6:	d005      	beq.n	dc04 <am_hal_uart_configure+0x128>
    dbf8:	2000      	movs	r0, #0
    dbfa:	e7b7      	b.n	db6c <am_hal_uart_configure+0x90>
    dbfc:	2300      	movs	r3, #0
    dbfe:	6623      	str	r3, [r4, #96]	; 0x60
    dc00:	483b      	ldr	r0, [pc, #236]	; (dcf0 <am_hal_uart_configure+0x214>)
    dc02:	e7b3      	b.n	db6c <am_hal_uart_configure+0x90>
    dc04:	69b1      	ldr	r1, [r6, #24]
    dc06:	6a37      	ldr	r7, [r6, #32]
    dc08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    dc0c:	b109      	cbz	r1, dc12 <am_hal_uart_configure+0x136>
    dc0e:	69f3      	ldr	r3, [r6, #28]
    dc10:	bb3b      	cbnz	r3, dc62 <am_hal_uart_configure+0x186>
    dc12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc14:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc18:	f103 021c 	add.w	r2, r3, #28
    dc1c:	0312      	lsls	r2, r2, #12
    dc1e:	2100      	movs	r1, #0
    dc20:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    dc24:	6b91      	ldr	r1, [r2, #56]	; 0x38
    dc26:	f021 0120 	bic.w	r1, r1, #32
    dc2a:	6391      	str	r1, [r2, #56]	; 0x38
    dc2c:	b1b7      	cbz	r7, dc5c <am_hal_uart_configure+0x180>
    dc2e:	f1b8 0f00 	cmp.w	r8, #0
    dc32:	d12e      	bne.n	dc92 <am_hal_uart_configure+0x1b6>
    dc34:	6823      	ldr	r3, [r4, #0]
    dc36:	4a24      	ldr	r2, [pc, #144]	; (dcc8 <am_hal_uart_configure+0x1ec>)
    dc38:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc3c:	2100      	movs	r1, #0
    dc3e:	4293      	cmp	r3, r2
    dc40:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    dc44:	d1d8      	bne.n	dbf8 <am_hal_uart_configure+0x11c>
    dc46:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc48:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc4c:	331c      	adds	r3, #28
    dc4e:	031b      	lsls	r3, r3, #12
    dc50:	2000      	movs	r0, #0
    dc52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dc54:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    dc58:	639a      	str	r2, [r3, #56]	; 0x38
    dc5a:	e787      	b.n	db6c <am_hal_uart_configure+0x90>
    dc5c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    dc60:	e7f4      	b.n	dc4c <am_hal_uart_configure+0x170>
    dc62:	2201      	movs	r2, #1
    dc64:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    dc68:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dc6c:	f000 faae 	bl	e1cc <am_hal_queue_init>
    dc70:	6823      	ldr	r3, [r4, #0]
    dc72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc76:	42ab      	cmp	r3, r5
    dc78:	d1be      	bne.n	dbf8 <am_hal_uart_configure+0x11c>
    dc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dc7c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dc80:	331c      	adds	r3, #28
    dc82:	031b      	lsls	r3, r3, #12
    dc84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dc86:	f042 0220 	orr.w	r2, r2, #32
    dc8a:	639a      	str	r2, [r3, #56]	; 0x38
    dc8c:	2f00      	cmp	r7, #0
    dc8e:	d1ce      	bne.n	dc2e <am_hal_uart_configure+0x152>
    dc90:	e7d0      	b.n	dc34 <am_hal_uart_configure+0x158>
    dc92:	2201      	movs	r2, #1
    dc94:	4643      	mov	r3, r8
    dc96:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    dc9a:	4639      	mov	r1, r7
    dc9c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    dca0:	f000 fa94 	bl	e1cc <am_hal_queue_init>
    dca4:	6823      	ldr	r3, [r4, #0]
    dca6:	4a08      	ldr	r2, [pc, #32]	; (dcc8 <am_hal_uart_configure+0x1ec>)
    dca8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcac:	4293      	cmp	r3, r2
    dcae:	d1a3      	bne.n	dbf8 <am_hal_uart_configure+0x11c>
    dcb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcb2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dcb6:	331c      	adds	r3, #28
    dcb8:	031b      	lsls	r3, r3, #12
    dcba:	2000      	movs	r0, #0
    dcbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dcbe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    dcc2:	639a      	str	r2, [r3, #56]	; 0x38
    dcc4:	e752      	b.n	db6c <am_hal_uart_configure+0x90>
    dcc6:	bf00      	nop
    dcc8:	01ea9e06 	.word	0x01ea9e06
    dccc:	2dc6c000 	.word	0x2dc6c000
    dcd0:	00b71b00 	.word	0x00b71b00
    dcd4:	08000003 	.word	0x08000003
    dcd8:	5b8d8000 	.word	0x5b8d8000
    dcdc:	016e3600 	.word	0x016e3600
    dce0:	0b71b000 	.word	0x0b71b000
    dce4:	002dc6c0 	.word	0x002dc6c0
    dce8:	16e36000 	.word	0x16e36000
    dcec:	005b8d80 	.word	0x005b8d80
    dcf0:	08000002 	.word	0x08000002

0000dcf4 <am_hal_uart_transfer>:
    dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcf8:	680f      	ldr	r7, [r1, #0]
    dcfa:	b091      	sub	sp, #68	; 0x44
    dcfc:	4605      	mov	r5, r0
    dcfe:	b13f      	cbz	r7, dd10 <am_hal_uart_transfer+0x1c>
    dd00:	2f01      	cmp	r7, #1
    dd02:	bf18      	it	ne
    dd04:	2707      	movne	r7, #7
    dd06:	d024      	beq.n	dd52 <am_hal_uart_transfer+0x5e>
    dd08:	4638      	mov	r0, r7
    dd0a:	b011      	add	sp, #68	; 0x44
    dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd10:	f8d1 900c 	ldr.w	r9, [r1, #12]
    dd14:	690b      	ldr	r3, [r1, #16]
    dd16:	f8d1 a004 	ldr.w	sl, [r1, #4]
    dd1a:	688e      	ldr	r6, [r1, #8]
    dd1c:	9300      	str	r3, [sp, #0]
    dd1e:	f1b9 0f00 	cmp.w	r9, #0
    dd22:	d031      	beq.n	dd88 <am_hal_uart_transfer+0x94>
    dd24:	2e00      	cmp	r6, #0
    dd26:	f000 819c 	beq.w	e062 <am_hal_uart_transfer+0x36e>
    dd2a:	2800      	cmp	r0, #0
    dd2c:	f000 8097 	beq.w	de5e <am_hal_uart_transfer+0x16a>
    dd30:	6803      	ldr	r3, [r0, #0]
    dd32:	4aa9      	ldr	r2, [pc, #676]	; (dfd8 <am_hal_uart_transfer+0x2e4>)
    dd34:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd38:	4293      	cmp	r3, r2
    dd3a:	f000 8092 	beq.w	de62 <am_hal_uart_transfer+0x16e>
    dd3e:	46b8      	mov	r8, r7
    dd40:	9b00      	ldr	r3, [sp, #0]
    dd42:	b10b      	cbz	r3, dd48 <am_hal_uart_transfer+0x54>
    dd44:	f8c3 8000 	str.w	r8, [r3]
    dd48:	2702      	movs	r7, #2
    dd4a:	4638      	mov	r0, r7
    dd4c:	b011      	add	sp, #68	; 0x44
    dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd52:	1d0b      	adds	r3, r1, #4
    dd54:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    dd58:	f1b9 0f00 	cmp.w	r9, #0
    dd5c:	d043      	beq.n	dde6 <am_hal_uart_transfer+0xf2>
    dd5e:	2f00      	cmp	r7, #0
    dd60:	f000 8185 	beq.w	e06e <am_hal_uart_transfer+0x37a>
    dd64:	2800      	cmp	r0, #0
    dd66:	f000 80eb 	beq.w	df40 <am_hal_uart_transfer+0x24c>
    dd6a:	6802      	ldr	r2, [r0, #0]
    dd6c:	499a      	ldr	r1, [pc, #616]	; (dfd8 <am_hal_uart_transfer+0x2e4>)
    dd6e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dd72:	428a      	cmp	r2, r1
    dd74:	f000 80e7 	beq.w	df46 <am_hal_uart_transfer+0x252>
    dd78:	2600      	movs	r6, #0
    dd7a:	2702      	movs	r7, #2
    dd7c:	f1bb 0f00 	cmp.w	fp, #0
    dd80:	d0c2      	beq.n	dd08 <am_hal_uart_transfer+0x14>
    dd82:	f8cb 6000 	str.w	r6, [fp]
    dd86:	e7bf      	b.n	dd08 <am_hal_uart_transfer+0x14>
    dd88:	2800      	cmp	r0, #0
    dd8a:	d0dd      	beq.n	dd48 <am_hal_uart_transfer+0x54>
    dd8c:	6803      	ldr	r3, [r0, #0]
    dd8e:	4a92      	ldr	r2, [pc, #584]	; (dfd8 <am_hal_uart_transfer+0x2e4>)
    dd90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd94:	4293      	cmp	r3, r2
    dd96:	d1d7      	bne.n	dd48 <am_hal_uart_transfer+0x54>
    dd98:	9b00      	ldr	r3, [sp, #0]
    dd9a:	b10b      	cbz	r3, dda0 <am_hal_uart_transfer+0xac>
    dd9c:	f8c3 9000 	str.w	r9, [r3]
    dda0:	b1fe      	cbz	r6, dde2 <am_hal_uart_transfer+0xee>
    dda2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dda6:	2b00      	cmp	r3, #0
    dda8:	f040 8165 	bne.w	e076 <am_hal_uart_transfer+0x382>
    ddac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ddae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ddb2:	311c      	adds	r1, #28
    ddb4:	0309      	lsls	r1, r1, #12
    ddb6:	698a      	ldr	r2, [r1, #24]
    ddb8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ddbc:	2a00      	cmp	r2, #0
    ddbe:	f040 818d 	bne.w	e0dc <am_hal_uart_transfer+0x3e8>
    ddc2:	f10a 33ff 	add.w	r3, sl, #4294967295
    ddc6:	e003      	b.n	ddd0 <am_hal_uart_transfer+0xdc>
    ddc8:	6988      	ldr	r0, [r1, #24]
    ddca:	0680      	lsls	r0, r0, #26
    ddcc:	f100 8151 	bmi.w	e072 <am_hal_uart_transfer+0x37e>
    ddd0:	3201      	adds	r2, #1
    ddd2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    ddd6:	6008      	str	r0, [r1, #0]
    ddd8:	4296      	cmp	r6, r2
    ddda:	d1f5      	bne.n	ddc8 <am_hal_uart_transfer+0xd4>
    dddc:	9b00      	ldr	r3, [sp, #0]
    ddde:	b103      	cbz	r3, dde2 <am_hal_uart_transfer+0xee>
    dde0:	601e      	str	r6, [r3, #0]
    dde2:	2700      	movs	r7, #0
    dde4:	e790      	b.n	dd08 <am_hal_uart_transfer+0x14>
    dde6:	2800      	cmp	r0, #0
    dde8:	d0ae      	beq.n	dd48 <am_hal_uart_transfer+0x54>
    ddea:	6802      	ldr	r2, [r0, #0]
    ddec:	497a      	ldr	r1, [pc, #488]	; (dfd8 <am_hal_uart_transfer+0x2e4>)
    ddee:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ddf2:	428a      	cmp	r2, r1
    ddf4:	d1a8      	bne.n	dd48 <am_hal_uart_transfer+0x54>
    ddf6:	f1bb 0f00 	cmp.w	fp, #0
    ddfa:	d001      	beq.n	de00 <am_hal_uart_transfer+0x10c>
    ddfc:	f8cb 9000 	str.w	r9, [fp]
    de00:	2f00      	cmp	r7, #0
    de02:	d0ee      	beq.n	dde2 <am_hal_uart_transfer+0xee>
    de04:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    de08:	2c00      	cmp	r4, #0
    de0a:	f040 816c 	bne.w	e0e6 <am_hal_uart_transfer+0x3f2>
    de0e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    de10:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    de14:	321c      	adds	r2, #28
    de16:	0312      	lsls	r2, r2, #12
    de18:	6990      	ldr	r0, [r2, #24]
    de1a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    de1e:	2800      	cmp	r0, #0
    de20:	f040 819d 	bne.w	e15e <am_hal_uart_transfer+0x46a>
    de24:	6811      	ldr	r1, [r2, #0]
    de26:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    de2a:	bf08      	it	eq
    de2c:	f103 33ff 	addeq.w	r3, r3, #4294967295
    de30:	d008      	beq.n	de44 <am_hal_uart_transfer+0x150>
    de32:	e190      	b.n	e156 <am_hal_uart_transfer+0x462>
    de34:	6991      	ldr	r1, [r2, #24]
    de36:	06c8      	lsls	r0, r1, #27
    de38:	d409      	bmi.n	de4e <am_hal_uart_transfer+0x15a>
    de3a:	6811      	ldr	r1, [r2, #0]
    de3c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    de40:	f040 814e 	bne.w	e0e0 <am_hal_uart_transfer+0x3ec>
    de44:	3401      	adds	r4, #1
    de46:	42a7      	cmp	r7, r4
    de48:	f803 1f01 	strb.w	r1, [r3, #1]!
    de4c:	d1f2      	bne.n	de34 <am_hal_uart_transfer+0x140>
    de4e:	2700      	movs	r7, #0
    de50:	f1bb 0f00 	cmp.w	fp, #0
    de54:	f43f af58 	beq.w	dd08 <am_hal_uart_transfer+0x14>
    de58:	f8cb 4000 	str.w	r4, [fp]
    de5c:	e754      	b.n	dd08 <am_hal_uart_transfer+0x14>
    de5e:	4680      	mov	r8, r0
    de60:	e76e      	b.n	dd40 <am_hal_uart_transfer+0x4c>
    de62:	9301      	str	r3, [sp, #4]
    de64:	4651      	mov	r1, sl
    de66:	46bb      	mov	fp, r7
    de68:	46b8      	mov	r8, r7
    de6a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    de6e:	b9f2      	cbnz	r2, deae <am_hal_uart_transfer+0x1ba>
    de70:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    de72:	b19e      	cbz	r6, de9c <am_hal_uart_transfer+0x1a8>
    de74:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    de78:	321c      	adds	r2, #28
    de7a:	0312      	lsls	r2, r2, #12
    de7c:	3901      	subs	r1, #1
    de7e:	6994      	ldr	r4, [r2, #24]
    de80:	f3c4 1440 	ubfx	r4, r4, #5, #1
    de84:	b11c      	cbz	r4, de8e <am_hal_uart_transfer+0x19a>
    de86:	e047      	b.n	df18 <am_hal_uart_transfer+0x224>
    de88:	6993      	ldr	r3, [r2, #24]
    de8a:	069b      	lsls	r3, r3, #26
    de8c:	d441      	bmi.n	df12 <am_hal_uart_transfer+0x21e>
    de8e:	3401      	adds	r4, #1
    de90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    de94:	6013      	str	r3, [r2, #0]
    de96:	42b4      	cmp	r4, r6
    de98:	d1f6      	bne.n	de88 <am_hal_uart_transfer+0x194>
    de9a:	44a0      	add	r8, r4
    de9c:	9b00      	ldr	r3, [sp, #0]
    de9e:	2b00      	cmp	r3, #0
    dea0:	d09f      	beq.n	dde2 <am_hal_uart_transfer+0xee>
    dea2:	4638      	mov	r0, r7
    dea4:	f8c3 8000 	str.w	r8, [r3]
    dea8:	b011      	add	sp, #68	; 0x44
    deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deae:	6baa      	ldr	r2, [r5, #56]	; 0x38
    deb0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    deb2:	1b14      	subs	r4, r2, r4
    deb4:	42b4      	cmp	r4, r6
    deb6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    deba:	bf28      	it	cs
    debc:	4634      	movcs	r4, r6
    debe:	4622      	mov	r2, r4
    dec0:	4618      	mov	r0, r3
    dec2:	9302      	str	r3, [sp, #8]
    dec4:	f000 f98e 	bl	e1e4 <am_hal_queue_item_add>
    dec8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    deca:	9303      	str	r3, [sp, #12]
    decc:	f7ff fb82 	bl	d5d4 <am_hal_interrupt_master_disable>
    ded0:	9b03      	ldr	r3, [sp, #12]
    ded2:	9008      	str	r0, [sp, #32]
    ded4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ded8:	331c      	adds	r3, #28
    deda:	031b      	lsls	r3, r3, #12
    dedc:	9303      	str	r3, [sp, #12]
    dede:	e00d      	b.n	defc <am_hal_uart_transfer+0x208>
    dee0:	f000 f9b8 	bl	e254 <am_hal_queue_item_get>
    dee4:	b190      	cbz	r0, df0c <am_hal_uart_transfer+0x218>
    dee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dee8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    deec:	331c      	adds	r3, #28
    deee:	031b      	lsls	r3, r3, #12
    def0:	699a      	ldr	r2, [r3, #24]
    def2:	0692      	lsls	r2, r2, #26
    def4:	bf5c      	itt	pl
    def6:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    defa:	601a      	strpl	r2, [r3, #0]
    defc:	9b03      	ldr	r3, [sp, #12]
    defe:	9802      	ldr	r0, [sp, #8]
    df00:	699b      	ldr	r3, [r3, #24]
    df02:	069b      	lsls	r3, r3, #26
    df04:	f04f 0201 	mov.w	r2, #1
    df08:	a907      	add	r1, sp, #28
    df0a:	d5e9      	bpl.n	dee0 <am_hal_uart_transfer+0x1ec>
    df0c:	9808      	ldr	r0, [sp, #32]
    df0e:	f7ff fb65 	bl	d5dc <am_hal_interrupt_master_set>
    df12:	1b36      	subs	r6, r6, r4
    df14:	44a0      	add	r8, r4
    df16:	d0c1      	beq.n	de9c <am_hal_uart_transfer+0x1a8>
    df18:	2001      	movs	r0, #1
    df1a:	f7ff f96d 	bl	d1f8 <am_hal_flash_delay>
    df1e:	f1b9 3fff 	cmp.w	r9, #4294967295
    df22:	d001      	beq.n	df28 <am_hal_uart_transfer+0x234>
    df24:	f10b 0b01 	add.w	fp, fp, #1
    df28:	45d9      	cmp	r9, fp
    df2a:	d9b7      	bls.n	de9c <am_hal_uart_transfer+0x1a8>
    df2c:	682a      	ldr	r2, [r5, #0]
    df2e:	9b01      	ldr	r3, [sp, #4]
    df30:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    df34:	429a      	cmp	r2, r3
    df36:	eb0a 0108 	add.w	r1, sl, r8
    df3a:	f47f af01 	bne.w	dd40 <am_hal_uart_transfer+0x4c>
    df3e:	e794      	b.n	de6a <am_hal_uart_transfer+0x176>
    df40:	4606      	mov	r6, r0
    df42:	2702      	movs	r7, #2
    df44:	e71a      	b.n	dd7c <am_hal_uart_transfer+0x88>
    df46:	9200      	str	r2, [sp, #0]
    df48:	f100 0248 	add.w	r2, r0, #72	; 0x48
    df4c:	f04f 0a00 	mov.w	sl, #0
    df50:	9202      	str	r2, [sp, #8]
    df52:	465a      	mov	r2, fp
    df54:	4698      	mov	r8, r3
    df56:	469b      	mov	fp, r3
    df58:	4656      	mov	r6, sl
    df5a:	4613      	mov	r3, r2
    df5c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    df60:	2a00      	cmp	r2, #0
    df62:	d152      	bne.n	e00a <am_hal_uart_transfer+0x316>
    df64:	6a69      	ldr	r1, [r5, #36]	; 0x24
    df66:	b3a7      	cbz	r7, dfd2 <am_hal_uart_transfer+0x2de>
    df68:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    df6c:	311c      	adds	r1, #28
    df6e:	0309      	lsls	r1, r1, #12
    df70:	698a      	ldr	r2, [r1, #24]
    df72:	06d0      	lsls	r0, r2, #27
    df74:	d432      	bmi.n	dfdc <am_hal_uart_transfer+0x2e8>
    df76:	680a      	ldr	r2, [r1, #0]
    df78:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    df7c:	f040 80aa 	bne.w	e0d4 <am_hal_uart_transfer+0x3e0>
    df80:	f108 38ff 	add.w	r8, r8, #4294967295
    df84:	e006      	b.n	df94 <am_hal_uart_transfer+0x2a0>
    df86:	698a      	ldr	r2, [r1, #24]
    df88:	06d2      	lsls	r2, r2, #27
    df8a:	d41f      	bmi.n	dfcc <am_hal_uart_transfer+0x2d8>
    df8c:	680a      	ldr	r2, [r1, #0]
    df8e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    df92:	d161      	bne.n	e058 <am_hal_uart_transfer+0x364>
    df94:	3401      	adds	r4, #1
    df96:	42bc      	cmp	r4, r7
    df98:	f808 2f01 	strb.w	r2, [r8, #1]!
    df9c:	d1f3      	bne.n	df86 <am_hal_uart_transfer+0x292>
    df9e:	469b      	mov	fp, r3
    dfa0:	4426      	add	r6, r4
    dfa2:	f1bb 0f00 	cmp.w	fp, #0
    dfa6:	f43f af1c 	beq.w	dde2 <am_hal_uart_transfer+0xee>
    dfaa:	f8cb 6000 	str.w	r6, [fp]
    dfae:	2700      	movs	r7, #0
    dfb0:	e6aa      	b.n	dd08 <am_hal_uart_transfer+0x14>
    dfb2:	9807      	ldr	r0, [sp, #28]
    dfb4:	f7ff fb12 	bl	d5dc <am_hal_interrupt_master_set>
    dfb8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    dfba:	9802      	ldr	r0, [sp, #8]
    dfbc:	42bc      	cmp	r4, r7
    dfbe:	bf28      	it	cs
    dfc0:	463c      	movcs	r4, r7
    dfc2:	4641      	mov	r1, r8
    dfc4:	4622      	mov	r2, r4
    dfc6:	f000 f945 	bl	e254 <am_hal_queue_item_get>
    dfca:	9b01      	ldr	r3, [sp, #4]
    dfcc:	1b3f      	subs	r7, r7, r4
    dfce:	4426      	add	r6, r4
    dfd0:	d104      	bne.n	dfdc <am_hal_uart_transfer+0x2e8>
    dfd2:	469b      	mov	fp, r3
    dfd4:	e7e5      	b.n	dfa2 <am_hal_uart_transfer+0x2ae>
    dfd6:	bf00      	nop
    dfd8:	01ea9e06 	.word	0x01ea9e06
    dfdc:	2001      	movs	r0, #1
    dfde:	9301      	str	r3, [sp, #4]
    dfe0:	f7ff f90a 	bl	d1f8 <am_hal_flash_delay>
    dfe4:	f1b9 3fff 	cmp.w	r9, #4294967295
    dfe8:	9b01      	ldr	r3, [sp, #4]
    dfea:	d001      	beq.n	dff0 <am_hal_uart_transfer+0x2fc>
    dfec:	f10a 0a01 	add.w	sl, sl, #1
    dff0:	45d1      	cmp	r9, sl
    dff2:	d9ee      	bls.n	dfd2 <am_hal_uart_transfer+0x2de>
    dff4:	682a      	ldr	r2, [r5, #0]
    dff6:	9900      	ldr	r1, [sp, #0]
    dff8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dffc:	428a      	cmp	r2, r1
    dffe:	eb0b 0806 	add.w	r8, fp, r6
    e002:	d0ab      	beq.n	df5c <am_hal_uart_transfer+0x268>
    e004:	469b      	mov	fp, r3
    e006:	2702      	movs	r7, #2
    e008:	e6b8      	b.n	dd7c <am_hal_uart_transfer+0x88>
    e00a:	9301      	str	r3, [sp, #4]
    e00c:	f7ff fae2 	bl	d5d4 <am_hal_interrupt_master_disable>
    e010:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e012:	9007      	str	r0, [sp, #28]
    e014:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e018:	301c      	adds	r0, #28
    e01a:	9b01      	ldr	r3, [sp, #4]
    e01c:	0300      	lsls	r0, r0, #12
    e01e:	ac08      	add	r4, sp, #32
    e020:	2200      	movs	r2, #0
    e022:	6981      	ldr	r1, [r0, #24]
    e024:	06c9      	lsls	r1, r1, #27
    e026:	d409      	bmi.n	e03c <am_hal_uart_transfer+0x348>
    e028:	6801      	ldr	r1, [r0, #0]
    e02a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e02e:	f102 0201 	add.w	r2, r2, #1
    e032:	d118      	bne.n	e066 <am_hal_uart_transfer+0x372>
    e034:	2a20      	cmp	r2, #32
    e036:	f804 1b01 	strb.w	r1, [r4], #1
    e03a:	d1f2      	bne.n	e022 <am_hal_uart_transfer+0x32e>
    e03c:	a908      	add	r1, sp, #32
    e03e:	9802      	ldr	r0, [sp, #8]
    e040:	9301      	str	r3, [sp, #4]
    e042:	f000 f8cf 	bl	e1e4 <am_hal_queue_item_add>
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	2800      	cmp	r0, #0
    e04a:	d1b2      	bne.n	dfb2 <am_hal_uart_transfer+0x2be>
    e04c:	4f45      	ldr	r7, [pc, #276]	; (e164 <am_hal_uart_transfer+0x470>)
    e04e:	469b      	mov	fp, r3
    e050:	9807      	ldr	r0, [sp, #28]
    e052:	f7ff fac3 	bl	d5dc <am_hal_interrupt_master_set>
    e056:	e691      	b.n	dd7c <am_hal_uart_transfer+0x88>
    e058:	469b      	mov	fp, r3
    e05a:	4426      	add	r6, r4
    e05c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e060:	e68c      	b.n	dd7c <am_hal_uart_transfer+0x88>
    e062:	46b8      	mov	r8, r7
    e064:	e71a      	b.n	de9c <am_hal_uart_transfer+0x1a8>
    e066:	469b      	mov	fp, r3
    e068:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e06c:	e7f0      	b.n	e050 <am_hal_uart_transfer+0x35c>
    e06e:	463e      	mov	r6, r7
    e070:	e797      	b.n	dfa2 <am_hal_uart_transfer+0x2ae>
    e072:	4616      	mov	r6, r2
    e074:	e6b2      	b.n	dddc <am_hal_uart_transfer+0xe8>
    e076:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e078:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e07a:	1a9b      	subs	r3, r3, r2
    e07c:	429e      	cmp	r6, r3
    e07e:	bf28      	it	cs
    e080:	461e      	movcs	r6, r3
    e082:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e086:	4651      	mov	r1, sl
    e088:	4632      	mov	r2, r6
    e08a:	4620      	mov	r0, r4
    e08c:	f000 f8aa 	bl	e1e4 <am_hal_queue_item_add>
    e090:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e092:	f7ff fa9f 	bl	d5d4 <am_hal_interrupt_master_disable>
    e096:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e09a:	371c      	adds	r7, #28
    e09c:	033f      	lsls	r7, r7, #12
    e09e:	9005      	str	r0, [sp, #20]
    e0a0:	e00d      	b.n	e0be <am_hal_uart_transfer+0x3ca>
    e0a2:	f000 f8d7 	bl	e254 <am_hal_queue_item_get>
    e0a6:	b188      	cbz	r0, e0cc <am_hal_uart_transfer+0x3d8>
    e0a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e0aa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e0ae:	331c      	adds	r3, #28
    e0b0:	031b      	lsls	r3, r3, #12
    e0b2:	699a      	ldr	r2, [r3, #24]
    e0b4:	0692      	lsls	r2, r2, #26
    e0b6:	bf5c      	itt	pl
    e0b8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e0bc:	601a      	strpl	r2, [r3, #0]
    e0be:	69bb      	ldr	r3, [r7, #24]
    e0c0:	069b      	lsls	r3, r3, #26
    e0c2:	f04f 0201 	mov.w	r2, #1
    e0c6:	a908      	add	r1, sp, #32
    e0c8:	4620      	mov	r0, r4
    e0ca:	d5ea      	bpl.n	e0a2 <am_hal_uart_transfer+0x3ae>
    e0cc:	9805      	ldr	r0, [sp, #20]
    e0ce:	f7ff fa85 	bl	d5dc <am_hal_interrupt_master_set>
    e0d2:	e683      	b.n	dddc <am_hal_uart_transfer+0xe8>
    e0d4:	469b      	mov	fp, r3
    e0d6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e0da:	e64f      	b.n	dd7c <am_hal_uart_transfer+0x88>
    e0dc:	461e      	mov	r6, r3
    e0de:	e67d      	b.n	dddc <am_hal_uart_transfer+0xe8>
    e0e0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e0e4:	e6b4      	b.n	de50 <am_hal_uart_transfer+0x15c>
    e0e6:	9300      	str	r3, [sp, #0]
    e0e8:	f7ff fa74 	bl	d5d4 <am_hal_interrupt_master_disable>
    e0ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e0ee:	9006      	str	r0, [sp, #24]
    e0f0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e0f4:	321c      	adds	r2, #28
    e0f6:	0311      	lsls	r1, r2, #12
    e0f8:	a808      	add	r0, sp, #32
    e0fa:	2200      	movs	r2, #0
    e0fc:	9b00      	ldr	r3, [sp, #0]
    e0fe:	e009      	b.n	e114 <am_hal_uart_transfer+0x420>
    e100:	680c      	ldr	r4, [r1, #0]
    e102:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e106:	f102 0201 	add.w	r2, r2, #1
    e10a:	d121      	bne.n	e150 <am_hal_uart_transfer+0x45c>
    e10c:	2a20      	cmp	r2, #32
    e10e:	f800 4b01 	strb.w	r4, [r0], #1
    e112:	d002      	beq.n	e11a <am_hal_uart_transfer+0x426>
    e114:	698c      	ldr	r4, [r1, #24]
    e116:	06e4      	lsls	r4, r4, #27
    e118:	d5f2      	bpl.n	e100 <am_hal_uart_transfer+0x40c>
    e11a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    e11e:	a908      	add	r1, sp, #32
    e120:	4630      	mov	r0, r6
    e122:	9300      	str	r3, [sp, #0]
    e124:	f000 f85e 	bl	e1e4 <am_hal_queue_item_add>
    e128:	b920      	cbnz	r0, e134 <am_hal_uart_transfer+0x440>
    e12a:	4f0e      	ldr	r7, [pc, #56]	; (e164 <am_hal_uart_transfer+0x470>)
    e12c:	9806      	ldr	r0, [sp, #24]
    e12e:	f7ff fa55 	bl	d5dc <am_hal_interrupt_master_set>
    e132:	e5e9      	b.n	dd08 <am_hal_uart_transfer+0x14>
    e134:	9806      	ldr	r0, [sp, #24]
    e136:	f7ff fa51 	bl	d5dc <am_hal_interrupt_master_set>
    e13a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e13c:	9b00      	ldr	r3, [sp, #0]
    e13e:	42bc      	cmp	r4, r7
    e140:	bf28      	it	cs
    e142:	463c      	movcs	r4, r7
    e144:	4619      	mov	r1, r3
    e146:	4630      	mov	r0, r6
    e148:	4622      	mov	r2, r4
    e14a:	f000 f883 	bl	e254 <am_hal_queue_item_get>
    e14e:	e67e      	b.n	de4e <am_hal_uart_transfer+0x15a>
    e150:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e154:	e7ea      	b.n	e12c <am_hal_uart_transfer+0x438>
    e156:	4604      	mov	r4, r0
    e158:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e15c:	e678      	b.n	de50 <am_hal_uart_transfer+0x15c>
    e15e:	4627      	mov	r7, r4
    e160:	e676      	b.n	de50 <am_hal_uart_transfer+0x15c>
    e162:	bf00      	nop
    e164:	08000001 	.word	0x08000001

0000e168 <am_hal_uart_tx_flush>:
    e168:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e16c:	b570      	push	{r4, r5, r6, lr}
    e16e:	4604      	mov	r4, r0
    e170:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e172:	b183      	cbz	r3, e196 <am_hal_uart_tx_flush+0x2e>
    e174:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e176:	b173      	cbz	r3, e196 <am_hal_uart_tx_flush+0x2e>
    e178:	4e13      	ldr	r6, [pc, #76]	; (e1c8 <am_hal_uart_tx_flush+0x60>)
    e17a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e17c:	fbb6 f0f0 	udiv	r0, r6, r0
    e180:	2802      	cmp	r0, #2
    e182:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e186:	bf8c      	ite	hi
    e188:	3829      	subhi	r0, #41	; 0x29
    e18a:	2001      	movls	r0, #1
    e18c:	f7ff f834 	bl	d1f8 <am_hal_flash_delay>
    e190:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e192:	2b00      	cmp	r3, #0
    e194:	d1f1      	bne.n	e17a <am_hal_uart_tx_flush+0x12>
    e196:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e19a:	351c      	adds	r5, #28
    e19c:	032d      	lsls	r5, r5, #12
    e19e:	69ab      	ldr	r3, [r5, #24]
    e1a0:	071a      	lsls	r2, r3, #28
    e1a2:	d50e      	bpl.n	e1c2 <am_hal_uart_tx_flush+0x5a>
    e1a4:	4e08      	ldr	r6, [pc, #32]	; (e1c8 <am_hal_uart_tx_flush+0x60>)
    e1a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e1a8:	fbb6 f0f0 	udiv	r0, r6, r0
    e1ac:	2802      	cmp	r0, #2
    e1ae:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e1b2:	bf8c      	ite	hi
    e1b4:	3829      	subhi	r0, #41	; 0x29
    e1b6:	2001      	movls	r0, #1
    e1b8:	f7ff f81e 	bl	d1f8 <am_hal_flash_delay>
    e1bc:	69ab      	ldr	r3, [r5, #24]
    e1be:	071b      	lsls	r3, r3, #28
    e1c0:	d4f1      	bmi.n	e1a6 <am_hal_uart_tx_flush+0x3e>
    e1c2:	2000      	movs	r0, #0
    e1c4:	bd70      	pop	{r4, r5, r6, pc}
    e1c6:	bf00      	nop
    e1c8:	00b71b00 	.word	0x00b71b00

0000e1cc <am_hal_queue_init>:
    e1cc:	b410      	push	{r4}
    e1ce:	2400      	movs	r4, #0
    e1d0:	6004      	str	r4, [r0, #0]
    e1d2:	6044      	str	r4, [r0, #4]
    e1d4:	6084      	str	r4, [r0, #8]
    e1d6:	60c3      	str	r3, [r0, #12]
    e1d8:	6102      	str	r2, [r0, #16]
    e1da:	6141      	str	r1, [r0, #20]
    e1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    e1e0:	4770      	bx	lr
    e1e2:	bf00      	nop

0000e1e4 <am_hal_queue_item_add>:
    e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1e6:	4604      	mov	r4, r0
    e1e8:	6906      	ldr	r6, [r0, #16]
    e1ea:	b083      	sub	sp, #12
    e1ec:	fb06 f602 	mul.w	r6, r6, r2
    e1f0:	460d      	mov	r5, r1
    e1f2:	f7ff f9ef 	bl	d5d4 <am_hal_interrupt_master_disable>
    e1f6:	68e7      	ldr	r7, [r4, #12]
    e1f8:	68a2      	ldr	r2, [r4, #8]
    e1fa:	9001      	str	r0, [sp, #4]
    e1fc:	1abb      	subs	r3, r7, r2
    e1fe:	429e      	cmp	r6, r3
    e200:	d826      	bhi.n	e250 <am_hal_queue_item_add+0x6c>
    e202:	b196      	cbz	r6, e22a <am_hal_queue_item_add+0x46>
    e204:	6823      	ldr	r3, [r4, #0]
    e206:	4629      	mov	r1, r5
    e208:	b1c5      	cbz	r5, e23c <am_hal_queue_item_add+0x58>
    e20a:	19af      	adds	r7, r5, r6
    e20c:	6962      	ldr	r2, [r4, #20]
    e20e:	f811 0b01 	ldrb.w	r0, [r1], #1
    e212:	54d0      	strb	r0, [r2, r3]
    e214:	6823      	ldr	r3, [r4, #0]
    e216:	68e5      	ldr	r5, [r4, #12]
    e218:	3301      	adds	r3, #1
    e21a:	42b9      	cmp	r1, r7
    e21c:	fbb3 f0f5 	udiv	r0, r3, r5
    e220:	fb05 3310 	mls	r3, r5, r0, r3
    e224:	6023      	str	r3, [r4, #0]
    e226:	d1f1      	bne.n	e20c <am_hal_queue_item_add+0x28>
    e228:	68a2      	ldr	r2, [r4, #8]
    e22a:	4432      	add	r2, r6
    e22c:	60a2      	str	r2, [r4, #8]
    e22e:	2401      	movs	r4, #1
    e230:	9801      	ldr	r0, [sp, #4]
    e232:	f7ff f9d3 	bl	d5dc <am_hal_interrupt_master_set>
    e236:	4620      	mov	r0, r4
    e238:	b003      	add	sp, #12
    e23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e23c:	3101      	adds	r1, #1
    e23e:	3301      	adds	r3, #1
    e240:	428e      	cmp	r6, r1
    e242:	fbb3 f0f7 	udiv	r0, r3, r7
    e246:	fb07 3310 	mls	r3, r7, r0, r3
    e24a:	d1f7      	bne.n	e23c <am_hal_queue_item_add+0x58>
    e24c:	6023      	str	r3, [r4, #0]
    e24e:	e7ec      	b.n	e22a <am_hal_queue_item_add+0x46>
    e250:	2400      	movs	r4, #0
    e252:	e7ed      	b.n	e230 <am_hal_queue_item_add+0x4c>

0000e254 <am_hal_queue_item_get>:
    e254:	b5f0      	push	{r4, r5, r6, r7, lr}
    e256:	4604      	mov	r4, r0
    e258:	6906      	ldr	r6, [r0, #16]
    e25a:	b083      	sub	sp, #12
    e25c:	fb06 f602 	mul.w	r6, r6, r2
    e260:	460d      	mov	r5, r1
    e262:	f7ff f9b7 	bl	d5d4 <am_hal_interrupt_master_disable>
    e266:	68a2      	ldr	r2, [r4, #8]
    e268:	9001      	str	r0, [sp, #4]
    e26a:	4296      	cmp	r6, r2
    e26c:	d81c      	bhi.n	e2a8 <am_hal_queue_item_get+0x54>
    e26e:	b196      	cbz	r6, e296 <am_hal_queue_item_get+0x42>
    e270:	6863      	ldr	r3, [r4, #4]
    e272:	b1dd      	cbz	r5, e2ac <am_hal_queue_item_get+0x58>
    e274:	4629      	mov	r1, r5
    e276:	19af      	adds	r7, r5, r6
    e278:	6962      	ldr	r2, [r4, #20]
    e27a:	5cd3      	ldrb	r3, [r2, r3]
    e27c:	f801 3b01 	strb.w	r3, [r1], #1
    e280:	6863      	ldr	r3, [r4, #4]
    e282:	68e5      	ldr	r5, [r4, #12]
    e284:	3301      	adds	r3, #1
    e286:	428f      	cmp	r7, r1
    e288:	fbb3 f0f5 	udiv	r0, r3, r5
    e28c:	fb05 3310 	mls	r3, r5, r0, r3
    e290:	6063      	str	r3, [r4, #4]
    e292:	d1f1      	bne.n	e278 <am_hal_queue_item_get+0x24>
    e294:	68a2      	ldr	r2, [r4, #8]
    e296:	1b92      	subs	r2, r2, r6
    e298:	60a2      	str	r2, [r4, #8]
    e29a:	2401      	movs	r4, #1
    e29c:	9801      	ldr	r0, [sp, #4]
    e29e:	f7ff f99d 	bl	d5dc <am_hal_interrupt_master_set>
    e2a2:	4620      	mov	r0, r4
    e2a4:	b003      	add	sp, #12
    e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2a8:	2400      	movs	r4, #0
    e2aa:	e7f7      	b.n	e29c <am_hal_queue_item_get+0x48>
    e2ac:	68e0      	ldr	r0, [r4, #12]
    e2ae:	4629      	mov	r1, r5
    e2b0:	3101      	adds	r1, #1
    e2b2:	3301      	adds	r3, #1
    e2b4:	428e      	cmp	r6, r1
    e2b6:	fbb3 f5f0 	udiv	r5, r3, r0
    e2ba:	fb00 3315 	mls	r3, r0, r5, r3
    e2be:	d1f7      	bne.n	e2b0 <am_hal_queue_item_get+0x5c>
    e2c0:	6063      	str	r3, [r4, #4]
    e2c2:	e7e8      	b.n	e296 <am_hal_queue_item_get+0x42>
    e2c4:	72617053 	.word	0x72617053
    e2c8:	6e75466b 	.word	0x6e75466b
    e2cc:	67644520 	.word	0x67644520
    e2d0:	6f422065 	.word	0x6f422065
    e2d4:	20647261 	.word	0x20647261
    e2d8:	74736554 	.word	0x74736554
    e2dc:	0000000a 	.word	0x0000000a
    e2e0:	353a3331 	.word	0x353a3331
    e2e4:	38313a31 	.word	0x38313a31
    e2e8:	00000000 	.word	0x00000000
    e2ec:	20626546 	.word	0x20626546
    e2f0:	32203820 	.word	0x32203820
    e2f4:	00393130 	.word	0x00393130
    e2f8:	706d6f43 	.word	0x706d6f43
    e2fc:	64656c69 	.word	0x64656c69
    e300:	206e6f20 	.word	0x206e6f20
    e304:	202c7325 	.word	0x202c7325
    e308:	0a0a7325 	.word	0x0a0a7325
    e30c:	00000000 	.word	0x00000000
    e310:	72617053 	.word	0x72617053
    e314:	6e75466b 	.word	0x6e75466b
    e318:	67644520 	.word	0x67644520
    e31c:	65442065 	.word	0x65442065
    e320:	20677562 	.word	0x20677562
    e324:	7074754f 	.word	0x7074754f
    e328:	28207475 	.word	0x28207475
    e32c:	54524155 	.word	0x54524155
    e330:	000a0d29 	.word	0x000a0d29
    e334:	6c6c6548 	.word	0x6c6c6548
    e338:	57202c6f 	.word	0x57202c6f
    e33c:	646c726f 	.word	0x646c726f
    e340:	000a0d21 	.word	0x000a0d21
    e344:	756c6156 	.word	0x756c6156
    e348:	6e6f2065 	.word	0x6e6f2065
    e34c:	74756220 	.word	0x74756220
    e350:	206e6f74 	.word	0x206e6f74
    e354:	69203431 	.word	0x69203431
    e358:	25203a73 	.word	0x25203a73
    e35c:	000a0d64 	.word	0x000a0d64
    e360:	0a0a0a0a 	.word	0x0a0a0a0a
    e364:	0a0a0a0a 	.word	0x0a0a0a0a
    e368:	0a0a0a0a 	.word	0x0a0a0a0a
    e36c:	0a0a0a0a 	.word	0x0a0a0a0a
    e370:	00000a0a 	.word	0x00000a0a

0000e374 <g_sBspUartConfig>:
    e374:	0001c200 00000060 00000000 00000000     ....`...........
    e384:	00000000 00000012 00000000 00000000     ................
	...

0000e39c <g_AM_BSP_GPIO_COM_UART_RX>:
    e39c:	00000000                                ....

0000e3a0 <g_AM_BSP_GPIO_COM_UART_TX>:
    e3a0:	00000000                                ....

0000e3a4 <am_hal_cachectrl_defaults>:
    e3a4:	00000308                                ....

0000e3a8 <g_AM_HAL_GPIO_INPUT>:
    e3a8:	00001003                                ....

0000e3ac <g_ui8Bit76Capabilities>:
    e3ac:	02800101 80010180 80800101 80808080     ................
    e3bc:	80808080 80808008 01800180 80808080     ................
    e3cc:	80808080 01800402 01010401 80808080     ................
    e3dc:	00000101                                ....

0000e3e0 <g_ui8NCEtable>:
    e3e0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e3f0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e400:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e410:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e420:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e430:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e440:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e450:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e460:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e470:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e480:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e490:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e4a0:	32221202 43231303                       .."2..#C

0000e4a8 <g_ui8Inpen>:
    e4a8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e4b8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e4c8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e4d8:	00003130                                01..

0000e4dc <g_AM_HAL_GPIO_DISABLE>:
    e4dc:	00000003                                ....

0000e4e0 <g_AM_HAL_GPIO_OUTPUT>:
    e4e0:	00000403                                ....

0000e4e4 <g_ui8nCEpins>:
    e4e4:	02070707 00080802 01020202 01010101     ................
    e4f4:	01010101 01010101 01010101 01010101     ................
    e504:	01010101 08010101 01010008 01010101     ................
    e514:	00000101                                ....

0000e518 <g_AM_HAL_GPIO_OUTPUT_12>:
    e518:	00000703                                ....

0000e51c <g_am_hal_mcuctrl_flash_size>:
    e51c:	00004000 00008000 00010000 00020000     .@..............
    e52c:	00040000 00080000 00100000 00200000     .............. .
	...

0000e55c <g_am_hal_mcuctrl_sram_size>:
    e55c:	00004000 00008000 00010000 00020000     .@..............
    e56c:	00040000 00080000 00100000 00060000     ................
	...

0000e59c <am_hal_pwrctrl_peripheral_control>:
	...
    e5a8:	00000001 00000004 00000004 00000002     ................
    e5b8:	00000008 00000008 00000004 00000008     ................
    e5c8:	00000008 00000008 00000008 00000008     ................
    e5d8:	00000010 00000010 00000010 00000020     ............ ...
    e5e8:	00000010 00000010 00000040 00000010     ........@.......
    e5f8:	00000010 00000080 00000004 00000004     ................
    e608:	00000100 00000004 00000004 00000200     ................
    e618:	00000020 00000020 00000400 00000004      ... ...........
    e628:	00000004 00000800 00000040 00000040     ........@...@...
    e638:	00001000 00000080 00000080 00002000     ............. ..
    e648:	00000100 00000100                       ........
