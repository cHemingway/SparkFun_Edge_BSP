
bin/fast_gpio.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 09 d4 00 00 01 d4 00 00 2d c5 00 00     ............-...
    c010:	2d c5 00 00 2d c5 00 00 2d c5 00 00 00 00 00 00     -...-...-.......
	...
    c02c:	05 d4 00 00 05 d4 00 00 00 00 00 00 05 d4 00 00     ................
    c03c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c04c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c05c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c06c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c07c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c08c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c09c:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c0ac:	05 d4 00 00 05 d4 00 00 05 d4 00 00 05 d4 00 00     ................
    c0bc:	05 d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t ui32Ret, ux;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2d6:	2100      	movs	r1, #0
{
    c2d8:	b0cd      	sub	sp, #308	; 0x134
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2da:	4608      	mov	r0, r1
    c2dc:	f001 f984 	bl	d5e8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e0:	4875      	ldr	r0, [pc, #468]	; (c4b8 <main+0x1e4>)
    //
    // Configure the pins that are to be used for Fast GPIO.
    //
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    ui32Ret =  am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c2e2:	4d76      	ldr	r5, [pc, #472]	; (c4bc <main+0x1e8>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e4:	f001 f94c 	bl	d580 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2e8:	f001 f974 	bl	d5d4 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c2ec:	f001 f8c0 	bl	d470 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
    c2f0:	f001 f926 	bl	d540 <am_bsp_itm_printf_enable>
    am_util_stdio_terminal_clear();
    c2f4:	f001 f87e 	bl	d3f4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Fast GPIO Example\n");
    c2f8:	4871      	ldr	r0, [pc, #452]	; (c4c0 <main+0x1ec>)
    c2fa:	f001 f85f 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf("When run on an Apollo3 EVB:\n");
    c2fe:	4871      	ldr	r0, [pc, #452]	; (c4c4 <main+0x1f0>)
    c300:	f001 f85c 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf(" - An ~24MHz waveform (after instructions have cached) is output on Pin %d.\n", FASTGPIO_PIN_B);
    c304:	2101      	movs	r1, #1
    c306:	4870      	ldr	r0, [pc, #448]	; (c4c8 <main+0x1f4>)
    c308:	f001 f858 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf(" - Then the Apollo3 EVB LEDs display a short pattern.\n");
    c30c:	486f      	ldr	r0, [pc, #444]	; (c4cc <main+0x1f8>)
    c30e:	f001 f855 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf(" - LED0=pin %d, LED1=%d, LED2=%d, LED3=%d.\n", AM_BSP_GPIO_LED0, AM_BSP_GPIO_LED1,
    c312:	232f      	movs	r3, #47	; 0x2f
    c314:	9300      	str	r3, [sp, #0]
    c316:	2225      	movs	r2, #37	; 0x25
    c318:	232c      	movs	r3, #44	; 0x2c
    c31a:	212e      	movs	r1, #46	; 0x2e
    c31c:	486c      	ldr	r0, [pc, #432]	; (c4d0 <main+0x1fc>)
    c31e:	f001 f84d 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf(" - Note that LED1 and LED3 of the EVB are located on the same Fast GPIO row (%d and %d).\n",
    c322:	2207      	movs	r2, #7
    c324:	2105      	movs	r1, #5
    c326:	486b      	ldr	r0, [pc, #428]	; (c4d4 <main+0x200>)
    c328:	f001 f848 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf("   Because of that, LED3 is disabled during the walk sequence and is thus skipped in the\n");
    c32c:	486a      	ldr	r0, [pc, #424]	; (c4d8 <main+0x204>)
    c32e:	f001 f845 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf("   sequence. Then it is enabled during the all-blink and blinks along with LED1.\n");
    c332:	486a      	ldr	r0, [pc, #424]	; (c4dc <main+0x208>)
    c334:	f001 f842 	bl	d3bc <am_util_stdio_printf>
    am_util_stdio_printf("\n");
    c338:	4869      	ldr	r0, [pc, #420]	; (c4e0 <main+0x20c>)
    c33a:	f001 f83f 	bl	d3bc <am_util_stdio_printf>
    am_util_delay_ms(100);
    c33e:	2064      	movs	r0, #100	; 0x64
    c340:	f000 f8e0 	bl	c504 <am_util_delay_ms>
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c344:	4b67      	ldr	r3, [pc, #412]	; (c4e4 <main+0x210>)
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c346:	4968      	ldr	r1, [pc, #416]	; (c4e8 <main+0x214>)
    ui32Ret =  am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c348:	682a      	ldr	r2, [r5, #0]
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c34a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c34e:	2402      	movs	r4, #2
    c350:	601c      	str	r4, [r3, #0]
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c352:	6048      	str	r0, [r1, #4]
    ui32Ret =  am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c354:	2300      	movs	r3, #0
    c356:	2002      	movs	r0, #2
    c358:	2100      	movs	r1, #0
    c35a:	f001 fb3f 	bl	d9dc <am_hal_gpio_fast_pinconfig>
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c35e:	2800      	cmp	r0, #0
    c360:	f040 80a0 	bne.w	c4a4 <main+0x1d0>
    }

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c364:	f001 f8b6 	bl	d4d4 <am_bsp_debug_printf_disable>
    {
        //
        // Do 20 iterations in a loop so we can achieve a 24MHz waveform.
        // With -O3, each macro call compiles into a single instruction.
        //
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c368:	2402      	movs	r4, #2
    c36a:	495f      	ldr	r1, [pc, #380]	; (c4e8 <main+0x214>)
    c36c:	4620      	mov	r0, r4
    am_bsp_debug_printf_disable();
    c36e:	230a      	movs	r3, #10
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    while (ux--)
    c374:	3b01      	subs	r3, #1
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c376:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c378:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 1
    c37a:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c37c:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 2
    c37e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c380:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 3
    c382:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c384:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 4
    c386:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c388:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 5
    c38a:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c38c:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 6
    c38e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c390:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 7
    c392:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c394:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 8
    c396:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c398:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 9
    c39a:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c39c:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 10
    c39e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3a0:	604a      	str	r2, [r1, #4]


        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 11
    c3a2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3a4:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 12
    c3a6:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3a8:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 13
    c3aa:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3ac:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 14
    c3ae:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3b0:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 15
    c3b2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3b4:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 16
    c3b6:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3b8:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 17
    c3ba:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3bc:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 18
    c3be:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3c0:	604a      	str	r2, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 19
    c3c2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3c4:	604a      	str	r2, [r1, #4]
    while (ux--)
    c3c6:	d1d5      	bne.n	c374 <main+0xa0>
    }

    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);

    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c3c8:	4e46      	ldr	r6, [pc, #280]	; (c4e4 <main+0x210>)

    //
    // Let's flash some LED patterns using Fast GPIO.
    // Before configuring the pin, disable and initialize the value.
    //
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c3ca:	4848      	ldr	r0, [pc, #288]	; (c4ec <main+0x218>)
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c3cc:	682a      	ldr	r2, [r5, #0]
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c3ce:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
    c3d2:	604d      	str	r5, [r1, #4]
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c3d4:	6034      	str	r4, [r6, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c3d6:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c3da:	2420      	movs	r4, #32
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c3dc:	6005      	str	r5, [r0, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c3de:	6004      	str	r4, [r0, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c3e0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c3e4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c3e8:	6005      	str	r5, [r0, #0]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    c3ea:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c3ee:	6004      	str	r4, [r0, #0]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c3f0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    c3f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c3f8:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    c3fc:	604e      	str	r6, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c3fe:	604d      	str	r5, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c400:	604c      	str	r4, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    c402:	6048      	str	r0, [r1, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c404:	2000      	movs	r0, #0
    c406:	f24d 0120 	movw	r1, #53280	; 0xd020
    c40a:	f001 fae7 	bl	d9dc <am_hal_gpio_fast_pinconfig>
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED1 |
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED2 |
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED3,
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c40e:	2800      	cmp	r0, #0
    c410:	d14d      	bne.n	c4ae <main+0x1da>
    {
        am_util_stdio_printf("Error returned from LED am_hal_gpio_fast_pinconfig() = 0x%X.\n", ui32Ret);
    }

const uint32_t g_ui32LED_pattern[][2] =
    c412:	4937      	ldr	r1, [pc, #220]	; (c4f0 <main+0x21c>)
    c414:	a802      	add	r0, sp, #8
    c416:	f44f 7294 	mov.w	r2, #296	; 0x128
    c41a:	f7ff fe71 	bl	c100 <memcpy>
    {0x00, 300},
    {0xFFFFFFFF, 0xFFFFFFFF},
};

    ux = 0;
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c41e:	9b02      	ldr	r3, [sp, #8]
    c420:	1c59      	adds	r1, r3, #1
    c422:	d02c      	beq.n	c47e <main+0x1aa>
    {
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c424:	4e33      	ldr	r6, [pc, #204]	; (c4f4 <main+0x220>)
            am_hal_gpio_fastgpio_set(ui32Led);
    c426:	4d30      	ldr	r5, [pc, #192]	; (c4e8 <main+0x214>)
        {
            // Enable LED3. After this, it will react the same as LED1.
            am_hal_gpio_fastgpio_enable(AM_BSP_GPIO_LED3);
    c428:	4f33      	ldr	r7, [pc, #204]	; (c4f8 <main+0x224>)
    c42a:	ac02      	add	r4, sp, #8
    c42c:	e006      	b.n	c43c <main+0x168>
    c42e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c432:	603b      	str	r3, [r7, #0]
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c434:	f854 3f08 	ldr.w	r3, [r4, #8]!
    c438:	1c5a      	adds	r2, r3, #1
    c43a:	d020      	beq.n	c47e <main+0x1aa>
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c43c:	42b3      	cmp	r3, r6
    c43e:	d0f6      	beq.n	c42e <main+0x15a>
        if ( ui32Value & 1 )
    c440:	07da      	lsls	r2, r3, #31
            am_hal_gpio_fastgpio_clr(ui32Led);
    c442:	bf54      	ite	pl
    c444:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
            am_hal_gpio_fastgpio_set(ui32Led);
    c448:	2240      	movmi	r2, #64	; 0x40
        if ( ui32Value & 1 )
    c44a:	0799      	lsls	r1, r3, #30
        }
        else
        {
            set_leds(g_ui32LED_pattern[ux][0], g_ui32LED_pattern[ux][1]);
    c44c:	6860      	ldr	r0, [r4, #4]
            am_hal_gpio_fastgpio_set(ui32Led);
    c44e:	606a      	str	r2, [r5, #4]
            am_hal_gpio_fastgpio_clr(ui32Led);
    c450:	bf54      	ite	pl
    c452:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
            am_hal_gpio_fastgpio_set(ui32Led);
    c456:	2220      	movmi	r2, #32
    c458:	606a      	str	r2, [r5, #4]
        if ( ui32Value & 1 )
    c45a:	075a      	lsls	r2, r3, #29
            am_hal_gpio_fastgpio_clr(ui32Led);
    c45c:	bf54      	ite	pl
    c45e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
            am_hal_gpio_fastgpio_set(ui32Led);
    c462:	2210      	movmi	r2, #16
        if ( ui32Value & 1 )
    c464:	0719      	lsls	r1, r3, #28
            am_hal_gpio_fastgpio_clr(ui32Led);
    c466:	bf54      	ite	pl
    c468:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
            am_hal_gpio_fastgpio_set(ui32Led);
    c46c:	2380      	movmi	r3, #128	; 0x80
    c46e:	606a      	str	r2, [r5, #4]
    c470:	606b      	str	r3, [r5, #4]
    am_util_delay_ms(ui32delayms);
    c472:	f000 f847 	bl	c504 <am_util_delay_ms>
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c476:	f854 3f08 	ldr.w	r3, [r4, #8]!
    c47a:	1c5a      	adds	r2, r3, #1
    c47c:	d1de      	bne.n	c43c <main+0x168>

    //
    // Disable everything.
    //
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c47e:	4b1b      	ldr	r3, [pc, #108]	; (c4ec <main+0x218>)
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c480:	4a19      	ldr	r2, [pc, #100]	; (c4e8 <main+0x214>)
    c482:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c486:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c48a:	6055      	str	r5, [r2, #4]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c48c:	2420      	movs	r4, #32
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c48e:	6018      	str	r0, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c494:	f44f 4200 	mov.w	r2, #32768	; 0x8000
}
    c498:	2000      	movs	r0, #0
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c49a:	601c      	str	r4, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c49c:	6019      	str	r1, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c49e:	601a      	str	r2, [r3, #0]
}
    c4a0:	b04d      	add	sp, #308	; 0x134
    c4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Error returned from am_hal_gpio_fast_pinconfig() = .\n", ui32Ret);
    c4a4:	4601      	mov	r1, r0
    c4a6:	4815      	ldr	r0, [pc, #84]	; (c4fc <main+0x228>)
    c4a8:	f000 ff88 	bl	d3bc <am_util_stdio_printf>
    c4ac:	e75a      	b.n	c364 <main+0x90>
        am_util_stdio_printf("Error returned from LED am_hal_gpio_fast_pinconfig() = 0x%X.\n", ui32Ret);
    c4ae:	4601      	mov	r1, r0
    c4b0:	4813      	ldr	r0, [pc, #76]	; (c500 <main+0x22c>)
    c4b2:	f000 ff83 	bl	d3bc <am_util_stdio_printf>
    c4b6:	e7ac      	b.n	c412 <main+0x13e>
    c4b8:	0000e78c 	.word	0x0000e78c
    c4bc:	0000e8fc 	.word	0x0000e8fc
    c4c0:	0000e508 	.word	0x0000e508
    c4c4:	0000e51c 	.word	0x0000e51c
    c4c8:	0000e53c 	.word	0x0000e53c
    c4cc:	0000e58c 	.word	0x0000e58c
    c4d0:	0000e5c4 	.word	0x0000e5c4
    c4d4:	0000e5f0 	.word	0x0000e5f0
    c4d8:	0000e64c 	.word	0x0000e64c
    c4dc:	0000e6a8 	.word	0x0000e6a8
    c4e0:	0000e730 	.word	0x0000e730
    c4e4:	400100b4 	.word	0x400100b4
    c4e8:	40011000 	.word	0x40011000
    c4ec:	400100b8 	.word	0x400100b8
    c4f0:	0000e3e0 	.word	0x0000e3e0
    c4f4:	a5000001 	.word	0xa5000001
    c4f8:	400100ac 	.word	0x400100ac
    c4fc:	0000e6fc 	.word	0x0000e6fc
    c500:	0000e734 	.word	0x0000e734

0000c504 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c504:	b510      	push	{r4, lr}
    c506:	b084      	sub	sp, #16
    c508:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c50a:	a801      	add	r0, sp, #4
    c50c:	f001 f8d8 	bl	d6c0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c510:	9801      	ldr	r0, [sp, #4]
    c512:	4b05      	ldr	r3, [pc, #20]	; (c528 <am_util_delay_ms+0x24>)
    c514:	fba3 3000 	umull	r3, r0, r3, r0
    c518:	0980      	lsrs	r0, r0, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c51a:	fb04 f000 	mul.w	r0, r4, r0
    c51e:	f001 f8ed 	bl	d6fc <am_hal_flash_delay>
}
    c522:	b004      	add	sp, #16
    c524:	bd10      	pop	{r4, pc}
    c526:	bf00      	nop
    c528:	057619f1 	.word	0x057619f1

0000c52c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c52c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c52e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c532:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c534:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c538:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c53c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c540:	f000 f806 	bl	c550 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c544:	bd01      	pop	{r0, pc}
    c546:	bf00      	nop

0000c548 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c548:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c54a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c54c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c54e:	4770      	bx	lr

0000c550 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c550:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c552:	2300      	movs	r3, #0
{
    c554:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c556:	e9cd 3300 	strd	r3, r3, [sp]
    c55a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c55e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c562:	4a27      	ldr	r2, [pc, #156]	; (c600 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c564:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c566:	6813      	ldr	r3, [r2, #0]
    c568:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c56c:	b2db      	uxtb	r3, r3
    c56e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c572:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c574:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c578:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c57e:	0c1b      	lsrs	r3, r3, #16
    c580:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c584:	6913      	ldr	r3, [r2, #16]
    c586:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c588:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c58c:	0792      	lsls	r2, r2, #30
{
    c58e:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c590:	d430      	bmi.n	c5f4 <am_util_faultisr_collect_data+0xa4>
    c592:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c596:	4619      	mov	r1, r3
    c598:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c59a:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c59c:	f7ff ffd4 	bl	c548 <getStackedReg>
    c5a0:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5a2:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5a4:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5a6:	f7ff ffcf 	bl	c548 <getStackedReg>
    c5aa:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5ac:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5ae:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5b0:	f7ff ffca 	bl	c548 <getStackedReg>
    c5b4:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5b6:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5b8:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5ba:	f7ff ffc5 	bl	c548 <getStackedReg>
    c5be:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5c0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5c2:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5c4:	f7ff ffc0 	bl	c548 <getStackedReg>
    c5c8:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5ca:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5cc:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5ce:	f7ff ffbb 	bl	c548 <getStackedReg>
    c5d2:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5d4:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5d6:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5d8:	f7ff ffb6 	bl	c548 <getStackedReg>
    c5dc:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5de:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5e0:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5e2:	f7ff ffb1 	bl	c548 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c5e6:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5e8:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c5ea:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5ec:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c5ee:	f001 fca3 	bl	df38 <am_hal_mcuctrl_info_get>
    c5f2:	e7fe      	b.n	c5f2 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c5f4:	4601      	mov	r1, r0
    c5f6:	2006      	movs	r0, #6
    c5f8:	f7ff ffa6 	bl	c548 <getStackedReg>
    c5fc:	4602      	mov	r2, r0
    c5fe:	e7ca      	b.n	c596 <am_util_faultisr_collect_data+0x46>
    c600:	e000ed28 	.word	0xe000ed28

0000c604 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c608:	b097      	sub	sp, #92	; 0x5c
    c60a:	4682      	mov	sl, r0
    c60c:	468b      	mov	fp, r1
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c60e:	2300      	movs	r3, #0
{
    c610:	920d      	str	r2, [sp, #52]	; 0x34
    c612:	469c      	mov	ip, r3
    c614:	e9cd ab00 	strd	sl, fp, [sp]
    c618:	4606      	mov	r6, r0
    c61a:	460f      	mov	r7, r1
    c61c:	e00b      	b.n	c636 <uint64_to_str+0x32>
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c61e:	f80b 2c01 	strb.w	r2, [fp, #-1]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c622:	4619      	mov	r1, r3
    c624:	2200      	movs	r2, #0
    c626:	e9cd 1200 	strd	r1, r2, [sp]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c62a:	2b00      	cmp	r3, #0
    c62c:	f000 80a5 	beq.w	c77a <uint64_to_str+0x176>
    c630:	e9dd 6700 	ldrd	r6, r7, [sp]
{
    c634:	46f4      	mov	ip, lr
        q64 += (q64 >> 4);
    c636:	2300      	movs	r3, #0
    c638:	2400      	movs	r4, #0
    c63a:	e9cd 3402 	strd	r3, r4, [sp, #8]
        q64 += (q64 >> 8);
    c63e:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 16);
    c642:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 32);
    c646:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 >>= 3;
    c64a:	4698      	mov	r8, r3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c64c:	08b3      	lsrs	r3, r6, #2
    c64e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
        q32 += (q32 >> 4);
    c652:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c656:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q64 >>= 3;
    c65a:	46a1      	mov	r9, r4
        q32 += (q32 >> 16);
    c65c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c660:	08da      	lsrs	r2, r3, #3
        return q64 + ((r64 + 6) >> 4);
    c662:	4644      	mov	r4, r8
    c664:	464d      	mov	r5, r9
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c666:	4633      	mov	r3, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c668:	08b0      	lsrs	r0, r6, #2
        return q64 + ((r64 + 6) >> 4);
    c66a:	e9cd 4508 	strd	r4, r5, [sp, #32]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c66e:	3306      	adds	r3, #6
        r32 = ui32Val - q32*10;
    c670:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    c674:	f10c 0e01 	add.w	lr, ip, #1
        tbuf[ix++] = uMod + '0';
    c678:	ae0f      	add	r6, sp, #60	; 0x3c
    c67a:	4476      	add	r6, lr
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c67c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c680:	ea40 7087 	orr.w	r0, r0, r7, lsl #30
    if ( ui64Val >> 32 )
    c684:	463c      	mov	r4, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c686:	08b9      	lsrs	r1, r7, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c688:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        tbuf[ix++] = uMod + '0';
    c68c:	46b3      	mov	fp, r6
    c68e:	4637      	mov	r7, r6
    c690:	9e00      	ldr	r6, [sp, #0]
        uMod = ui64Val - (u64Tmp * 10);
    c692:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c696:	2500      	movs	r5, #0
        uMod = ui64Val - (u64Tmp * 10);
    c698:	eba6 0242 	sub.w	r2, r6, r2, lsl #1
    if ( ui64Val >> 32 )
    c69c:	ea54 0a05 	orrs.w	sl, r4, r5
        tbuf[ix++] = uMod + '0';
    c6a0:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c6a4:	d0bb      	beq.n	c61e <uint64_to_str+0x1a>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6aa:	085b      	lsrs	r3, r3, #1
    c6ac:	ea4f 0232 	mov.w	r2, r2, rrx
    c6b0:	eb12 0a00 	adds.w	sl, r2, r0
    c6b4:	eb43 0b01 	adc.w	fp, r3, r1
        q64 += (q64 >> 4);
    c6b8:	ea4f 131a 	mov.w	r3, sl, lsr #4
    c6bc:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
    c6c0:	9302      	str	r3, [sp, #8]
    c6c2:	ea4f 131b 	mov.w	r3, fp, lsr #4
    c6c6:	9303      	str	r3, [sp, #12]
    c6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c6cc:	eb12 020a 	adds.w	r2, r2, sl
    c6d0:	eb43 030b 	adc.w	r3, r3, fp
        q64 += (q64 >> 8);
    c6d4:	0a11      	lsrs	r1, r2, #8
    c6d6:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c6da:	9104      	str	r1, [sp, #16]
    c6dc:	0a19      	lsrs	r1, r3, #8
    c6de:	9105      	str	r1, [sp, #20]
    c6e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c6e4:	1880      	adds	r0, r0, r2
    c6e6:	4159      	adcs	r1, r3
    c6e8:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c6ea:	0c01      	lsrs	r1, r0, #16
    c6ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c6f0:	9106      	str	r1, [sp, #24]
    c6f2:	0c19      	lsrs	r1, r3, #16
    c6f4:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 8);
    c6f6:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c6fc:	1880      	adds	r0, r0, r2
    c6fe:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c700:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    c704:	4602      	mov	r2, r0
    c706:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c70c:	1880      	adds	r0, r0, r2
    c70e:	4159      	adcs	r1, r3
        q64 >>= 3;
    c710:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c714:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c718:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    c71c:	e9dd ab00 	ldrd	sl, fp, [sp]
        r64 = ui64Val - q64*10;
    c720:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c724:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c728:	eb12 0008 	adds.w	r0, r2, r8
    c72c:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c730:	eb43 0109 	adc.w	r1, r3, r9
        return q64 + ((r64 + 6) >> 4);
    c734:	f11a 0a06 	adds.w	sl, sl, #6
    c738:	f14b 0b00 	adc.w	fp, fp, #0
        r64 = ui64Val - q64*10;
    c73c:	1802      	adds	r2, r0, r0
    c73e:	eb41 0301 	adc.w	r3, r1, r1
        return q64 + ((r64 + 6) >> 4);
    c742:	ebba 0002 	subs.w	r0, sl, r2
    c746:	eb6b 0103 	sbc.w	r1, fp, r3
    c74a:	0903      	lsrs	r3, r0, #4
    c74c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    c750:	9308      	str	r3, [sp, #32]
    c752:	090b      	lsrs	r3, r1, #4
    c754:	9309      	str	r3, [sp, #36]	; 0x24
    c756:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
    c75a:	eb1a 0a08 	adds.w	sl, sl, r8
    c75e:	eb4b 0b09 	adc.w	fp, fp, r9
    c762:	4653      	mov	r3, sl
    c764:	465c      	mov	r4, fp
    c766:	e9cd 3400 	strd	r3, r4, [sp]
        uMod = ui64Val - (u64Tmp * 10);
    c76a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    c76e:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c772:	3630      	adds	r6, #48	; 0x30
    c774:	f807 6c01 	strb.w	r6, [r7, #-1]
    c778:	e75a      	b.n	c630 <uint64_to_str+0x2c>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c77a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c77c:	4660      	mov	r0, ip
    c77e:	b16a      	cbz	r2, c79c <uint64_to_str+0x198>
    c780:	465b      	mov	r3, fp
    c782:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c784:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c788:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c78c:	a90f      	add	r1, sp, #60	; 0x3c
    c78e:	4299      	cmp	r1, r3
    c790:	d1f8      	bne.n	c784 <uint64_to_str+0x180>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c794:	4403      	add	r3, r0
    c796:	461a      	mov	r2, r3
    c798:	2300      	movs	r3, #0
    c79a:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c79c:	4670      	mov	r0, lr
    c79e:	b017      	add	sp, #92	; 0x5c
    c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c7a4 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c7a4:	4b01      	ldr	r3, [pc, #4]	; (c7ac <am_util_stdio_printf_init+0x8>)
    c7a6:	6018      	str	r0, [r3, #0]
}
    c7a8:	4770      	bx	lr
    c7aa:	bf00      	nop
    c7ac:	10001130 	.word	0x10001130

0000c7b0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7b4:	b09b      	sub	sp, #108	; 0x6c
    c7b6:	4682      	mov	sl, r0
    c7b8:	4689      	mov	r9, r1
    c7ba:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c7bc:	f04f 0b00 	mov.w	fp, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c7c0:	f899 3000 	ldrb.w	r3, [r9]
    c7c4:	b1bb      	cbz	r3, c7f6 <am_util_stdio_vsprintf+0x46>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c7c6:	2b25      	cmp	r3, #37	; 0x25
    c7c8:	f109 0501 	add.w	r5, r9, #1
    c7cc:	d01c      	beq.n	c808 <am_util_stdio_vsprintf+0x58>
    c7ce:	f10b 0201 	add.w	r2, fp, #1
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c7d2:	f1ba 0f00 	cmp.w	sl, #0
    c7d6:	f000 8091 	beq.w	c8fc <am_util_stdio_vsprintf+0x14c>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c7da:	2b0a      	cmp	r3, #10
    c7dc:	f10a 0101 	add.w	r1, sl, #1
    c7e0:	f000 808f 	beq.w	c902 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c7e4:	f88a 3000 	strb.w	r3, [sl]
    c7e8:	4693      	mov	fp, r2
    c7ea:	468a      	mov	sl, r1
            }

            ++pcFmt;
    c7ec:	46a9      	mov	r9, r5
    while ( *pcFmt != 0x0 )
    c7ee:	f899 3000 	ldrb.w	r3, [r9]
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d1e7      	bne.n	c7c6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c7f6:	f1ba 0f00 	cmp.w	sl, #0
    c7fa:	d001      	beq.n	c800 <am_util_stdio_vsprintf+0x50>
    {
        *pcBuf = 0x0;
    c7fc:	f88a 3000 	strb.w	r3, [sl]
    }

    return (ui32CharCnt);
}
    c800:	4658      	mov	r0, fp
    c802:	b01b      	add	sp, #108	; 0x6c
    c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c808:	f899 3001 	ldrb.w	r3, [r9, #1]
    c80c:	2b30      	cmp	r3, #48	; 0x30
    c80e:	bf03      	ittte	eq
    c810:	f899 3002 	ldrbeq.w	r3, [r9, #2]
            ++pcFmt;
    c814:	f109 0502 	addeq.w	r5, r9, #2
            ui8PadChar = '0';
    c818:	f04f 0830 	moveq.w	r8, #48	; 0x30
        ui8PadChar = ' ';
    c81c:	f04f 0820 	movne.w	r8, #32
    if ( *pcStr == '-')
    c820:	2b2d      	cmp	r3, #45	; 0x2d
    c822:	d07e      	beq.n	c922 <am_util_stdio_vsprintf+0x172>
    uint32_t ui32Val = 0, uCnt = 0;
    c824:	2100      	movs	r1, #0
    bool bNeg = false;
    c826:	460e      	mov	r6, r1
    if ( *pcStr == '-')
    c828:	462a      	mov	r2, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c82a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c82e:	2809      	cmp	r0, #9
    c830:	f04f 0400 	mov.w	r4, #0
    c834:	d80f      	bhi.n	c856 <am_util_stdio_vsprintf+0xa6>
        ui32Val *= 10;
    c836:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        ui32Val += (*pcStr - '0');
    c83a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c83e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c842:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c846:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c848:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
        ++uCnt;
    c84c:	f101 0101 	add.w	r1, r1, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c850:	d9f1      	bls.n	c836 <am_util_stdio_vsprintf+0x86>
    c852:	5c6b      	ldrb	r3, [r5, r1]
    c854:	186a      	adds	r2, r5, r1
    return bNeg ? -ui32Val : ui32Val;
    c856:	b106      	cbz	r6, c85a <am_util_stdio_vsprintf+0xaa>
    c858:	4264      	negs	r4, r4
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c85a:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c85c:	4621      	mov	r1, r4
    c85e:	f102 0901 	add.w	r9, r2, #1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c862:	f000 8167 	beq.w	cb34 <am_util_stdio_vsprintf+0x384>
    c866:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
    c86a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
        if (*pcFmt == '.')
    c86e:	2b2e      	cmp	r3, #46	; 0x2e
    c870:	910e      	str	r1, [sp, #56]	; 0x38
    c872:	f000 813b 	beq.w	caec <am_util_stdio_vsprintf+0x33c>
        iPrecision = 6;             // printf() default precision for %f is 6
    c876:	2506      	movs	r5, #6
        if ( *pcFmt == 'l' )
    c878:	2b6c      	cmp	r3, #108	; 0x6c
    c87a:	d157      	bne.n	c92c <am_util_stdio_vsprintf+0x17c>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c87c:	7853      	ldrb	r3, [r2, #1]
    c87e:	2b6c      	cmp	r3, #108	; 0x6c
    c880:	f000 808e 	beq.w	c9a0 <am_util_stdio_vsprintf+0x1f0>
        switch ( *pcFmt )
    c884:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c888:	f109 0901 	add.w	r9, r9, #1
    c88c:	2a32      	cmp	r2, #50	; 0x32
    c88e:	f200 8123 	bhi.w	cad8 <am_util_stdio_vsprintf+0x328>
    c892:	e8df f012 	tbh	[pc, r2, lsl #1]
    c896:	00c2      	.short	0x00c2
    c898:	01210121 	.word	0x01210121
    c89c:	01210121 	.word	0x01210121
    c8a0:	01210121 	.word	0x01210121
    c8a4:	01210121 	.word	0x01210121
    c8a8:	01210121 	.word	0x01210121
    c8ac:	01210121 	.word	0x01210121
    c8b0:	01210121 	.word	0x01210121
    c8b4:	01210121 	.word	0x01210121
    c8b8:	01990121 	.word	0x01990121
    c8bc:	01210121 	.word	0x01210121
    c8c0:	01210121 	.word	0x01210121
    c8c4:	01210121 	.word	0x01210121
    c8c8:	01210121 	.word	0x01210121
    c8cc:	01210121 	.word	0x01210121
    c8d0:	01b60113 	.word	0x01b60113
    c8d4:	00c20121 	.word	0x00c20121
    c8d8:	01210121 	.word	0x01210121
    c8dc:	012101b6 	.word	0x012101b6
    c8e0:	01210121 	.word	0x01210121
    c8e4:	01210121 	.word	0x01210121
    c8e8:	01210121 	.word	0x01210121
    c8ec:	01210121 	.word	0x01210121
    c8f0:	0121014e 	.word	0x0121014e
    c8f4:	01210235 	.word	0x01210235
    c8f8:	024e0121 	.word	0x024e0121
    c8fc:	4693      	mov	fp, r2
            ++pcFmt;
    c8fe:	46a9      	mov	r9, r5
    c900:	e775      	b.n	c7ee <am_util_stdio_vsprintf+0x3e>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c902:	48a6      	ldr	r0, [pc, #664]	; (cb9c <am_util_stdio_vsprintf+0x3ec>)
    c904:	7800      	ldrb	r0, [r0, #0]
    c906:	2800      	cmp	r0, #0
    c908:	f43f af6c 	beq.w	c7e4 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c90c:	4650      	mov	r0, sl
    c90e:	230d      	movs	r3, #13
    c910:	f800 3b02 	strb.w	r3, [r0], #2
    c914:	468a      	mov	sl, r1
    c916:	f899 3000 	ldrb.w	r3, [r9]
    c91a:	f10b 0202 	add.w	r2, fp, #2
    c91e:	4601      	mov	r1, r0
    c920:	e760      	b.n	c7e4 <am_util_stdio_vsprintf+0x34>
        uCnt++;
    c922:	2101      	movs	r1, #1
        bNeg = true;
    c924:	460e      	mov	r6, r1
        pcStr++;
    c926:	186a      	adds	r2, r5, r1
    c928:	786b      	ldrb	r3, [r5, #1]
    c92a:	e77e      	b.n	c82a <am_util_stdio_vsprintf+0x7a>
        switch ( *pcFmt )
    c92c:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c930:	2a32      	cmp	r2, #50	; 0x32
    c932:	f200 80d1 	bhi.w	cad8 <am_util_stdio_vsprintf+0x328>
    c936:	e8df f012 	tbh	[pc, r2, lsl #1]
    c93a:	0070      	.short	0x0070
    c93c:	00cf00cf 	.word	0x00cf00cf
    c940:	00cf00cf 	.word	0x00cf00cf
    c944:	00cf00cf 	.word	0x00cf00cf
    c948:	00cf00cf 	.word	0x00cf00cf
    c94c:	00cf00cf 	.word	0x00cf00cf
    c950:	00cf00cf 	.word	0x00cf00cf
    c954:	00cf00cf 	.word	0x00cf00cf
    c958:	00cf00cf 	.word	0x00cf00cf
    c95c:	014700cf 	.word	0x014700cf
    c960:	00cf00cf 	.word	0x00cf00cf
    c964:	00cf00cf 	.word	0x00cf00cf
    c968:	00cf00cf 	.word	0x00cf00cf
    c96c:	00cf00cf 	.word	0x00cf00cf
    c970:	00cf00cf 	.word	0x00cf00cf
    c974:	016400c1 	.word	0x016400c1
    c978:	007000cf 	.word	0x007000cf
    c97c:	00cf00cf 	.word	0x00cf00cf
    c980:	00cf0164 	.word	0x00cf0164
    c984:	00cf00cf 	.word	0x00cf00cf
    c988:	00cf00cf 	.word	0x00cf00cf
    c98c:	00cf00cf 	.word	0x00cf00cf
    c990:	00cf00cf 	.word	0x00cf00cf
    c994:	00cf00fc 	.word	0x00cf00fc
    c998:	00cf01e3 	.word	0x00cf01e3
    c99c:	01fa00cf 	.word	0x01fa00cf
    c9a0:	7893      	ldrb	r3, [r2, #2]
    c9a2:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
    c9a6:	f102 0903 	add.w	r9, r2, #3
    c9aa:	2932      	cmp	r1, #50	; 0x32
    c9ac:	f200 8094 	bhi.w	cad8 <am_util_stdio_vsprintf+0x328>
    c9b0:	e8df f011 	tbh	[pc, r1, lsl #1]
    c9b4:	00920033 	.word	0x00920033
    c9b8:	00920092 	.word	0x00920092
    c9bc:	00920092 	.word	0x00920092
    c9c0:	00920092 	.word	0x00920092
    c9c4:	00920092 	.word	0x00920092
    c9c8:	00920092 	.word	0x00920092
    c9cc:	00920092 	.word	0x00920092
    c9d0:	00920092 	.word	0x00920092
    c9d4:	00920092 	.word	0x00920092
    c9d8:	00920414 	.word	0x00920414
    c9dc:	00920092 	.word	0x00920092
    c9e0:	00920092 	.word	0x00920092
    c9e4:	00920092 	.word	0x00920092
    c9e8:	00920092 	.word	0x00920092
    c9ec:	00840092 	.word	0x00840092
    c9f0:	00920222 	.word	0x00920222
    c9f4:	00920033 	.word	0x00920033
    c9f8:	02220092 	.word	0x02220092
    c9fc:	00920092 	.word	0x00920092
    ca00:	00920092 	.word	0x00920092
    ca04:	00920092 	.word	0x00920092
    ca08:	00920092 	.word	0x00920092
    ca0c:	00bf0092 	.word	0x00bf0092
    ca10:	02160092 	.word	0x02160092
    ca14:	00920092 	.word	0x00920092
    ca18:	0412      	.short	0x0412
                if ( pcBuf )
    ca1a:	f1ba 0f00 	cmp.w	sl, #0
    ca1e:	f43f aecf 	beq.w	c7c0 <am_util_stdio_vsprintf+0x10>
                    float fValue = va_arg(pArgs, double);
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	3307      	adds	r3, #7
    ca26:	f023 0307 	bic.w	r3, r3, #7
    ca2a:	e9d3 0100 	ldrd	r0, r1, [r3]
    ca2e:	3308      	adds	r3, #8
    ca30:	9301      	str	r3, [sp, #4]
    ca32:	f7ff fbff 	bl	c234 <__aeabi_d2f>
    ca36:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    ca3a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    ca3e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    ca40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    ca44:	f8ca 3000 	str.w	r3, [sl]
    if (fValue == 0.0f)
    ca48:	f000 843e 	beq.w	d2c8 <am_util_stdio_vsprintf+0xb18>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ca4c:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    ca50:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    ca54:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    ca56:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ca58:	f3c0 0016 	ubfx	r0, r0, #0, #23
    ca5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    ca60:	f300 844a 	bgt.w	d2f8 <am_util_stdio_vsprintf+0xb48>
    else if (iExp2 < -23)
    ca64:	f112 0f17 	cmn.w	r2, #23
    ca68:	f2c0 8479 	blt.w	d35e <am_util_stdio_vsprintf+0xbae>
    else if (iExp2 >= 23)
    ca6c:	2a16      	cmp	r2, #22
    ca6e:	f10a 0701 	add.w	r7, sl, #1
    ca72:	f340 836f 	ble.w	d154 <am_util_stdio_vsprintf+0x9a4>
        i32IntPart = i32Significand << (iExp2 - 23);
    ca76:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    ca78:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    ca7a:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    ca7e:	f2c0 844d 	blt.w	d31c <am_util_stdio_vsprintf+0xb6c>
    ca82:	4656      	mov	r6, sl
    i32FracPart = 0;
    ca84:	2400      	movs	r4, #0
    if (i32IntPart == 0)
    ca86:	2800      	cmp	r0, #0
    ca88:	f040 843c 	bne.w	d304 <am_util_stdio_vsprintf+0xb54>
    ca8c:	1c7a      	adds	r2, r7, #1
        *pcBuf++ = '0';
    ca8e:	f04f 0330 	mov.w	r3, #48	; 0x30
    ca92:	7033      	strb	r3, [r6, #0]
    *pcBuf++ = '.';
    ca94:	232e      	movs	r3, #46	; 0x2e
    ca96:	703b      	strb	r3, [r7, #0]
    if (i32FracPart == 0)
    ca98:	2c00      	cmp	r4, #0
    ca9a:	f040 83d8 	bne.w	d24e <am_util_stdio_vsprintf+0xa9e>
        *pcBuf++ = '0';
    ca9e:	1cba      	adds	r2, r7, #2
    caa0:	f04f 0330 	mov.w	r3, #48	; 0x30
    caa4:	707b      	strb	r3, [r7, #1]
    caa6:	eba2 010a 	sub.w	r1, r2, sl
    *pcBuf = 0x00;
    caaa:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    caac:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    caae:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    cab0:	f2c0 841e 	blt.w	d2f0 <am_util_stdio_vsprintf+0xb40>
    cab4:	460b      	mov	r3, r1
                    ui32CharCnt += iVal;
    cab6:	449b      	add	fp, r3
                    pcBuf += iVal;
    cab8:	449a      	add	sl, r3
    caba:	e681      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cabc:	9a01      	ldr	r2, [sp, #4]
    cabe:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    cac0:	f1ba 0f00 	cmp.w	sl, #0
    cac4:	d004      	beq.n	cad0 <am_util_stdio_vsprintf+0x320>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cac6:	6812      	ldr	r2, [r2, #0]
    cac8:	f88a 2000 	strb.w	r2, [sl]
                    *pcBuf++ = ui8CharSpecifier;
    cacc:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    cad0:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cad4:	9301      	str	r3, [sp, #4]
                break;
    cad6:	e673      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
                if ( pcBuf )
    cad8:	f1ba 0f00 	cmp.w	sl, #0
    cadc:	d003      	beq.n	cae6 <am_util_stdio_vsprintf+0x336>
                    *pcBuf++ = *pcFmt;
    cade:	f88a 3000 	strb.w	r3, [sl]
    cae2:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    cae6:	f10b 0b01 	add.w	fp, fp, #1
                break;
    caea:	e669      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
    if ( *pcStr == '-')
    caec:	7851      	ldrb	r1, [r2, #1]
    caee:	292d      	cmp	r1, #45	; 0x2d
    caf0:	f000 821a 	beq.w	cf28 <am_util_stdio_vsprintf+0x778>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    caf4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    caf8:	2b09      	cmp	r3, #9
    cafa:	f200 8305 	bhi.w	d108 <am_util_stdio_vsprintf+0x958>
    bool bNeg = false;
    cafe:	2600      	movs	r6, #0
    uint32_t ui32Val = 0, uCnt = 0;
    cb00:	4632      	mov	r2, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb02:	4648      	mov	r0, r9
        uCnt++;
    cb04:	2300      	movs	r3, #0
        ui32Val *= 10;
    cb06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    cb0a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb0e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    cb12:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    cb16:	2d09      	cmp	r5, #9
        ui32Val += (*pcStr - '0');
    cb18:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        ++uCnt;
    cb1c:	f102 0201 	add.w	r2, r2, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb20:	d9f1      	bls.n	cb06 <am_util_stdio_vsprintf+0x356>
    return bNeg ? -ui32Val : ui32Val;
    cb22:	b106      	cbz	r6, cb26 <am_util_stdio_vsprintf+0x376>
    cb24:	425b      	negs	r3, r3
            pcFmt += ui32NumChars;
    cb26:	444a      	add	r2, r9
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cb28:	461d      	mov	r5, r3
    cb2a:	f102 0901 	add.w	r9, r2, #1
    cb2e:	7813      	ldrb	r3, [r2, #0]
    cb30:	e6a2      	b.n	c878 <am_util_stdio_vsprintf+0xc8>
        switch ( *pcFmt )
    cb32:	990e      	ldr	r1, [sp, #56]	; 0x38
                pcStr = va_arg(pArgs, char *);
    cb34:	9b01      	ldr	r3, [sp, #4]
    cb36:	681f      	ldr	r7, [r3, #0]
    cb38:	1d1a      	adds	r2, r3, #4
    if ( !pcBuf )
    cb3a:	b38f      	cbz	r7, cba0 <am_util_stdio_vsprintf+0x3f0>
    while ( *pcBuf++ )
    cb3c:	7838      	ldrb	r0, [r7, #0]
    cb3e:	1c7b      	adds	r3, r7, #1
    cb40:	461c      	mov	r4, r3
    cb42:	2800      	cmp	r0, #0
    cb44:	f000 835c 	beq.w	d200 <am_util_stdio_vsprintf+0xa50>
    cb48:	1be6      	subs	r6, r4, r7
    cb4a:	f814 5b01 	ldrb.w	r5, [r4], #1
    cb4e:	2d00      	cmp	r5, #0
    cb50:	d1fa      	bne.n	cb48 <am_util_stdio_vsprintf+0x398>
                if ( iWidth > 0 )
    cb52:	2900      	cmp	r1, #0
    cb54:	dd02      	ble.n	cb5c <am_util_stdio_vsprintf+0x3ac>
                    if ( ui32strlen < iWidth )
    cb56:	428e      	cmp	r6, r1
    cb58:	f0c0 8356 	bcc.w	d208 <am_util_stdio_vsprintf+0xa58>
    cb5c:	465c      	mov	r4, fp
    cb5e:	1be4      	subs	r4, r4, r7
    cb60:	4657      	mov	r7, sl
                        *pcBuf++ = *pcStr;
    cb62:	4655      	mov	r5, sl
    cb64:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    cb68:	b15f      	cbz	r7, cb82 <am_util_stdio_vsprintf+0x3d2>
                        *pcBuf++ = *pcStr;
    cb6a:	7028      	strb	r0, [r5, #0]
                while (*pcStr != 0x0)
    cb6c:	f813 0b01 	ldrb.w	r0, [r3], #1
                        *pcBuf++ = *pcStr;
    cb70:	3701      	adds	r7, #1
                while (*pcStr != 0x0)
    cb72:	2800      	cmp	r0, #0
    cb74:	f000 81c5 	beq.w	cf02 <am_util_stdio_vsprintf+0x752>
                        *pcBuf++ = *pcStr;
    cb78:	463d      	mov	r5, r7
    cb7a:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    cb7e:	2f00      	cmp	r7, #0
    cb80:	d1f3      	bne.n	cb6a <am_util_stdio_vsprintf+0x3ba>
    cb82:	46ba      	mov	sl, r7
    cb84:	eb04 0b03 	add.w	fp, r4, r3
                while (*pcStr != 0x0)
    cb88:	f813 0b01 	ldrb.w	r0, [r3], #1
    cb8c:	2800      	cmp	r0, #0
    cb8e:	d1f9      	bne.n	cb84 <am_util_stdio_vsprintf+0x3d4>
                if ( iWidth )
    cb90:	2900      	cmp	r1, #0
    cb92:	f040 81ba 	bne.w	cf0a <am_util_stdio_vsprintf+0x75a>
                pcStr = va_arg(pArgs, char *);
    cb96:	9201      	str	r2, [sp, #4]
    cb98:	e612      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
    cb9a:	bf00      	nop
    cb9c:	10001020 	.word	0x10001020
                if ( iWidth > 0 )
    cba0:	2900      	cmp	r1, #0
    cba2:	f340 838a 	ble.w	d2ba <am_util_stdio_vsprintf+0xb0a>
        return ui32RetVal;
    cba6:	463e      	mov	r6, r7
    if ( i32NumChars <= 0 )
    cba8:	2900      	cmp	r1, #0
    cbaa:	f300 8304 	bgt.w	d1b6 <am_util_stdio_vsprintf+0xa06>
    cbae:	465c      	mov	r4, fp
    cbb0:	2300      	movs	r3, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cbb2:	f1ba 0f00 	cmp.w	sl, #0
    cbb6:	d000      	beq.n	cbba <am_util_stdio_vsprintf+0x40a>
    cbb8:	449a      	add	sl, r3
                while (*pcStr != 0x0)
    cbba:	7838      	ldrb	r0, [r7, #0]
    cbbc:	2800      	cmp	r0, #0
    cbbe:	f000 83f3 	beq.w	d3a8 <am_util_stdio_vsprintf+0xbf8>
                        iWidth = 0;
    cbc2:	2100      	movs	r1, #0
    cbc4:	1c7b      	adds	r3, r7, #1
    cbc6:	e7ca      	b.n	cb5e <am_util_stdio_vsprintf+0x3ae>
        bLower = bLongLong = false;
    cbc8:	2500      	movs	r5, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbca:	9b01      	ldr	r3, [sp, #4]
    cbcc:	681a      	ldr	r2, [r3, #0]
                                      va_arg(pArgs, uint32_t);
    cbce:	3304      	adds	r3, #4
    cbd0:	9301      	str	r3, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbd2:	2300      	movs	r3, #0
                if ( iWidth )
    cbd4:	2c00      	cmp	r4, #0
    cbd6:	f040 80bd 	bne.w	cd54 <am_util_stdio_vsprintf+0x5a4>
    if ( ui64Val == 0 )
    cbda:	ea52 0103 	orrs.w	r1, r2, r3
    cbde:	f040 80dd 	bne.w	cd9c <am_util_stdio_vsprintf+0x5ec>
    if (pcBuf)
    cbe2:	f1ba 0f00 	cmp.w	sl, #0
    cbe6:	f000 828d 	beq.w	d104 <am_util_stdio_vsprintf+0x954>
            *pcBuf++ = tbuf[ix];
    cbea:	f10a 0501 	add.w	r5, sl, #1
    cbee:	f04f 0330 	mov.w	r3, #48	; 0x30
    cbf2:	f88a 3000 	strb.w	r3, [sl]
    cbf6:	2001      	movs	r0, #1
    cbf8:	46aa      	mov	sl, r5
        *pcBuf = 0;
    cbfa:	2300      	movs	r3, #0
    cbfc:	702b      	strb	r3, [r5, #0]
                ui32CharCnt += iVal;
    cbfe:	4483      	add	fp, r0
                break;
    cc00:	e5de      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	6818      	ldr	r0, [r3, #0]
                                     va_arg(pArgs, int32_t);
    cc06:	3304      	adds	r3, #4
    cc08:	9301      	str	r3, [sp, #4]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc0a:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    cc0c:	2800      	cmp	r0, #0
    cc0e:	f171 0300 	sbcs.w	r3, r1, #0
    cc12:	f2c0 8194 	blt.w	cf3e <am_util_stdio_vsprintf+0x78e>
                    ui64Val = i64Val;
    cc16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cc1a:	2c00      	cmp	r4, #0
    cc1c:	d065      	beq.n	ccea <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    cc1e:	4603      	mov	r3, r0
    cc20:	430b      	orrs	r3, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cc22:	460c      	mov	r4, r1
    cc24:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    cc26:	bf0c      	ite	eq
    cc28:	f04f 0e01 	moveq.w	lr, #1
    cc2c:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cc30:	4323      	orrs	r3, r4
    cc32:	f000 8396 	beq.w	d362 <am_util_stdio_vsprintf+0xbb2>
                    bNeg = false;
    cc36:	2300      	movs	r3, #0
    cc38:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
    cc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cc40:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
    cc44:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        q64 += (q64 >> 4);
    cc4c:	2300      	movs	r3, #0
    cc4e:	2400      	movs	r4, #0
    cc50:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    cc54:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    cc58:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    cc5c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cc60:	0843      	lsrs	r3, r0, #1
    cc62:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q32 += (q32 >> 4);
    cc66:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    cc6a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    cc6e:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    cc72:	08db      	lsrs	r3, r3, #3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cc74:	4602      	mov	r2, r0
        r32 = ui32Val - q32*10;
    cc76:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc7a:	0886      	lsrs	r6, r0, #2
    if ( ui64Val >> 32 )
    cc7c:	460c      	mov	r4, r1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc7e:	3206      	adds	r2, #6
    if ( ui64Val >> 32 )
    cc80:	2500      	movs	r5, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc82:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
    cc86:	088f      	lsrs	r7, r1, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc88:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
    if ( ui64Val >> 32 )
    cc8c:	ea54 0105 	orrs.w	r1, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc90:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    cc94:	f040 80ba 	bne.w	ce0c <am_util_stdio_vsprintf+0x65c>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc98:	4619      	mov	r1, r3
    cc9a:	2200      	movs	r2, #0
        ++iNDigits;
    cc9c:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cca0:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while ( ui64Val )
    cca4:	2b00      	cmp	r3, #0
    cca6:	d1cf      	bne.n	cc48 <am_util_stdio_vsprintf+0x498>
                    iWidth -= ndigits_in_i64(ui64Val);
    cca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ccaa:	eba3 0e0e 	sub.w	lr, r3, lr
                    if ( bNeg )
    ccae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ccb0:	e9dd 8b10 	ldrd	r8, fp, [sp, #64]	; 0x40
    ccb4:	e9dd a912 	ldrd	sl, r9, [sp, #72]	; 0x48
    ccb8:	b13b      	cbz	r3, ccca <am_util_stdio_vsprintf+0x51a>
                        if ( ui8PadChar == '0' )
    ccba:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    ccbe:	f10e 3eff 	add.w	lr, lr, #4294967295
                        if ( ui8PadChar == '0' )
    ccc2:	f000 82a3 	beq.w	d20c <am_util_stdio_vsprintf+0xa5c>
    ccc6:	2301      	movs	r3, #1
    ccc8:	930f      	str	r3, [sp, #60]	; 0x3c
    if ( i32NumChars <= 0 )
    ccca:	f1be 0f00 	cmp.w	lr, #0
    ccce:	f300 821e 	bgt.w	d10e <am_util_stdio_vsprintf+0x95e>
    ccd2:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    ccd4:	f1ba 0f00 	cmp.w	sl, #0
    ccd8:	f000 82fc 	beq.w	d2d4 <am_util_stdio_vsprintf+0xb24>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ccdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    pcBuf += pcBuf ? iWidth : 0;
    ccde:	4492      	add	sl, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cce0:	b11b      	cbz	r3, ccea <am_util_stdio_vsprintf+0x53a>
    cce2:	f1b8 0f20 	cmp.w	r8, #32
    cce6:	f000 8132 	beq.w	cf4e <am_util_stdio_vsprintf+0x79e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ccea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ccee:	4652      	mov	r2, sl
    ccf0:	f7ff fc88 	bl	c604 <uint64_to_str>
                if ( pcBuf )
    ccf4:	f1ba 0f00 	cmp.w	sl, #0
    ccf8:	d081      	beq.n	cbfe <am_util_stdio_vsprintf+0x44e>
                    pcBuf += iVal;
    ccfa:	4482      	add	sl, r0
                ui32CharCnt += iVal;
    ccfc:	4483      	add	fp, r0
    ccfe:	e55f      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd00:	9a01      	ldr	r2, [sp, #4]
    cd02:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    cd04:	3204      	adds	r2, #4
    cd06:	9201      	str	r2, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd08:	4619      	mov	r1, r3
    cd0a:	2200      	movs	r2, #0
    cd0c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
                if ( iWidth )
    cd10:	2c00      	cmp	r4, #0
    cd12:	f040 8127 	bne.w	cf64 <am_util_stdio_vsprintf+0x7b4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cd16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cd1a:	4652      	mov	r2, sl
    cd1c:	f7ff fc72 	bl	c604 <uint64_to_str>
                if ( pcBuf )
    cd20:	f1ba 0f00 	cmp.w	sl, #0
    cd24:	d1e9      	bne.n	ccfa <am_util_stdio_vsprintf+0x54a>
    cd26:	f04f 0a00 	mov.w	sl, #0
                ui32CharCnt += iVal;
    cd2a:	4483      	add	fp, r0
    cd2c:	e548      	b.n	c7c0 <am_util_stdio_vsprintf+0x10>
                bLower = true;
    cd2e:	2501      	movs	r5, #1
    cd30:	e74b      	b.n	cbca <am_util_stdio_vsprintf+0x41a>
        bLower = bLongLong = false;
    cd32:	2300      	movs	r3, #0
                bLower = true;
    cd34:	2501      	movs	r5, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd36:	2b00      	cmp	r3, #0
    cd38:	f43f af47 	beq.w	cbca <am_util_stdio_vsprintf+0x41a>
    cd3c:	9b01      	ldr	r3, [sp, #4]
    cd3e:	3307      	adds	r3, #7
    cd40:	f023 0307 	bic.w	r3, r3, #7
    cd44:	f103 0208 	add.w	r2, r3, #8
    cd48:	9201      	str	r2, [sp, #4]
    cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
                if ( iWidth )
    cd4e:	2c00      	cmp	r4, #0
    cd50:	f43f af43 	beq.w	cbda <am_util_stdio_vsprintf+0x42a>
    int iDigits = ui64Val ? 0 : 1;
    cd54:	ea52 0103 	orrs.w	r1, r2, r3
    cd58:	bf0c      	ite	eq
    cd5a:	2401      	moveq	r4, #1
    cd5c:	2400      	movne	r4, #0
    while ( ui64Val )
    cd5e:	ea52 0103 	orrs.w	r1, r2, r3
    cd62:	d00c      	beq.n	cd7e <am_util_stdio_vsprintf+0x5ce>
    cd64:	4610      	mov	r0, r2
    cd66:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cd68:	0906      	lsrs	r6, r0, #4
    cd6a:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    cd6e:	090f      	lsrs	r7, r1, #4
    cd70:	4630      	mov	r0, r6
    cd72:	4639      	mov	r1, r7
    while ( ui64Val )
    cd74:	ea50 0601 	orrs.w	r6, r0, r1
        ++iDigits;
    cd78:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cd7c:	d1f4      	bne.n	cd68 <am_util_stdio_vsprintf+0x5b8>
                    iWidth -= ndigits_in_hex(ui64Val);
    cd7e:	990e      	ldr	r1, [sp, #56]	; 0x38
    cd80:	1b09      	subs	r1, r1, r4
    if ( i32NumChars <= 0 )
    cd82:	2900      	cmp	r1, #0
    cd84:	f300 81a1 	bgt.w	d0ca <am_util_stdio_vsprintf+0x91a>
    cd88:	2000      	movs	r0, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cd8a:	f1ba 0f00 	cmp.w	sl, #0
    cd8e:	f000 81b5 	beq.w	d0fc <am_util_stdio_vsprintf+0x94c>
    if ( ui64Val == 0 )
    cd92:	ea52 0103 	orrs.w	r1, r2, r3
    cd96:	4482      	add	sl, r0
    cd98:	f43f af23 	beq.w	cbe2 <am_util_stdio_vsprintf+0x432>
    cd9c:	2d00      	cmp	r5, #0
    cd9e:	bf14      	ite	ne
    cda0:	2527      	movne	r5, #39	; 0x27
    cda2:	2507      	moveq	r5, #7
    if ( i32NumChars <= 0 )
    cda4:	af15      	add	r7, sp, #84	; 0x54
    int iNumDig, ix = 0;
    cda6:	2600      	movs	r6, #0
    cda8:	f8cd 9008 	str.w	r9, [sp, #8]
        ui64Val >>= 4;
    cdac:	0914      	lsrs	r4, r2, #4
        cCh = ui64Val & 0xf;
    cdae:	f002 020f 	and.w	r2, r2, #15
        ui64Val >>= 4;
    cdb2:	ea4f 1813 	mov.w	r8, r3, lsr #4
            cCh += bLower ? 0x27 : 0x7;
    cdb6:	18a8      	adds	r0, r5, r2
        if ( cCh > 9 )
    cdb8:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    cdba:	46c6      	mov	lr, r8
    cdbc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    cdc0:	f100 0030 	add.w	r0, r0, #48	; 0x30
    cdc4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    cdc8:	f106 0901 	add.w	r9, r6, #1
        if ( cCh > 9 )
    cdcc:	d978      	bls.n	cec0 <am_util_stdio_vsprintf+0x710>
        ui64Val >>= 4;
    cdce:	4622      	mov	r2, r4
    cdd0:	4643      	mov	r3, r8
    while ( ui64Val )
    cdd2:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cdd6:	f807 0b01 	strb.w	r0, [r7], #1
    while ( ui64Val )
    cdda:	d07a      	beq.n	ced2 <am_util_stdio_vsprintf+0x722>
    if ( i32NumChars <= 0 )
    cddc:	464e      	mov	r6, r9
    cdde:	e7e5      	b.n	cdac <am_util_stdio_vsprintf+0x5fc>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cde0:	9b01      	ldr	r3, [sp, #4]
    cde2:	3307      	adds	r3, #7
    cde4:	f023 0307 	bic.w	r3, r3, #7
    cde8:	f103 0208 	add.w	r2, r3, #8
    cdec:	9201      	str	r2, [sp, #4]
    cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
    cdf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    cdf6:	e78b      	b.n	cd10 <am_util_stdio_vsprintf+0x560>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cdf8:	9b01      	ldr	r3, [sp, #4]
    cdfa:	3307      	adds	r3, #7
    cdfc:	f023 0307 	bic.w	r3, r3, #7
    ce00:	f103 0208 	add.w	r2, r3, #8
    ce04:	9201      	str	r2, [sp, #4]
    ce06:	e9d3 0100 	ldrd	r0, r1, [r3]
    ce0a:	e6ff      	b.n	cc0c <am_util_stdio_vsprintf+0x45c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce10:	085b      	lsrs	r3, r3, #1
    ce12:	ea4f 0232 	mov.w	r2, r2, rrx
    ce16:	1990      	adds	r0, r2, r6
    ce18:	eb43 0107 	adc.w	r1, r3, r7
        q64 += (q64 >> 4);
    ce1c:	0903      	lsrs	r3, r0, #4
    ce1e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    ce22:	9308      	str	r3, [sp, #32]
    ce24:	090b      	lsrs	r3, r1, #4
    ce26:	9309      	str	r3, [sp, #36]	; 0x24
    ce28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce2c:	1812      	adds	r2, r2, r0
    ce2e:	414b      	adcs	r3, r1
        q64 += (q64 >> 8);
    ce30:	0a11      	lsrs	r1, r2, #8
    ce32:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    ce36:	9106      	str	r1, [sp, #24]
    ce38:	0a19      	lsrs	r1, r3, #8
    ce3a:	9107      	str	r1, [sp, #28]
    ce3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    ce40:	1880      	adds	r0, r0, r2
    ce42:	4159      	adcs	r1, r3
    ce44:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    ce46:	0c01      	lsrs	r1, r0, #16
    ce48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ce4c:	9104      	str	r1, [sp, #16]
    ce4e:	0c19      	lsrs	r1, r3, #16
    ce50:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    ce52:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    ce54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ce58:	1880      	adds	r0, r0, r2
    ce5a:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    ce5c:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    ce60:	4602      	mov	r2, r0
    ce62:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    ce64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ce68:	1880      	adds	r0, r0, r2
    ce6a:	4159      	adcs	r1, r3
        q64 >>= 3;
    ce6c:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    ce70:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    ce74:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    ce78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    ce7c:	ea4f 0489 	mov.w	r4, r9, lsl #2
    ce80:	ea4f 0288 	mov.w	r2, r8, lsl #2
    ce84:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    ce88:	eb12 0408 	adds.w	r4, r2, r8
    ce8c:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    ce90:	3006      	adds	r0, #6
    ce92:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    ce96:	1922      	adds	r2, r4, r4
    ce98:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    ce9c:	1a80      	subs	r0, r0, r2
    ce9e:	eb61 0103 	sbc.w	r1, r1, r3
    cea2:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cea6:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    ceaa:	eb1a 0308 	adds.w	r3, sl, r8
    ceae:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    ceb2:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    ceb6:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    ceba:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cebe:	e6c3      	b.n	cc48 <am_util_stdio_vsprintf+0x498>
        ui64Val >>= 4;
    cec0:	4622      	mov	r2, r4
    cec2:	4643      	mov	r3, r8
    while ( ui64Val )
    cec4:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cec8:	f106 0901 	add.w	r9, r6, #1
    cecc:	f807 cb01 	strb.w	ip, [r7], #1
    while ( ui64Val )
    ced0:	d184      	bne.n	cddc <am_util_stdio_vsprintf+0x62c>
    ced2:	464d      	mov	r5, r9
    ced4:	4628      	mov	r0, r5
    ced6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    if (pcBuf)
    ceda:	f1ba 0f00 	cmp.w	sl, #0
    cede:	f43f af22 	beq.w	cd26 <am_util_stdio_vsprintf+0x576>
    cee2:	ab15      	add	r3, sp, #84	; 0x54
    cee4:	eb0a 0405 	add.w	r4, sl, r5
    cee8:	442b      	add	r3, r5
    ceea:	f10a 32ff 	add.w	r2, sl, #4294967295
            *pcBuf++ = tbuf[ix];
    ceee:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cef2:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cef6:	a915      	add	r1, sp, #84	; 0x54
    cef8:	4299      	cmp	r1, r3
    cefa:	d1f8      	bne.n	ceee <am_util_stdio_vsprintf+0x73e>
    cefc:	4455      	add	r5, sl
    cefe:	46a2      	mov	sl, r4
    cf00:	e67b      	b.n	cbfa <am_util_stdio_vsprintf+0x44a>
    cf02:	46ba      	mov	sl, r7
                if ( iWidth )
    cf04:	2900      	cmp	r1, #0
    cf06:	f43f ae46 	beq.w	cb96 <am_util_stdio_vsprintf+0x3e6>
                    iWidth = -iWidth;
    cf0a:	4249      	negs	r1, r1
                    if ( ui32strlen < iWidth )
    cf0c:	42b1      	cmp	r1, r6
    cf0e:	f67f ae42 	bls.w	cb96 <am_util_stdio_vsprintf+0x3e6>
                        iWidth -= ui32strlen;
    cf12:	1b89      	subs	r1, r1, r6
    if ( i32NumChars <= 0 )
    cf14:	2900      	cmp	r1, #0
    cf16:	f300 8163 	bgt.w	d1e0 <am_util_stdio_vsprintf+0xa30>
    cf1a:	2100      	movs	r1, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cf1c:	f1ba 0f00 	cmp.w	sl, #0
    cf20:	f43f ae39 	beq.w	cb96 <am_util_stdio_vsprintf+0x3e6>
    cf24:	448a      	add	sl, r1
    cf26:	e636      	b.n	cb96 <am_util_stdio_vsprintf+0x3e6>
    cf28:	7891      	ldrb	r1, [r2, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf2a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cf2e:	2b09      	cmp	r3, #9
        pcStr++;
    cf30:	f102 0002 	add.w	r0, r2, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf34:	f200 8234 	bhi.w	d3a0 <am_util_stdio_vsprintf+0xbf0>
        bNeg = true;
    cf38:	2601      	movs	r6, #1
        uCnt++;
    cf3a:	4632      	mov	r2, r6
    cf3c:	e5e2      	b.n	cb04 <am_util_stdio_vsprintf+0x354>
                    ui64Val = -i64Val;          // Get absolute value
    cf3e:	4240      	negs	r0, r0
    cf40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cf44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cf48:	2c00      	cmp	r4, #0
    cf4a:	f040 80fa 	bne.w	d142 <am_util_stdio_vsprintf+0x992>
                        if ( pcBuf )
    cf4e:	f1ba 0f00 	cmp.w	sl, #0
    cf52:	d004      	beq.n	cf5e <am_util_stdio_vsprintf+0x7ae>
                            *pcBuf++ = '-';
    cf54:	232d      	movs	r3, #45	; 0x2d
    cf56:	f88a 3000 	strb.w	r3, [sl]
    cf5a:	f10a 0a01 	add.w	sl, sl, #1
                        ++ui32CharCnt;
    cf5e:	f10b 0b01 	add.w	fp, fp, #1
    cf62:	e6c2      	b.n	ccea <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    cf64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cf68:	4603      	mov	r3, r0
    cf6a:	430b      	orrs	r3, r1
    while ( ui64Val )
    cf6c:	460c      	mov	r4, r1
    cf6e:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    cf70:	bf0c      	ite	eq
    cf72:	f04f 0e01 	moveq.w	lr, #1
    cf76:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cf7a:	4323      	orrs	r3, r4
    cf7c:	d03c      	beq.n	cff8 <am_util_stdio_vsprintf+0x848>
    cf7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cf82:	e9cd ba10 	strd	fp, sl, [sp, #64]	; 0x40
    cf86:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    cf8a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cf8e:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
        q64 += (q64 >> 4);
    cf92:	2300      	movs	r3, #0
    cf94:	2400      	movs	r4, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cf96:	08a8      	lsrs	r0, r5, #2
        q64 += (q64 >> 4);
    cf98:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    cf9c:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    cfa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    cfa4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cfa8:	ea40 7086 	orr.w	r0, r0, r6, lsl #30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cfac:	462c      	mov	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cfae:	08b1      	lsrs	r1, r6, #2
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cfb0:	086e      	lsrs	r6, r5, #1
    cfb2:	eb06 0694 	add.w	r6, r6, r4, lsr #2
        q32 += (q32 >> 4);
    cfb6:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    if ( ui64Val >> 32 )
    cfba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        q32 += (q32 >> 8);
    cfbe:	eb06 2616 	add.w	r6, r6, r6, lsr #8
        q32 += (q32 >> 16);
    cfc2:	eb06 4616 	add.w	r6, r6, r6, lsr #16
        q32 >>= 3;
    cfc6:	08f6      	lsrs	r6, r6, #3
        r32 = ui32Val - q32*10;
    cfc8:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
    if ( ui64Val >> 32 )
    cfcc:	461c      	mov	r4, r3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfce:	1d97      	adds	r7, r2, #6
    if ( ui64Val >> 32 )
    cfd0:	2500      	movs	r5, #0
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfd2:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
    if ( ui64Val >> 32 )
    cfd6:	ea54 0305 	orrs.w	r3, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfda:	eb06 1617 	add.w	r6, r6, r7, lsr #4
    if ( ui64Val >> 32 )
    cfde:	d118      	bne.n	d012 <am_util_stdio_vsprintf+0x862>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfe0:	4633      	mov	r3, r6
    cfe2:	2400      	movs	r4, #0
        ++iNDigits;
    cfe4:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfe8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    while ( ui64Val )
    cfec:	2e00      	cmp	r6, #0
    cfee:	d1ce      	bne.n	cf8e <am_util_stdio_vsprintf+0x7de>
    cff0:	e9dd 8b0f 	ldrd	r8, fp, [sp, #60]	; 0x3c
    cff4:	e9dd a911 	ldrd	sl, r9, [sp, #68]	; 0x44
                    iWidth -= ndigits_in_u64(ui64Val);
    cff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cffa:	eba3 030e 	sub.w	r3, r3, lr
    if ( i32NumChars <= 0 )
    cffe:	2b00      	cmp	r3, #0
    d000:	f300 80c7 	bgt.w	d192 <am_util_stdio_vsprintf+0x9e2>
    d004:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    d006:	f1ba 0f00 	cmp.w	sl, #0
    d00a:	f000 8190 	beq.w	d32e <am_util_stdio_vsprintf+0xb7e>
    d00e:	4492      	add	sl, r2
    d010:	e681      	b.n	cd16 <am_util_stdio_vsprintf+0x566>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d012:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d016:	087f      	lsrs	r7, r7, #1
    d018:	ea4f 0636 	mov.w	r6, r6, rrx
    d01c:	1982      	adds	r2, r0, r6
    d01e:	eb41 0307 	adc.w	r3, r1, r7
        q64 += (q64 >> 4);
    d022:	0911      	lsrs	r1, r2, #4
    d024:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    d028:	9108      	str	r1, [sp, #32]
    d02a:	0919      	lsrs	r1, r3, #4
    d02c:	9109      	str	r1, [sp, #36]	; 0x24
    d02e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    d032:	1880      	adds	r0, r0, r2
    d034:	4159      	adcs	r1, r3
    d036:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    d038:	0a01      	lsrs	r1, r0, #8
    d03a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    d03e:	9106      	str	r1, [sp, #24]
    d040:	0a19      	lsrs	r1, r3, #8
    d042:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 4);
    d044:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    d046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    d04a:	1880      	adds	r0, r0, r2
    d04c:	4159      	adcs	r1, r3
    d04e:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    d050:	0c01      	lsrs	r1, r0, #16
    d052:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    d056:	9104      	str	r1, [sp, #16]
    d058:	0c19      	lsrs	r1, r3, #16
    d05a:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    d05c:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    d05e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d062:	1880      	adds	r0, r0, r2
    d064:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    d066:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    d06a:	4602      	mov	r2, r0
    d06c:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    d06e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d072:	1880      	adds	r0, r0, r2
    d074:	4159      	adcs	r1, r3
        q64 >>= 3;
    d076:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    d07a:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    d07e:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    d082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    d086:	ea4f 0489 	mov.w	r4, r9, lsl #2
    d08a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    d08e:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    d092:	eb12 0408 	adds.w	r4, r2, r8
    d096:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    d09a:	3006      	adds	r0, #6
    d09c:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    d0a0:	1922      	adds	r2, r4, r4
    d0a2:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    d0a6:	1a80      	subs	r0, r0, r2
    d0a8:	eb61 0103 	sbc.w	r1, r1, r3
    d0ac:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    d0b0:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    d0b4:	eb1a 0308 	adds.w	r3, sl, r8
    d0b8:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    d0bc:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    d0c0:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    d0c4:	e9cd 3402 	strd	r3, r4, [sp, #8]
    d0c8:	e761      	b.n	cf8e <am_util_stdio_vsprintf+0x7de>
    while ( i32NumChars-- )
    d0ca:	3901      	subs	r1, #1
    d0cc:	4656      	mov	r6, sl
    int32_t i32Cnt = 0;
    d0ce:	2000      	movs	r0, #0
    d0d0:	1e4f      	subs	r7, r1, #1
    d0d2:	1c44      	adds	r4, r0, #1
        if ( pcBuf )
    d0d4:	b156      	cbz	r6, d0ec <am_util_stdio_vsprintf+0x93c>
            *pcBuf++ = cPadChar;
    d0d6:	46bc      	mov	ip, r7
    d0d8:	460f      	mov	r7, r1
    d0da:	f886 8000 	strb.w	r8, [r6]
    d0de:	4620      	mov	r0, r4
    d0e0:	4661      	mov	r1, ip
    d0e2:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    d0e4:	2f00      	cmp	r7, #0
    d0e6:	d1f3      	bne.n	d0d0 <am_util_stdio_vsprintf+0x920>
    d0e8:	4483      	add	fp, r0
    d0ea:	e64e      	b.n	cd8a <am_util_stdio_vsprintf+0x5da>
    d0ec:	2900      	cmp	r1, #0
    d0ee:	f000 8126 	beq.w	d33e <am_util_stdio_vsprintf+0xb8e>
    d0f2:	3902      	subs	r1, #2
    d0f4:	3002      	adds	r0, #2
    d0f6:	2f00      	cmp	r7, #0
    d0f8:	d1ea      	bne.n	d0d0 <am_util_stdio_vsprintf+0x920>
    d0fa:	e7f5      	b.n	d0e8 <am_util_stdio_vsprintf+0x938>
    if ( ui64Val == 0 )
    d0fc:	ea52 0103 	orrs.w	r1, r2, r3
    d100:	f47f ae4c 	bne.w	cd9c <am_util_stdio_vsprintf+0x5ec>
    d104:	2001      	movs	r0, #1
    d106:	e60e      	b.n	cd26 <am_util_stdio_vsprintf+0x576>
    uint32_t ui32Val = 0, uCnt = 0;
    d108:	2200      	movs	r2, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d10a:	4613      	mov	r3, r2
    d10c:	e50b      	b.n	cb26 <am_util_stdio_vsprintf+0x376>
    while ( i32NumChars-- )
    d10e:	f10e 33ff 	add.w	r3, lr, #4294967295
    d112:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    d114:	2200      	movs	r2, #0
    d116:	1e5c      	subs	r4, r3, #1
    d118:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    d11a:	b150      	cbz	r0, d132 <am_util_stdio_vsprintf+0x982>
            *pcBuf++ = cPadChar;
    d11c:	4625      	mov	r5, r4
    d11e:	461c      	mov	r4, r3
    d120:	f880 8000 	strb.w	r8, [r0]
    d124:	460a      	mov	r2, r1
    d126:	462b      	mov	r3, r5
    d128:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d12a:	2c00      	cmp	r4, #0
    d12c:	d1f3      	bne.n	d116 <am_util_stdio_vsprintf+0x966>
    d12e:	4493      	add	fp, r2
    d130:	e5d0      	b.n	ccd4 <am_util_stdio_vsprintf+0x524>
    d132:	2b00      	cmp	r3, #0
    d134:	f000 8110 	beq.w	d358 <am_util_stdio_vsprintf+0xba8>
    d138:	3b02      	subs	r3, #2
    d13a:	3202      	adds	r2, #2
    d13c:	2c00      	cmp	r4, #0
    d13e:	d1ea      	bne.n	d116 <am_util_stdio_vsprintf+0x966>
    d140:	e7f5      	b.n	d12e <am_util_stdio_vsprintf+0x97e>
    int iNDigits = ui64Val ? 0 : 1;
    d142:	4603      	mov	r3, r0
    d144:	430b      	orrs	r3, r1
    d146:	bf0c      	ite	eq
    d148:	f04f 0e01 	moveq.w	lr, #1
    d14c:	f04f 0e00 	movne.w	lr, #0
                    bNeg = true;
    d150:	2301      	movs	r3, #1
    d152:	e571      	b.n	cc38 <am_util_stdio_vsprintf+0x488>
    else if (iExp2 >= 0)
    d154:	2a00      	cmp	r2, #0
    d156:	f2c0 80f5 	blt.w	d344 <am_util_stdio_vsprintf+0xb94>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d15a:	f1a1 047e 	sub.w	r4, r1, #126	; 0x7e
    d15e:	fa00 f404 	lsl.w	r4, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d162:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d166:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d168:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d16c:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d170:	f2c0 80d5 	blt.w	d31e <am_util_stdio_vsprintf+0xb6e>
    d174:	4656      	mov	r6, sl
            uint64_to_str(i32IntPart, pcBuf);
    d176:	4632      	mov	r2, r6
    d178:	17c1      	asrs	r1, r0, #31
    d17a:	f7ff fa43 	bl	c604 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d17e:	7833      	ldrb	r3, [r6, #0]
    d180:	b90b      	cbnz	r3, d186 <am_util_stdio_vsprintf+0x9d6>
    d182:	e100      	b.n	d386 <am_util_stdio_vsprintf+0xbd6>
    d184:	463e      	mov	r6, r7
    d186:	7873      	ldrb	r3, [r6, #1]
            pcBuf++;
    d188:	1c77      	adds	r7, r6, #1
        while (*pcBuf)    // Get to end of new string
    d18a:	2b00      	cmp	r3, #0
    d18c:	d1fa      	bne.n	d184 <am_util_stdio_vsprintf+0x9d4>
    d18e:	1cb2      	adds	r2, r6, #2
    d190:	e480      	b.n	ca94 <am_util_stdio_vsprintf+0x2e4>
    while ( i32NumChars-- )
    d192:	3b01      	subs	r3, #1
    d194:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    d196:	2200      	movs	r2, #0
    d198:	1c51      	adds	r1, r2, #1
    d19a:	1e5c      	subs	r4, r3, #1
        if ( pcBuf )
    d19c:	2800      	cmp	r0, #0
    d19e:	d042      	beq.n	d226 <am_util_stdio_vsprintf+0xa76>
            *pcBuf++ = cPadChar;
    d1a0:	4625      	mov	r5, r4
    d1a2:	f880 8000 	strb.w	r8, [r0]
    d1a6:	461c      	mov	r4, r3
    d1a8:	460a      	mov	r2, r1
    d1aa:	462b      	mov	r3, r5
    d1ac:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d1ae:	2c00      	cmp	r4, #0
    d1b0:	d1f2      	bne.n	d198 <am_util_stdio_vsprintf+0x9e8>
    d1b2:	4493      	add	fp, r2
    d1b4:	e727      	b.n	d006 <am_util_stdio_vsprintf+0x856>
    d1b6:	1e48      	subs	r0, r1, #1
    d1b8:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d1ba:	2300      	movs	r3, #0
    d1bc:	1c59      	adds	r1, r3, #1
    d1be:	1e45      	subs	r5, r0, #1
        if ( pcBuf )
    d1c0:	b3bc      	cbz	r4, d232 <am_util_stdio_vsprintf+0xa82>
            *pcBuf++ = cPadChar;
    d1c2:	f884 8000 	strb.w	r8, [r4]
    d1c6:	460b      	mov	r3, r1
    d1c8:	3401      	adds	r4, #1
    d1ca:	4601      	mov	r1, r0
    while ( i32NumChars-- )
    d1cc:	4628      	mov	r0, r5
    d1ce:	2900      	cmp	r1, #0
    d1d0:	d1f4      	bne.n	d1bc <am_util_stdio_vsprintf+0xa0c>
    d1d2:	eb0b 0403 	add.w	r4, fp, r3
    d1d6:	e4ec      	b.n	cbb2 <am_util_stdio_vsprintf+0x402>
                bLongLong = true;
    d1d8:	2301      	movs	r3, #1
    d1da:	e5ab      	b.n	cd34 <am_util_stdio_vsprintf+0x584>
        bLower = bLongLong = false;
    d1dc:	2500      	movs	r5, #0
    d1de:	e5ad      	b.n	cd3c <am_util_stdio_vsprintf+0x58c>
    while ( i32NumChars-- )
    d1e0:	1e4b      	subs	r3, r1, #1
    d1e2:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d1e4:	2100      	movs	r1, #0
    d1e6:	1c48      	adds	r0, r1, #1
    d1e8:	1e5d      	subs	r5, r3, #1
        if ( pcBuf )
    d1ea:	b34c      	cbz	r4, d240 <am_util_stdio_vsprintf+0xa90>
            *pcBuf++ = cPadChar;
    d1ec:	f884 8000 	strb.w	r8, [r4]
    d1f0:	4601      	mov	r1, r0
    d1f2:	3401      	adds	r4, #1
    d1f4:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    d1f6:	462b      	mov	r3, r5
    d1f8:	2800      	cmp	r0, #0
    d1fa:	d1f4      	bne.n	d1e6 <am_util_stdio_vsprintf+0xa36>
    d1fc:	448b      	add	fp, r1
    d1fe:	e68d      	b.n	cf1c <am_util_stdio_vsprintf+0x76c>
                if ( iWidth > 0 )
    d200:	2900      	cmp	r1, #0
    d202:	f340 809a 	ble.w	d33a <am_util_stdio_vsprintf+0xb8a>
                    if ( ui32strlen < iWidth )
    d206:	4606      	mov	r6, r0
    d208:	1b89      	subs	r1, r1, r6
    d20a:	e4cd      	b.n	cba8 <am_util_stdio_vsprintf+0x3f8>
                            if ( pcBuf )
    d20c:	f1ba 0f00 	cmp.w	sl, #0
    d210:	d004      	beq.n	d21c <am_util_stdio_vsprintf+0xa6c>
                                *pcBuf++ = '-';
    d212:	232d      	movs	r3, #45	; 0x2d
    d214:	f88a 3000 	strb.w	r3, [sl]
    d218:	f10a 0a01 	add.w	sl, sl, #1
                            ++ui32CharCnt;
    d21c:	2301      	movs	r3, #1
    d21e:	f10b 0b01 	add.w	fp, fp, #1
    d222:	930f      	str	r3, [sp, #60]	; 0x3c
    d224:	e551      	b.n	ccca <am_util_stdio_vsprintf+0x51a>
    while ( i32NumChars-- )
    d226:	2b00      	cmp	r3, #0
    d228:	f000 80a1 	beq.w	d36e <am_util_stdio_vsprintf+0xbbe>
    d22c:	3b02      	subs	r3, #2
    d22e:	3202      	adds	r2, #2
    d230:	e7bd      	b.n	d1ae <am_util_stdio_vsprintf+0x9fe>
    d232:	2800      	cmp	r0, #0
    d234:	f000 809e 	beq.w	d374 <am_util_stdio_vsprintf+0xbc4>
    d238:	4629      	mov	r1, r5
    d23a:	3302      	adds	r3, #2
    d23c:	1e85      	subs	r5, r0, #2
    d23e:	e7c5      	b.n	d1cc <am_util_stdio_vsprintf+0xa1c>
    d240:	2b00      	cmp	r3, #0
    d242:	f000 809d 	beq.w	d380 <am_util_stdio_vsprintf+0xbd0>
    d246:	4628      	mov	r0, r5
    d248:	3102      	adds	r1, #2
    d24a:	1e9d      	subs	r5, r3, #2
    d24c:	e7d3      	b.n	d1f6 <am_util_stdio_vsprintf+0xa46>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d24e:	eba2 010a 	sub.w	r1, r2, sl
    d252:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d256:	42ab      	cmp	r3, r5
    d258:	bfa8      	it	ge
    d25a:	462b      	movge	r3, r5
        for (jx = 0; jx < iMax; jx++)
    d25c:	2b00      	cmp	r3, #0
    d25e:	dd0d      	ble.n	d27c <am_util_stdio_vsprintf+0xacc>
    d260:	18d1      	adds	r1, r2, r3
            i32FracPart *= 10;
    d262:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d266:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d268:	1623      	asrs	r3, r4, #24
    d26a:	3330      	adds	r3, #48	; 0x30
    d26c:	f802 3b01 	strb.w	r3, [r2], #1
        for (jx = 0; jx < iMax; jx++)
    d270:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
    d272:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d276:	d1f4      	bne.n	d262 <am_util_stdio_vsprintf+0xab2>
    d278:	eba2 010a 	sub.w	r1, r2, sl
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d27c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d280:	f344 53c7 	sbfx	r3, r4, #23, #8
    d284:	2b04      	cmp	r3, #4
    d286:	f77f ac10 	ble.w	caaa <am_util_stdio_vsprintf+0x2fa>
            pcBuftmp = pcBuf - 1;
    d28a:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d28c:	459a      	cmp	sl, r3
    d28e:	f63f ac0c 	bhi.w	caaa <am_util_stdio_vsprintf+0x2fa>
    d292:	f10a 35ff 	add.w	r5, sl, #4294967295
    d296:	e005      	b.n	d2a4 <am_util_stdio_vsprintf+0xaf4>
                    *pcBuftmp = '0';
    d298:	f04f 0030 	mov.w	r0, #48	; 0x30
    d29c:	7058      	strb	r0, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d29e:	429d      	cmp	r5, r3
    d2a0:	f43f ac03 	beq.w	caaa <am_util_stdio_vsprintf+0x2fa>
    d2a4:	461c      	mov	r4, r3
                if ( *pcBuftmp == '.' )
    d2a6:	f813 0901 	ldrb.w	r0, [r3], #-1
    d2aa:	282e      	cmp	r0, #46	; 0x2e
    d2ac:	d0f7      	beq.n	d29e <am_util_stdio_vsprintf+0xaee>
                else if ( *pcBuftmp == '9' )
    d2ae:	2839      	cmp	r0, #57	; 0x39
    d2b0:	d0f2      	beq.n	d298 <am_util_stdio_vsprintf+0xae8>
                    *pcBuftmp += 1;
    d2b2:	3001      	adds	r0, #1
    d2b4:	7020      	strb	r0, [r4, #0]
    d2b6:	f7ff bbf8 	b.w	caaa <am_util_stdio_vsprintf+0x2fa>
                while (*pcStr != 0x0)
    d2ba:	7838      	ldrb	r0, [r7, #0]
    d2bc:	2800      	cmp	r0, #0
    d2be:	d03c      	beq.n	d33a <am_util_stdio_vsprintf+0xb8a>
    d2c0:	465c      	mov	r4, fp
        return ui32RetVal;
    d2c2:	463e      	mov	r6, r7
    d2c4:	2301      	movs	r3, #1
    d2c6:	e44a      	b.n	cb5e <am_util_stdio_vsprintf+0x3ae>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d2c8:	4b39      	ldr	r3, [pc, #228]	; (d3b0 <am_util_stdio_vsprintf+0xc00>)
    d2ca:	f8ca 3000 	str.w	r3, [sl]
    d2ce:	2303      	movs	r3, #3
    d2d0:	f7ff bbf1 	b.w	cab6 <am_util_stdio_vsprintf+0x306>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2d6:	b11b      	cbz	r3, d2e0 <am_util_stdio_vsprintf+0xb30>
    d2d8:	f1b8 0f20 	cmp.w	r8, #32
    d2dc:	f43f ae3f 	beq.w	cf5e <am_util_stdio_vsprintf+0x7ae>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d2e4:	4652      	mov	r2, sl
    d2e6:	f7ff f98d 	bl	c604 <uint64_to_str>
                ui32CharCnt += iVal;
    d2ea:	4483      	add	fp, r0
    d2ec:	f7ff ba68 	b.w	c7c0 <am_util_stdio_vsprintf+0x10>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d2f0:	1c4b      	adds	r3, r1, #1
    d2f2:	d034      	beq.n	d35e <am_util_stdio_vsprintf+0xbae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2f4:	3102      	adds	r1, #2
    d2f6:	d141      	bne.n	d37c <am_util_stdio_vsprintf+0xbcc>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2f8:	4b2e      	ldr	r3, [pc, #184]	; (d3b4 <am_util_stdio_vsprintf+0xc04>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d2fa:	f8ca 3000 	str.w	r3, [sl]
    d2fe:	2303      	movs	r3, #3
    d300:	f7ff bbd9 	b.w	cab6 <am_util_stdio_vsprintf+0x306>
        if (i32IntPart > 0)
    d304:	f73f af37 	bgt.w	d176 <am_util_stdio_vsprintf+0x9c6>
            uint64_to_str(-i32IntPart, pcBuf);
    d308:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    d30a:	232d      	movs	r3, #45	; 0x2d
    d30c:	7033      	strb	r3, [r6, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d30e:	463a      	mov	r2, r7
    d310:	17c1      	asrs	r1, r0, #31
    d312:	463e      	mov	r6, r7
    d314:	f7ff f976 	bl	c604 <uint64_to_str>
    d318:	3701      	adds	r7, #1
    d31a:	e730      	b.n	d17e <am_util_stdio_vsprintf+0x9ce>
    i32FracPart = 0;
    d31c:	2400      	movs	r4, #0
        *pcBuf++ = '-';
    d31e:	4653      	mov	r3, sl
    d320:	222d      	movs	r2, #45	; 0x2d
    d322:	f803 2b02 	strb.w	r2, [r3], #2
    d326:	463e      	mov	r6, r7
    d328:	461f      	mov	r7, r3
    d32a:	f7ff bbac 	b.w	ca86 <am_util_stdio_vsprintf+0x2d6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d32e:	4652      	mov	r2, sl
    d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d334:	f7ff f966 	bl	c604 <uint64_to_str>
    d338:	e4f5      	b.n	cd26 <am_util_stdio_vsprintf+0x576>
        return ui32RetVal;
    d33a:	4606      	mov	r6, r0
    d33c:	e428      	b.n	cb90 <am_util_stdio_vsprintf+0x3e0>
    d33e:	4620      	mov	r0, r4
    d340:	44a3      	add	fp, r4
    d342:	e522      	b.n	cd8a <am_util_stdio_vsprintf+0x5da>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d344:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d346:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d348:	fa40 f402 	asr.w	r4, r0, r2
    d34c:	f10a 0202 	add.w	r2, sl, #2
    if (unFloatValue.I32 < 0)
    d350:	db1d      	blt.n	d38e <am_util_stdio_vsprintf+0xbde>
    d352:	4656      	mov	r6, sl
    d354:	f7ff bb9b 	b.w	ca8e <am_util_stdio_vsprintf+0x2de>
    d358:	460a      	mov	r2, r1
    d35a:	448b      	add	fp, r1
    d35c:	e4ba      	b.n	ccd4 <am_util_stdio_vsprintf+0x524>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d35e:	4b14      	ldr	r3, [pc, #80]	; (d3b0 <am_util_stdio_vsprintf+0xc00>)
    d360:	e7cb      	b.n	d2fa <am_util_stdio_vsprintf+0xb4a>
                    iWidth -= ndigits_in_i64(ui64Val);
    d362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d364:	eba3 0e0e 	sub.w	lr, r3, lr
                    bNeg = false;
    d368:	2300      	movs	r3, #0
    d36a:	930f      	str	r3, [sp, #60]	; 0x3c
    d36c:	e4ad      	b.n	ccca <am_util_stdio_vsprintf+0x51a>
    d36e:	460a      	mov	r2, r1
    d370:	448b      	add	fp, r1
    d372:	e648      	b.n	d006 <am_util_stdio_vsprintf+0x856>
    d374:	460b      	mov	r3, r1
    d376:	eb0b 0401 	add.w	r4, fp, r1
    d37a:	e41a      	b.n	cbb2 <am_util_stdio_vsprintf+0x402>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d37c:	4b0e      	ldr	r3, [pc, #56]	; (d3b8 <am_util_stdio_vsprintf+0xc08>)
    d37e:	e7bc      	b.n	d2fa <am_util_stdio_vsprintf+0xb4a>
    d380:	4601      	mov	r1, r0
    d382:	4483      	add	fp, r0
    d384:	e5ca      	b.n	cf1c <am_util_stdio_vsprintf+0x76c>
        while (*pcBuf)    // Get to end of new string
    d386:	463a      	mov	r2, r7
    d388:	4637      	mov	r7, r6
    d38a:	f7ff bb83 	b.w	ca94 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf++ = '-';
    d38e:	4653      	mov	r3, sl
    d390:	212d      	movs	r1, #45	; 0x2d
    d392:	f803 1b03 	strb.w	r1, [r3], #3
    d396:	463e      	mov	r6, r7
    d398:	4617      	mov	r7, r2
    d39a:	461a      	mov	r2, r3
    d39c:	f7ff bb77 	b.w	ca8e <am_util_stdio_vsprintf+0x2de>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d3a0:	2300      	movs	r3, #0
        uCnt++;
    d3a2:	2201      	movs	r2, #1
    d3a4:	f7ff bbbe 	b.w	cb24 <am_util_stdio_vsprintf+0x374>
                pcStr = va_arg(pArgs, char *);
    d3a8:	9201      	str	r2, [sp, #4]
                        ui32CharCnt += iWidth;
    d3aa:	46a3      	mov	fp, r4
    d3ac:	f7ff ba08 	b.w	c7c0 <am_util_stdio_vsprintf+0x10>
    d3b0:	00302e30 	.word	0x00302e30
    d3b4:	00232e23 	.word	0x00232e23
    d3b8:	003f2e3f 	.word	0x003f2e3f

0000d3bc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3bc:	b40f      	push	{r0, r1, r2, r3}
    d3be:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d3c0:	4d0a      	ldr	r5, [pc, #40]	; (d3ec <am_util_stdio_printf+0x30>)
    d3c2:	682c      	ldr	r4, [r5, #0]
{
    d3c4:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d3c6:	b154      	cbz	r4, d3de <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3c8:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3ca:	461a      	mov	r2, r3
    d3cc:	9906      	ldr	r1, [sp, #24]
    d3ce:	4808      	ldr	r0, [pc, #32]	; (d3f0 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d3d0:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3d2:	f7ff f9ed 	bl	c7b0 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3d6:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3d8:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d3da:	4805      	ldr	r0, [pc, #20]	; (d3f0 <am_util_stdio_printf+0x34>)
    d3dc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d3de:	4620      	mov	r0, r4
    d3e0:	b003      	add	sp, #12
    d3e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d3e6:	b004      	add	sp, #16
    d3e8:	4770      	bx	lr
    d3ea:	bf00      	nop
    d3ec:	10001130 	.word	0x10001130
    d3f0:	10001024 	.word	0x10001024

0000d3f4 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3f4:	4801      	ldr	r0, [pc, #4]	; (d3fc <am_util_stdio_terminal_clear+0x8>)
    d3f6:	f7ff bfe1 	b.w	d3bc <am_util_stdio_printf>
    d3fa:	bf00      	nop
    d3fc:	0000e774 	.word	0x0000e774

0000d400 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d400:	e7fe      	b.n	d400 <NMI_Handler>
    d402:	bf00      	nop

0000d404 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d404:	e7fe      	b.n	d404 <DebugMon_Handler>
    d406:	bf00      	nop

0000d408 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d408:	4811      	ldr	r0, [pc, #68]	; (d450 <zero_loop+0x12>)
    d40a:	4912      	ldr	r1, [pc, #72]	; (d454 <zero_loop+0x16>)
    d40c:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d40e:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d412:	4811      	ldr	r0, [pc, #68]	; (d458 <zero_loop+0x1a>)
    d414:	6801      	ldr	r1, [r0, #0]
    d416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d41a:	6001      	str	r1, [r0, #0]
    d41c:	f3bf 8f4f 	dsb	sy
    d420:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d424:	480d      	ldr	r0, [pc, #52]	; (d45c <zero_loop+0x1e>)
    d426:	490e      	ldr	r1, [pc, #56]	; (d460 <zero_loop+0x22>)
    d428:	4a0e      	ldr	r2, [pc, #56]	; (d464 <zero_loop+0x26>)

0000d42a <copy_loop>:
    d42a:	f850 3b04 	ldr.w	r3, [r0], #4
    d42e:	f841 3b04 	str.w	r3, [r1], #4
    d432:	4291      	cmp	r1, r2
    d434:	dbf9      	blt.n	d42a <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d436:	480c      	ldr	r0, [pc, #48]	; (d468 <zero_loop+0x2a>)
    d438:	490c      	ldr	r1, [pc, #48]	; (d46c <zero_loop+0x2e>)
    d43a:	f04f 0200 	mov.w	r2, #0

0000d43e <zero_loop>:
    d43e:	4288      	cmp	r0, r1
    d440:	bfb8      	it	lt
    d442:	f840 2b04 	strlt.w	r2, [r0], #4
    d446:	dbfa      	blt.n	d43e <zero_loop>
    main();
    d448:	f7fe ff44 	bl	c2d4 <main>
    __asm("    bkpt     ");
    d44c:	be00      	bkpt	0x0000
    d44e:	0000      	.short	0x0000
    d450:	e000ed08 	.word	0xe000ed08
    d454:	0000c000 	.word	0x0000c000
    d458:	e000ed88 	.word	0xe000ed88
    d45c:	0000ea34 	.word	0x0000ea34
    d460:	10001000 	.word	0x10001000
    d464:	10001020 	.word	0x10001020
    d468:	10001020 	.word	0x10001020
    d46c:	10001134 	.word	0x10001134

0000d470 <am_bsp_low_power_init>:
    d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d472:	f000 fcf3 	bl	de5c <am_hal_itm_disable>
    d476:	2000      	movs	r0, #0
    d478:	f7ff f994 	bl	c7a4 <am_util_stdio_printf_init>
    d47c:	4b12      	ldr	r3, [pc, #72]	; (d4c8 <am_bsp_low_power_init+0x58>)
    d47e:	4f13      	ldr	r7, [pc, #76]	; (d4cc <am_bsp_low_power_init+0x5c>)
    d480:	6819      	ldr	r1, [r3, #0]
    d482:	2021      	movs	r0, #33	; 0x21
    d484:	f000 f96a 	bl	d75c <am_hal_gpio_pinconfig>
    d488:	f000 fe42 	bl	e110 <am_hal_pwrctrl_low_power_init>
    d48c:	2001      	movs	r0, #1
    d48e:	f000 fe89 	bl	e1a4 <am_hal_rtc_osc_select>
    d492:	2100      	movs	r1, #0
    d494:	2003      	movs	r0, #3
    d496:	f000 f8a7 	bl	d5e8 <am_hal_clkgen_control>
    d49a:	f000 fe8f 	bl	e1bc <am_hal_rtc_osc_disable>
    d49e:	4b0c      	ldr	r3, [pc, #48]	; (d4d0 <am_bsp_low_power_init+0x60>)
    d4a0:	681e      	ldr	r6, [r3, #0]
    d4a2:	2400      	movs	r4, #0
    d4a4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d4a8:	4631      	mov	r1, r6
    d4aa:	4628      	mov	r0, r5
    d4ac:	f000 f956 	bl	d75c <am_hal_gpio_pinconfig>
    d4b0:	2103      	movs	r1, #3
    d4b2:	4628      	mov	r0, r5
    d4b4:	f000 fc62 	bl	dd7c <am_hal_gpio_state_write>
    d4b8:	3401      	adds	r4, #1
    d4ba:	4628      	mov	r0, r5
    d4bc:	2100      	movs	r1, #0
    d4be:	f000 fc5d 	bl	dd7c <am_hal_gpio_state_write>
    d4c2:	2c04      	cmp	r4, #4
    d4c4:	d1ee      	bne.n	d4a4 <am_bsp_low_power_init+0x34>
    d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4c8:	0000e8c0 	.word	0x0000e8c0
    d4cc:	10001000 	.word	0x10001000
    d4d0:	0000e8c4 	.word	0x0000e8c4

0000d4d4 <am_bsp_debug_printf_disable>:
    d4d4:	b538      	push	{r3, r4, r5, lr}
    d4d6:	4b17      	ldr	r3, [pc, #92]	; (d534 <am_bsp_debug_printf_disable+0x60>)
    d4d8:	681c      	ldr	r4, [r3, #0]
    d4da:	2c01      	cmp	r4, #1
    d4dc:	d01d      	beq.n	d51a <am_bsp_debug_printf_disable+0x46>
    d4de:	2c02      	cmp	r4, #2
    d4e0:	d000      	beq.n	d4e4 <am_bsp_debug_printf_disable+0x10>
    d4e2:	bd38      	pop	{r3, r4, r5, pc}
    d4e4:	4d14      	ldr	r5, [pc, #80]	; (d538 <am_bsp_debug_printf_disable+0x64>)
    d4e6:	6828      	ldr	r0, [r5, #0]
    d4e8:	f000 ff48 	bl	e37c <am_hal_uart_tx_flush>
    d4ec:	2000      	movs	r0, #0
    d4ee:	f7ff f959 	bl	c7a4 <am_util_stdio_printf_init>
    d4f2:	4621      	mov	r1, r4
    d4f4:	2200      	movs	r2, #0
    d4f6:	6828      	ldr	r0, [r5, #0]
    d4f8:	f000 fece 	bl	e298 <am_hal_uart_power_control>
    d4fc:	6828      	ldr	r0, [r5, #0]
    d4fe:	f000 feb7 	bl	e270 <am_hal_uart_deinitialize>
    d502:	4b0e      	ldr	r3, [pc, #56]	; (d53c <am_bsp_debug_printf_disable+0x68>)
    d504:	681c      	ldr	r4, [r3, #0]
    d506:	2030      	movs	r0, #48	; 0x30
    d508:	4621      	mov	r1, r4
    d50a:	f000 f927 	bl	d75c <am_hal_gpio_pinconfig>
    d50e:	4621      	mov	r1, r4
    d510:	2031      	movs	r0, #49	; 0x31
    d512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d516:	f000 b921 	b.w	d75c <am_hal_gpio_pinconfig>
    d51a:	f000 fc9f 	bl	de5c <am_hal_itm_disable>
    d51e:	2000      	movs	r0, #0
    d520:	f7ff f940 	bl	c7a4 <am_util_stdio_printf_init>
    d524:	4b05      	ldr	r3, [pc, #20]	; (d53c <am_bsp_debug_printf_disable+0x68>)
    d526:	2021      	movs	r0, #33	; 0x21
    d528:	6819      	ldr	r1, [r3, #0]
    d52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d52e:	f000 b915 	b.w	d75c <am_hal_gpio_pinconfig>
    d532:	bf00      	nop
    d534:	10001128 	.word	0x10001128
    d538:	10001124 	.word	0x10001124
    d53c:	0000e8c0 	.word	0x0000e8c0

0000d540 <am_bsp_itm_printf_enable>:
    d540:	b500      	push	{lr}
    d542:	4b0b      	ldr	r3, [pc, #44]	; (d570 <am_bsp_itm_printf_enable+0x30>)
    d544:	b087      	sub	sp, #28
    d546:	2201      	movs	r2, #1
    d548:	601a      	str	r2, [r3, #0]
    d54a:	f000 fc69 	bl	de20 <am_hal_itm_enable>
    d54e:	a806      	add	r0, sp, #24
    d550:	4b08      	ldr	r3, [pc, #32]	; (d574 <am_bsp_itm_printf_enable+0x34>)
    d552:	f840 3d14 	str.w	r3, [r0, #-20]!
    d556:	f000 fe3b 	bl	e1d0 <am_hal_tpiu_enable>
    d55a:	4b07      	ldr	r3, [pc, #28]	; (d578 <am_bsp_itm_printf_enable+0x38>)
    d55c:	2021      	movs	r0, #33	; 0x21
    d55e:	6819      	ldr	r1, [r3, #0]
    d560:	f000 f8fc 	bl	d75c <am_hal_gpio_pinconfig>
    d564:	4805      	ldr	r0, [pc, #20]	; (d57c <am_bsp_itm_printf_enable+0x3c>)
    d566:	f7ff f91d 	bl	c7a4 <am_util_stdio_printf_init>
    d56a:	b007      	add	sp, #28
    d56c:	f85d fb04 	ldr.w	pc, [sp], #4
    d570:	10001128 	.word	0x10001128
    d574:	000f4240 	.word	0x000f4240
    d578:	0000e788 	.word	0x0000e788
    d57c:	0000df09 	.word	0x0000df09

0000d580 <am_hal_cachectrl_config>:
    d580:	b530      	push	{r4, r5, lr}
    d582:	b083      	sub	sp, #12
    d584:	4605      	mov	r5, r0
    d586:	f000 fc43 	bl	de10 <am_hal_interrupt_master_disable>
    d58a:	4c11      	ldr	r4, [pc, #68]	; (d5d0 <am_hal_cachectrl_config+0x50>)
    d58c:	9001      	str	r0, [sp, #4]
    d58e:	6823      	ldr	r3, [r4, #0]
    d590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d594:	6023      	str	r3, [r4, #0]
    d596:	9801      	ldr	r0, [sp, #4]
    d598:	f000 fc3e 	bl	de18 <am_hal_interrupt_master_set>
    d59c:	78eb      	ldrb	r3, [r5, #3]
    d59e:	782a      	ldrb	r2, [r5, #0]
    d5a0:	78a8      	ldrb	r0, [r5, #2]
    d5a2:	7869      	ldrb	r1, [r5, #1]
    d5a4:	005b      	lsls	r3, r3, #1
    d5a6:	0112      	lsls	r2, r2, #4
    d5a8:	b2d2      	uxtb	r2, r2
    d5aa:	f003 0302 	and.w	r3, r3, #2
    d5ae:	4313      	orrs	r3, r2
    d5b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d5b4:	0080      	lsls	r0, r0, #2
    d5b6:	f000 000c 	and.w	r0, r0, #12
    d5ba:	020a      	lsls	r2, r1, #8
    d5bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d5c0:	4303      	orrs	r3, r0
    d5c2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d5c6:	4313      	orrs	r3, r2
    d5c8:	2000      	movs	r0, #0
    d5ca:	6023      	str	r3, [r4, #0]
    d5cc:	b003      	add	sp, #12
    d5ce:	bd30      	pop	{r4, r5, pc}
    d5d0:	40018000 	.word	0x40018000

0000d5d4 <am_hal_cachectrl_enable>:
    d5d4:	4a03      	ldr	r2, [pc, #12]	; (d5e4 <am_hal_cachectrl_enable+0x10>)
    d5d6:	6813      	ldr	r3, [r2, #0]
    d5d8:	f043 0301 	orr.w	r3, r3, #1
    d5dc:	6013      	str	r3, [r2, #0]
    d5de:	2000      	movs	r0, #0
    d5e0:	4770      	bx	lr
    d5e2:	bf00      	nop
    d5e4:	40018000 	.word	0x40018000

0000d5e8 <am_hal_clkgen_control>:
    d5e8:	4b32      	ldr	r3, [pc, #200]	; (d6b4 <am_hal_clkgen_control+0xcc>)
    d5ea:	681a      	ldr	r2, [r3, #0]
    d5ec:	b912      	cbnz	r2, d5f4 <am_hal_clkgen_control+0xc>
    d5ee:	4a32      	ldr	r2, [pc, #200]	; (d6b8 <am_hal_clkgen_control+0xd0>)
    d5f0:	6812      	ldr	r2, [r2, #0]
    d5f2:	601a      	str	r2, [r3, #0]
    d5f4:	2809      	cmp	r0, #9
    d5f6:	d85a      	bhi.n	d6ae <am_hal_clkgen_control+0xc6>
    d5f8:	e8df f000 	tbb	[pc, r0]
    d5fc:	261e160d 	.word	0x261e160d
    d600:	4640362e 	.word	0x4640362e
    d604:	054e      	.short	0x054e
    d606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d60a:	2000      	movs	r0, #0
    d60c:	6a1a      	ldr	r2, [r3, #32]
    d60e:	f36f 0200 	bfc	r2, #0, #1
    d612:	621a      	str	r2, [r3, #32]
    d614:	4770      	bx	lr
    d616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d61a:	2200      	movs	r2, #0
    d61c:	2147      	movs	r1, #71	; 0x47
    d61e:	6159      	str	r1, [r3, #20]
    d620:	4610      	mov	r0, r2
    d622:	619a      	str	r2, [r3, #24]
    d624:	615a      	str	r2, [r3, #20]
    d626:	4770      	bx	lr
    d628:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d62c:	2000      	movs	r0, #0
    d62e:	68d3      	ldr	r3, [r2, #12]
    d630:	f023 0301 	bic.w	r3, r3, #1
    d634:	60d3      	str	r3, [r2, #12]
    d636:	4770      	bx	lr
    d638:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d63c:	2000      	movs	r0, #0
    d63e:	68d3      	ldr	r3, [r2, #12]
    d640:	f023 0302 	bic.w	r3, r3, #2
    d644:	60d3      	str	r3, [r2, #12]
    d646:	4770      	bx	lr
    d648:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d64c:	2000      	movs	r0, #0
    d64e:	68d3      	ldr	r3, [r2, #12]
    d650:	f043 0301 	orr.w	r3, r3, #1
    d654:	60d3      	str	r3, [r2, #12]
    d656:	4770      	bx	lr
    d658:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d65c:	2000      	movs	r0, #0
    d65e:	68d3      	ldr	r3, [r2, #12]
    d660:	f043 0302 	orr.w	r3, r3, #2
    d664:	60d3      	str	r3, [r2, #12]
    d666:	4770      	bx	lr
    d668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d66c:	2200      	movs	r2, #0
    d66e:	2047      	movs	r0, #71	; 0x47
    d670:	2101      	movs	r1, #1
    d672:	6158      	str	r0, [r3, #20]
    d674:	6199      	str	r1, [r3, #24]
    d676:	4610      	mov	r0, r2
    d678:	615a      	str	r2, [r3, #20]
    d67a:	4770      	bx	lr
    d67c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d680:	2000      	movs	r0, #0
    d682:	68da      	ldr	r2, [r3, #12]
    d684:	60da      	str	r2, [r3, #12]
    d686:	4770      	bx	lr
    d688:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d68c:	2000      	movs	r0, #0
    d68e:	68d3      	ldr	r3, [r2, #12]
    d690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d694:	60d3      	str	r3, [r2, #12]
    d696:	4770      	bx	lr
    d698:	b139      	cbz	r1, d6aa <am_hal_clkgen_control+0xc2>
    d69a:	680b      	ldr	r3, [r1, #0]
    d69c:	f043 0301 	orr.w	r3, r3, #1
    d6a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6a4:	2000      	movs	r0, #0
    d6a6:	6213      	str	r3, [r2, #32]
    d6a8:	4770      	bx	lr
    d6aa:	4b04      	ldr	r3, [pc, #16]	; (d6bc <am_hal_clkgen_control+0xd4>)
    d6ac:	e7f8      	b.n	d6a0 <am_hal_clkgen_control+0xb8>
    d6ae:	2006      	movs	r0, #6
    d6b0:	4770      	bx	lr
    d6b2:	bf00      	nop
    d6b4:	1000112c 	.word	0x1000112c
    d6b8:	4ffff000 	.word	0x4ffff000
    d6bc:	0025b801 	.word	0x0025b801

0000d6c0 <am_hal_clkgen_status_get>:
    d6c0:	b1a8      	cbz	r0, d6ee <am_hal_clkgen_status_get+0x2e>
    d6c2:	b410      	push	{r4}
    d6c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6c8:	490a      	ldr	r1, [pc, #40]	; (d6f4 <am_hal_clkgen_status_get+0x34>)
    d6ca:	6994      	ldr	r4, [r2, #24]
    d6cc:	4b0a      	ldr	r3, [pc, #40]	; (d6f8 <am_hal_clkgen_status_get+0x38>)
    d6ce:	f014 0f01 	tst.w	r4, #1
    d6d2:	bf08      	it	eq
    d6d4:	460b      	moveq	r3, r1
    d6d6:	6003      	str	r3, [r0, #0]
    d6d8:	69d3      	ldr	r3, [r2, #28]
    d6da:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6de:	f003 0201 	and.w	r2, r3, #1
    d6e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d6e6:	6042      	str	r2, [r0, #4]
    d6e8:	7203      	strb	r3, [r0, #8]
    d6ea:	2000      	movs	r0, #0
    d6ec:	4770      	bx	lr
    d6ee:	2006      	movs	r0, #6
    d6f0:	4770      	bx	lr
    d6f2:	bf00      	nop
    d6f4:	02dc6c00 	.word	0x02dc6c00
    d6f8:	016e3600 	.word	0x016e3600

0000d6fc <am_hal_flash_delay>:
    d6fc:	4b00      	ldr	r3, [pc, #0]	; (d700 <am_hal_flash_delay+0x4>)
    d6fe:	4718      	bx	r3
    d700:	0800009d 	.word	0x0800009d

0000d704 <am_hal_flash_delay_status_check>:
    d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d708:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d70c:	460d      	mov	r5, r1
    d70e:	4616      	mov	r6, r2
    d710:	461f      	mov	r7, r3
    d712:	b17c      	cbz	r4, d734 <am_hal_flash_delay_status_check+0x30>
    d714:	4604      	mov	r4, r0
    d716:	f8df 8040 	ldr.w	r8, [pc, #64]	; d758 <am_hal_flash_delay_status_check+0x54>
    d71a:	e002      	b.n	d722 <am_hal_flash_delay_status_check+0x1e>
    d71c:	b1c4      	cbz	r4, d750 <am_hal_flash_delay_status_check+0x4c>
    d71e:	47c0      	blx	r8
    d720:	3c01      	subs	r4, #1
    d722:	682b      	ldr	r3, [r5, #0]
    d724:	4033      	ands	r3, r6
    d726:	429f      	cmp	r7, r3
    d728:	f04f 0001 	mov.w	r0, #1
    d72c:	d1f6      	bne.n	d71c <am_hal_flash_delay_status_check+0x18>
    d72e:	2000      	movs	r0, #0
    d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d734:	f8df 8020 	ldr.w	r8, [pc, #32]	; d758 <am_hal_flash_delay_status_check+0x54>
    d738:	4604      	mov	r4, r0
    d73a:	e002      	b.n	d742 <am_hal_flash_delay_status_check+0x3e>
    d73c:	b144      	cbz	r4, d750 <am_hal_flash_delay_status_check+0x4c>
    d73e:	47c0      	blx	r8
    d740:	3c01      	subs	r4, #1
    d742:	682b      	ldr	r3, [r5, #0]
    d744:	4033      	ands	r3, r6
    d746:	429f      	cmp	r7, r3
    d748:	f04f 0001 	mov.w	r0, #1
    d74c:	d0f6      	beq.n	d73c <am_hal_flash_delay_status_check+0x38>
    d74e:	e7ee      	b.n	d72e <am_hal_flash_delay_status_check+0x2a>
    d750:	2004      	movs	r0, #4
    d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d756:	bf00      	nop
    d758:	0800009d 	.word	0x0800009d

0000d75c <am_hal_gpio_pinconfig>:
    d75c:	2831      	cmp	r0, #49	; 0x31
    d75e:	d901      	bls.n	d764 <am_hal_gpio_pinconfig+0x8>
    d760:	2006      	movs	r0, #6
    d762:	4770      	bx	lr
    d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d768:	f001 0307 	and.w	r3, r1, #7
    d76c:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d770:	b085      	sub	sp, #20
    d772:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d776:	d014      	beq.n	d7a2 <am_hal_gpio_pinconfig+0x46>
    d778:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d77c:	1db4      	adds	r4, r6, #6
    d77e:	f004 0407 	and.w	r4, r4, #7
    d782:	2c03      	cmp	r4, #3
    d784:	f042 0201 	orr.w	r2, r2, #1
    d788:	f200 80ae 	bhi.w	d8e8 <am_hal_gpio_pinconfig+0x18c>
    d78c:	4c85      	ldr	r4, [pc, #532]	; (d9a4 <am_hal_gpio_pinconfig+0x248>)
    d78e:	5c24      	ldrb	r4, [r4, r0]
    d790:	07e7      	lsls	r7, r4, #31
    d792:	d403      	bmi.n	d79c <am_hal_gpio_pinconfig+0x40>
    d794:	4884      	ldr	r0, [pc, #528]	; (d9a8 <am_hal_gpio_pinconfig+0x24c>)
    d796:	b005      	add	sp, #20
    d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d79c:	3e02      	subs	r6, #2
    d79e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d7a2:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d7a6:	2c00      	cmp	r4, #0
    d7a8:	f040 8098 	bne.w	d8dc <am_hal_gpio_pinconfig+0x180>
    d7ac:	4c7f      	ldr	r4, [pc, #508]	; (d9ac <am_hal_gpio_pinconfig+0x250>)
    d7ae:	4d80      	ldr	r5, [pc, #512]	; (d9b0 <am_hal_gpio_pinconfig+0x254>)
    d7b0:	5c24      	ldrb	r4, [r4, r0]
    d7b2:	5c2d      	ldrb	r5, [r5, r0]
    d7b4:	411c      	asrs	r4, r3
    d7b6:	f014 0f01 	tst.w	r4, #1
    d7ba:	bf0c      	ite	eq
    d7bc:	2400      	moveq	r4, #0
    d7be:	2402      	movne	r4, #2
    d7c0:	42ab      	cmp	r3, r5
    d7c2:	ea42 0204 	orr.w	r2, r2, r4
    d7c6:	f000 809b 	beq.w	d900 <am_hal_gpio_pinconfig+0x1a4>
    d7ca:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d7ce:	105d      	asrs	r5, r3, #1
    d7d0:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d7d4:	00db      	lsls	r3, r3, #3
    d7d6:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d7da:	f003 0408 	and.w	r4, r3, #8
    d7de:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d7e2:	f007 060c 	and.w	r6, r7, #12
    d7e6:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d7ea:	2e04      	cmp	r6, #4
    d7ec:	ea43 0304 	orr.w	r3, r3, r4
    d7f0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d7f4:	462c      	mov	r4, r5
    d7f6:	f000 8090 	beq.w	d91a <am_hal_gpio_pinconfig+0x1be>
    d7fa:	4c6e      	ldr	r4, [pc, #440]	; (d9b4 <am_hal_gpio_pinconfig+0x258>)
    d7fc:	6824      	ldr	r4, [r4, #0]
    d7fe:	ebc4 0901 	rsb	r9, r4, r1
    d802:	fab9 f989 	clz	r9, r9
    d806:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d80a:	f017 0f60 	tst.w	r7, #96	; 0x60
    d80e:	bf04      	itt	eq
    d810:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d814:	f364 0300 	bfieq	r3, r4, #0, #1
    d818:	0084      	lsls	r4, r0, #2
    d81a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d81e:	2902      	cmp	r1, #2
    d820:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d824:	d07c      	beq.n	d920 <am_hal_gpio_pinconfig+0x1c4>
    d826:	f200 8082 	bhi.w	d92e <am_hal_gpio_pinconfig+0x1d2>
    d82a:	2901      	cmp	r1, #1
    d82c:	bf08      	it	eq
    d82e:	f042 0204 	orreq.w	r2, r2, #4
    d832:	f005 0518 	and.w	r5, r5, #24
    d836:	f04f 0800 	mov.w	r8, #0
    d83a:	f004 041c 	and.w	r4, r4, #28
    d83e:	0841      	lsrs	r1, r0, #1
    d840:	f020 0a03 	bic.w	sl, r0, #3
    d844:	270f      	movs	r7, #15
    d846:	f021 0103 	bic.w	r1, r1, #3
    d84a:	40a7      	lsls	r7, r4
    d84c:	26ff      	movs	r6, #255	; 0xff
    d84e:	fa03 f404 	lsl.w	r4, r3, r4
    d852:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d856:	40ae      	lsls	r6, r5
    d858:	9101      	str	r1, [sp, #4]
    d85a:	9300      	str	r3, [sp, #0]
    d85c:	4683      	mov	fp, r0
    d85e:	fa02 f505 	lsl.w	r5, r2, r5
    d862:	f000 fad5 	bl	de10 <am_hal_interrupt_master_disable>
    d866:	9b00      	ldr	r3, [sp, #0]
    d868:	9003      	str	r0, [sp, #12]
    d86a:	43ff      	mvns	r7, r7
    d86c:	43f6      	mvns	r6, r6
    d86e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d872:	f8df e160 	ldr.w	lr, [pc, #352]	; d9d4 <am_hal_gpio_pinconfig+0x278>
    d876:	4850      	ldr	r0, [pc, #320]	; (d9b8 <am_hal_gpio_pinconfig+0x25c>)
    d878:	9901      	ldr	r1, [sp, #4]
    d87a:	f1b9 0f00 	cmp.w	r9, #0
    d87e:	d00b      	beq.n	d898 <am_hal_gpio_pinconfig+0x13c>
    d880:	f00b 021f 	and.w	r2, fp, #31
    d884:	f04f 0901 	mov.w	r9, #1
    d888:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    d88c:	f8df c148 	ldr.w	ip, [pc, #328]	; d9d8 <am_hal_gpio_pinconfig+0x27c>
    d890:	fa09 f202 	lsl.w	r2, r9, r2
    d894:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    d898:	4a48      	ldr	r2, [pc, #288]	; (d9bc <am_hal_gpio_pinconfig+0x260>)
    d89a:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d89e:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    d8a2:	f8d3 c000 	ldr.w	ip, [r3]
    d8a6:	ea06 0c0c 	and.w	ip, r6, ip
    d8aa:	ea4c 0505 	orr.w	r5, ip, r5
    d8ae:	601d      	str	r5, [r3, #0]
    d8b0:	f851 300e 	ldr.w	r3, [r1, lr]
    d8b4:	403b      	ands	r3, r7
    d8b6:	4323      	orrs	r3, r4
    d8b8:	f841 300e 	str.w	r3, [r1, lr]
    d8bc:	f85a 3000 	ldr.w	r3, [sl, r0]
    d8c0:	401e      	ands	r6, r3
    d8c2:	2400      	movs	r4, #0
    d8c4:	ea46 0608 	orr.w	r6, r6, r8
    d8c8:	f84a 6000 	str.w	r6, [sl, r0]
    d8cc:	6614      	str	r4, [r2, #96]	; 0x60
    d8ce:	9803      	ldr	r0, [sp, #12]
    d8d0:	f000 faa2 	bl	de18 <am_hal_interrupt_master_set>
    d8d4:	4620      	mov	r0, r4
    d8d6:	b005      	add	sp, #20
    d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8dc:	2c01      	cmp	r4, #1
    d8de:	d015      	beq.n	d90c <am_hal_gpio_pinconfig+0x1b0>
    d8e0:	2c02      	cmp	r4, #2
    d8e2:	d032      	beq.n	d94a <am_hal_gpio_pinconfig+0x1ee>
    d8e4:	4836      	ldr	r0, [pc, #216]	; (d9c0 <am_hal_gpio_pinconfig+0x264>)
    d8e6:	e756      	b.n	d796 <am_hal_gpio_pinconfig+0x3a>
    d8e8:	2dc0      	cmp	r5, #192	; 0xc0
    d8ea:	d029      	beq.n	d940 <am_hal_gpio_pinconfig+0x1e4>
    d8ec:	2d20      	cmp	r5, #32
    d8ee:	f47f af58 	bne.w	d7a2 <am_hal_gpio_pinconfig+0x46>
    d8f2:	4c2c      	ldr	r4, [pc, #176]	; (d9a4 <am_hal_gpio_pinconfig+0x248>)
    d8f4:	5c24      	ldrb	r4, [r4, r0]
    d8f6:	f014 0f09 	tst.w	r4, #9
    d8fa:	f47f af4b 	bne.w	d794 <am_hal_gpio_pinconfig+0x38>
    d8fe:	e750      	b.n	d7a2 <am_hal_gpio_pinconfig+0x46>
    d900:	f3c1 4402 	ubfx	r4, r1, #16, #3
    d904:	2c07      	cmp	r4, #7
    d906:	d127      	bne.n	d958 <am_hal_gpio_pinconfig+0x1fc>
    d908:	482e      	ldr	r0, [pc, #184]	; (d9c4 <am_hal_gpio_pinconfig+0x268>)
    d90a:	e744      	b.n	d796 <am_hal_gpio_pinconfig+0x3a>
    d90c:	4c25      	ldr	r4, [pc, #148]	; (d9a4 <am_hal_gpio_pinconfig+0x248>)
    d90e:	5c24      	ldrb	r4, [r4, r0]
    d910:	07a5      	lsls	r5, r4, #30
    d912:	d5e7      	bpl.n	d8e4 <am_hal_gpio_pinconfig+0x188>
    d914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d918:	e748      	b.n	d7ac <am_hal_gpio_pinconfig+0x50>
    d91a:	f04f 0901 	mov.w	r9, #1
    d91e:	e774      	b.n	d80a <am_hal_gpio_pinconfig+0xae>
    d920:	f005 0518 	and.w	r5, r5, #24
    d924:	f04f 0801 	mov.w	r8, #1
    d928:	fa08 f805 	lsl.w	r8, r8, r5
    d92c:	e785      	b.n	d83a <am_hal_gpio_pinconfig+0xde>
    d92e:	f005 0518 	and.w	r5, r5, #24
    d932:	f04f 0801 	mov.w	r8, #1
    d936:	f042 0204 	orr.w	r2, r2, #4
    d93a:	fa08 f805 	lsl.w	r8, r8, r5
    d93e:	e77c      	b.n	d83a <am_hal_gpio_pinconfig+0xde>
    d940:	2814      	cmp	r0, #20
    d942:	f43f af2e 	beq.w	d7a2 <am_hal_gpio_pinconfig+0x46>
    d946:	4820      	ldr	r0, [pc, #128]	; (d9c8 <am_hal_gpio_pinconfig+0x26c>)
    d948:	e725      	b.n	d796 <am_hal_gpio_pinconfig+0x3a>
    d94a:	4c16      	ldr	r4, [pc, #88]	; (d9a4 <am_hal_gpio_pinconfig+0x248>)
    d94c:	5c24      	ldrb	r4, [r4, r0]
    d94e:	0764      	lsls	r4, r4, #29
    d950:	d5c8      	bpl.n	d8e4 <am_hal_gpio_pinconfig+0x188>
    d952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d956:	e729      	b.n	d7ac <am_hal_gpio_pinconfig+0x50>
    d958:	4d1c      	ldr	r5, [pc, #112]	; (d9cc <am_hal_gpio_pinconfig+0x270>)
    d95a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    d95e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    d962:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    d966:	429e      	cmp	r6, r3
    d968:	d00c      	beq.n	d984 <am_hal_gpio_pinconfig+0x228>
    d96a:	0084      	lsls	r4, r0, #2
    d96c:	4425      	add	r5, r4
    d96e:	786e      	ldrb	r6, [r5, #1]
    d970:	429e      	cmp	r6, r3
    d972:	d013      	beq.n	d99c <am_hal_gpio_pinconfig+0x240>
    d974:	78ae      	ldrb	r6, [r5, #2]
    d976:	429e      	cmp	r6, r3
    d978:	d00e      	beq.n	d998 <am_hal_gpio_pinconfig+0x23c>
    d97a:	78ed      	ldrb	r5, [r5, #3]
    d97c:	429d      	cmp	r5, r3
    d97e:	d00f      	beq.n	d9a0 <am_hal_gpio_pinconfig+0x244>
    d980:	4813      	ldr	r0, [pc, #76]	; (d9d0 <am_hal_gpio_pinconfig+0x274>)
    d982:	e708      	b.n	d796 <am_hal_gpio_pinconfig+0x3a>
    d984:	2300      	movs	r3, #0
    d986:	0084      	lsls	r4, r0, #2
    d988:	005b      	lsls	r3, r3, #1
    d98a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d98e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    d992:	f04f 0900 	mov.w	r9, #0
    d996:	e740      	b.n	d81a <am_hal_gpio_pinconfig+0xbe>
    d998:	2302      	movs	r3, #2
    d99a:	e7f5      	b.n	d988 <am_hal_gpio_pinconfig+0x22c>
    d99c:	2301      	movs	r3, #1
    d99e:	e7f3      	b.n	d988 <am_hal_gpio_pinconfig+0x22c>
    d9a0:	2303      	movs	r3, #3
    d9a2:	e7f1      	b.n	d988 <am_hal_gpio_pinconfig+0x22c>
    d9a4:	0000e790 	.word	0x0000e790
    d9a8:	08000100 	.word	0x08000100
    d9ac:	0000e88c 	.word	0x0000e88c
    d9b0:	0000e8c8 	.word	0x0000e8c8
    d9b4:	0000e8c0 	.word	0x0000e8c0
    d9b8:	400100e0 	.word	0x400100e0
    d9bc:	40010000 	.word	0x40010000
    d9c0:	08000102 	.word	0x08000102
    d9c4:	08000103 	.word	0x08000103
    d9c8:	08000101 	.word	0x08000101
    d9cc:	0000e7c4 	.word	0x0000e7c4
    d9d0:	08000104 	.word	0x08000104
    d9d4:	40010040 	.word	0x40010040
    d9d8:	400100b4 	.word	0x400100b4

0000d9dc <am_hal_gpio_fast_pinconfig>:
    d9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9e0:	468b      	mov	fp, r1
    d9e2:	49c0      	ldr	r1, [pc, #768]	; (dce4 <am_hal_gpio_fast_pinconfig+0x308>)
    d9e4:	4682      	mov	sl, r0
    d9e6:	2000      	movs	r0, #0
    d9e8:	ea00 000a 	and.w	r0, r0, sl
    d9ec:	ea01 010b 	and.w	r1, r1, fp
    d9f0:	461d      	mov	r5, r3
    d9f2:	ea50 0301 	orrs.w	r3, r0, r1
    d9f6:	b08f      	sub	sp, #60	; 0x3c
    d9f8:	d003      	beq.n	da02 <am_hal_gpio_fast_pinconfig+0x26>
    d9fa:	2006      	movs	r0, #6
    d9fc:	b00f      	add	sp, #60	; 0x3c
    d9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da02:	ea5a 030b 	orrs.w	r3, sl, fp
    da06:	4690      	mov	r8, r2
    da08:	f000 811d 	beq.w	dc46 <am_hal_gpio_fast_pinconfig+0x26a>
    da0c:	4652      	mov	r2, sl
    da0e:	465b      	mov	r3, fp
    da10:	2100      	movs	r1, #0
    da12:	f002 0001 	and.w	r0, r2, #1
    da16:	085b      	lsrs	r3, r3, #1
    da18:	ea4f 0232 	mov.w	r2, r2, rrx
    da1c:	4401      	add	r1, r0
    da1e:	ea52 0003 	orrs.w	r0, r2, r3
    da22:	d1f6      	bne.n	da12 <am_hal_gpio_fast_pinconfig+0x36>
    da24:	2908      	cmp	r1, #8
    da26:	d8e8      	bhi.n	d9fa <am_hal_gpio_fast_pinconfig+0x1e>
    da28:	f3c8 2307 	ubfx	r3, r8, #8, #8
    da2c:	f003 030c 	and.w	r3, r3, #12
    da30:	2b0c      	cmp	r3, #12
    da32:	d0e2      	beq.n	d9fa <am_hal_gpio_fast_pinconfig+0x1e>
    da34:	2300      	movs	r3, #0
    da36:	f008 02e0 	and.w	r2, r8, #224	; 0xe0
    da3a:	f8cd 8008 	str.w	r8, [sp, #8]
    da3e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; dd1c <am_hal_gpio_fast_pinconfig+0x340>
    da42:	9300      	str	r3, [sp, #0]
    da44:	4ca8      	ldr	r4, [pc, #672]	; (dce8 <am_hal_gpio_fast_pinconfig+0x30c>)
    da46:	9209      	str	r2, [sp, #36]	; 0x24
    da48:	461e      	mov	r6, r3
    da4a:	4698      	mov	r8, r3
    da4c:	9501      	str	r5, [sp, #4]
    da4e:	e00d      	b.n	da6c <am_hal_gpio_fast_pinconfig+0x90>
    da50:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
    da54:	ea4f 0a3a 	mov.w	sl, sl, rrx
    da58:	ea5a 030b 	orrs.w	r3, sl, fp
    da5c:	f106 0601 	add.w	r6, r6, #1
    da60:	f109 0901 	add.w	r9, r9, #1
    da64:	f104 0404 	add.w	r4, r4, #4
    da68:	f000 80f4 	beq.w	dc54 <am_hal_gpio_fast_pinconfig+0x278>
    da6c:	f00a 0201 	and.w	r2, sl, #1
    da70:	2300      	movs	r3, #0
    da72:	4313      	orrs	r3, r2
    da74:	d0ec      	beq.n	da50 <am_hal_gpio_fast_pinconfig+0x74>
    da76:	2e31      	cmp	r6, #49	; 0x31
    da78:	d8bf      	bhi.n	d9fa <am_hal_gpio_fast_pinconfig+0x1e>
    da7a:	9902      	ldr	r1, [sp, #8]
    da7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    da7e:	f001 0307 	and.w	r3, r1, #7
    da82:	00da      	lsls	r2, r3, #3
    da84:	b190      	cbz	r0, daac <am_hal_gpio_fast_pinconfig+0xd0>
    da86:	f3c1 1042 	ubfx	r0, r1, #5, #3
    da8a:	1d81      	adds	r1, r0, #6
    da8c:	f001 0107 	and.w	r1, r1, #7
    da90:	2903      	cmp	r1, #3
    da92:	f042 0201 	orr.w	r2, r2, #1
    da96:	f200 80df 	bhi.w	dc58 <am_hal_gpio_fast_pinconfig+0x27c>
    da9a:	f899 1000 	ldrb.w	r1, [r9]
    da9e:	07cf      	lsls	r7, r1, #31
    daa0:	d401      	bmi.n	daa6 <am_hal_gpio_fast_pinconfig+0xca>
    daa2:	4892      	ldr	r0, [pc, #584]	; (dcec <am_hal_gpio_fast_pinconfig+0x310>)
    daa4:	e7aa      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    daa6:	3802      	subs	r0, #2
    daa8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
    daac:	9902      	ldr	r1, [sp, #8]
    daae:	f3c1 01c1 	ubfx	r1, r1, #3, #2
    dab2:	2900      	cmp	r1, #0
    dab4:	f040 80c1 	bne.w	dc3a <am_hal_gpio_fast_pinconfig+0x25e>
    dab8:	498d      	ldr	r1, [pc, #564]	; (dcf0 <am_hal_gpio_fast_pinconfig+0x314>)
    daba:	488e      	ldr	r0, [pc, #568]	; (dcf4 <am_hal_gpio_fast_pinconfig+0x318>)
    dabc:	5c71      	ldrb	r1, [r6, r1]
    dabe:	4119      	asrs	r1, r3
    dac0:	f011 0f01 	tst.w	r1, #1
    dac4:	5c31      	ldrb	r1, [r6, r0]
    dac6:	bf0c      	ite	eq
    dac8:	2500      	moveq	r5, #0
    daca:	2502      	movne	r5, #2
    dacc:	428b      	cmp	r3, r1
    dace:	ea42 0c05 	orr.w	ip, r2, r5
    dad2:	f000 80dc 	beq.w	dc8e <am_hal_gpio_fast_pinconfig+0x2b2>
    dad6:	9d02      	ldr	r5, [sp, #8]
    dad8:	f3c5 3341 	ubfx	r3, r5, #13, #2
    dadc:	1059      	asrs	r1, r3, #1
    dade:	f3c5 2781 	ubfx	r7, r5, #10, #2
    dae2:	00db      	lsls	r3, r3, #3
    dae4:	f3c5 2207 	ubfx	r2, r5, #8, #8
    dae8:	ea41 0747 	orr.w	r7, r1, r7, lsl #1
    daec:	f003 0308 	and.w	r3, r3, #8
    daf0:	f002 000c 	and.w	r0, r2, #12
    daf4:	f3c5 3100 	ubfx	r1, r5, #12, #1
    daf8:	433b      	orrs	r3, r7
    dafa:	2804      	cmp	r0, #4
    dafc:	9304      	str	r3, [sp, #16]
    dafe:	ea4c 0c41 	orr.w	ip, ip, r1, lsl #1
    db02:	f000 80d2 	beq.w	dcaa <am_hal_gpio_fast_pinconfig+0x2ce>
    db06:	4b7c      	ldr	r3, [pc, #496]	; (dcf8 <am_hal_gpio_fast_pinconfig+0x31c>)
    db08:	681b      	ldr	r3, [r3, #0]
    db0a:	1aeb      	subs	r3, r5, r3
    db0c:	fab3 f383 	clz	r3, r3
    db10:	095b      	lsrs	r3, r3, #5
    db12:	9307      	str	r3, [sp, #28]
    db14:	f012 0f60 	tst.w	r2, #96	; 0x60
    db18:	d106      	bne.n	db28 <am_hal_gpio_fast_pinconfig+0x14c>
    db1a:	9b02      	ldr	r3, [sp, #8]
    db1c:	9a04      	ldr	r2, [sp, #16]
    db1e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
    db22:	f363 0200 	bfi	r2, r3, #0, #1
    db26:	9204      	str	r2, [sp, #16]
    db28:	9a02      	ldr	r2, [sp, #8]
    db2a:	00b3      	lsls	r3, r6, #2
    db2c:	f3c2 2201 	ubfx	r2, r2, #8, #2
    db30:	2a02      	cmp	r2, #2
    db32:	ea4f 05c6 	mov.w	r5, r6, lsl #3
    db36:	f000 80bb 	beq.w	dcb0 <am_hal_gpio_fast_pinconfig+0x2d4>
    db3a:	f200 80bf 	bhi.w	dcbc <am_hal_gpio_fast_pinconfig+0x2e0>
    db3e:	2a01      	cmp	r2, #1
    db40:	f04f 0200 	mov.w	r2, #0
    db44:	bf08      	it	eq
    db46:	f04c 0c04 	orreq.w	ip, ip, #4
    db4a:	f005 0518 	and.w	r5, r5, #24
    db4e:	9203      	str	r2, [sp, #12]
    db50:	f003 031c 	and.w	r3, r3, #28
    db54:	461f      	mov	r7, r3
    db56:	23ff      	movs	r3, #255	; 0xff
    db58:	40ab      	lsls	r3, r5
    db5a:	9308      	str	r3, [sp, #32]
    db5c:	9b04      	ldr	r3, [sp, #16]
    db5e:	4967      	ldr	r1, [pc, #412]	; (dcfc <am_hal_gpio_fast_pinconfig+0x320>)
    db60:	4a67      	ldr	r2, [pc, #412]	; (dd00 <am_hal_gpio_fast_pinconfig+0x324>)
    db62:	40bb      	lsls	r3, r7
    db64:	f04f 0e0f 	mov.w	lr, #15
    db68:	fa0e fe07 	lsl.w	lr, lr, r7
    db6c:	9306      	str	r3, [sp, #24]
    db6e:	fa0c f305 	lsl.w	r3, ip, r5
    db72:	9305      	str	r3, [sp, #20]
    db74:	ea6f 030e 	mvn.w	r3, lr
    db78:	9304      	str	r3, [sp, #16]
    db7a:	0870      	lsrs	r0, r6, #1
    db7c:	9b08      	ldr	r3, [sp, #32]
    db7e:	f020 0003 	bic.w	r0, r0, #3
    db82:	f026 0703 	bic.w	r7, r6, #3
    db86:	443a      	add	r2, r7
    db88:	4401      	add	r1, r0
    db8a:	43db      	mvns	r3, r3
    db8c:	910b      	str	r1, [sp, #44]	; 0x2c
    db8e:	930a      	str	r3, [sp, #40]	; 0x28
    db90:	9208      	str	r2, [sp, #32]
    db92:	f000 f93d 	bl	de10 <am_hal_interrupt_master_disable>
    db96:	900d      	str	r0, [sp, #52]	; 0x34
    db98:	9807      	ldr	r0, [sp, #28]
    db9a:	9a08      	ldr	r2, [sp, #32]
    db9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dba0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    dba4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
    dba8:	ea4f 1e56 	mov.w	lr, r6, lsr #5
    dbac:	2800      	cmp	r0, #0
    dbae:	d160      	bne.n	dc72 <am_hal_gpio_fast_pinconfig+0x296>
    dbb0:	f006 001f 	and.w	r0, r6, #31
    dbb4:	4605      	mov	r5, r0
    dbb6:	f04f 0c01 	mov.w	ip, #1
    dbba:	ea4f 008e 	mov.w	r0, lr, lsl #2
    dbbe:	9008      	str	r0, [sp, #32]
    dbc0:	fa0c f005 	lsl.w	r0, ip, r5
    dbc4:	9007      	str	r0, [sp, #28]
    dbc6:	484f      	ldr	r0, [pc, #316]	; (dd04 <am_hal_gpio_fast_pinconfig+0x328>)
    dbc8:	f04f 0e73 	mov.w	lr, #115	; 0x73
    dbcc:	f8c0 e060 	str.w	lr, [r0, #96]	; 0x60
    dbd0:	f8d7 e000 	ldr.w	lr, [r7]
    dbd4:	9d05      	ldr	r5, [sp, #20]
    dbd6:	ea03 0e0e 	and.w	lr, r3, lr
    dbda:	ea4e 0505 	orr.w	r5, lr, r5
    dbde:	603d      	str	r5, [r7, #0]
    dbe0:	680d      	ldr	r5, [r1, #0]
    dbe2:	9f04      	ldr	r7, [sp, #16]
    dbe4:	402f      	ands	r7, r5
    dbe6:	463d      	mov	r5, r7
    dbe8:	9f06      	ldr	r7, [sp, #24]
    dbea:	433d      	orrs	r5, r7
    dbec:	600d      	str	r5, [r1, #0]
    dbee:	6811      	ldr	r1, [r2, #0]
    dbf0:	400b      	ands	r3, r1
    dbf2:	9903      	ldr	r1, [sp, #12]
    dbf4:	430b      	orrs	r3, r1
    dbf6:	2100      	movs	r1, #0
    dbf8:	6013      	str	r3, [r2, #0]
    dbfa:	6601      	str	r1, [r0, #96]	; 0x60
    dbfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    dbfe:	f000 f90b 	bl	de18 <am_hal_interrupt_master_set>
    dc02:	4a41      	ldr	r2, [pc, #260]	; (dd08 <am_hal_gpio_fast_pinconfig+0x32c>)
    dc04:	9b08      	ldr	r3, [sp, #32]
    dc06:	9801      	ldr	r0, [sp, #4]
    dc08:	4413      	add	r3, r2
    dc0a:	461a      	mov	r2, r3
    dc0c:	f006 0107 	and.w	r1, r6, #7
    dc10:	2301      	movs	r3, #1
    dc12:	408b      	lsls	r3, r1
    dc14:	9907      	ldr	r1, [sp, #28]
    dc16:	6011      	str	r1, [r2, #0]
    dc18:	9a00      	ldr	r2, [sp, #0]
    dc1a:	431a      	orrs	r2, r3
    dc1c:	4611      	mov	r1, r2
    dc1e:	9200      	str	r2, [sp, #0]
    dc20:	b140      	cbz	r0, dc34 <am_hal_gpio_fast_pinconfig+0x258>
    dc22:	0413      	lsls	r3, r2, #16
    dc24:	eb00 0288 	add.w	r2, r0, r8, lsl #2
    dc28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    dc2c:	b2c9      	uxtb	r1, r1
    dc2e:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
    dc32:	6053      	str	r3, [r2, #4]
    dc34:	f108 0802 	add.w	r8, r8, #2
    dc38:	e70a      	b.n	da50 <am_hal_gpio_fast_pinconfig+0x74>
    dc3a:	2901      	cmp	r1, #1
    dc3c:	d02e      	beq.n	dc9c <am_hal_gpio_fast_pinconfig+0x2c0>
    dc3e:	2902      	cmp	r1, #2
    dc40:	d049      	beq.n	dcd6 <am_hal_gpio_fast_pinconfig+0x2fa>
    dc42:	4832      	ldr	r0, [pc, #200]	; (dd0c <am_hal_gpio_fast_pinconfig+0x330>)
    dc44:	e6da      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    dc46:	f3c2 2307 	ubfx	r3, r2, #8, #8
    dc4a:	f003 030c 	and.w	r3, r3, #12
    dc4e:	2b0c      	cmp	r3, #12
    dc50:	f43f aed3 	beq.w	d9fa <am_hal_gpio_fast_pinconfig+0x1e>
    dc54:	2000      	movs	r0, #0
    dc56:	e6d1      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    dc58:	9909      	ldr	r1, [sp, #36]	; 0x24
    dc5a:	29c0      	cmp	r1, #192	; 0xc0
    dc5c:	d036      	beq.n	dccc <am_hal_gpio_fast_pinconfig+0x2f0>
    dc5e:	2920      	cmp	r1, #32
    dc60:	f47f af24 	bne.w	daac <am_hal_gpio_fast_pinconfig+0xd0>
    dc64:	f899 1000 	ldrb.w	r1, [r9]
    dc68:	f011 0f09 	tst.w	r1, #9
    dc6c:	f47f af19 	bne.w	daa2 <am_hal_gpio_fast_pinconfig+0xc6>
    dc70:	e71c      	b.n	daac <am_hal_gpio_fast_pinconfig+0xd0>
    dc72:	4d27      	ldr	r5, [pc, #156]	; (dd10 <am_hal_gpio_fast_pinconfig+0x334>)
    dc74:	ea4f 008e 	mov.w	r0, lr, lsl #2
    dc78:	4405      	add	r5, r0
    dc7a:	f006 0e1f 	and.w	lr, r6, #31
    dc7e:	f04f 0c01 	mov.w	ip, #1
    dc82:	9008      	str	r0, [sp, #32]
    dc84:	fa0c f00e 	lsl.w	r0, ip, lr
    dc88:	9007      	str	r0, [sp, #28]
    dc8a:	6028      	str	r0, [r5, #0]
    dc8c:	e79b      	b.n	dbc6 <am_hal_gpio_fast_pinconfig+0x1ea>
    dc8e:	9b02      	ldr	r3, [sp, #8]
    dc90:	f3c3 4302 	ubfx	r3, r3, #16, #3
    dc94:	2b07      	cmp	r3, #7
    dc96:	d143      	bne.n	dd20 <am_hal_gpio_fast_pinconfig+0x344>
    dc98:	481e      	ldr	r0, [pc, #120]	; (dd14 <am_hal_gpio_fast_pinconfig+0x338>)
    dc9a:	e6af      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    dc9c:	f899 1000 	ldrb.w	r1, [r9]
    dca0:	0788      	lsls	r0, r1, #30
    dca2:	d5ce      	bpl.n	dc42 <am_hal_gpio_fast_pinconfig+0x266>
    dca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dca8:	e706      	b.n	dab8 <am_hal_gpio_fast_pinconfig+0xdc>
    dcaa:	2301      	movs	r3, #1
    dcac:	9307      	str	r3, [sp, #28]
    dcae:	e731      	b.n	db14 <am_hal_gpio_fast_pinconfig+0x138>
    dcb0:	f005 0518 	and.w	r5, r5, #24
    dcb4:	2201      	movs	r2, #1
    dcb6:	40aa      	lsls	r2, r5
    dcb8:	9203      	str	r2, [sp, #12]
    dcba:	e749      	b.n	db50 <am_hal_gpio_fast_pinconfig+0x174>
    dcbc:	f005 0518 	and.w	r5, r5, #24
    dcc0:	2201      	movs	r2, #1
    dcc2:	40aa      	lsls	r2, r5
    dcc4:	f04c 0c04 	orr.w	ip, ip, #4
    dcc8:	9203      	str	r2, [sp, #12]
    dcca:	e741      	b.n	db50 <am_hal_gpio_fast_pinconfig+0x174>
    dccc:	2e14      	cmp	r6, #20
    dcce:	f43f aeed 	beq.w	daac <am_hal_gpio_fast_pinconfig+0xd0>
    dcd2:	4811      	ldr	r0, [pc, #68]	; (dd18 <am_hal_gpio_fast_pinconfig+0x33c>)
    dcd4:	e692      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    dcd6:	f899 1000 	ldrb.w	r1, [r9]
    dcda:	0749      	lsls	r1, r1, #29
    dcdc:	d5b1      	bpl.n	dc42 <am_hal_gpio_fast_pinconfig+0x266>
    dcde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dce2:	e6e9      	b.n	dab8 <am_hal_gpio_fast_pinconfig+0xdc>
    dce4:	fffc0000 	.word	0xfffc0000
    dce8:	0000e7c4 	.word	0x0000e7c4
    dcec:	08000100 	.word	0x08000100
    dcf0:	0000e88c 	.word	0x0000e88c
    dcf4:	0000e8c8 	.word	0x0000e8c8
    dcf8:	0000e8c0 	.word	0x0000e8c0
    dcfc:	40010040 	.word	0x40010040
    dd00:	400100e0 	.word	0x400100e0
    dd04:	40010000 	.word	0x40010000
    dd08:	400100a8 	.word	0x400100a8
    dd0c:	08000102 	.word	0x08000102
    dd10:	400100b4 	.word	0x400100b4
    dd14:	08000103 	.word	0x08000103
    dd18:	08000101 	.word	0x08000101
    dd1c:	0000e790 	.word	0x0000e790
    dd20:	9a02      	ldr	r2, [sp, #8]
    dd22:	4914      	ldr	r1, [pc, #80]	; (dd74 <am_hal_gpio_fast_pinconfig+0x398>)
    dd24:	f3c2 42c1 	ubfx	r2, r2, #19, #2
    dd28:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
    dd2c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    dd30:	4291      	cmp	r1, r2
    dd32:	ea4f 0386 	mov.w	r3, r6, lsl #2
    dd36:	d00a      	beq.n	dd4e <am_hal_gpio_fast_pinconfig+0x372>
    dd38:	7861      	ldrb	r1, [r4, #1]
    dd3a:	4291      	cmp	r1, r2
    dd3c:	d017      	beq.n	dd6e <am_hal_gpio_fast_pinconfig+0x392>
    dd3e:	78a1      	ldrb	r1, [r4, #2]
    dd40:	4291      	cmp	r1, r2
    dd42:	d012      	beq.n	dd6a <am_hal_gpio_fast_pinconfig+0x38e>
    dd44:	78e1      	ldrb	r1, [r4, #3]
    dd46:	4291      	cmp	r1, r2
    dd48:	d00d      	beq.n	dd66 <am_hal_gpio_fast_pinconfig+0x38a>
    dd4a:	480b      	ldr	r0, [pc, #44]	; (dd78 <am_hal_gpio_fast_pinconfig+0x39c>)
    dd4c:	e656      	b.n	d9fc <am_hal_gpio_fast_pinconfig+0x20>
    dd4e:	2200      	movs	r2, #0
    dd50:	9902      	ldr	r1, [sp, #8]
    dd52:	0052      	lsls	r2, r2, #1
    dd54:	f3c1 5740 	ubfx	r7, r1, #21, #1
    dd58:	ea42 02c7 	orr.w	r2, r2, r7, lsl #3
    dd5c:	9204      	str	r2, [sp, #16]
    dd5e:	2200      	movs	r2, #0
    dd60:	9207      	str	r2, [sp, #28]
    dd62:	460a      	mov	r2, r1
    dd64:	e6e2      	b.n	db2c <am_hal_gpio_fast_pinconfig+0x150>
    dd66:	2203      	movs	r2, #3
    dd68:	e7f2      	b.n	dd50 <am_hal_gpio_fast_pinconfig+0x374>
    dd6a:	2202      	movs	r2, #2
    dd6c:	e7f0      	b.n	dd50 <am_hal_gpio_fast_pinconfig+0x374>
    dd6e:	2201      	movs	r2, #1
    dd70:	e7ee      	b.n	dd50 <am_hal_gpio_fast_pinconfig+0x374>
    dd72:	bf00      	nop
    dd74:	0000e7c4 	.word	0x0000e7c4
    dd78:	08000104 	.word	0x08000104

0000dd7c <am_hal_gpio_state_write>:
    dd7c:	2831      	cmp	r0, #49	; 0x31
    dd7e:	d901      	bls.n	dd84 <am_hal_gpio_state_write+0x8>
    dd80:	2005      	movs	r0, #5
    dd82:	4770      	bx	lr
    dd84:	2905      	cmp	r1, #5
    dd86:	d901      	bls.n	dd8c <am_hal_gpio_state_write+0x10>
    dd88:	2006      	movs	r0, #6
    dd8a:	4770      	bx	lr
    dd8c:	b570      	push	{r4, r5, r6, lr}
    dd8e:	f000 031f 	and.w	r3, r0, #31
    dd92:	b082      	sub	sp, #8
    dd94:	2201      	movs	r2, #1
    dd96:	460d      	mov	r5, r1
    dd98:	4604      	mov	r4, r0
    dd9a:	fa02 f603 	lsl.w	r6, r2, r3
    dd9e:	f000 f837 	bl	de10 <am_hal_interrupt_master_disable>
    dda2:	1e69      	subs	r1, r5, #1
    dda4:	9001      	str	r0, [sp, #4]
    dda6:	0960      	lsrs	r0, r4, #5
    dda8:	2904      	cmp	r1, #4
    ddaa:	d81c      	bhi.n	dde6 <am_hal_gpio_state_write+0x6a>
    ddac:	e8df f001 	tbb	[pc, r1]
    ddb0:	030c1017 	.word	0x030c1017
    ddb4:	1f          	.byte	0x1f
    ddb5:	00          	.byte	0x00
    ddb6:	4b11      	ldr	r3, [pc, #68]	; (ddfc <am_hal_gpio_state_write+0x80>)
    ddb8:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    ddbc:	9801      	ldr	r0, [sp, #4]
    ddbe:	f000 f82b 	bl	de18 <am_hal_interrupt_master_set>
    ddc2:	2000      	movs	r0, #0
    ddc4:	b002      	add	sp, #8
    ddc6:	bd70      	pop	{r4, r5, r6, pc}
    ddc8:	4b0d      	ldr	r3, [pc, #52]	; (de00 <am_hal_gpio_state_write+0x84>)
    ddca:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    ddce:	e7f5      	b.n	ddbc <am_hal_gpio_state_write+0x40>
    ddd0:	4a0c      	ldr	r2, [pc, #48]	; (de04 <am_hal_gpio_state_write+0x88>)
    ddd2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    ddd6:	4073      	eors	r3, r6
    ddd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dddc:	e7ee      	b.n	ddbc <am_hal_gpio_state_write+0x40>
    ddde:	4b0a      	ldr	r3, [pc, #40]	; (de08 <am_hal_gpio_state_write+0x8c>)
    dde0:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dde4:	e7ea      	b.n	ddbc <am_hal_gpio_state_write+0x40>
    dde6:	4b09      	ldr	r3, [pc, #36]	; (de0c <am_hal_gpio_state_write+0x90>)
    dde8:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    ddec:	e7e6      	b.n	ddbc <am_hal_gpio_state_write+0x40>
    ddee:	4a04      	ldr	r2, [pc, #16]	; (de00 <am_hal_gpio_state_write+0x84>)
    ddf0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    ddf4:	4073      	eors	r3, r6
    ddf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    ddfa:	e7df      	b.n	ddbc <am_hal_gpio_state_write+0x40>
    ddfc:	400100a8 	.word	0x400100a8
    de00:	400100b4 	.word	0x400100b4
    de04:	40010088 	.word	0x40010088
    de08:	40010090 	.word	0x40010090
    de0c:	40010098 	.word	0x40010098

0000de10 <am_hal_interrupt_master_disable>:
    de10:	f3ef 8010 	mrs	r0, PRIMASK
    de14:	b672      	cpsid	i
    de16:	4770      	bx	lr

0000de18 <am_hal_interrupt_master_set>:
    de18:	f380 8810 	msr	PRIMASK, r0
    de1c:	4770      	bx	lr
    de1e:	bf00      	nop

0000de20 <am_hal_itm_enable>:
    de20:	4a0b      	ldr	r2, [pc, #44]	; (de50 <am_hal_itm_enable+0x30>)
    de22:	68d3      	ldr	r3, [r2, #12]
    de24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    de28:	60d3      	str	r3, [r2, #12]
    de2a:	68d3      	ldr	r3, [r2, #12]
    de2c:	01db      	lsls	r3, r3, #7
    de2e:	d5fc      	bpl.n	de2a <am_hal_itm_enable+0xa>
    de30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    de34:	4907      	ldr	r1, [pc, #28]	; (de54 <am_hal_itm_enable+0x34>)
    de36:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    de3a:	4a07      	ldr	r2, [pc, #28]	; (de58 <am_hal_itm_enable+0x38>)
    de3c:	200f      	movs	r0, #15
    de3e:	f04f 31ff 	mov.w	r1, #4294967295
    de42:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    de46:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    de4a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    de4e:	4770      	bx	lr
    de50:	e000edf0 	.word	0xe000edf0
    de54:	c5acce55 	.word	0xc5acce55
    de58:	00150511 	.word	0x00150511

0000de5c <am_hal_itm_disable>:
    de5c:	b510      	push	{r4, lr}
    de5e:	4b25      	ldr	r3, [pc, #148]	; (def4 <am_hal_itm_disable+0x98>)
    de60:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    de64:	b9b3      	cbnz	r3, de94 <am_hal_itm_disable+0x38>
    de66:	4b24      	ldr	r3, [pc, #144]	; (def8 <am_hal_itm_disable+0x9c>)
    de68:	68da      	ldr	r2, [r3, #12]
    de6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    de6e:	60da      	str	r2, [r3, #12]
    de70:	68da      	ldr	r2, [r3, #12]
    de72:	01d2      	lsls	r2, r2, #7
    de74:	d5fc      	bpl.n	de70 <am_hal_itm_disable+0x14>
    de76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    de7a:	4920      	ldr	r1, [pc, #128]	; (defc <am_hal_itm_disable+0xa0>)
    de7c:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    de80:	4a1f      	ldr	r2, [pc, #124]	; (df00 <am_hal_itm_disable+0xa4>)
    de82:	200f      	movs	r0, #15
    de84:	f04f 31ff 	mov.w	r1, #4294967295
    de88:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    de8c:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    de90:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    de94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    de98:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    de9c:	021b      	lsls	r3, r3, #8
    de9e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dea2:	d4f9      	bmi.n	de98 <am_hal_itm_disable+0x3c>
    dea4:	f240 20f7 	movw	r0, #759	; 0x2f7
    dea8:	f7ff fc28 	bl	d6fc <am_hal_flash_delay>
    deac:	4b13      	ldr	r3, [pc, #76]	; (defc <am_hal_itm_disable+0xa0>)
    deae:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    deb2:	4621      	mov	r1, r4
    deb4:	2064      	movs	r0, #100	; 0x64
    deb6:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    deba:	f023 0301 	bic.w	r3, r3, #1
    debe:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    dec2:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    dec6:	4b0f      	ldr	r3, [pc, #60]	; (df04 <am_hal_itm_disable+0xa8>)
    dec8:	4013      	ands	r3, r2
    deca:	2b00      	cmp	r3, #0
    decc:	d1f9      	bne.n	dec2 <am_hal_itm_disable+0x66>
    dece:	3801      	subs	r0, #1
    ded0:	d1f1      	bne.n	deb6 <am_hal_itm_disable+0x5a>
    ded2:	4a09      	ldr	r2, [pc, #36]	; (def8 <am_hal_itm_disable+0x9c>)
    ded4:	68d3      	ldr	r3, [r2, #12]
    ded6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    deda:	60d3      	str	r3, [r2, #12]
    dedc:	68d3      	ldr	r3, [r2, #12]
    dede:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    dee2:	d1fb      	bne.n	dedc <am_hal_itm_disable+0x80>
    dee4:	4a03      	ldr	r2, [pc, #12]	; (def4 <am_hal_itm_disable+0x98>)
    dee6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    deea:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    deee:	2b00      	cmp	r3, #0
    def0:	d1fb      	bne.n	deea <am_hal_itm_disable+0x8e>
    def2:	bd10      	pop	{r4, pc}
    def4:	40020000 	.word	0x40020000
    def8:	e000edf0 	.word	0xe000edf0
    defc:	c5acce55 	.word	0xc5acce55
    df00:	00150511 	.word	0x00150511
    df04:	00800001 	.word	0x00800001

0000df08 <am_hal_itm_print>:
    df08:	7803      	ldrb	r3, [r0, #0]
    df0a:	b1a3      	cbz	r3, df36 <am_hal_itm_print+0x2e>
    df0c:	4602      	mov	r2, r0
    df0e:	2300      	movs	r3, #0
    df10:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    df14:	3301      	adds	r3, #1
    df16:	2900      	cmp	r1, #0
    df18:	d1fa      	bne.n	df10 <am_hal_itm_print+0x8>
    df1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    df1e:	b430      	push	{r4, r5}
    df20:	18c1      	adds	r1, r0, r3
    df22:	4615      	mov	r5, r2
    df24:	f810 4b01 	ldrb.w	r4, [r0], #1
    df28:	6813      	ldr	r3, [r2, #0]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d0fc      	beq.n	df28 <am_hal_itm_print+0x20>
    df2e:	4288      	cmp	r0, r1
    df30:	702c      	strb	r4, [r5, #0]
    df32:	d1f7      	bne.n	df24 <am_hal_itm_print+0x1c>
    df34:	bc30      	pop	{r4, r5}
    df36:	4770      	bx	lr

0000df38 <am_hal_mcuctrl_info_get>:
    df38:	b4f0      	push	{r4, r5, r6, r7}
    df3a:	b121      	cbz	r1, df46 <am_hal_mcuctrl_info_get+0xe>
    df3c:	2801      	cmp	r0, #1
    df3e:	d038      	beq.n	dfb2 <am_hal_mcuctrl_info_get+0x7a>
    df40:	d320      	bcc.n	df84 <am_hal_mcuctrl_info_get+0x4c>
    df42:	2802      	cmp	r0, #2
    df44:	d002      	beq.n	df4c <am_hal_mcuctrl_info_get+0x14>
    df46:	2006      	movs	r0, #6
    df48:	bcf0      	pop	{r4, r5, r6, r7}
    df4a:	4770      	bx	lr
    df4c:	4a41      	ldr	r2, [pc, #260]	; (e054 <am_hal_mcuctrl_info_get+0x11c>)
    df4e:	684d      	ldr	r5, [r1, #4]
    df50:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    df54:	694c      	ldr	r4, [r1, #20]
    df56:	f003 0601 	and.w	r6, r3, #1
    df5a:	f3c3 0040 	ubfx	r0, r3, #1, #1
    df5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df62:	700e      	strb	r6, [r1, #0]
    df64:	7208      	strb	r0, [r1, #8]
    df66:	740b      	strb	r3, [r1, #16]
    df68:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    df6c:	60cb      	str	r3, [r1, #12]
    df6e:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    df72:	4328      	orrs	r0, r5
    df74:	6048      	str	r0, [r1, #4]
    df76:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    df7a:	4323      	orrs	r3, r4
    df7c:	2000      	movs	r0, #0
    df7e:	614b      	str	r3, [r1, #20]
    df80:	bcf0      	pop	{r4, r5, r6, r7}
    df82:	4770      	bx	lr
    df84:	4a33      	ldr	r2, [pc, #204]	; (e054 <am_hal_mcuctrl_info_get+0x11c>)
    df86:	6993      	ldr	r3, [r2, #24]
    df88:	f3c3 1080 	ubfx	r0, r3, #6, #1
    df8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df90:	7008      	strb	r0, [r1, #0]
    df92:	704b      	strb	r3, [r1, #1]
    df94:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    df98:	f3c3 6381 	ubfx	r3, r3, #26, #2
    df9c:	710b      	strb	r3, [r1, #4]
    df9e:	6953      	ldr	r3, [r2, #20]
    dfa0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    dfa4:	f003 0301 	and.w	r3, r3, #1
    dfa8:	2000      	movs	r0, #0
    dfaa:	708a      	strb	r2, [r1, #2]
    dfac:	70cb      	strb	r3, [r1, #3]
    dfae:	bcf0      	pop	{r4, r5, r6, r7}
    dfb0:	4770      	bx	lr
    dfb2:	4b28      	ldr	r3, [pc, #160]	; (e054 <am_hal_mcuctrl_info_get+0x11c>)
    dfb4:	4c28      	ldr	r4, [pc, #160]	; (e058 <am_hal_mcuctrl_info_get+0x120>)
    dfb6:	681a      	ldr	r2, [r3, #0]
    dfb8:	600a      	str	r2, [r1, #0]
    dfba:	6858      	ldr	r0, [r3, #4]
    dfbc:	6048      	str	r0, [r1, #4]
    dfbe:	6898      	ldr	r0, [r3, #8]
    dfc0:	6088      	str	r0, [r1, #8]
    dfc2:	68d8      	ldr	r0, [r3, #12]
    dfc4:	60c8      	str	r0, [r1, #12]
    dfc6:	691d      	ldr	r5, [r3, #16]
    dfc8:	4824      	ldr	r0, [pc, #144]	; (e05c <am_hal_mcuctrl_info_get+0x124>)
    dfca:	610d      	str	r5, [r1, #16]
    dfcc:	f3c2 5703 	ubfx	r7, r2, #20, #4
    dfd0:	f3c2 4603 	ubfx	r6, r2, #16, #4
    dfd4:	695d      	ldr	r5, [r3, #20]
    dfd6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    dfda:	4b21      	ldr	r3, [pc, #132]	; (e060 <am_hal_mcuctrl_info_get+0x128>)
    dfdc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    dfe0:	6208      	str	r0, [r1, #32]
    dfe2:	f002 0201 	and.w	r2, r2, #1
    dfe6:	614d      	str	r5, [r1, #20]
    dfe8:	61cc      	str	r4, [r1, #28]
    dfea:	618a      	str	r2, [r1, #24]
    dfec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    dff0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    dff4:	b2d0      	uxtb	r0, r2
    dff6:	f004 020f 	and.w	r2, r4, #15
    dffa:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    dffe:	624a      	str	r2, [r1, #36]	; 0x24
    e000:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e004:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e008:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e00c:	f004 020f 	and.w	r2, r4, #15
    e010:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e014:	628a      	str	r2, [r1, #40]	; 0x28
    e016:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e01a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e01e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e022:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e026:	4302      	orrs	r2, r0
    e028:	62ca      	str	r2, [r1, #44]	; 0x2c
    e02a:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e02e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e032:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e036:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e03a:	b2c0      	uxtb	r0, r0
    e03c:	0400      	lsls	r0, r0, #16
    e03e:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e042:	b2d2      	uxtb	r2, r2
    e044:	431a      	orrs	r2, r3
    e046:	b2e3      	uxtb	r3, r4
    e048:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e04c:	630b      	str	r3, [r1, #48]	; 0x30
    e04e:	2000      	movs	r0, #0
    e050:	bcf0      	pop	{r4, r5, r6, r7}
    e052:	4770      	bx	lr
    e054:	40020000 	.word	0x40020000
    e058:	0000e900 	.word	0x0000e900
    e05c:	0000e940 	.word	0x0000e940
    e060:	f0000f00 	.word	0xf0000f00

0000e064 <am_hal_pwrctrl_periph_enable>:
    e064:	b570      	push	{r4, r5, r6, lr}
    e066:	b082      	sub	sp, #8
    e068:	4604      	mov	r4, r0
    e06a:	f7ff fed1 	bl	de10 <am_hal_interrupt_master_disable>
    e06e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e072:	4d0f      	ldr	r5, [pc, #60]	; (e0b0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e074:	4e0f      	ldr	r6, [pc, #60]	; (e0b4 <am_hal_pwrctrl_periph_enable+0x50>)
    e076:	9001      	str	r0, [sp, #4]
    e078:	00a4      	lsls	r4, r4, #2
    e07a:	68aa      	ldr	r2, [r5, #8]
    e07c:	5933      	ldr	r3, [r6, r4]
    e07e:	4313      	orrs	r3, r2
    e080:	60ab      	str	r3, [r5, #8]
    e082:	9801      	ldr	r0, [sp, #4]
    e084:	4434      	add	r4, r6
    e086:	f7ff fec7 	bl	de18 <am_hal_interrupt_master_set>
    e08a:	2077      	movs	r0, #119	; 0x77
    e08c:	f7ff fb36 	bl	d6fc <am_hal_flash_delay>
    e090:	69ab      	ldr	r3, [r5, #24]
    e092:	6864      	ldr	r4, [r4, #4]
    e094:	4223      	tst	r3, r4
    e096:	d103      	bne.n	e0a0 <am_hal_pwrctrl_periph_enable+0x3c>
    e098:	2077      	movs	r0, #119	; 0x77
    e09a:	f7ff fb2f 	bl	d6fc <am_hal_flash_delay>
    e09e:	69ab      	ldr	r3, [r5, #24]
    e0a0:	4b03      	ldr	r3, [pc, #12]	; (e0b0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e0a2:	699b      	ldr	r3, [r3, #24]
    e0a4:	4223      	tst	r3, r4
    e0a6:	bf0c      	ite	eq
    e0a8:	2001      	moveq	r0, #1
    e0aa:	2000      	movne	r0, #0
    e0ac:	b002      	add	sp, #8
    e0ae:	bd70      	pop	{r4, r5, r6, pc}
    e0b0:	40021000 	.word	0x40021000
    e0b4:	0000e980 	.word	0x0000e980

0000e0b8 <am_hal_pwrctrl_periph_disable>:
    e0b8:	b570      	push	{r4, r5, r6, lr}
    e0ba:	b082      	sub	sp, #8
    e0bc:	4604      	mov	r4, r0
    e0be:	f7ff fea7 	bl	de10 <am_hal_interrupt_master_disable>
    e0c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e0c6:	4d10      	ldr	r5, [pc, #64]	; (e108 <am_hal_pwrctrl_periph_disable+0x50>)
    e0c8:	4e10      	ldr	r6, [pc, #64]	; (e10c <am_hal_pwrctrl_periph_disable+0x54>)
    e0ca:	9001      	str	r0, [sp, #4]
    e0cc:	00a4      	lsls	r4, r4, #2
    e0ce:	68ab      	ldr	r3, [r5, #8]
    e0d0:	5932      	ldr	r2, [r6, r4]
    e0d2:	ea23 0302 	bic.w	r3, r3, r2
    e0d6:	60ab      	str	r3, [r5, #8]
    e0d8:	9801      	ldr	r0, [sp, #4]
    e0da:	4434      	add	r4, r6
    e0dc:	f7ff fe9c 	bl	de18 <am_hal_interrupt_master_set>
    e0e0:	2077      	movs	r0, #119	; 0x77
    e0e2:	f7ff fb0b 	bl	d6fc <am_hal_flash_delay>
    e0e6:	69ab      	ldr	r3, [r5, #24]
    e0e8:	6864      	ldr	r4, [r4, #4]
    e0ea:	4223      	tst	r3, r4
    e0ec:	d003      	beq.n	e0f6 <am_hal_pwrctrl_periph_disable+0x3e>
    e0ee:	2077      	movs	r0, #119	; 0x77
    e0f0:	f7ff fb04 	bl	d6fc <am_hal_flash_delay>
    e0f4:	69ab      	ldr	r3, [r5, #24]
    e0f6:	4b04      	ldr	r3, [pc, #16]	; (e108 <am_hal_pwrctrl_periph_disable+0x50>)
    e0f8:	699b      	ldr	r3, [r3, #24]
    e0fa:	4223      	tst	r3, r4
    e0fc:	bf14      	ite	ne
    e0fe:	2001      	movne	r0, #1
    e100:	2000      	moveq	r0, #0
    e102:	b002      	add	sp, #8
    e104:	bd70      	pop	{r4, r5, r6, pc}
    e106:	bf00      	nop
    e108:	40021000 	.word	0x40021000
    e10c:	0000e980 	.word	0x0000e980

0000e110 <am_hal_pwrctrl_low_power_init>:
    e110:	b530      	push	{r4, r5, lr}
    e112:	4b1f      	ldr	r3, [pc, #124]	; (e190 <am_hal_pwrctrl_low_power_init+0x80>)
    e114:	681a      	ldr	r2, [r3, #0]
    e116:	b083      	sub	sp, #12
    e118:	b912      	cbnz	r2, e120 <am_hal_pwrctrl_low_power_init+0x10>
    e11a:	4a1e      	ldr	r2, [pc, #120]	; (e194 <am_hal_pwrctrl_low_power_init+0x84>)
    e11c:	6812      	ldr	r2, [r2, #0]
    e11e:	601a      	str	r2, [r3, #0]
    e120:	4c1d      	ldr	r4, [pc, #116]	; (e198 <am_hal_pwrctrl_low_power_init+0x88>)
    e122:	69a3      	ldr	r3, [r4, #24]
    e124:	05db      	lsls	r3, r3, #23
    e126:	d502      	bpl.n	e12e <am_hal_pwrctrl_low_power_init+0x1e>
    e128:	2000      	movs	r0, #0
    e12a:	b003      	add	sp, #12
    e12c:	bd30      	pop	{r4, r5, pc}
    e12e:	4d1b      	ldr	r5, [pc, #108]	; (e19c <am_hal_pwrctrl_low_power_init+0x8c>)
    e130:	491b      	ldr	r1, [pc, #108]	; (e1a0 <am_hal_pwrctrl_low_power_init+0x90>)
    e132:	7e2a      	ldrb	r2, [r5, #24]
    e134:	2001      	movs	r0, #1
    e136:	4302      	orrs	r2, r0
    e138:	2307      	movs	r3, #7
    e13a:	762a      	strb	r2, [r5, #24]
    e13c:	9000      	str	r0, [sp, #0]
    e13e:	461a      	mov	r2, r3
    e140:	f242 7010 	movw	r0, #10000	; 0x2710
    e144:	f7ff fade 	bl	d704 <am_hal_flash_delay_status_check>
    e148:	b110      	cbz	r0, e150 <am_hal_pwrctrl_low_power_init+0x40>
    e14a:	2004      	movs	r0, #4
    e14c:	b003      	add	sp, #12
    e14e:	bd30      	pop	{r4, r5, pc}
    e150:	6823      	ldr	r3, [r4, #0]
    e152:	f043 0301 	orr.w	r3, r3, #1
    e156:	6023      	str	r3, [r4, #0]
    e158:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e15e:	6263      	str	r3, [r4, #36]	; 0x24
    e160:	68eb      	ldr	r3, [r5, #12]
    e162:	b2db      	uxtb	r3, r3
    e164:	2b11      	cmp	r3, #17
    e166:	d1df      	bne.n	e128 <am_hal_pwrctrl_low_power_init+0x18>
    e168:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e16c:	f360 5356 	bfi	r3, r0, #21, #2
    e170:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e174:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e178:	220f      	movs	r2, #15
    e17a:	f362 138b 	bfi	r3, r2, #6, #6
    e17e:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e182:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e186:	f362 0305 	bfi	r3, r2, #0, #6
    e18a:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e18e:	e7cc      	b.n	e12a <am_hal_pwrctrl_low_power_init+0x1a>
    e190:	1000112c 	.word	0x1000112c
    e194:	4ffff000 	.word	0x4ffff000
    e198:	40021000 	.word	0x40021000
    e19c:	40020000 	.word	0x40020000
    e1a0:	40020018 	.word	0x40020018

0000e1a4 <am_hal_rtc_osc_select>:
    e1a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1a8:	2801      	cmp	r0, #1
    e1aa:	68d3      	ldr	r3, [r2, #12]
    e1ac:	bf0c      	ite	eq
    e1ae:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    e1b2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e1b6:	60d3      	str	r3, [r2, #12]
    e1b8:	4770      	bx	lr
    e1ba:	bf00      	nop

0000e1bc <am_hal_rtc_osc_disable>:
    e1bc:	4a03      	ldr	r2, [pc, #12]	; (e1cc <am_hal_rtc_osc_disable+0x10>)
    e1be:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e1c2:	f043 0310 	orr.w	r3, r3, #16
    e1c6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e1ca:	4770      	bx	lr
    e1cc:	40004200 	.word	0x40004200

0000e1d0 <am_hal_tpiu_enable>:
    e1d0:	b530      	push	{r4, r5, lr}
    e1d2:	4a23      	ldr	r2, [pc, #140]	; (e260 <am_hal_tpiu_enable+0x90>)
    e1d4:	6804      	ldr	r4, [r0, #0]
    e1d6:	2300      	movs	r3, #0
    e1d8:	b085      	sub	sp, #20
    e1da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    e1de:	b334      	cbz	r4, e22e <am_hal_tpiu_enable+0x5e>
    e1e0:	4b20      	ldr	r3, [pc, #128]	; (e264 <am_hal_tpiu_enable+0x94>)
    e1e2:	4921      	ldr	r1, [pc, #132]	; (e268 <am_hal_tpiu_enable+0x98>)
    e1e4:	2001      	movs	r0, #1
    e1e6:	6050      	str	r0, [r2, #4]
    e1e8:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
    e1ec:	a801      	add	r0, sp, #4
    e1ee:	428a      	cmp	r2, r1
    e1f0:	bf88      	it	hi
    e1f2:	461c      	movhi	r4, r3
    e1f4:	f7ff fa64 	bl	d6c0 <am_hal_clkgen_status_get>
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	1c5a      	adds	r2, r3, #1
    e1fc:	d02d      	beq.n	e25a <am_hal_tpiu_enable+0x8a>
    e1fe:	08db      	lsrs	r3, r3, #3
    e200:	fbb3 f3f4 	udiv	r3, r3, r4
    e204:	3b01      	subs	r3, #1
    e206:	b29b      	uxth	r3, r3
    e208:	4a15      	ldr	r2, [pc, #84]	; (e260 <am_hal_tpiu_enable+0x90>)
    e20a:	4918      	ldr	r1, [pc, #96]	; (e26c <am_hal_tpiu_enable+0x9c>)
    e20c:	6113      	str	r3, [r2, #16]
    e20e:	2402      	movs	r4, #2
    e210:	f240 2301 	movw	r3, #513	; 0x201
    e214:	2000      	movs	r0, #0
    e216:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
    e21a:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
    e21e:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    e222:	f240 20f7 	movw	r0, #759	; 0x2f7
    e226:	f7ff fa69 	bl	d6fc <am_hal_flash_delay>
    e22a:	b005      	add	sp, #20
    e22c:	bd30      	pop	{r4, r5, pc}
    e22e:	6903      	ldr	r3, [r0, #16]
    e230:	6113      	str	r3, [r2, #16]
    e232:	6883      	ldr	r3, [r0, #8]
    e234:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e238:	68c3      	ldr	r3, [r0, #12]
    e23a:	4d0c      	ldr	r5, [pc, #48]	; (e26c <am_hal_tpiu_enable+0x9c>)
    e23c:	1e59      	subs	r1, r3, #1
    e23e:	2301      	movs	r3, #1
    e240:	408b      	lsls	r3, r1
    e242:	6053      	str	r3, [r2, #4]
    e244:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
    e248:	6843      	ldr	r3, [r0, #4]
    e24a:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    e24e:	f240 20f7 	movw	r0, #759	; 0x2f7
    e252:	f7ff fa53 	bl	d6fc <am_hal_flash_delay>
    e256:	b005      	add	sp, #20
    e258:	bd30      	pop	{r4, r5, pc}
    e25a:	2305      	movs	r3, #5
    e25c:	e7d4      	b.n	e208 <am_hal_tpiu_enable+0x38>
    e25e:	bf00      	nop
    e260:	e0040000 	.word	0xe0040000
    e264:	000f4240 	.word	0x000f4240
    e268:	001da380 	.word	0x001da380
    e26c:	40020000 	.word	0x40020000

0000e270 <am_hal_uart_deinitialize>:
    e270:	b128      	cbz	r0, e27e <am_hal_uart_deinitialize+0xe>
    e272:	6803      	ldr	r3, [r0, #0]
    e274:	4a07      	ldr	r2, [pc, #28]	; (e294 <am_hal_uart_deinitialize+0x24>)
    e276:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e27a:	4293      	cmp	r3, r2
    e27c:	d001      	beq.n	e282 <am_hal_uart_deinitialize+0x12>
    e27e:	2002      	movs	r0, #2
    e280:	4770      	bx	lr
    e282:	78c2      	ldrb	r2, [r0, #3]
    e284:	2300      	movs	r3, #0
    e286:	f36f 0200 	bfc	r2, #0, #1
    e28a:	70c2      	strb	r2, [r0, #3]
    e28c:	6243      	str	r3, [r0, #36]	; 0x24
    e28e:	7103      	strb	r3, [r0, #4]
    e290:	4618      	mov	r0, r3
    e292:	4770      	bx	lr
    e294:	01ea9e06 	.word	0x01ea9e06

0000e298 <am_hal_uart_power_control>:
    e298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e29c:	6804      	ldr	r4, [r0, #0]
    e29e:	4b36      	ldr	r3, [pc, #216]	; (e378 <am_hal_uart_power_control+0xe0>)
    e2a0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e2a4:	429c      	cmp	r4, r3
    e2a6:	b083      	sub	sp, #12
    e2a8:	d003      	beq.n	e2b2 <am_hal_uart_power_control+0x1a>
    e2aa:	2002      	movs	r0, #2
    e2ac:	b003      	add	sp, #12
    e2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e2b2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e2b4:	4605      	mov	r5, r0
    e2b6:	f107 0008 	add.w	r0, r7, #8
    e2ba:	4691      	mov	r9, r2
    e2bc:	460e      	mov	r6, r1
    e2be:	fa5f f880 	uxtb.w	r8, r0
    e2c2:	b181      	cbz	r1, e2e6 <am_hal_uart_power_control+0x4e>
    e2c4:	2902      	cmp	r1, #2
    e2c6:	d80c      	bhi.n	e2e2 <am_hal_uart_power_control+0x4a>
    e2c8:	b992      	cbnz	r2, e2f0 <am_hal_uart_power_control+0x58>
    e2ca:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e2ce:	371c      	adds	r7, #28
    e2d0:	033f      	lsls	r7, r7, #12
    e2d2:	f04f 33ff 	mov.w	r3, #4294967295
    e2d6:	647b      	str	r3, [r7, #68]	; 0x44
    e2d8:	4640      	mov	r0, r8
    e2da:	f7ff feed 	bl	e0b8 <am_hal_pwrctrl_periph_disable>
    e2de:	2000      	movs	r0, #0
    e2e0:	e7e4      	b.n	e2ac <am_hal_uart_power_control+0x14>
    e2e2:	2006      	movs	r0, #6
    e2e4:	e7e2      	b.n	e2ac <am_hal_uart_power_control+0x14>
    e2e6:	b322      	cbz	r2, e332 <am_hal_uart_power_control+0x9a>
    e2e8:	792b      	ldrb	r3, [r5, #4]
    e2ea:	bb3b      	cbnz	r3, e33c <am_hal_uart_power_control+0xa4>
    e2ec:	2007      	movs	r0, #7
    e2ee:	e7dd      	b.n	e2ac <am_hal_uart_power_control+0x14>
    e2f0:	f7ff fd8e 	bl	de10 <am_hal_interrupt_master_disable>
    e2f4:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e2f8:	331c      	adds	r3, #28
    e2fa:	031b      	lsls	r3, r3, #12
    e2fc:	9001      	str	r0, [sp, #4]
    e2fe:	6a1a      	ldr	r2, [r3, #32]
    e300:	60aa      	str	r2, [r5, #8]
    e302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e304:	60ea      	str	r2, [r5, #12]
    e306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e308:	612a      	str	r2, [r5, #16]
    e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e30c:	616a      	str	r2, [r5, #20]
    e30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e310:	61aa      	str	r2, [r5, #24]
    e312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e314:	61ea      	str	r2, [r5, #28]
    e316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e318:	622b      	str	r3, [r5, #32]
    e31a:	2301      	movs	r3, #1
    e31c:	712b      	strb	r3, [r5, #4]
    e31e:	9801      	ldr	r0, [sp, #4]
    e320:	f7ff fd7a 	bl	de18 <am_hal_interrupt_master_set>
    e324:	682b      	ldr	r3, [r5, #0]
    e326:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e32a:	42a3      	cmp	r3, r4
    e32c:	d1d4      	bne.n	e2d8 <am_hal_uart_power_control+0x40>
    e32e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e330:	e7cb      	b.n	e2ca <am_hal_uart_power_control+0x32>
    e332:	4640      	mov	r0, r8
    e334:	f7ff fe96 	bl	e064 <am_hal_pwrctrl_periph_enable>
    e338:	4648      	mov	r0, r9
    e33a:	e7b7      	b.n	e2ac <am_hal_uart_power_control+0x14>
    e33c:	4640      	mov	r0, r8
    e33e:	f7ff fe91 	bl	e064 <am_hal_pwrctrl_periph_enable>
    e342:	f7ff fd65 	bl	de10 <am_hal_interrupt_master_disable>
    e346:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e34a:	331c      	adds	r3, #28
    e34c:	031b      	lsls	r3, r3, #12
    e34e:	68aa      	ldr	r2, [r5, #8]
    e350:	9000      	str	r0, [sp, #0]
    e352:	621a      	str	r2, [r3, #32]
    e354:	68ea      	ldr	r2, [r5, #12]
    e356:	625a      	str	r2, [r3, #36]	; 0x24
    e358:	692a      	ldr	r2, [r5, #16]
    e35a:	629a      	str	r2, [r3, #40]	; 0x28
    e35c:	696a      	ldr	r2, [r5, #20]
    e35e:	62da      	str	r2, [r3, #44]	; 0x2c
    e360:	69aa      	ldr	r2, [r5, #24]
    e362:	631a      	str	r2, [r3, #48]	; 0x30
    e364:	69ea      	ldr	r2, [r5, #28]
    e366:	635a      	str	r2, [r3, #52]	; 0x34
    e368:	6a2a      	ldr	r2, [r5, #32]
    e36a:	639a      	str	r2, [r3, #56]	; 0x38
    e36c:	9800      	ldr	r0, [sp, #0]
    e36e:	712e      	strb	r6, [r5, #4]
    e370:	f7ff fd52 	bl	de18 <am_hal_interrupt_master_set>
    e374:	4630      	mov	r0, r6
    e376:	e799      	b.n	e2ac <am_hal_uart_power_control+0x14>
    e378:	01ea9e06 	.word	0x01ea9e06

0000e37c <am_hal_uart_tx_flush>:
    e37c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e380:	b570      	push	{r4, r5, r6, lr}
    e382:	4604      	mov	r4, r0
    e384:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e386:	b183      	cbz	r3, e3aa <am_hal_uart_tx_flush+0x2e>
    e388:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e38a:	b173      	cbz	r3, e3aa <am_hal_uart_tx_flush+0x2e>
    e38c:	4e13      	ldr	r6, [pc, #76]	; (e3dc <am_hal_uart_tx_flush+0x60>)
    e38e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e390:	fbb6 f0f0 	udiv	r0, r6, r0
    e394:	2802      	cmp	r0, #2
    e396:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e39a:	bf8c      	ite	hi
    e39c:	3829      	subhi	r0, #41	; 0x29
    e39e:	2001      	movls	r0, #1
    e3a0:	f7ff f9ac 	bl	d6fc <am_hal_flash_delay>
    e3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d1f1      	bne.n	e38e <am_hal_uart_tx_flush+0x12>
    e3aa:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e3ae:	351c      	adds	r5, #28
    e3b0:	032d      	lsls	r5, r5, #12
    e3b2:	69ab      	ldr	r3, [r5, #24]
    e3b4:	071a      	lsls	r2, r3, #28
    e3b6:	d50e      	bpl.n	e3d6 <am_hal_uart_tx_flush+0x5a>
    e3b8:	4e08      	ldr	r6, [pc, #32]	; (e3dc <am_hal_uart_tx_flush+0x60>)
    e3ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e3bc:	fbb6 f0f0 	udiv	r0, r6, r0
    e3c0:	2802      	cmp	r0, #2
    e3c2:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e3c6:	bf8c      	ite	hi
    e3c8:	3829      	subhi	r0, #41	; 0x29
    e3ca:	2001      	movls	r0, #1
    e3cc:	f7ff f996 	bl	d6fc <am_hal_flash_delay>
    e3d0:	69ab      	ldr	r3, [r5, #24]
    e3d2:	071b      	lsls	r3, r3, #28
    e3d4:	d4f1      	bmi.n	e3ba <am_hal_uart_tx_flush+0x3e>
    e3d6:	2000      	movs	r0, #0
    e3d8:	bd70      	pop	{r4, r5, r6, pc}
    e3da:	bf00      	nop
    e3dc:	00b71b00 	.word	0x00b71b00
    e3e0:	00000000 	.word	0x00000000
    e3e4:	00000064 	.word	0x00000064
    e3e8:	00000001 	.word	0x00000001
    e3ec:	00000064 	.word	0x00000064
    e3f0:	00000000 	.word	0x00000000
    e3f4:	00000064 	.word	0x00000064
    e3f8:	00000001 	.word	0x00000001
    e3fc:	00000064 	.word	0x00000064
    e400:	00000000 	.word	0x00000000
    e404:	00000064 	.word	0x00000064
    e408:	00000001 	.word	0x00000001
    e40c:	00000064 	.word	0x00000064
    e410:	00000000 	.word	0x00000000
    e414:	00000064 	.word	0x00000064
    e418:	00000001 	.word	0x00000001
    e41c:	00000064 	.word	0x00000064
    e420:	00000000 	.word	0x00000000
    e424:	00000064 	.word	0x00000064
    e428:	00000001 	.word	0x00000001
    e42c:	00000064 	.word	0x00000064
    e430:	00000000 	.word	0x00000000
    e434:	00000064 	.word	0x00000064
    e438:	00000001 	.word	0x00000001
    e43c:	00000064 	.word	0x00000064
    e440:	00000000 	.word	0x00000000
    e444:	00000064 	.word	0x00000064
    e448:	00000001 	.word	0x00000001
    e44c:	00000064 	.word	0x00000064
    e450:	00000000 	.word	0x00000000
    e454:	00000064 	.word	0x00000064
    e458:	00000001 	.word	0x00000001
    e45c:	00000064 	.word	0x00000064
    e460:	00000000 	.word	0x00000000
    e464:	00000064 	.word	0x00000064
    e468:	00000001 	.word	0x00000001
    e46c:	00000064 	.word	0x00000064
    e470:	00000000 	.word	0x00000000
    e474:	00000064 	.word	0x00000064
    e478:	00000001 	.word	0x00000001
    e47c:	00000064 	.word	0x00000064
    e480:	00000000 	.word	0x00000000
    e484:	000000c8 	.word	0x000000c8
    e488:	00000001 	.word	0x00000001
    e48c:	000000c8 	.word	0x000000c8
    e490:	00000002 	.word	0x00000002
    e494:	000000c8 	.word	0x000000c8
    e498:	00000004 	.word	0x00000004
    e49c:	000000c8 	.word	0x000000c8
    e4a0:	00000008 	.word	0x00000008
    e4a4:	000000c8 	.word	0x000000c8
    e4a8:	00000008 	.word	0x00000008
    e4ac:	000000c8 	.word	0x000000c8
    e4b0:	00000004 	.word	0x00000004
    e4b4:	000000c8 	.word	0x000000c8
    e4b8:	00000002 	.word	0x00000002
    e4bc:	000000c8 	.word	0x000000c8
    e4c0:	00000001 	.word	0x00000001
    e4c4:	000000c8 	.word	0x000000c8
    e4c8:	a5000001 	.word	0xa5000001
    e4cc:	a5a5a5a5 	.word	0xa5a5a5a5
    e4d0:	0000000f 	.word	0x0000000f
    e4d4:	0000012c 	.word	0x0000012c
    e4d8:	00000000 	.word	0x00000000
    e4dc:	0000012c 	.word	0x0000012c
    e4e0:	0000000f 	.word	0x0000000f
    e4e4:	0000012c 	.word	0x0000012c
    e4e8:	00000000 	.word	0x00000000
    e4ec:	0000012c 	.word	0x0000012c
    e4f0:	0000000f 	.word	0x0000000f
    e4f4:	0000012c 	.word	0x0000012c
    e4f8:	00000000 	.word	0x00000000
    e4fc:	0000012c 	.word	0x0000012c
    e500:	ffffffff 	.word	0xffffffff
    e504:	ffffffff 	.word	0xffffffff
    e508:	74736146 	.word	0x74736146
    e50c:	49504720 	.word	0x49504720
    e510:	7845204f 	.word	0x7845204f
    e514:	6c706d61 	.word	0x6c706d61
    e518:	00000a65 	.word	0x00000a65
    e51c:	6e656857 	.word	0x6e656857
    e520:	6e757220 	.word	0x6e757220
    e524:	206e6f20 	.word	0x206e6f20
    e528:	41206e61 	.word	0x41206e61
    e52c:	6c6c6f70 	.word	0x6c6c6f70
    e530:	4520336f 	.word	0x4520336f
    e534:	0a3a4256 	.word	0x0a3a4256
    e538:	00000000 	.word	0x00000000
    e53c:	41202d20 	.word	0x41202d20
    e540:	327e206e 	.word	0x327e206e
    e544:	7a484d34 	.word	0x7a484d34
    e548:	76617720 	.word	0x76617720
    e54c:	726f6665 	.word	0x726f6665
    e550:	6128206d 	.word	0x6128206d
    e554:	72657466 	.word	0x72657466
    e558:	736e6920 	.word	0x736e6920
    e55c:	63757274 	.word	0x63757274
    e560:	6e6f6974 	.word	0x6e6f6974
    e564:	61682073 	.word	0x61682073
    e568:	63206576 	.word	0x63206576
    e56c:	65686361 	.word	0x65686361
    e570:	69202964 	.word	0x69202964
    e574:	756f2073 	.word	0x756f2073
    e578:	74757074 	.word	0x74757074
    e57c:	206e6f20 	.word	0x206e6f20
    e580:	206e6950 	.word	0x206e6950
    e584:	0a2e6425 	.word	0x0a2e6425
    e588:	00000000 	.word	0x00000000
    e58c:	54202d20 	.word	0x54202d20
    e590:	206e6568 	.word	0x206e6568
    e594:	20656874 	.word	0x20656874
    e598:	6c6f7041 	.word	0x6c6f7041
    e59c:	20336f6c 	.word	0x20336f6c
    e5a0:	20425645 	.word	0x20425645
    e5a4:	7344454c 	.word	0x7344454c
    e5a8:	73696420 	.word	0x73696420
    e5ac:	79616c70 	.word	0x79616c70
    e5b0:	73206120 	.word	0x73206120
    e5b4:	74726f68 	.word	0x74726f68
    e5b8:	74617020 	.word	0x74617020
    e5bc:	6e726574 	.word	0x6e726574
    e5c0:	00000a2e 	.word	0x00000a2e
    e5c4:	4c202d20 	.word	0x4c202d20
    e5c8:	3d304445 	.word	0x3d304445
    e5cc:	206e6970 	.word	0x206e6970
    e5d0:	202c6425 	.word	0x202c6425
    e5d4:	3144454c 	.word	0x3144454c
    e5d8:	2c64253d 	.word	0x2c64253d
    e5dc:	44454c20 	.word	0x44454c20
    e5e0:	64253d32 	.word	0x64253d32
    e5e4:	454c202c 	.word	0x454c202c
    e5e8:	253d3344 	.word	0x253d3344
    e5ec:	000a2e64 	.word	0x000a2e64
    e5f0:	4e202d20 	.word	0x4e202d20
    e5f4:	2065746f 	.word	0x2065746f
    e5f8:	74616874 	.word	0x74616874
    e5fc:	44454c20 	.word	0x44454c20
    e600:	6e612031 	.word	0x6e612031
    e604:	454c2064 	.word	0x454c2064
    e608:	6f203344 	.word	0x6f203344
    e60c:	68742066 	.word	0x68742066
    e610:	56452065 	.word	0x56452065
    e614:	72612042 	.word	0x72612042
    e618:	6f6c2065 	.word	0x6f6c2065
    e61c:	65746163 	.word	0x65746163
    e620:	6e6f2064 	.word	0x6e6f2064
    e624:	65687420 	.word	0x65687420
    e628:	6d617320 	.word	0x6d617320
    e62c:	61462065 	.word	0x61462065
    e630:	47207473 	.word	0x47207473
    e634:	204f4950 	.word	0x204f4950
    e638:	20776f72 	.word	0x20776f72
    e63c:	20642528 	.word	0x20642528
    e640:	20646e61 	.word	0x20646e61
    e644:	2e296425 	.word	0x2e296425
    e648:	0000000a 	.word	0x0000000a
    e64c:	42202020 	.word	0x42202020
    e650:	75616365 	.word	0x75616365
    e654:	6f206573 	.word	0x6f206573
    e658:	68742066 	.word	0x68742066
    e65c:	202c7461 	.word	0x202c7461
    e660:	3344454c 	.word	0x3344454c
    e664:	20736920 	.word	0x20736920
    e668:	61736964 	.word	0x61736964
    e66c:	64656c62 	.word	0x64656c62
    e670:	72756420 	.word	0x72756420
    e674:	20676e69 	.word	0x20676e69
    e678:	20656874 	.word	0x20656874
    e67c:	6b6c6177 	.word	0x6b6c6177
    e680:	71657320 	.word	0x71657320
    e684:	636e6575 	.word	0x636e6575
    e688:	6e612065 	.word	0x6e612065
    e68c:	73692064 	.word	0x73692064
    e690:	75687420 	.word	0x75687420
    e694:	6b732073 	.word	0x6b732073
    e698:	65707069 	.word	0x65707069
    e69c:	6e692064 	.word	0x6e692064
    e6a0:	65687420 	.word	0x65687420
    e6a4:	0000000a 	.word	0x0000000a
    e6a8:	73202020 	.word	0x73202020
    e6ac:	65757165 	.word	0x65757165
    e6b0:	2e65636e 	.word	0x2e65636e
    e6b4:	65685420 	.word	0x65685420
    e6b8:	7469206e 	.word	0x7469206e
    e6bc:	20736920 	.word	0x20736920
    e6c0:	62616e65 	.word	0x62616e65
    e6c4:	2064656c 	.word	0x2064656c
    e6c8:	69727564 	.word	0x69727564
    e6cc:	7420676e 	.word	0x7420676e
    e6d0:	61206568 	.word	0x61206568
    e6d4:	622d6c6c 	.word	0x622d6c6c
    e6d8:	6b6e696c 	.word	0x6b6e696c
    e6dc:	646e6120 	.word	0x646e6120
    e6e0:	696c6220 	.word	0x696c6220
    e6e4:	20736b6e 	.word	0x20736b6e
    e6e8:	6e6f6c61 	.word	0x6e6f6c61
    e6ec:	69772067 	.word	0x69772067
    e6f0:	4c206874 	.word	0x4c206874
    e6f4:	2e314445 	.word	0x2e314445
    e6f8:	0000000a 	.word	0x0000000a
    e6fc:	6f727245 	.word	0x6f727245
    e700:	65722072 	.word	0x65722072
    e704:	6e727574 	.word	0x6e727574
    e708:	66206465 	.word	0x66206465
    e70c:	206d6f72 	.word	0x206d6f72
    e710:	685f6d61 	.word	0x685f6d61
    e714:	675f6c61 	.word	0x675f6c61
    e718:	5f6f6970 	.word	0x5f6f6970
    e71c:	74736166 	.word	0x74736166
    e720:	6e69705f 	.word	0x6e69705f
    e724:	666e6f63 	.word	0x666e6f63
    e728:	29286769 	.word	0x29286769
    e72c:	2e203d20 	.word	0x2e203d20
    e730:	0000000a 	.word	0x0000000a
    e734:	6f727245 	.word	0x6f727245
    e738:	65722072 	.word	0x65722072
    e73c:	6e727574 	.word	0x6e727574
    e740:	66206465 	.word	0x66206465
    e744:	206d6f72 	.word	0x206d6f72
    e748:	2044454c 	.word	0x2044454c
    e74c:	685f6d61 	.word	0x685f6d61
    e750:	675f6c61 	.word	0x675f6c61
    e754:	5f6f6970 	.word	0x5f6f6970
    e758:	74736166 	.word	0x74736166
    e75c:	6e69705f 	.word	0x6e69705f
    e760:	666e6f63 	.word	0x666e6f63
    e764:	29286769 	.word	0x29286769
    e768:	30203d20 	.word	0x30203d20
    e76c:	2e582578 	.word	0x2e582578
    e770:	0000000a 	.word	0x0000000a
    e774:	0a0a0a0a 	.word	0x0a0a0a0a
    e778:	0a0a0a0a 	.word	0x0a0a0a0a
    e77c:	0a0a0a0a 	.word	0x0a0a0a0a
    e780:	0a0a0a0a 	.word	0x0a0a0a0a
    e784:	00000a0a 	.word	0x00000a0a

0000e788 <g_AM_BSP_GPIO_ITM_SWO>:
    e788:	00000007                                ....

0000e78c <am_hal_cachectrl_defaults>:
    e78c:	00000308                                ....

0000e790 <g_ui8Bit76Capabilities>:
    e790:	02800101 80010180 80800101 80808080     ................
    e7a0:	80808080 80808008 01800180 80808080     ................
    e7b0:	80808080 01800402 01010401 80808080     ................
    e7c0:	00000101                                ....

0000e7c4 <g_ui8NCEtable>:
    e7c4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e7d4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e7e4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e7f4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e804:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e814:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e824:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e834:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e844:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e854:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e864:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e874:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e884:	32221202 43231303                       .."2..#C

0000e88c <g_ui8Inpen>:
    e88c:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e89c:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e8ac:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e8bc:	00003130                                01..

0000e8c0 <g_AM_HAL_GPIO_DISABLE>:
    e8c0:	00000003                                ....

0000e8c4 <g_AM_HAL_GPIO_OUTPUT>:
    e8c4:	00000403                                ....

0000e8c8 <g_ui8nCEpins>:
    e8c8:	02070707 00080802 01020202 01010101     ................
    e8d8:	01010101 01010101 01010101 01010101     ................
    e8e8:	01010101 08010101 01010008 01010101     ................
    e8f8:	00000101                                ....

0000e8fc <g_AM_HAL_GPIO_OUTPUT_12>:
    e8fc:	00000703                                ....

0000e900 <g_am_hal_mcuctrl_flash_size>:
    e900:	00004000 00008000 00010000 00020000     .@..............
    e910:	00040000 00080000 00100000 00200000     .............. .
	...

0000e940 <g_am_hal_mcuctrl_sram_size>:
    e940:	00004000 00008000 00010000 00020000     .@..............
    e950:	00040000 00080000 00100000 00060000     ................
	...

0000e980 <am_hal_pwrctrl_peripheral_control>:
	...
    e98c:	00000001 00000004 00000004 00000002     ................
    e99c:	00000008 00000008 00000004 00000008     ................
    e9ac:	00000008 00000008 00000008 00000008     ................
    e9bc:	00000010 00000010 00000010 00000020     ............ ...
    e9cc:	00000010 00000010 00000040 00000010     ........@.......
    e9dc:	00000010 00000080 00000004 00000004     ................
    e9ec:	00000100 00000004 00000004 00000200     ................
    e9fc:	00000020 00000020 00000400 00000004      ... ...........
    ea0c:	00000004 00000800 00000040 00000040     ........@...@...
    ea1c:	00001000 00000080 00000080 00002000     ............. ..
    ea2c:	00000100 00000100                       ........
