
bin/tensorflow_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 0d d3 00 00 05 d3 00 00 31 c4 00 00     ............1...
    c010:	31 c4 00 00 31 c4 00 00 31 c4 00 00 00 00 00 00     1...1...1.......
	...
    c02c:	09 d3 00 00 09 d3 00 00 00 00 00 00 09 d3 00 00     ................
    c03c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c04c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c05c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c06c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c07c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c08c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c09c:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c0ac:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c0bc:	09 d3 00 00 09 d3 00 00 09 d3 00 00 09 d3 00 00     ................
    c0cc:	09 d3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <testADC>:

    return 0;
}

static int testADC(void)
{
    c1a0:	b570      	push	{r4, r5, r6, lr}
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    am_hal_gpio_pinconfig(29, g_AM_PIN_29_ADCSE1);
    c1a2:	4b37      	ldr	r3, [pc, #220]	; (c280 <testADC+0xe0>)
{
    c1a4:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
    am_hal_gpio_pinconfig(29, g_AM_PIN_29_ADCSE1);
    c1a8:	6819      	ldr	r1, [r3, #0]
    c1aa:	201d      	movs	r0, #29
    c1ac:	f001 fb90 	bl	d8d0 <am_hal_gpio_pinconfig>

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c1b0:	4934      	ldr	r1, [pc, #208]	; (c284 <testADC+0xe4>)
    c1b2:	2000      	movs	r0, #0
    c1b4:	f001 f962 	bl	d47c <am_hal_adc_initialize>
    c1b8:	2800      	cmp	r0, #0
    c1ba:	d147      	bne.n	c24c <testADC+0xac>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c1bc:	4c31      	ldr	r4, [pc, #196]	; (c284 <testADC+0xe4>)
    c1be:	2200      	movs	r2, #0
    c1c0:	6820      	ldr	r0, [r4, #0]
    c1c2:	4611      	mov	r1, r2
    c1c4:	f001 fa50 	bl	d668 <am_hal_adc_power_control>
    c1c8:	2800      	cmp	r0, #0
    c1ca:	d154      	bne.n	c276 <testADC+0xd6>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    c1cc:	4b2e      	ldr	r3, [pc, #184]	; (c288 <testADC+0xe8>)
    c1ce:	9304      	str	r3, [sp, #16]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c1d0:	2201      	movs	r2, #1
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    c1d2:	2300      	movs	r3, #0
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c1d4:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c1d6:	f88d 2016 	strb.w	r2, [sp, #22]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c1da:	a904      	add	r1, sp, #16
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    c1dc:	f88d 3014 	strb.w	r3, [sp, #20]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c1e0:	f88d 3015 	strb.w	r3, [sp, #21]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c1e4:	f001 f96c 	bl	d4c0 <am_hal_adc_configure>
    c1e8:	2800      	cmp	r0, #0
    c1ea:	d140      	bne.n	c26e <testADC+0xce>
    }

    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    c1ec:	2300      	movs	r3, #0
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    c1ee:	2501      	movs	r5, #1
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c1f0:	aa02      	add	r2, sp, #8
    c1f2:	4619      	mov	r1, r3
    c1f4:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    c1f6:	f88d 3008 	strb.w	r3, [sp, #8]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c1fa:	f88d 3009 	strb.w	r3, [sp, #9]
    ADCSlotConfig.bWindowCompare  = false;
    c1fe:	f88d 300b 	strb.w	r3, [sp, #11]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    c202:	f88d 500a 	strb.w	r5, [sp, #10]
    ADCSlotConfig.bEnabled        = true;
    c206:	f88d 500c 	strb.w	r5, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c20a:	f001 f991 	bl	d530 <am_hal_adc_configure_slot>
    c20e:	bb50      	cbnz	r0, c266 <testADC+0xc6>
    }

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c210:	6820      	ldr	r0, [r4, #0]
    c212:	f001 f9c3 	bl	d59c <am_hal_adc_enable>
    c216:	bb10      	cbnz	r0, c25e <testADC+0xbe>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    }

    uint32_t    ui32NumSamples = 100;
    c218:	2164      	movs	r1, #100	; 0x64
    c21a:	9101      	str	r1, [sp, #4]
    am_hal_adc_sample_t Sample[100];
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    c21c:	6820      	ldr	r0, [r4, #0]
    c21e:	aa01      	add	r2, sp, #4
    c220:	ab06      	add	r3, sp, #24
    c222:	2100      	movs	r1, #0
    c224:	f001 f9da 	bl	d5dc <am_hal_adc_samples_read>
    c228:	b9a0      	cbnz	r0, c254 <testADC+0xb4>
    
    am_util_stdio_printf("ADC Slot =  %d\n", Sample[0].ui32Slot);
    //am_util_stdio_printf("ADC Value = %d\n", Sample[0].ui32Sample);
    for (int i = 0; i < 100; i++) 
    {
        am_util_stdio_printf("%8.8X ", Sample[i].ui32Slot);
    c22a:	4e18      	ldr	r6, [pc, #96]	; (c28c <testADC+0xec>)
    c22c:	ac06      	add	r4, sp, #24
    c22e:	adce      	add	r5, sp, #824	; 0x338
    c230:	6861      	ldr	r1, [r4, #4]
    c232:	4630      	mov	r0, r6
    c234:	3408      	adds	r4, #8
    c236:	f001 f843 	bl	d2c0 <am_util_stdio_printf>
    for (int i = 0; i < 100; i++) 
    c23a:	42ac      	cmp	r4, r5
    c23c:	d1f8      	bne.n	c230 <testADC+0x90>
    }
        am_util_stdio_printf("\n");
    c23e:	4814      	ldr	r0, [pc, #80]	; (c290 <testADC+0xf0>)
    c240:	f001 f83e 	bl	d2c0 <am_util_stdio_printf>

    return 0;
    c244:	2000      	movs	r0, #0
    c246:	f50d 7d4e 	add.w	sp, sp, #824	; 0x338
    c24a:	bd70      	pop	{r4, r5, r6, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c24c:	4811      	ldr	r0, [pc, #68]	; (c294 <testADC+0xf4>)
    c24e:	f001 f837 	bl	d2c0 <am_util_stdio_printf>
    c252:	e7b3      	b.n	c1bc <testADC+0x1c>
    am_util_stdio_printf("ADC Slot =  %d\n", Sample[0].ui32Slot);
    c254:	9907      	ldr	r1, [sp, #28]
    c256:	4810      	ldr	r0, [pc, #64]	; (c298 <testADC+0xf8>)
    c258:	f001 f832 	bl	d2c0 <am_util_stdio_printf>
    c25c:	e7e5      	b.n	c22a <testADC+0x8a>
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    c25e:	480f      	ldr	r0, [pc, #60]	; (c29c <testADC+0xfc>)
    c260:	f001 f82e 	bl	d2c0 <am_util_stdio_printf>
    c264:	e7d8      	b.n	c218 <testADC+0x78>
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    c266:	480e      	ldr	r0, [pc, #56]	; (c2a0 <testADC+0x100>)
    c268:	f001 f82a 	bl	d2c0 <am_util_stdio_printf>
    c26c:	e7d0      	b.n	c210 <testADC+0x70>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    c26e:	480d      	ldr	r0, [pc, #52]	; (c2a4 <testADC+0x104>)
    c270:	f001 f826 	bl	d2c0 <am_util_stdio_printf>
    c274:	e7ba      	b.n	c1ec <testADC+0x4c>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    c276:	480c      	ldr	r0, [pc, #48]	; (c2a8 <testADC+0x108>)
    c278:	f001 f822 	bl	d2c0 <am_util_stdio_printf>
    c27c:	e7a6      	b.n	c1cc <testADC+0x2c>
    c27e:	bf00      	nop
    c280:	0000f304 	.word	0x0000f304
    c284:	10001020 	.word	0x10001020
    c288:	00070001 	.word	0x00070001
    c28c:	0000f468 	.word	0x0000f468
    c290:	0000f454 	.word	0x0000f454
    c294:	0000f398 	.word	0x0000f398
    c298:	0000f458 	.word	0x0000f458
    c29c:	0000f438 	.word	0x0000f438
    c2a0:	0000f410 	.word	0x0000f410
    c2a4:	0000f3ec 	.word	0x0000f3ec
    c2a8:	0000f3cc 	.word	0x0000f3cc

0000c2ac <main>:
{
    c2ac:	b580      	push	{r7, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2ae:	2100      	movs	r1, #0
{
    c2b0:	b094      	sub	sp, #80	; 0x50
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2b2:	4608      	mov	r0, r1
    c2b4:	f001 fa70 	bl	d798 <am_hal_clkgen_control>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2b8:	4852      	ldr	r0, [pc, #328]	; (c404 <main+0x158>)
    c2ba:	f001 fa39 	bl	d730 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2be:	f001 fa61 	bl	d784 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c2c2:	f001 f87b 	bl	d3bc <am_bsp_low_power_init>
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c2c6:	f001 f8ab 	bl	d420 <am_bsp_uart_printf_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c2ca:	4b4f      	ldr	r3, [pc, #316]	; (c408 <main+0x15c>)
    c2cc:	681c      	ldr	r4, [r3, #0]
    c2ce:	202e      	movs	r0, #46	; 0x2e
    c2d0:	4621      	mov	r1, r4
    c2d2:	f001 fafd 	bl	d8d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c2d6:	4621      	mov	r1, r4
    c2d8:	2025      	movs	r0, #37	; 0x25
    c2da:	f001 faf9 	bl	d8d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c2de:	4621      	mov	r1, r4
    c2e0:	202c      	movs	r0, #44	; 0x2c
    c2e2:	f001 faf5 	bl	d8d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c2e6:	4621      	mov	r1, r4
    c2e8:	202f      	movs	r0, #47	; 0x2f
    c2ea:	f001 faf1 	bl	d8d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c2ee:	4b47      	ldr	r3, [pc, #284]	; (c40c <main+0x160>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c2f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c2f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c2f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c2fc:	2520      	movs	r5, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c2fe:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c300:	601d      	str	r5, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c302:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c304:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c306:	f000 fff7 	bl	d2f8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (SWO)\r\n");
    c30a:	4841      	ldr	r0, [pc, #260]	; (c410 <main+0x164>)
    c30c:	f000 ffd8 	bl	d2c0 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c310:	4840      	ldr	r0, [pc, #256]	; (c414 <main+0x168>)
    c312:	f001 f82f 	bl	d374 <am_bsp_uart_string_print>
    am_hal_iom_config_t i2cConfig =
    c316:	2401      	movs	r4, #1
    uint32_t i2cTX[2] = {0, 0}; // WHO_AM_I register
    c318:	2300      	movs	r3, #0
    am_hal_iom_config_t i2cConfig =
    c31a:	4a3f      	ldr	r2, [pc, #252]	; (c418 <main+0x16c>)
    c31c:	9305      	str	r3, [sp, #20]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    c31e:	a901      	add	r1, sp, #4
    c320:	2003      	movs	r0, #3
    uint32_t i2cTX[2] = {0, 0}; // WHO_AM_I register
    c322:	e9cd 3303 	strd	r3, r3, [sp, #12]
    uint32_t i2cRX[1] = {0};
    c326:	9302      	str	r3, [sp, #8]
    am_hal_iom_config_t i2cConfig =
    c328:	e9cd 3307 	strd	r3, r3, [sp, #28]
    c32c:	9309      	str	r3, [sp, #36]	; 0x24
    c32e:	f88d 4014 	strb.w	r4, [sp, #20]
    c332:	9206      	str	r2, [sp, #24]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    c334:	f001 fcd6 	bl	dce4 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -1;
    c338:	2800      	cmp	r0, #0
    c33a:	d156      	bne.n	c3ea <main+0x13e>
    c33c:	4602      	mov	r2, r0
    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    c33e:	4601      	mov	r1, r0
    c340:	9801      	ldr	r0, [sp, #4]
    c342:	f001 fd67 	bl	de14 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -2;
    c346:	2800      	cmp	r0, #0
    c348:	d14f      	bne.n	c3ea <main+0x13e>
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    c34a:	a905      	add	r1, sp, #20
    c34c:	9801      	ldr	r0, [sp, #4]
    c34e:	f001 fe71 	bl	e034 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -3;
    c352:	2800      	cmp	r0, #0
    c354:	d149      	bne.n	c3ea <main+0x13e>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    c356:	4b31      	ldr	r3, [pc, #196]	; (c41c <main+0x170>)
    c358:	202b      	movs	r0, #43	; 0x2b
    c35a:	6819      	ldr	r1, [r3, #0]
    c35c:	f001 fab8 	bl	d8d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    c360:	4b2f      	ldr	r3, [pc, #188]	; (c420 <main+0x174>)
    c362:	202a      	movs	r0, #42	; 0x2a
    c364:	6819      	ldr	r1, [r3, #0]
    c366:	f001 fab3 	bl	d8d0 <am_hal_gpio_pinconfig>
    retVal32 = am_hal_iom_enable(iomHandle);
    c36a:	9801      	ldr	r0, [sp, #4]
    c36c:	f001 fce2 	bl	dd34 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -4;
    c370:	2800      	cmp	r0, #0
    c372:	d13a      	bne.n	c3ea <main+0x13e>
    am_hal_iom_transfer_t iomTransfer = 
    c374:	2219      	movs	r2, #25
    c376:	2300      	movs	r3, #0
    c378:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    c37c:	2200      	movs	r2, #0
    c37e:	2301      	movs	r3, #1
    c380:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    c384:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    c388:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    c38c:	aa02      	add	r2, sp, #8
    c38e:	a803      	add	r0, sp, #12
    i2cTX[0] = 0x0F; // WHO_AM_I register
    c390:	230f      	movs	r3, #15
    am_hal_iom_transfer_t iomTransfer = 
    c392:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c396:	a90a      	add	r1, sp, #40	; 0x28
    am_hal_iom_transfer_t iomTransfer = 
    c398:	2600      	movs	r6, #0
    c39a:	2700      	movs	r7, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c39c:	9801      	ldr	r0, [sp, #4]
    i2cTX[0] = 0x0F; // WHO_AM_I register
    c39e:	9303      	str	r3, [sp, #12]
    am_hal_iom_transfer_t iomTransfer = 
    c3a0:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    c3a4:	f88d 4046 	strb.w	r4, [sp, #70]	; 0x46
    c3a8:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c3ac:	f001 ff78 	bl	e2a0 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    c3b0:	4603      	mov	r3, r0
    c3b2:	bb10      	cbnz	r0, c3fa <main+0x14e>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c3b4:	a90a      	add	r1, sp, #40	; 0x28
    c3b6:	9801      	ldr	r0, [sp, #4]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    c3b8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    iomTransfer.ui32NumBytes = 1;
    c3bc:	940d      	str	r4, [sp, #52]	; 0x34
    iomTransfer.bContinue = false;
    c3be:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c3c2:	f001 ff6d 	bl	e2a0 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    c3c6:	4604      	mov	r4, r0
    c3c8:	b990      	cbnz	r0, c3f0 <main+0x144>
    am_util_stdio_printf("Accelerometer WHO_AM_I (should be 0x33): 0x%x\n", i2cRX[0]);
    c3ca:	9902      	ldr	r1, [sp, #8]
    c3cc:	4815      	ldr	r0, [pc, #84]	; (c424 <main+0x178>)
    c3ce:	f000 ff77 	bl	d2c0 <am_util_stdio_printf>
    iomTransfer.ui32NumBytes = 2;
    c3d2:	2302      	movs	r3, #2
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c3d4:	a90a      	add	r1, sp, #40	; 0x28
    c3d6:	9801      	ldr	r0, [sp, #4]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    c3d8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    i2cTX[1] = 0x00; // Write value 0 (power-down mode)
    c3dc:	e9cd 5403 	strd	r5, r4, [sp, #12]
    iomTransfer.bContinue = false;
    c3e0:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    iomTransfer.ui32NumBytes = 2;
    c3e4:	930d      	str	r3, [sp, #52]	; 0x34
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    c3e6:	f001 ff5b 	bl	e2a0 <am_hal_iom_blocking_transfer>
    testADC();
    c3ea:	f7ff fed9 	bl	c1a0 <testADC>
    c3ee:	e7fe      	b.n	c3ee <main+0x142>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    c3f0:	4601      	mov	r1, r0
    c3f2:	480d      	ldr	r0, [pc, #52]	; (c428 <main+0x17c>)
    c3f4:	f000 ff64 	bl	d2c0 <am_util_stdio_printf>
    c3f8:	e7f7      	b.n	c3ea <main+0x13e>
        am_util_stdio_printf("Send err: %d\n", retVal32);
    c3fa:	4601      	mov	r1, r0
    c3fc:	480b      	ldr	r0, [pc, #44]	; (c42c <main+0x180>)
    c3fe:	f000 ff5f 	bl	d2c0 <am_util_stdio_printf>
    c402:	e7f2      	b.n	c3ea <main+0x13e>
    c404:	0000f4bc 	.word	0x0000f4bc
    c408:	0000f62c 	.word	0x0000f62c
    c40c:	40010094 	.word	0x40010094
    c410:	0000f308 	.word	0x0000f308
    c414:	0000f334 	.word	0x0000f334
    c418:	000186a0 	.word	0x000186a0
    c41c:	0000f4b4 	.word	0x0000f4b4
    c420:	0000f4b8 	.word	0x0000f4b8
    c424:	0000f368 	.word	0x0000f368
    c428:	0000f354 	.word	0x0000f354
    c42c:	0000f344 	.word	0x0000f344

0000c430 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c430:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c432:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c436:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c438:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c43c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c440:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c444:	f000 f806 	bl	c454 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c448:	bd01      	pop	{r0, pc}
    c44a:	bf00      	nop

0000c44c <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c44c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c44e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c450:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c452:	4770      	bx	lr

0000c454 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c454:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c456:	2300      	movs	r3, #0
{
    c458:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c45a:	e9cd 3300 	strd	r3, r3, [sp]
    c45e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c462:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c466:	4a27      	ldr	r2, [pc, #156]	; (c504 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c468:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c46a:	6813      	ldr	r3, [r2, #0]
    c46c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c46e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c470:	b2db      	uxtb	r3, r3
    c472:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c476:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c478:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c47c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c480:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c482:	0c1b      	lsrs	r3, r3, #16
    c484:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c488:	6913      	ldr	r3, [r2, #16]
    c48a:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c48c:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c490:	0792      	lsls	r2, r2, #30
{
    c492:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c494:	d430      	bmi.n	c4f8 <am_util_faultisr_collect_data+0xa4>
    c496:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c49a:	4619      	mov	r1, r3
    c49c:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c49e:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4a0:	f7ff ffd4 	bl	c44c <getStackedReg>
    c4a4:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4a6:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4a8:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4aa:	f7ff ffcf 	bl	c44c <getStackedReg>
    c4ae:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4b0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4b2:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4b4:	f7ff ffca 	bl	c44c <getStackedReg>
    c4b8:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4ba:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4bc:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4be:	f7ff ffc5 	bl	c44c <getStackedReg>
    c4c2:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4c4:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4c6:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4c8:	f7ff ffc0 	bl	c44c <getStackedReg>
    c4cc:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4ce:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4d0:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4d2:	f7ff ffbb 	bl	c44c <getStackedReg>
    c4d6:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4d8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4da:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4dc:	f7ff ffb6 	bl	c44c <getStackedReg>
    c4e0:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4e2:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4e4:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4e6:	f7ff ffb1 	bl	c44c <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4ea:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4ec:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4ee:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4f0:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4f2:	f002 f8db 	bl	e6ac <am_hal_mcuctrl_info_get>
    c4f6:	e7fe      	b.n	c4f6 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4f8:	4601      	mov	r1, r0
    c4fa:	2006      	movs	r0, #6
    c4fc:	f7ff ffa6 	bl	c44c <getStackedReg>
    c500:	4602      	mov	r2, r0
    c502:	e7ca      	b.n	c49a <am_util_faultisr_collect_data+0x46>
    c504:	e000ed28 	.word	0xe000ed28

0000c508 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c50c:	b097      	sub	sp, #92	; 0x5c
    c50e:	4682      	mov	sl, r0
    c510:	468b      	mov	fp, r1
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c512:	2300      	movs	r3, #0
{
    c514:	920d      	str	r2, [sp, #52]	; 0x34
    c516:	469c      	mov	ip, r3
    c518:	e9cd ab00 	strd	sl, fp, [sp]
    c51c:	4606      	mov	r6, r0
    c51e:	460f      	mov	r7, r1
    c520:	e00b      	b.n	c53a <uint64_to_str+0x32>
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c522:	f80b 2c01 	strb.w	r2, [fp, #-1]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c526:	4619      	mov	r1, r3
    c528:	2200      	movs	r2, #0
    c52a:	e9cd 1200 	strd	r1, r2, [sp]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c52e:	2b00      	cmp	r3, #0
    c530:	f000 80a5 	beq.w	c67e <uint64_to_str+0x176>
    c534:	e9dd 6700 	ldrd	r6, r7, [sp]
{
    c538:	46f4      	mov	ip, lr
        q64 += (q64 >> 4);
    c53a:	2300      	movs	r3, #0
    c53c:	2400      	movs	r4, #0
    c53e:	e9cd 3402 	strd	r3, r4, [sp, #8]
        q64 += (q64 >> 8);
    c542:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 16);
    c546:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 32);
    c54a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 >>= 3;
    c54e:	4698      	mov	r8, r3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c550:	08b3      	lsrs	r3, r6, #2
    c552:	eb03 0356 	add.w	r3, r3, r6, lsr #1
        q32 += (q32 >> 4);
    c556:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c55a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q64 >>= 3;
    c55e:	46a1      	mov	r9, r4
        q32 += (q32 >> 16);
    c560:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c564:	08da      	lsrs	r2, r3, #3
        return q64 + ((r64 + 6) >> 4);
    c566:	4644      	mov	r4, r8
    c568:	464d      	mov	r5, r9
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c56a:	4633      	mov	r3, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c56c:	08b0      	lsrs	r0, r6, #2
        return q64 + ((r64 + 6) >> 4);
    c56e:	e9cd 4508 	strd	r4, r5, [sp, #32]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c572:	3306      	adds	r3, #6
        r32 = ui32Val - q32*10;
    c574:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    c578:	f10c 0e01 	add.w	lr, ip, #1
        tbuf[ix++] = uMod + '0';
    c57c:	ae0f      	add	r6, sp, #60	; 0x3c
    c57e:	4476      	add	r6, lr
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c580:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c584:	ea40 7087 	orr.w	r0, r0, r7, lsl #30
    if ( ui64Val >> 32 )
    c588:	463c      	mov	r4, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c58a:	08b9      	lsrs	r1, r7, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c58c:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        tbuf[ix++] = uMod + '0';
    c590:	46b3      	mov	fp, r6
    c592:	4637      	mov	r7, r6
    c594:	9e00      	ldr	r6, [sp, #0]
        uMod = ui64Val - (u64Tmp * 10);
    c596:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c59a:	2500      	movs	r5, #0
        uMod = ui64Val - (u64Tmp * 10);
    c59c:	eba6 0242 	sub.w	r2, r6, r2, lsl #1
    if ( ui64Val >> 32 )
    c5a0:	ea54 0a05 	orrs.w	sl, r4, r5
        tbuf[ix++] = uMod + '0';
    c5a4:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c5a8:	d0bb      	beq.n	c522 <uint64_to_str+0x1a>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5ae:	085b      	lsrs	r3, r3, #1
    c5b0:	ea4f 0232 	mov.w	r2, r2, rrx
    c5b4:	eb12 0a00 	adds.w	sl, r2, r0
    c5b8:	eb43 0b01 	adc.w	fp, r3, r1
        q64 += (q64 >> 4);
    c5bc:	ea4f 131a 	mov.w	r3, sl, lsr #4
    c5c0:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
    c5c4:	9302      	str	r3, [sp, #8]
    c5c6:	ea4f 131b 	mov.w	r3, fp, lsr #4
    c5ca:	9303      	str	r3, [sp, #12]
    c5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5d0:	eb12 020a 	adds.w	r2, r2, sl
    c5d4:	eb43 030b 	adc.w	r3, r3, fp
        q64 += (q64 >> 8);
    c5d8:	0a11      	lsrs	r1, r2, #8
    c5da:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c5de:	9104      	str	r1, [sp, #16]
    c5e0:	0a19      	lsrs	r1, r3, #8
    c5e2:	9105      	str	r1, [sp, #20]
    c5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5e8:	1880      	adds	r0, r0, r2
    c5ea:	4159      	adcs	r1, r3
    c5ec:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c5ee:	0c01      	lsrs	r1, r0, #16
    c5f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c5f4:	9106      	str	r1, [sp, #24]
    c5f6:	0c19      	lsrs	r1, r3, #16
    c5f8:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 8);
    c5fa:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c5fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c600:	1880      	adds	r0, r0, r2
    c602:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c604:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    c608:	4602      	mov	r2, r0
    c60a:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c60c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c610:	1880      	adds	r0, r0, r2
    c612:	4159      	adcs	r1, r3
        q64 >>= 3;
    c614:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c618:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c61c:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    c620:	e9dd ab00 	ldrd	sl, fp, [sp]
        r64 = ui64Val - q64*10;
    c624:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c628:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c62c:	eb12 0008 	adds.w	r0, r2, r8
    c630:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c634:	eb43 0109 	adc.w	r1, r3, r9
        return q64 + ((r64 + 6) >> 4);
    c638:	f11a 0a06 	adds.w	sl, sl, #6
    c63c:	f14b 0b00 	adc.w	fp, fp, #0
        r64 = ui64Val - q64*10;
    c640:	1802      	adds	r2, r0, r0
    c642:	eb41 0301 	adc.w	r3, r1, r1
        return q64 + ((r64 + 6) >> 4);
    c646:	ebba 0002 	subs.w	r0, sl, r2
    c64a:	eb6b 0103 	sbc.w	r1, fp, r3
    c64e:	0903      	lsrs	r3, r0, #4
    c650:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    c654:	9308      	str	r3, [sp, #32]
    c656:	090b      	lsrs	r3, r1, #4
    c658:	9309      	str	r3, [sp, #36]	; 0x24
    c65a:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
    c65e:	eb1a 0a08 	adds.w	sl, sl, r8
    c662:	eb4b 0b09 	adc.w	fp, fp, r9
    c666:	4653      	mov	r3, sl
    c668:	465c      	mov	r4, fp
    c66a:	e9cd 3400 	strd	r3, r4, [sp]
        uMod = ui64Val - (u64Tmp * 10);
    c66e:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    c672:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c676:	3630      	adds	r6, #48	; 0x30
    c678:	f807 6c01 	strb.w	r6, [r7, #-1]
    c67c:	e75a      	b.n	c534 <uint64_to_str+0x2c>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c67e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c680:	4660      	mov	r0, ip
    c682:	b16a      	cbz	r2, c6a0 <uint64_to_str+0x198>
    c684:	465b      	mov	r3, fp
    c686:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c688:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c68c:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c690:	a90f      	add	r1, sp, #60	; 0x3c
    c692:	4299      	cmp	r1, r3
    c694:	d1f8      	bne.n	c688 <uint64_to_str+0x180>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c698:	4403      	add	r3, r0
    c69a:	461a      	mov	r2, r3
    c69c:	2300      	movs	r3, #0
    c69e:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c6a0:	4670      	mov	r0, lr
    c6a2:	b017      	add	sp, #92	; 0x5c
    c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c6a8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c6a8:	4b01      	ldr	r3, [pc, #4]	; (c6b0 <am_util_stdio_printf_init+0x8>)
    c6aa:	6018      	str	r0, [r3, #0]
}
    c6ac:	4770      	bx	lr
    c6ae:	bf00      	nop
    c6b0:	10001294 	.word	0x10001294

0000c6b4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6b8:	b09b      	sub	sp, #108	; 0x6c
    c6ba:	4682      	mov	sl, r0
    c6bc:	4689      	mov	r9, r1
    c6be:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c6c0:	f04f 0b00 	mov.w	fp, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c6c4:	f899 3000 	ldrb.w	r3, [r9]
    c6c8:	b1bb      	cbz	r3, c6fa <am_util_stdio_vsprintf+0x46>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c6ca:	2b25      	cmp	r3, #37	; 0x25
    c6cc:	f109 0501 	add.w	r5, r9, #1
    c6d0:	d01c      	beq.n	c70c <am_util_stdio_vsprintf+0x58>
    c6d2:	f10b 0201 	add.w	r2, fp, #1
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c6d6:	f1ba 0f00 	cmp.w	sl, #0
    c6da:	f000 8091 	beq.w	c800 <am_util_stdio_vsprintf+0x14c>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c6de:	2b0a      	cmp	r3, #10
    c6e0:	f10a 0101 	add.w	r1, sl, #1
    c6e4:	f000 808f 	beq.w	c806 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c6e8:	f88a 3000 	strb.w	r3, [sl]
    c6ec:	4693      	mov	fp, r2
    c6ee:	468a      	mov	sl, r1
            }

            ++pcFmt;
    c6f0:	46a9      	mov	r9, r5
    while ( *pcFmt != 0x0 )
    c6f2:	f899 3000 	ldrb.w	r3, [r9]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	d1e7      	bne.n	c6ca <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c6fa:	f1ba 0f00 	cmp.w	sl, #0
    c6fe:	d001      	beq.n	c704 <am_util_stdio_vsprintf+0x50>
    {
        *pcBuf = 0x0;
    c700:	f88a 3000 	strb.w	r3, [sl]
    }

    return (ui32CharCnt);
}
    c704:	4658      	mov	r0, fp
    c706:	b01b      	add	sp, #108	; 0x6c
    c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c70c:	f899 3001 	ldrb.w	r3, [r9, #1]
    c710:	2b30      	cmp	r3, #48	; 0x30
    c712:	bf03      	ittte	eq
    c714:	f899 3002 	ldrbeq.w	r3, [r9, #2]
            ++pcFmt;
    c718:	f109 0502 	addeq.w	r5, r9, #2
            ui8PadChar = '0';
    c71c:	f04f 0830 	moveq.w	r8, #48	; 0x30
        ui8PadChar = ' ';
    c720:	f04f 0820 	movne.w	r8, #32
    if ( *pcStr == '-')
    c724:	2b2d      	cmp	r3, #45	; 0x2d
    c726:	d07e      	beq.n	c826 <am_util_stdio_vsprintf+0x172>
    uint32_t ui32Val = 0, uCnt = 0;
    c728:	2100      	movs	r1, #0
    bool bNeg = false;
    c72a:	460e      	mov	r6, r1
    if ( *pcStr == '-')
    c72c:	462a      	mov	r2, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c72e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c732:	2809      	cmp	r0, #9
    c734:	f04f 0400 	mov.w	r4, #0
    c738:	d80f      	bhi.n	c75a <am_util_stdio_vsprintf+0xa6>
        ui32Val *= 10;
    c73a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        ui32Val += (*pcStr - '0');
    c73e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c742:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c746:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c74a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c74c:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
        ++uCnt;
    c750:	f101 0101 	add.w	r1, r1, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c754:	d9f1      	bls.n	c73a <am_util_stdio_vsprintf+0x86>
    c756:	5c6b      	ldrb	r3, [r5, r1]
    c758:	186a      	adds	r2, r5, r1
    return bNeg ? -ui32Val : ui32Val;
    c75a:	b106      	cbz	r6, c75e <am_util_stdio_vsprintf+0xaa>
    c75c:	4264      	negs	r4, r4
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c75e:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c760:	4621      	mov	r1, r4
    c762:	f102 0901 	add.w	r9, r2, #1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c766:	f000 8167 	beq.w	ca38 <am_util_stdio_vsprintf+0x384>
    c76a:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
    c76e:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
        if (*pcFmt == '.')
    c772:	2b2e      	cmp	r3, #46	; 0x2e
    c774:	910e      	str	r1, [sp, #56]	; 0x38
    c776:	f000 813b 	beq.w	c9f0 <am_util_stdio_vsprintf+0x33c>
        iPrecision = 6;             // printf() default precision for %f is 6
    c77a:	2506      	movs	r5, #6
        if ( *pcFmt == 'l' )
    c77c:	2b6c      	cmp	r3, #108	; 0x6c
    c77e:	d157      	bne.n	c830 <am_util_stdio_vsprintf+0x17c>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c780:	7853      	ldrb	r3, [r2, #1]
    c782:	2b6c      	cmp	r3, #108	; 0x6c
    c784:	f000 808e 	beq.w	c8a4 <am_util_stdio_vsprintf+0x1f0>
        switch ( *pcFmt )
    c788:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c78c:	f109 0901 	add.w	r9, r9, #1
    c790:	2a32      	cmp	r2, #50	; 0x32
    c792:	f200 8123 	bhi.w	c9dc <am_util_stdio_vsprintf+0x328>
    c796:	e8df f012 	tbh	[pc, r2, lsl #1]
    c79a:	00c2      	.short	0x00c2
    c79c:	01210121 	.word	0x01210121
    c7a0:	01210121 	.word	0x01210121
    c7a4:	01210121 	.word	0x01210121
    c7a8:	01210121 	.word	0x01210121
    c7ac:	01210121 	.word	0x01210121
    c7b0:	01210121 	.word	0x01210121
    c7b4:	01210121 	.word	0x01210121
    c7b8:	01210121 	.word	0x01210121
    c7bc:	01990121 	.word	0x01990121
    c7c0:	01210121 	.word	0x01210121
    c7c4:	01210121 	.word	0x01210121
    c7c8:	01210121 	.word	0x01210121
    c7cc:	01210121 	.word	0x01210121
    c7d0:	01210121 	.word	0x01210121
    c7d4:	01b60113 	.word	0x01b60113
    c7d8:	00c20121 	.word	0x00c20121
    c7dc:	01210121 	.word	0x01210121
    c7e0:	012101b6 	.word	0x012101b6
    c7e4:	01210121 	.word	0x01210121
    c7e8:	01210121 	.word	0x01210121
    c7ec:	01210121 	.word	0x01210121
    c7f0:	01210121 	.word	0x01210121
    c7f4:	0121014e 	.word	0x0121014e
    c7f8:	01210235 	.word	0x01210235
    c7fc:	024e0121 	.word	0x024e0121
    c800:	4693      	mov	fp, r2
            ++pcFmt;
    c802:	46a9      	mov	r9, r5
    c804:	e775      	b.n	c6f2 <am_util_stdio_vsprintf+0x3e>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c806:	48a6      	ldr	r0, [pc, #664]	; (caa0 <am_util_stdio_vsprintf+0x3ec>)
    c808:	7800      	ldrb	r0, [r0, #0]
    c80a:	2800      	cmp	r0, #0
    c80c:	f43f af6c 	beq.w	c6e8 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c810:	4650      	mov	r0, sl
    c812:	230d      	movs	r3, #13
    c814:	f800 3b02 	strb.w	r3, [r0], #2
    c818:	468a      	mov	sl, r1
    c81a:	f899 3000 	ldrb.w	r3, [r9]
    c81e:	f10b 0202 	add.w	r2, fp, #2
    c822:	4601      	mov	r1, r0
    c824:	e760      	b.n	c6e8 <am_util_stdio_vsprintf+0x34>
        uCnt++;
    c826:	2101      	movs	r1, #1
        bNeg = true;
    c828:	460e      	mov	r6, r1
        pcStr++;
    c82a:	186a      	adds	r2, r5, r1
    c82c:	786b      	ldrb	r3, [r5, #1]
    c82e:	e77e      	b.n	c72e <am_util_stdio_vsprintf+0x7a>
        switch ( *pcFmt )
    c830:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c834:	2a32      	cmp	r2, #50	; 0x32
    c836:	f200 80d1 	bhi.w	c9dc <am_util_stdio_vsprintf+0x328>
    c83a:	e8df f012 	tbh	[pc, r2, lsl #1]
    c83e:	0070      	.short	0x0070
    c840:	00cf00cf 	.word	0x00cf00cf
    c844:	00cf00cf 	.word	0x00cf00cf
    c848:	00cf00cf 	.word	0x00cf00cf
    c84c:	00cf00cf 	.word	0x00cf00cf
    c850:	00cf00cf 	.word	0x00cf00cf
    c854:	00cf00cf 	.word	0x00cf00cf
    c858:	00cf00cf 	.word	0x00cf00cf
    c85c:	00cf00cf 	.word	0x00cf00cf
    c860:	014700cf 	.word	0x014700cf
    c864:	00cf00cf 	.word	0x00cf00cf
    c868:	00cf00cf 	.word	0x00cf00cf
    c86c:	00cf00cf 	.word	0x00cf00cf
    c870:	00cf00cf 	.word	0x00cf00cf
    c874:	00cf00cf 	.word	0x00cf00cf
    c878:	016400c1 	.word	0x016400c1
    c87c:	007000cf 	.word	0x007000cf
    c880:	00cf00cf 	.word	0x00cf00cf
    c884:	00cf0164 	.word	0x00cf0164
    c888:	00cf00cf 	.word	0x00cf00cf
    c88c:	00cf00cf 	.word	0x00cf00cf
    c890:	00cf00cf 	.word	0x00cf00cf
    c894:	00cf00cf 	.word	0x00cf00cf
    c898:	00cf00fc 	.word	0x00cf00fc
    c89c:	00cf01e3 	.word	0x00cf01e3
    c8a0:	01fa00cf 	.word	0x01fa00cf
    c8a4:	7893      	ldrb	r3, [r2, #2]
    c8a6:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
    c8aa:	f102 0903 	add.w	r9, r2, #3
    c8ae:	2932      	cmp	r1, #50	; 0x32
    c8b0:	f200 8094 	bhi.w	c9dc <am_util_stdio_vsprintf+0x328>
    c8b4:	e8df f011 	tbh	[pc, r1, lsl #1]
    c8b8:	00920033 	.word	0x00920033
    c8bc:	00920092 	.word	0x00920092
    c8c0:	00920092 	.word	0x00920092
    c8c4:	00920092 	.word	0x00920092
    c8c8:	00920092 	.word	0x00920092
    c8cc:	00920092 	.word	0x00920092
    c8d0:	00920092 	.word	0x00920092
    c8d4:	00920092 	.word	0x00920092
    c8d8:	00920092 	.word	0x00920092
    c8dc:	00920414 	.word	0x00920414
    c8e0:	00920092 	.word	0x00920092
    c8e4:	00920092 	.word	0x00920092
    c8e8:	00920092 	.word	0x00920092
    c8ec:	00920092 	.word	0x00920092
    c8f0:	00840092 	.word	0x00840092
    c8f4:	00920222 	.word	0x00920222
    c8f8:	00920033 	.word	0x00920033
    c8fc:	02220092 	.word	0x02220092
    c900:	00920092 	.word	0x00920092
    c904:	00920092 	.word	0x00920092
    c908:	00920092 	.word	0x00920092
    c90c:	00920092 	.word	0x00920092
    c910:	00bf0092 	.word	0x00bf0092
    c914:	02160092 	.word	0x02160092
    c918:	00920092 	.word	0x00920092
    c91c:	0412      	.short	0x0412
                if ( pcBuf )
    c91e:	f1ba 0f00 	cmp.w	sl, #0
    c922:	f43f aecf 	beq.w	c6c4 <am_util_stdio_vsprintf+0x10>
                    float fValue = va_arg(pArgs, double);
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	3307      	adds	r3, #7
    c92a:	f023 0307 	bic.w	r3, r3, #7
    c92e:	e9d3 0100 	ldrd	r0, r1, [r3]
    c932:	3308      	adds	r3, #8
    c934:	9301      	str	r3, [sp, #4]
    c936:	f7ff fbe3 	bl	c100 <__aeabi_d2f>
    c93a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c93e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c942:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c948:	f8ca 3000 	str.w	r3, [sl]
    if (fValue == 0.0f)
    c94c:	f000 843e 	beq.w	d1cc <am_util_stdio_vsprintf+0xb18>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c950:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c954:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    c958:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c95a:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c95c:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c964:	f300 844a 	bgt.w	d1fc <am_util_stdio_vsprintf+0xb48>
    else if (iExp2 < -23)
    c968:	f112 0f17 	cmn.w	r2, #23
    c96c:	f2c0 8479 	blt.w	d262 <am_util_stdio_vsprintf+0xbae>
    else if (iExp2 >= 23)
    c970:	2a16      	cmp	r2, #22
    c972:	f10a 0701 	add.w	r7, sl, #1
    c976:	f340 836f 	ble.w	d058 <am_util_stdio_vsprintf+0x9a4>
        i32IntPart = i32Significand << (iExp2 - 23);
    c97a:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c97c:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c97e:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c982:	f2c0 844d 	blt.w	d220 <am_util_stdio_vsprintf+0xb6c>
    c986:	4656      	mov	r6, sl
    i32FracPart = 0;
    c988:	2400      	movs	r4, #0
    if (i32IntPart == 0)
    c98a:	2800      	cmp	r0, #0
    c98c:	f040 843c 	bne.w	d208 <am_util_stdio_vsprintf+0xb54>
    c990:	1c7a      	adds	r2, r7, #1
        *pcBuf++ = '0';
    c992:	f04f 0330 	mov.w	r3, #48	; 0x30
    c996:	7033      	strb	r3, [r6, #0]
    *pcBuf++ = '.';
    c998:	232e      	movs	r3, #46	; 0x2e
    c99a:	703b      	strb	r3, [r7, #0]
    if (i32FracPart == 0)
    c99c:	2c00      	cmp	r4, #0
    c99e:	f040 83d8 	bne.w	d152 <am_util_stdio_vsprintf+0xa9e>
        *pcBuf++ = '0';
    c9a2:	1cba      	adds	r2, r7, #2
    c9a4:	f04f 0330 	mov.w	r3, #48	; 0x30
    c9a8:	707b      	strb	r3, [r7, #1]
    c9aa:	eba2 010a 	sub.w	r1, r2, sl
    *pcBuf = 0x00;
    c9ae:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c9b0:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    c9b2:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    c9b4:	f2c0 841e 	blt.w	d1f4 <am_util_stdio_vsprintf+0xb40>
    c9b8:	460b      	mov	r3, r1
                    ui32CharCnt += iVal;
    c9ba:	449b      	add	fp, r3
                    pcBuf += iVal;
    c9bc:	449a      	add	sl, r3
    c9be:	e681      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c9c0:	9a01      	ldr	r2, [sp, #4]
    c9c2:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c9c4:	f1ba 0f00 	cmp.w	sl, #0
    c9c8:	d004      	beq.n	c9d4 <am_util_stdio_vsprintf+0x320>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c9ca:	6812      	ldr	r2, [r2, #0]
    c9cc:	f88a 2000 	strb.w	r2, [sl]
                    *pcBuf++ = ui8CharSpecifier;
    c9d0:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c9d4:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c9d8:	9301      	str	r3, [sp, #4]
                break;
    c9da:	e673      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
                if ( pcBuf )
    c9dc:	f1ba 0f00 	cmp.w	sl, #0
    c9e0:	d003      	beq.n	c9ea <am_util_stdio_vsprintf+0x336>
                    *pcBuf++ = *pcFmt;
    c9e2:	f88a 3000 	strb.w	r3, [sl]
    c9e6:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c9ea:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c9ee:	e669      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
    if ( *pcStr == '-')
    c9f0:	7851      	ldrb	r1, [r2, #1]
    c9f2:	292d      	cmp	r1, #45	; 0x2d
    c9f4:	f000 821a 	beq.w	ce2c <am_util_stdio_vsprintf+0x778>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c9fc:	2b09      	cmp	r3, #9
    c9fe:	f200 8305 	bhi.w	d00c <am_util_stdio_vsprintf+0x958>
    bool bNeg = false;
    ca02:	2600      	movs	r6, #0
    uint32_t ui32Val = 0, uCnt = 0;
    ca04:	4632      	mov	r2, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca06:	4648      	mov	r0, r9
        uCnt++;
    ca08:	2300      	movs	r3, #0
        ui32Val *= 10;
    ca0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    ca0e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca12:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    ca16:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    ca1a:	2d09      	cmp	r5, #9
        ui32Val += (*pcStr - '0');
    ca1c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        ++uCnt;
    ca20:	f102 0201 	add.w	r2, r2, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca24:	d9f1      	bls.n	ca0a <am_util_stdio_vsprintf+0x356>
    return bNeg ? -ui32Val : ui32Val;
    ca26:	b106      	cbz	r6, ca2a <am_util_stdio_vsprintf+0x376>
    ca28:	425b      	negs	r3, r3
            pcFmt += ui32NumChars;
    ca2a:	444a      	add	r2, r9
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ca2c:	461d      	mov	r5, r3
    ca2e:	f102 0901 	add.w	r9, r2, #1
    ca32:	7813      	ldrb	r3, [r2, #0]
    ca34:	e6a2      	b.n	c77c <am_util_stdio_vsprintf+0xc8>
        switch ( *pcFmt )
    ca36:	990e      	ldr	r1, [sp, #56]	; 0x38
                pcStr = va_arg(pArgs, char *);
    ca38:	9b01      	ldr	r3, [sp, #4]
    ca3a:	681f      	ldr	r7, [r3, #0]
    ca3c:	1d1a      	adds	r2, r3, #4
    if ( !pcBuf )
    ca3e:	b38f      	cbz	r7, caa4 <am_util_stdio_vsprintf+0x3f0>
    while ( *pcBuf++ )
    ca40:	7838      	ldrb	r0, [r7, #0]
    ca42:	1c7b      	adds	r3, r7, #1
    ca44:	461c      	mov	r4, r3
    ca46:	2800      	cmp	r0, #0
    ca48:	f000 835c 	beq.w	d104 <am_util_stdio_vsprintf+0xa50>
    ca4c:	1be6      	subs	r6, r4, r7
    ca4e:	f814 5b01 	ldrb.w	r5, [r4], #1
    ca52:	2d00      	cmp	r5, #0
    ca54:	d1fa      	bne.n	ca4c <am_util_stdio_vsprintf+0x398>
                if ( iWidth > 0 )
    ca56:	2900      	cmp	r1, #0
    ca58:	dd02      	ble.n	ca60 <am_util_stdio_vsprintf+0x3ac>
                    if ( ui32strlen < iWidth )
    ca5a:	428e      	cmp	r6, r1
    ca5c:	f0c0 8356 	bcc.w	d10c <am_util_stdio_vsprintf+0xa58>
    ca60:	465c      	mov	r4, fp
    ca62:	1be4      	subs	r4, r4, r7
    ca64:	4657      	mov	r7, sl
                        *pcBuf++ = *pcStr;
    ca66:	4655      	mov	r5, sl
    ca68:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    ca6c:	b15f      	cbz	r7, ca86 <am_util_stdio_vsprintf+0x3d2>
                        *pcBuf++ = *pcStr;
    ca6e:	7028      	strb	r0, [r5, #0]
                while (*pcStr != 0x0)
    ca70:	f813 0b01 	ldrb.w	r0, [r3], #1
                        *pcBuf++ = *pcStr;
    ca74:	3701      	adds	r7, #1
                while (*pcStr != 0x0)
    ca76:	2800      	cmp	r0, #0
    ca78:	f000 81c5 	beq.w	ce06 <am_util_stdio_vsprintf+0x752>
                        *pcBuf++ = *pcStr;
    ca7c:	463d      	mov	r5, r7
    ca7e:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    ca82:	2f00      	cmp	r7, #0
    ca84:	d1f3      	bne.n	ca6e <am_util_stdio_vsprintf+0x3ba>
    ca86:	46ba      	mov	sl, r7
    ca88:	eb04 0b03 	add.w	fp, r4, r3
                while (*pcStr != 0x0)
    ca8c:	f813 0b01 	ldrb.w	r0, [r3], #1
    ca90:	2800      	cmp	r0, #0
    ca92:	d1f9      	bne.n	ca88 <am_util_stdio_vsprintf+0x3d4>
                if ( iWidth )
    ca94:	2900      	cmp	r1, #0
    ca96:	f040 81ba 	bne.w	ce0e <am_util_stdio_vsprintf+0x75a>
                pcStr = va_arg(pArgs, char *);
    ca9a:	9201      	str	r2, [sp, #4]
    ca9c:	e612      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
    ca9e:	bf00      	nop
    caa0:	10001024 	.word	0x10001024
                if ( iWidth > 0 )
    caa4:	2900      	cmp	r1, #0
    caa6:	f340 838a 	ble.w	d1be <am_util_stdio_vsprintf+0xb0a>
        return ui32RetVal;
    caaa:	463e      	mov	r6, r7
    if ( i32NumChars <= 0 )
    caac:	2900      	cmp	r1, #0
    caae:	f300 8304 	bgt.w	d0ba <am_util_stdio_vsprintf+0xa06>
    cab2:	465c      	mov	r4, fp
    cab4:	2300      	movs	r3, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cab6:	f1ba 0f00 	cmp.w	sl, #0
    caba:	d000      	beq.n	cabe <am_util_stdio_vsprintf+0x40a>
    cabc:	449a      	add	sl, r3
                while (*pcStr != 0x0)
    cabe:	7838      	ldrb	r0, [r7, #0]
    cac0:	2800      	cmp	r0, #0
    cac2:	f000 83f3 	beq.w	d2ac <am_util_stdio_vsprintf+0xbf8>
                        iWidth = 0;
    cac6:	2100      	movs	r1, #0
    cac8:	1c7b      	adds	r3, r7, #1
    caca:	e7ca      	b.n	ca62 <am_util_stdio_vsprintf+0x3ae>
        bLower = bLongLong = false;
    cacc:	2500      	movs	r5, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cace:	9b01      	ldr	r3, [sp, #4]
    cad0:	681a      	ldr	r2, [r3, #0]
                                      va_arg(pArgs, uint32_t);
    cad2:	3304      	adds	r3, #4
    cad4:	9301      	str	r3, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cad6:	2300      	movs	r3, #0
                if ( iWidth )
    cad8:	2c00      	cmp	r4, #0
    cada:	f040 80bd 	bne.w	cc58 <am_util_stdio_vsprintf+0x5a4>
    if ( ui64Val == 0 )
    cade:	ea52 0103 	orrs.w	r1, r2, r3
    cae2:	f040 80dd 	bne.w	cca0 <am_util_stdio_vsprintf+0x5ec>
    if (pcBuf)
    cae6:	f1ba 0f00 	cmp.w	sl, #0
    caea:	f000 828d 	beq.w	d008 <am_util_stdio_vsprintf+0x954>
            *pcBuf++ = tbuf[ix];
    caee:	f10a 0501 	add.w	r5, sl, #1
    caf2:	f04f 0330 	mov.w	r3, #48	; 0x30
    caf6:	f88a 3000 	strb.w	r3, [sl]
    cafa:	2001      	movs	r0, #1
    cafc:	46aa      	mov	sl, r5
        *pcBuf = 0;
    cafe:	2300      	movs	r3, #0
    cb00:	702b      	strb	r3, [r5, #0]
                ui32CharCnt += iVal;
    cb02:	4483      	add	fp, r0
                break;
    cb04:	e5de      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cb06:	9b01      	ldr	r3, [sp, #4]
    cb08:	6818      	ldr	r0, [r3, #0]
                                     va_arg(pArgs, int32_t);
    cb0a:	3304      	adds	r3, #4
    cb0c:	9301      	str	r3, [sp, #4]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cb0e:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    cb10:	2800      	cmp	r0, #0
    cb12:	f171 0300 	sbcs.w	r3, r1, #0
    cb16:	f2c0 8194 	blt.w	ce42 <am_util_stdio_vsprintf+0x78e>
                    ui64Val = i64Val;
    cb1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cb1e:	2c00      	cmp	r4, #0
    cb20:	d065      	beq.n	cbee <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    cb22:	4603      	mov	r3, r0
    cb24:	430b      	orrs	r3, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cb26:	460c      	mov	r4, r1
    cb28:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    cb2a:	bf0c      	ite	eq
    cb2c:	f04f 0e01 	moveq.w	lr, #1
    cb30:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cb34:	4323      	orrs	r3, r4
    cb36:	f000 8396 	beq.w	d266 <am_util_stdio_vsprintf+0xbb2>
                    bNeg = false;
    cb3a:	2300      	movs	r3, #0
    cb3c:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
    cb40:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cb44:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
    cb48:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        q64 += (q64 >> 4);
    cb50:	2300      	movs	r3, #0
    cb52:	2400      	movs	r4, #0
    cb54:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    cb58:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    cb5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    cb60:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb64:	0843      	lsrs	r3, r0, #1
    cb66:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q32 += (q32 >> 4);
    cb6a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    cb6e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    cb72:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    cb76:	08db      	lsrs	r3, r3, #3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb78:	4602      	mov	r2, r0
        r32 = ui32Val - q32*10;
    cb7a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb7e:	0886      	lsrs	r6, r0, #2
    if ( ui64Val >> 32 )
    cb80:	460c      	mov	r4, r1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb82:	3206      	adds	r2, #6
    if ( ui64Val >> 32 )
    cb84:	2500      	movs	r5, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb86:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
    cb8a:	088f      	lsrs	r7, r1, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb8c:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
    if ( ui64Val >> 32 )
    cb90:	ea54 0105 	orrs.w	r1, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb94:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    cb98:	f040 80ba 	bne.w	cd10 <am_util_stdio_vsprintf+0x65c>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb9c:	4619      	mov	r1, r3
    cb9e:	2200      	movs	r2, #0
        ++iNDigits;
    cba0:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cba4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while ( ui64Val )
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d1cf      	bne.n	cb4c <am_util_stdio_vsprintf+0x498>
                    iWidth -= ndigits_in_i64(ui64Val);
    cbac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cbae:	eba3 0e0e 	sub.w	lr, r3, lr
                    if ( bNeg )
    cbb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbb4:	e9dd 8b10 	ldrd	r8, fp, [sp, #64]	; 0x40
    cbb8:	e9dd a912 	ldrd	sl, r9, [sp, #72]	; 0x48
    cbbc:	b13b      	cbz	r3, cbce <am_util_stdio_vsprintf+0x51a>
                        if ( ui8PadChar == '0' )
    cbbe:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cbc2:	f10e 3eff 	add.w	lr, lr, #4294967295
                        if ( ui8PadChar == '0' )
    cbc6:	f000 82a3 	beq.w	d110 <am_util_stdio_vsprintf+0xa5c>
    cbca:	2301      	movs	r3, #1
    cbcc:	930f      	str	r3, [sp, #60]	; 0x3c
    if ( i32NumChars <= 0 )
    cbce:	f1be 0f00 	cmp.w	lr, #0
    cbd2:	f300 821e 	bgt.w	d012 <am_util_stdio_vsprintf+0x95e>
    cbd6:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cbd8:	f1ba 0f00 	cmp.w	sl, #0
    cbdc:	f000 82fc 	beq.w	d1d8 <am_util_stdio_vsprintf+0xb24>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cbe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    pcBuf += pcBuf ? iWidth : 0;
    cbe2:	4492      	add	sl, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cbe4:	b11b      	cbz	r3, cbee <am_util_stdio_vsprintf+0x53a>
    cbe6:	f1b8 0f20 	cmp.w	r8, #32
    cbea:	f000 8132 	beq.w	ce52 <am_util_stdio_vsprintf+0x79e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cbee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cbf2:	4652      	mov	r2, sl
    cbf4:	f7ff fc88 	bl	c508 <uint64_to_str>
                if ( pcBuf )
    cbf8:	f1ba 0f00 	cmp.w	sl, #0
    cbfc:	d081      	beq.n	cb02 <am_util_stdio_vsprintf+0x44e>
                    pcBuf += iVal;
    cbfe:	4482      	add	sl, r0
                ui32CharCnt += iVal;
    cc00:	4483      	add	fp, r0
    cc02:	e55f      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc04:	9a01      	ldr	r2, [sp, #4]
    cc06:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    cc08:	3204      	adds	r2, #4
    cc0a:	9201      	str	r2, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc0c:	4619      	mov	r1, r3
    cc0e:	2200      	movs	r2, #0
    cc10:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
                if ( iWidth )
    cc14:	2c00      	cmp	r4, #0
    cc16:	f040 8127 	bne.w	ce68 <am_util_stdio_vsprintf+0x7b4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cc1e:	4652      	mov	r2, sl
    cc20:	f7ff fc72 	bl	c508 <uint64_to_str>
                if ( pcBuf )
    cc24:	f1ba 0f00 	cmp.w	sl, #0
    cc28:	d1e9      	bne.n	cbfe <am_util_stdio_vsprintf+0x54a>
    cc2a:	f04f 0a00 	mov.w	sl, #0
                ui32CharCnt += iVal;
    cc2e:	4483      	add	fp, r0
    cc30:	e548      	b.n	c6c4 <am_util_stdio_vsprintf+0x10>
                bLower = true;
    cc32:	2501      	movs	r5, #1
    cc34:	e74b      	b.n	cace <am_util_stdio_vsprintf+0x41a>
        bLower = bLongLong = false;
    cc36:	2300      	movs	r3, #0
                bLower = true;
    cc38:	2501      	movs	r5, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	f43f af47 	beq.w	cace <am_util_stdio_vsprintf+0x41a>
    cc40:	9b01      	ldr	r3, [sp, #4]
    cc42:	3307      	adds	r3, #7
    cc44:	f023 0307 	bic.w	r3, r3, #7
    cc48:	f103 0208 	add.w	r2, r3, #8
    cc4c:	9201      	str	r2, [sp, #4]
    cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
                if ( iWidth )
    cc52:	2c00      	cmp	r4, #0
    cc54:	f43f af43 	beq.w	cade <am_util_stdio_vsprintf+0x42a>
    int iDigits = ui64Val ? 0 : 1;
    cc58:	ea52 0103 	orrs.w	r1, r2, r3
    cc5c:	bf0c      	ite	eq
    cc5e:	2401      	moveq	r4, #1
    cc60:	2400      	movne	r4, #0
    while ( ui64Val )
    cc62:	ea52 0103 	orrs.w	r1, r2, r3
    cc66:	d00c      	beq.n	cc82 <am_util_stdio_vsprintf+0x5ce>
    cc68:	4610      	mov	r0, r2
    cc6a:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cc6c:	0906      	lsrs	r6, r0, #4
    cc6e:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    cc72:	090f      	lsrs	r7, r1, #4
    cc74:	4630      	mov	r0, r6
    cc76:	4639      	mov	r1, r7
    while ( ui64Val )
    cc78:	ea50 0601 	orrs.w	r6, r0, r1
        ++iDigits;
    cc7c:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cc80:	d1f4      	bne.n	cc6c <am_util_stdio_vsprintf+0x5b8>
                    iWidth -= ndigits_in_hex(ui64Val);
    cc82:	990e      	ldr	r1, [sp, #56]	; 0x38
    cc84:	1b09      	subs	r1, r1, r4
    if ( i32NumChars <= 0 )
    cc86:	2900      	cmp	r1, #0
    cc88:	f300 81a1 	bgt.w	cfce <am_util_stdio_vsprintf+0x91a>
    cc8c:	2000      	movs	r0, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cc8e:	f1ba 0f00 	cmp.w	sl, #0
    cc92:	f000 81b5 	beq.w	d000 <am_util_stdio_vsprintf+0x94c>
    if ( ui64Val == 0 )
    cc96:	ea52 0103 	orrs.w	r1, r2, r3
    cc9a:	4482      	add	sl, r0
    cc9c:	f43f af23 	beq.w	cae6 <am_util_stdio_vsprintf+0x432>
    cca0:	2d00      	cmp	r5, #0
    cca2:	bf14      	ite	ne
    cca4:	2527      	movne	r5, #39	; 0x27
    cca6:	2507      	moveq	r5, #7
    if ( i32NumChars <= 0 )
    cca8:	af15      	add	r7, sp, #84	; 0x54
    int iNumDig, ix = 0;
    ccaa:	2600      	movs	r6, #0
    ccac:	f8cd 9008 	str.w	r9, [sp, #8]
        ui64Val >>= 4;
    ccb0:	0914      	lsrs	r4, r2, #4
        cCh = ui64Val & 0xf;
    ccb2:	f002 020f 	and.w	r2, r2, #15
        ui64Val >>= 4;
    ccb6:	ea4f 1813 	mov.w	r8, r3, lsr #4
            cCh += bLower ? 0x27 : 0x7;
    ccba:	18a8      	adds	r0, r5, r2
        if ( cCh > 9 )
    ccbc:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    ccbe:	46c6      	mov	lr, r8
    ccc0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    ccc4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ccc8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    cccc:	f106 0901 	add.w	r9, r6, #1
        if ( cCh > 9 )
    ccd0:	d978      	bls.n	cdc4 <am_util_stdio_vsprintf+0x710>
        ui64Val >>= 4;
    ccd2:	4622      	mov	r2, r4
    ccd4:	4643      	mov	r3, r8
    while ( ui64Val )
    ccd6:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    ccda:	f807 0b01 	strb.w	r0, [r7], #1
    while ( ui64Val )
    ccde:	d07a      	beq.n	cdd6 <am_util_stdio_vsprintf+0x722>
    if ( i32NumChars <= 0 )
    cce0:	464e      	mov	r6, r9
    cce2:	e7e5      	b.n	ccb0 <am_util_stdio_vsprintf+0x5fc>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cce4:	9b01      	ldr	r3, [sp, #4]
    cce6:	3307      	adds	r3, #7
    cce8:	f023 0307 	bic.w	r3, r3, #7
    ccec:	f103 0208 	add.w	r2, r3, #8
    ccf0:	9201      	str	r2, [sp, #4]
    ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccf6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    ccfa:	e78b      	b.n	cc14 <am_util_stdio_vsprintf+0x560>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ccfc:	9b01      	ldr	r3, [sp, #4]
    ccfe:	3307      	adds	r3, #7
    cd00:	f023 0307 	bic.w	r3, r3, #7
    cd04:	f103 0208 	add.w	r2, r3, #8
    cd08:	9201      	str	r2, [sp, #4]
    cd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
    cd0e:	e6ff      	b.n	cb10 <am_util_stdio_vsprintf+0x45c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cd10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cd14:	085b      	lsrs	r3, r3, #1
    cd16:	ea4f 0232 	mov.w	r2, r2, rrx
    cd1a:	1990      	adds	r0, r2, r6
    cd1c:	eb43 0107 	adc.w	r1, r3, r7
        q64 += (q64 >> 4);
    cd20:	0903      	lsrs	r3, r0, #4
    cd22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    cd26:	9308      	str	r3, [sp, #32]
    cd28:	090b      	lsrs	r3, r1, #4
    cd2a:	9309      	str	r3, [sp, #36]	; 0x24
    cd2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cd30:	1812      	adds	r2, r2, r0
    cd32:	414b      	adcs	r3, r1
        q64 += (q64 >> 8);
    cd34:	0a11      	lsrs	r1, r2, #8
    cd36:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cd3a:	9106      	str	r1, [sp, #24]
    cd3c:	0a19      	lsrs	r1, r3, #8
    cd3e:	9107      	str	r1, [sp, #28]
    cd40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cd44:	1880      	adds	r0, r0, r2
    cd46:	4159      	adcs	r1, r3
    cd48:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    cd4a:	0c01      	lsrs	r1, r0, #16
    cd4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cd50:	9104      	str	r1, [sp, #16]
    cd52:	0c19      	lsrs	r1, r3, #16
    cd54:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    cd56:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    cd58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cd5c:	1880      	adds	r0, r0, r2
    cd5e:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cd60:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cd64:	4602      	mov	r2, r0
    cd66:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cd68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cd6c:	1880      	adds	r0, r0, r2
    cd6e:	4159      	adcs	r1, r3
        q64 >>= 3;
    cd70:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cd74:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cd78:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cd80:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cd84:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cd88:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cd8c:	eb12 0408 	adds.w	r4, r2, r8
    cd90:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cd94:	3006      	adds	r0, #6
    cd96:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cd9a:	1922      	adds	r2, r4, r4
    cd9c:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cda0:	1a80      	subs	r0, r0, r2
    cda2:	eb61 0103 	sbc.w	r1, r1, r3
    cda6:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cdaa:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cdae:	eb1a 0308 	adds.w	r3, sl, r8
    cdb2:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cdb6:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cdba:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cdbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cdc2:	e6c3      	b.n	cb4c <am_util_stdio_vsprintf+0x498>
        ui64Val >>= 4;
    cdc4:	4622      	mov	r2, r4
    cdc6:	4643      	mov	r3, r8
    while ( ui64Val )
    cdc8:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cdcc:	f106 0901 	add.w	r9, r6, #1
    cdd0:	f807 cb01 	strb.w	ip, [r7], #1
    while ( ui64Val )
    cdd4:	d184      	bne.n	cce0 <am_util_stdio_vsprintf+0x62c>
    cdd6:	464d      	mov	r5, r9
    cdd8:	4628      	mov	r0, r5
    cdda:	f8dd 9008 	ldr.w	r9, [sp, #8]
    if (pcBuf)
    cdde:	f1ba 0f00 	cmp.w	sl, #0
    cde2:	f43f af22 	beq.w	cc2a <am_util_stdio_vsprintf+0x576>
    cde6:	ab15      	add	r3, sp, #84	; 0x54
    cde8:	eb0a 0405 	add.w	r4, sl, r5
    cdec:	442b      	add	r3, r5
    cdee:	f10a 32ff 	add.w	r2, sl, #4294967295
            *pcBuf++ = tbuf[ix];
    cdf2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cdf6:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cdfa:	a915      	add	r1, sp, #84	; 0x54
    cdfc:	4299      	cmp	r1, r3
    cdfe:	d1f8      	bne.n	cdf2 <am_util_stdio_vsprintf+0x73e>
    ce00:	4455      	add	r5, sl
    ce02:	46a2      	mov	sl, r4
    ce04:	e67b      	b.n	cafe <am_util_stdio_vsprintf+0x44a>
    ce06:	46ba      	mov	sl, r7
                if ( iWidth )
    ce08:	2900      	cmp	r1, #0
    ce0a:	f43f ae46 	beq.w	ca9a <am_util_stdio_vsprintf+0x3e6>
                    iWidth = -iWidth;
    ce0e:	4249      	negs	r1, r1
                    if ( ui32strlen < iWidth )
    ce10:	42b1      	cmp	r1, r6
    ce12:	f67f ae42 	bls.w	ca9a <am_util_stdio_vsprintf+0x3e6>
                        iWidth -= ui32strlen;
    ce16:	1b89      	subs	r1, r1, r6
    if ( i32NumChars <= 0 )
    ce18:	2900      	cmp	r1, #0
    ce1a:	f300 8163 	bgt.w	d0e4 <am_util_stdio_vsprintf+0xa30>
    ce1e:	2100      	movs	r1, #0
                        pcBuf += pcBuf ? iWidth : 0;
    ce20:	f1ba 0f00 	cmp.w	sl, #0
    ce24:	f43f ae39 	beq.w	ca9a <am_util_stdio_vsprintf+0x3e6>
    ce28:	448a      	add	sl, r1
    ce2a:	e636      	b.n	ca9a <am_util_stdio_vsprintf+0x3e6>
    ce2c:	7891      	ldrb	r1, [r2, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce2e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ce32:	2b09      	cmp	r3, #9
        pcStr++;
    ce34:	f102 0002 	add.w	r0, r2, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce38:	f200 8234 	bhi.w	d2a4 <am_util_stdio_vsprintf+0xbf0>
        bNeg = true;
    ce3c:	2601      	movs	r6, #1
        uCnt++;
    ce3e:	4632      	mov	r2, r6
    ce40:	e5e2      	b.n	ca08 <am_util_stdio_vsprintf+0x354>
                    ui64Val = -i64Val;          // Get absolute value
    ce42:	4240      	negs	r0, r0
    ce44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ce48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    ce4c:	2c00      	cmp	r4, #0
    ce4e:	f040 80fa 	bne.w	d046 <am_util_stdio_vsprintf+0x992>
                        if ( pcBuf )
    ce52:	f1ba 0f00 	cmp.w	sl, #0
    ce56:	d004      	beq.n	ce62 <am_util_stdio_vsprintf+0x7ae>
                            *pcBuf++ = '-';
    ce58:	232d      	movs	r3, #45	; 0x2d
    ce5a:	f88a 3000 	strb.w	r3, [sl]
    ce5e:	f10a 0a01 	add.w	sl, sl, #1
                        ++ui32CharCnt;
    ce62:	f10b 0b01 	add.w	fp, fp, #1
    ce66:	e6c2      	b.n	cbee <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    ce68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ce6c:	4603      	mov	r3, r0
    ce6e:	430b      	orrs	r3, r1
    while ( ui64Val )
    ce70:	460c      	mov	r4, r1
    ce72:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    ce74:	bf0c      	ite	eq
    ce76:	f04f 0e01 	moveq.w	lr, #1
    ce7a:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    ce7e:	4323      	orrs	r3, r4
    ce80:	d03c      	beq.n	cefc <am_util_stdio_vsprintf+0x848>
    ce82:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ce86:	e9cd ba10 	strd	fp, sl, [sp, #64]	; 0x40
    ce8a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    ce8e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce92:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
        q64 += (q64 >> 4);
    ce96:	2300      	movs	r3, #0
    ce98:	2400      	movs	r4, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce9a:	08a8      	lsrs	r0, r5, #2
        q64 += (q64 >> 4);
    ce9c:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    cea0:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    cea4:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    cea8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ceac:	ea40 7086 	orr.w	r0, r0, r6, lsl #30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ceb0:	462c      	mov	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ceb2:	08b1      	lsrs	r1, r6, #2
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ceb4:	086e      	lsrs	r6, r5, #1
    ceb6:	eb06 0694 	add.w	r6, r6, r4, lsr #2
        q32 += (q32 >> 4);
    ceba:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    if ( ui64Val >> 32 )
    cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        q32 += (q32 >> 8);
    cec2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
        q32 += (q32 >> 16);
    cec6:	eb06 4616 	add.w	r6, r6, r6, lsr #16
        q32 >>= 3;
    ceca:	08f6      	lsrs	r6, r6, #3
        r32 = ui32Val - q32*10;
    cecc:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
    if ( ui64Val >> 32 )
    ced0:	461c      	mov	r4, r3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ced2:	1d97      	adds	r7, r2, #6
    if ( ui64Val >> 32 )
    ced4:	2500      	movs	r5, #0
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ced6:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
    if ( ui64Val >> 32 )
    ceda:	ea54 0305 	orrs.w	r3, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cede:	eb06 1617 	add.w	r6, r6, r7, lsr #4
    if ( ui64Val >> 32 )
    cee2:	d118      	bne.n	cf16 <am_util_stdio_vsprintf+0x862>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cee4:	4633      	mov	r3, r6
    cee6:	2400      	movs	r4, #0
        ++iNDigits;
    cee8:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ceec:	e9cd 3402 	strd	r3, r4, [sp, #8]
    while ( ui64Val )
    cef0:	2e00      	cmp	r6, #0
    cef2:	d1ce      	bne.n	ce92 <am_util_stdio_vsprintf+0x7de>
    cef4:	e9dd 8b0f 	ldrd	r8, fp, [sp, #60]	; 0x3c
    cef8:	e9dd a911 	ldrd	sl, r9, [sp, #68]	; 0x44
                    iWidth -= ndigits_in_u64(ui64Val);
    cefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cefe:	eba3 030e 	sub.w	r3, r3, lr
    if ( i32NumChars <= 0 )
    cf02:	2b00      	cmp	r3, #0
    cf04:	f300 80c7 	bgt.w	d096 <am_util_stdio_vsprintf+0x9e2>
    cf08:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cf0a:	f1ba 0f00 	cmp.w	sl, #0
    cf0e:	f000 8190 	beq.w	d232 <am_util_stdio_vsprintf+0xb7e>
    cf12:	4492      	add	sl, r2
    cf14:	e681      	b.n	cc1a <am_util_stdio_vsprintf+0x566>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cf16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cf1a:	087f      	lsrs	r7, r7, #1
    cf1c:	ea4f 0636 	mov.w	r6, r6, rrx
    cf20:	1982      	adds	r2, r0, r6
    cf22:	eb41 0307 	adc.w	r3, r1, r7
        q64 += (q64 >> 4);
    cf26:	0911      	lsrs	r1, r2, #4
    cf28:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    cf2c:	9108      	str	r1, [sp, #32]
    cf2e:	0919      	lsrs	r1, r3, #4
    cf30:	9109      	str	r1, [sp, #36]	; 0x24
    cf32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    cf36:	1880      	adds	r0, r0, r2
    cf38:	4159      	adcs	r1, r3
    cf3a:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    cf3c:	0a01      	lsrs	r1, r0, #8
    cf3e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cf42:	9106      	str	r1, [sp, #24]
    cf44:	0a19      	lsrs	r1, r3, #8
    cf46:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 4);
    cf48:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    cf4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cf4e:	1880      	adds	r0, r0, r2
    cf50:	4159      	adcs	r1, r3
    cf52:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    cf54:	0c01      	lsrs	r1, r0, #16
    cf56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cf5a:	9104      	str	r1, [sp, #16]
    cf5c:	0c19      	lsrs	r1, r3, #16
    cf5e:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    cf60:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    cf62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cf66:	1880      	adds	r0, r0, r2
    cf68:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cf6a:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cf6e:	4602      	mov	r2, r0
    cf70:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cf72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cf76:	1880      	adds	r0, r0, r2
    cf78:	4159      	adcs	r1, r3
        q64 >>= 3;
    cf7a:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cf7e:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cf82:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cf86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cf8a:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cf8e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cf92:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cf96:	eb12 0408 	adds.w	r4, r2, r8
    cf9a:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cf9e:	3006      	adds	r0, #6
    cfa0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cfa4:	1922      	adds	r2, r4, r4
    cfa6:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cfaa:	1a80      	subs	r0, r0, r2
    cfac:	eb61 0103 	sbc.w	r1, r1, r3
    cfb0:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cfb4:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cfb8:	eb1a 0308 	adds.w	r3, sl, r8
    cfbc:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cfc0:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cfc4:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cfc8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cfcc:	e761      	b.n	ce92 <am_util_stdio_vsprintf+0x7de>
    while ( i32NumChars-- )
    cfce:	3901      	subs	r1, #1
    cfd0:	4656      	mov	r6, sl
    int32_t i32Cnt = 0;
    cfd2:	2000      	movs	r0, #0
    cfd4:	1e4f      	subs	r7, r1, #1
    cfd6:	1c44      	adds	r4, r0, #1
        if ( pcBuf )
    cfd8:	b156      	cbz	r6, cff0 <am_util_stdio_vsprintf+0x93c>
            *pcBuf++ = cPadChar;
    cfda:	46bc      	mov	ip, r7
    cfdc:	460f      	mov	r7, r1
    cfde:	f886 8000 	strb.w	r8, [r6]
    cfe2:	4620      	mov	r0, r4
    cfe4:	4661      	mov	r1, ip
    cfe6:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cfe8:	2f00      	cmp	r7, #0
    cfea:	d1f3      	bne.n	cfd4 <am_util_stdio_vsprintf+0x920>
    cfec:	4483      	add	fp, r0
    cfee:	e64e      	b.n	cc8e <am_util_stdio_vsprintf+0x5da>
    cff0:	2900      	cmp	r1, #0
    cff2:	f000 8126 	beq.w	d242 <am_util_stdio_vsprintf+0xb8e>
    cff6:	3902      	subs	r1, #2
    cff8:	3002      	adds	r0, #2
    cffa:	2f00      	cmp	r7, #0
    cffc:	d1ea      	bne.n	cfd4 <am_util_stdio_vsprintf+0x920>
    cffe:	e7f5      	b.n	cfec <am_util_stdio_vsprintf+0x938>
    if ( ui64Val == 0 )
    d000:	ea52 0103 	orrs.w	r1, r2, r3
    d004:	f47f ae4c 	bne.w	cca0 <am_util_stdio_vsprintf+0x5ec>
    d008:	2001      	movs	r0, #1
    d00a:	e60e      	b.n	cc2a <am_util_stdio_vsprintf+0x576>
    uint32_t ui32Val = 0, uCnt = 0;
    d00c:	2200      	movs	r2, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d00e:	4613      	mov	r3, r2
    d010:	e50b      	b.n	ca2a <am_util_stdio_vsprintf+0x376>
    while ( i32NumChars-- )
    d012:	f10e 33ff 	add.w	r3, lr, #4294967295
    d016:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    d018:	2200      	movs	r2, #0
    d01a:	1e5c      	subs	r4, r3, #1
    d01c:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    d01e:	b150      	cbz	r0, d036 <am_util_stdio_vsprintf+0x982>
            *pcBuf++ = cPadChar;
    d020:	4625      	mov	r5, r4
    d022:	461c      	mov	r4, r3
    d024:	f880 8000 	strb.w	r8, [r0]
    d028:	460a      	mov	r2, r1
    d02a:	462b      	mov	r3, r5
    d02c:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d02e:	2c00      	cmp	r4, #0
    d030:	d1f3      	bne.n	d01a <am_util_stdio_vsprintf+0x966>
    d032:	4493      	add	fp, r2
    d034:	e5d0      	b.n	cbd8 <am_util_stdio_vsprintf+0x524>
    d036:	2b00      	cmp	r3, #0
    d038:	f000 8110 	beq.w	d25c <am_util_stdio_vsprintf+0xba8>
    d03c:	3b02      	subs	r3, #2
    d03e:	3202      	adds	r2, #2
    d040:	2c00      	cmp	r4, #0
    d042:	d1ea      	bne.n	d01a <am_util_stdio_vsprintf+0x966>
    d044:	e7f5      	b.n	d032 <am_util_stdio_vsprintf+0x97e>
    int iNDigits = ui64Val ? 0 : 1;
    d046:	4603      	mov	r3, r0
    d048:	430b      	orrs	r3, r1
    d04a:	bf0c      	ite	eq
    d04c:	f04f 0e01 	moveq.w	lr, #1
    d050:	f04f 0e00 	movne.w	lr, #0
                    bNeg = true;
    d054:	2301      	movs	r3, #1
    d056:	e571      	b.n	cb3c <am_util_stdio_vsprintf+0x488>
    else if (iExp2 >= 0)
    d058:	2a00      	cmp	r2, #0
    d05a:	f2c0 80f5 	blt.w	d248 <am_util_stdio_vsprintf+0xb94>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d05e:	f1a1 047e 	sub.w	r4, r1, #126	; 0x7e
    d062:	fa00 f404 	lsl.w	r4, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d066:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d06a:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d06c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d070:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d074:	f2c0 80d5 	blt.w	d222 <am_util_stdio_vsprintf+0xb6e>
    d078:	4656      	mov	r6, sl
            uint64_to_str(i32IntPart, pcBuf);
    d07a:	4632      	mov	r2, r6
    d07c:	17c1      	asrs	r1, r0, #31
    d07e:	f7ff fa43 	bl	c508 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d082:	7833      	ldrb	r3, [r6, #0]
    d084:	b90b      	cbnz	r3, d08a <am_util_stdio_vsprintf+0x9d6>
    d086:	e100      	b.n	d28a <am_util_stdio_vsprintf+0xbd6>
    d088:	463e      	mov	r6, r7
    d08a:	7873      	ldrb	r3, [r6, #1]
            pcBuf++;
    d08c:	1c77      	adds	r7, r6, #1
        while (*pcBuf)    // Get to end of new string
    d08e:	2b00      	cmp	r3, #0
    d090:	d1fa      	bne.n	d088 <am_util_stdio_vsprintf+0x9d4>
    d092:	1cb2      	adds	r2, r6, #2
    d094:	e480      	b.n	c998 <am_util_stdio_vsprintf+0x2e4>
    while ( i32NumChars-- )
    d096:	3b01      	subs	r3, #1
    d098:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    d09a:	2200      	movs	r2, #0
    d09c:	1c51      	adds	r1, r2, #1
    d09e:	1e5c      	subs	r4, r3, #1
        if ( pcBuf )
    d0a0:	2800      	cmp	r0, #0
    d0a2:	d042      	beq.n	d12a <am_util_stdio_vsprintf+0xa76>
            *pcBuf++ = cPadChar;
    d0a4:	4625      	mov	r5, r4
    d0a6:	f880 8000 	strb.w	r8, [r0]
    d0aa:	461c      	mov	r4, r3
    d0ac:	460a      	mov	r2, r1
    d0ae:	462b      	mov	r3, r5
    d0b0:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d0b2:	2c00      	cmp	r4, #0
    d0b4:	d1f2      	bne.n	d09c <am_util_stdio_vsprintf+0x9e8>
    d0b6:	4493      	add	fp, r2
    d0b8:	e727      	b.n	cf0a <am_util_stdio_vsprintf+0x856>
    d0ba:	1e48      	subs	r0, r1, #1
    d0bc:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d0be:	2300      	movs	r3, #0
    d0c0:	1c59      	adds	r1, r3, #1
    d0c2:	1e45      	subs	r5, r0, #1
        if ( pcBuf )
    d0c4:	b3bc      	cbz	r4, d136 <am_util_stdio_vsprintf+0xa82>
            *pcBuf++ = cPadChar;
    d0c6:	f884 8000 	strb.w	r8, [r4]
    d0ca:	460b      	mov	r3, r1
    d0cc:	3401      	adds	r4, #1
    d0ce:	4601      	mov	r1, r0
    while ( i32NumChars-- )
    d0d0:	4628      	mov	r0, r5
    d0d2:	2900      	cmp	r1, #0
    d0d4:	d1f4      	bne.n	d0c0 <am_util_stdio_vsprintf+0xa0c>
    d0d6:	eb0b 0403 	add.w	r4, fp, r3
    d0da:	e4ec      	b.n	cab6 <am_util_stdio_vsprintf+0x402>
                bLongLong = true;
    d0dc:	2301      	movs	r3, #1
    d0de:	e5ab      	b.n	cc38 <am_util_stdio_vsprintf+0x584>
        bLower = bLongLong = false;
    d0e0:	2500      	movs	r5, #0
    d0e2:	e5ad      	b.n	cc40 <am_util_stdio_vsprintf+0x58c>
    while ( i32NumChars-- )
    d0e4:	1e4b      	subs	r3, r1, #1
    d0e6:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d0e8:	2100      	movs	r1, #0
    d0ea:	1c48      	adds	r0, r1, #1
    d0ec:	1e5d      	subs	r5, r3, #1
        if ( pcBuf )
    d0ee:	b34c      	cbz	r4, d144 <am_util_stdio_vsprintf+0xa90>
            *pcBuf++ = cPadChar;
    d0f0:	f884 8000 	strb.w	r8, [r4]
    d0f4:	4601      	mov	r1, r0
    d0f6:	3401      	adds	r4, #1
    d0f8:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    d0fa:	462b      	mov	r3, r5
    d0fc:	2800      	cmp	r0, #0
    d0fe:	d1f4      	bne.n	d0ea <am_util_stdio_vsprintf+0xa36>
    d100:	448b      	add	fp, r1
    d102:	e68d      	b.n	ce20 <am_util_stdio_vsprintf+0x76c>
                if ( iWidth > 0 )
    d104:	2900      	cmp	r1, #0
    d106:	f340 809a 	ble.w	d23e <am_util_stdio_vsprintf+0xb8a>
                    if ( ui32strlen < iWidth )
    d10a:	4606      	mov	r6, r0
    d10c:	1b89      	subs	r1, r1, r6
    d10e:	e4cd      	b.n	caac <am_util_stdio_vsprintf+0x3f8>
                            if ( pcBuf )
    d110:	f1ba 0f00 	cmp.w	sl, #0
    d114:	d004      	beq.n	d120 <am_util_stdio_vsprintf+0xa6c>
                                *pcBuf++ = '-';
    d116:	232d      	movs	r3, #45	; 0x2d
    d118:	f88a 3000 	strb.w	r3, [sl]
    d11c:	f10a 0a01 	add.w	sl, sl, #1
                            ++ui32CharCnt;
    d120:	2301      	movs	r3, #1
    d122:	f10b 0b01 	add.w	fp, fp, #1
    d126:	930f      	str	r3, [sp, #60]	; 0x3c
    d128:	e551      	b.n	cbce <am_util_stdio_vsprintf+0x51a>
    while ( i32NumChars-- )
    d12a:	2b00      	cmp	r3, #0
    d12c:	f000 80a1 	beq.w	d272 <am_util_stdio_vsprintf+0xbbe>
    d130:	3b02      	subs	r3, #2
    d132:	3202      	adds	r2, #2
    d134:	e7bd      	b.n	d0b2 <am_util_stdio_vsprintf+0x9fe>
    d136:	2800      	cmp	r0, #0
    d138:	f000 809e 	beq.w	d278 <am_util_stdio_vsprintf+0xbc4>
    d13c:	4629      	mov	r1, r5
    d13e:	3302      	adds	r3, #2
    d140:	1e85      	subs	r5, r0, #2
    d142:	e7c5      	b.n	d0d0 <am_util_stdio_vsprintf+0xa1c>
    d144:	2b00      	cmp	r3, #0
    d146:	f000 809d 	beq.w	d284 <am_util_stdio_vsprintf+0xbd0>
    d14a:	4628      	mov	r0, r5
    d14c:	3102      	adds	r1, #2
    d14e:	1e9d      	subs	r5, r3, #2
    d150:	e7d3      	b.n	d0fa <am_util_stdio_vsprintf+0xa46>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d152:	eba2 010a 	sub.w	r1, r2, sl
    d156:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d15a:	42ab      	cmp	r3, r5
    d15c:	bfa8      	it	ge
    d15e:	462b      	movge	r3, r5
        for (jx = 0; jx < iMax; jx++)
    d160:	2b00      	cmp	r3, #0
    d162:	dd0d      	ble.n	d180 <am_util_stdio_vsprintf+0xacc>
    d164:	18d1      	adds	r1, r2, r3
            i32FracPart *= 10;
    d166:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d16a:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d16c:	1623      	asrs	r3, r4, #24
    d16e:	3330      	adds	r3, #48	; 0x30
    d170:	f802 3b01 	strb.w	r3, [r2], #1
        for (jx = 0; jx < iMax; jx++)
    d174:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
    d176:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d17a:	d1f4      	bne.n	d166 <am_util_stdio_vsprintf+0xab2>
    d17c:	eba2 010a 	sub.w	r1, r2, sl
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d180:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d184:	f344 53c7 	sbfx	r3, r4, #23, #8
    d188:	2b04      	cmp	r3, #4
    d18a:	f77f ac10 	ble.w	c9ae <am_util_stdio_vsprintf+0x2fa>
            pcBuftmp = pcBuf - 1;
    d18e:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d190:	459a      	cmp	sl, r3
    d192:	f63f ac0c 	bhi.w	c9ae <am_util_stdio_vsprintf+0x2fa>
    d196:	f10a 35ff 	add.w	r5, sl, #4294967295
    d19a:	e005      	b.n	d1a8 <am_util_stdio_vsprintf+0xaf4>
                    *pcBuftmp = '0';
    d19c:	f04f 0030 	mov.w	r0, #48	; 0x30
    d1a0:	7058      	strb	r0, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d1a2:	429d      	cmp	r5, r3
    d1a4:	f43f ac03 	beq.w	c9ae <am_util_stdio_vsprintf+0x2fa>
    d1a8:	461c      	mov	r4, r3
                if ( *pcBuftmp == '.' )
    d1aa:	f813 0901 	ldrb.w	r0, [r3], #-1
    d1ae:	282e      	cmp	r0, #46	; 0x2e
    d1b0:	d0f7      	beq.n	d1a2 <am_util_stdio_vsprintf+0xaee>
                else if ( *pcBuftmp == '9' )
    d1b2:	2839      	cmp	r0, #57	; 0x39
    d1b4:	d0f2      	beq.n	d19c <am_util_stdio_vsprintf+0xae8>
                    *pcBuftmp += 1;
    d1b6:	3001      	adds	r0, #1
    d1b8:	7020      	strb	r0, [r4, #0]
    d1ba:	f7ff bbf8 	b.w	c9ae <am_util_stdio_vsprintf+0x2fa>
                while (*pcStr != 0x0)
    d1be:	7838      	ldrb	r0, [r7, #0]
    d1c0:	2800      	cmp	r0, #0
    d1c2:	d03c      	beq.n	d23e <am_util_stdio_vsprintf+0xb8a>
    d1c4:	465c      	mov	r4, fp
        return ui32RetVal;
    d1c6:	463e      	mov	r6, r7
    d1c8:	2301      	movs	r3, #1
    d1ca:	e44a      	b.n	ca62 <am_util_stdio_vsprintf+0x3ae>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d1cc:	4b39      	ldr	r3, [pc, #228]	; (d2b4 <am_util_stdio_vsprintf+0xc00>)
    d1ce:	f8ca 3000 	str.w	r3, [sl]
    d1d2:	2303      	movs	r3, #3
    d1d4:	f7ff bbf1 	b.w	c9ba <am_util_stdio_vsprintf+0x306>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1da:	b11b      	cbz	r3, d1e4 <am_util_stdio_vsprintf+0xb30>
    d1dc:	f1b8 0f20 	cmp.w	r8, #32
    d1e0:	f43f ae3f 	beq.w	ce62 <am_util_stdio_vsprintf+0x7ae>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d1e8:	4652      	mov	r2, sl
    d1ea:	f7ff f98d 	bl	c508 <uint64_to_str>
                ui32CharCnt += iVal;
    d1ee:	4483      	add	fp, r0
    d1f0:	f7ff ba68 	b.w	c6c4 <am_util_stdio_vsprintf+0x10>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d1f4:	1c4b      	adds	r3, r1, #1
    d1f6:	d034      	beq.n	d262 <am_util_stdio_vsprintf+0xbae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d1f8:	3102      	adds	r1, #2
    d1fa:	d141      	bne.n	d280 <am_util_stdio_vsprintf+0xbcc>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d1fc:	4b2e      	ldr	r3, [pc, #184]	; (d2b8 <am_util_stdio_vsprintf+0xc04>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1fe:	f8ca 3000 	str.w	r3, [sl]
    d202:	2303      	movs	r3, #3
    d204:	f7ff bbd9 	b.w	c9ba <am_util_stdio_vsprintf+0x306>
        if (i32IntPart > 0)
    d208:	f73f af37 	bgt.w	d07a <am_util_stdio_vsprintf+0x9c6>
            uint64_to_str(-i32IntPart, pcBuf);
    d20c:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    d20e:	232d      	movs	r3, #45	; 0x2d
    d210:	7033      	strb	r3, [r6, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d212:	463a      	mov	r2, r7
    d214:	17c1      	asrs	r1, r0, #31
    d216:	463e      	mov	r6, r7
    d218:	f7ff f976 	bl	c508 <uint64_to_str>
    d21c:	3701      	adds	r7, #1
    d21e:	e730      	b.n	d082 <am_util_stdio_vsprintf+0x9ce>
    i32FracPart = 0;
    d220:	2400      	movs	r4, #0
        *pcBuf++ = '-';
    d222:	4653      	mov	r3, sl
    d224:	222d      	movs	r2, #45	; 0x2d
    d226:	f803 2b02 	strb.w	r2, [r3], #2
    d22a:	463e      	mov	r6, r7
    d22c:	461f      	mov	r7, r3
    d22e:	f7ff bbac 	b.w	c98a <am_util_stdio_vsprintf+0x2d6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d232:	4652      	mov	r2, sl
    d234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d238:	f7ff f966 	bl	c508 <uint64_to_str>
    d23c:	e4f5      	b.n	cc2a <am_util_stdio_vsprintf+0x576>
        return ui32RetVal;
    d23e:	4606      	mov	r6, r0
    d240:	e428      	b.n	ca94 <am_util_stdio_vsprintf+0x3e0>
    d242:	4620      	mov	r0, r4
    d244:	44a3      	add	fp, r4
    d246:	e522      	b.n	cc8e <am_util_stdio_vsprintf+0x5da>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d248:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d24a:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d24c:	fa40 f402 	asr.w	r4, r0, r2
    d250:	f10a 0202 	add.w	r2, sl, #2
    if (unFloatValue.I32 < 0)
    d254:	db1d      	blt.n	d292 <am_util_stdio_vsprintf+0xbde>
    d256:	4656      	mov	r6, sl
    d258:	f7ff bb9b 	b.w	c992 <am_util_stdio_vsprintf+0x2de>
    d25c:	460a      	mov	r2, r1
    d25e:	448b      	add	fp, r1
    d260:	e4ba      	b.n	cbd8 <am_util_stdio_vsprintf+0x524>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d262:	4b14      	ldr	r3, [pc, #80]	; (d2b4 <am_util_stdio_vsprintf+0xc00>)
    d264:	e7cb      	b.n	d1fe <am_util_stdio_vsprintf+0xb4a>
                    iWidth -= ndigits_in_i64(ui64Val);
    d266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d268:	eba3 0e0e 	sub.w	lr, r3, lr
                    bNeg = false;
    d26c:	2300      	movs	r3, #0
    d26e:	930f      	str	r3, [sp, #60]	; 0x3c
    d270:	e4ad      	b.n	cbce <am_util_stdio_vsprintf+0x51a>
    d272:	460a      	mov	r2, r1
    d274:	448b      	add	fp, r1
    d276:	e648      	b.n	cf0a <am_util_stdio_vsprintf+0x856>
    d278:	460b      	mov	r3, r1
    d27a:	eb0b 0401 	add.w	r4, fp, r1
    d27e:	e41a      	b.n	cab6 <am_util_stdio_vsprintf+0x402>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d280:	4b0e      	ldr	r3, [pc, #56]	; (d2bc <am_util_stdio_vsprintf+0xc08>)
    d282:	e7bc      	b.n	d1fe <am_util_stdio_vsprintf+0xb4a>
    d284:	4601      	mov	r1, r0
    d286:	4483      	add	fp, r0
    d288:	e5ca      	b.n	ce20 <am_util_stdio_vsprintf+0x76c>
        while (*pcBuf)    // Get to end of new string
    d28a:	463a      	mov	r2, r7
    d28c:	4637      	mov	r7, r6
    d28e:	f7ff bb83 	b.w	c998 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf++ = '-';
    d292:	4653      	mov	r3, sl
    d294:	212d      	movs	r1, #45	; 0x2d
    d296:	f803 1b03 	strb.w	r1, [r3], #3
    d29a:	463e      	mov	r6, r7
    d29c:	4617      	mov	r7, r2
    d29e:	461a      	mov	r2, r3
    d2a0:	f7ff bb77 	b.w	c992 <am_util_stdio_vsprintf+0x2de>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d2a4:	2300      	movs	r3, #0
        uCnt++;
    d2a6:	2201      	movs	r2, #1
    d2a8:	f7ff bbbe 	b.w	ca28 <am_util_stdio_vsprintf+0x374>
                pcStr = va_arg(pArgs, char *);
    d2ac:	9201      	str	r2, [sp, #4]
                        ui32CharCnt += iWidth;
    d2ae:	46a3      	mov	fp, r4
    d2b0:	f7ff ba08 	b.w	c6c4 <am_util_stdio_vsprintf+0x10>
    d2b4:	00302e30 	.word	0x00302e30
    d2b8:	00232e23 	.word	0x00232e23
    d2bc:	003f2e3f 	.word	0x003f2e3f

0000d2c0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2c0:	b40f      	push	{r0, r1, r2, r3}
    d2c2:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2c4:	4d0a      	ldr	r5, [pc, #40]	; (d2f0 <am_util_stdio_printf+0x30>)
    d2c6:	682c      	ldr	r4, [r5, #0]
{
    d2c8:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d2ca:	b154      	cbz	r4, d2e2 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2cc:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2ce:	461a      	mov	r2, r3
    d2d0:	9906      	ldr	r1, [sp, #24]
    d2d2:	4808      	ldr	r0, [pc, #32]	; (d2f4 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d2d4:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2d6:	f7ff f9ed 	bl	c6b4 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2da:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2dc:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d2de:	4805      	ldr	r0, [pc, #20]	; (d2f4 <am_util_stdio_printf+0x34>)
    d2e0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d2e2:	4620      	mov	r0, r4
    d2e4:	b003      	add	sp, #12
    d2e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d2ea:	b004      	add	sp, #16
    d2ec:	4770      	bx	lr
    d2ee:	bf00      	nop
    d2f0:	10001294 	.word	0x10001294
    d2f4:	10001028 	.word	0x10001028

0000d2f8 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2f8:	4801      	ldr	r0, [pc, #4]	; (d300 <am_util_stdio_terminal_clear+0x8>)
    d2fa:	f7ff bfe1 	b.w	d2c0 <am_util_stdio_printf>
    d2fe:	bf00      	nop
    d300:	0000f470 	.word	0x0000f470

0000d304 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    d304:	e7fe      	b.n	d304 <NMI_Handler>
    d306:	bf00      	nop

0000d308 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d308:	e7fe      	b.n	d308 <DebugMon_Handler>
    d30a:	bf00      	nop

0000d30c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d30c:	4811      	ldr	r0, [pc, #68]	; (d354 <zero_loop+0x12>)
    d30e:	4912      	ldr	r1, [pc, #72]	; (d358 <zero_loop+0x16>)
    d310:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d312:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d316:	4811      	ldr	r0, [pc, #68]	; (d35c <zero_loop+0x1a>)
    d318:	6801      	ldr	r1, [r0, #0]
    d31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d31e:	6001      	str	r1, [r0, #0]
    d320:	f3bf 8f4f 	dsb	sy
    d324:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d328:	480d      	ldr	r0, [pc, #52]	; (d360 <zero_loop+0x1e>)
    d32a:	490e      	ldr	r1, [pc, #56]	; (d364 <zero_loop+0x22>)
    d32c:	4a0e      	ldr	r2, [pc, #56]	; (d368 <zero_loop+0x26>)

0000d32e <copy_loop>:
    d32e:	f850 3b04 	ldr.w	r3, [r0], #4
    d332:	f841 3b04 	str.w	r3, [r1], #4
    d336:	4291      	cmp	r1, r2
    d338:	dbf9      	blt.n	d32e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d33a:	480c      	ldr	r0, [pc, #48]	; (d36c <zero_loop+0x2a>)
    d33c:	490c      	ldr	r1, [pc, #48]	; (d370 <zero_loop+0x2e>)
    d33e:	f04f 0200 	mov.w	r2, #0

0000d342 <zero_loop>:
    d342:	4288      	cmp	r0, r1
    d344:	bfb8      	it	lt
    d346:	f840 2b04 	strlt.w	r2, [r0], #4
    d34a:	dbfa      	blt.n	d342 <zero_loop>
    main();
    d34c:	f7fe ffae 	bl	c2ac <main>
    __asm("    bkpt     ");
    d350:	be00      	bkpt	0x0000
    d352:	0000      	.short	0x0000
    d354:	e000ed08 	.word	0xe000ed08
    d358:	0000c000 	.word	0x0000c000
    d35c:	e000ed88 	.word	0xe000ed88
    d360:	0000f8a4 	.word	0x0000f8a4
    d364:	10001000 	.word	0x10001000
    d368:	10001020 	.word	0x10001020
    d36c:	10001020 	.word	0x10001020
    d370:	1000474c 	.word	0x1000474c

0000d374 <am_bsp_uart_string_print>:
    d374:	b510      	push	{r4, lr}
    d376:	b086      	sub	sp, #24
    d378:	7804      	ldrb	r4, [r0, #0]
    d37a:	2300      	movs	r3, #0
    d37c:	9300      	str	r3, [sp, #0]
    d37e:	b134      	cbz	r4, d38e <am_bsp_uart_string_print+0x1a>
    d380:	461c      	mov	r4, r3
    d382:	4603      	mov	r3, r0
    d384:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d388:	3401      	adds	r4, #1
    d38a:	2a00      	cmp	r2, #0
    d38c:	d1fa      	bne.n	d384 <am_bsp_uart_string_print+0x10>
    d38e:	4b0a      	ldr	r3, [pc, #40]	; (d3b8 <am_bsp_uart_string_print+0x44>)
    d390:	9002      	str	r0, [sp, #8]
    d392:	2200      	movs	r2, #0
    d394:	6818      	ldr	r0, [r3, #0]
    d396:	9403      	str	r4, [sp, #12]
    d398:	f04f 33ff 	mov.w	r3, #4294967295
    d39c:	a901      	add	r1, sp, #4
    d39e:	9304      	str	r3, [sp, #16]
    d3a0:	9201      	str	r2, [sp, #4]
    d3a2:	f8cd d014 	str.w	sp, [sp, #20]
    d3a6:	f001 fc73 	bl	ec90 <am_hal_uart_transfer>
    d3aa:	9b00      	ldr	r3, [sp, #0]
    d3ac:	42a3      	cmp	r3, r4
    d3ae:	d000      	beq.n	d3b2 <am_bsp_uart_string_print+0x3e>
    d3b0:	e7fe      	b.n	d3b0 <am_bsp_uart_string_print+0x3c>
    d3b2:	b006      	add	sp, #24
    d3b4:	bd10      	pop	{r4, pc}
    d3b6:	bf00      	nop
    d3b8:	10001128 	.word	0x10001128

0000d3bc <am_bsp_low_power_init>:
    d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3be:	f001 f91f 	bl	e600 <am_hal_itm_disable>
    d3c2:	2000      	movs	r0, #0
    d3c4:	f7ff f970 	bl	c6a8 <am_util_stdio_printf_init>
    d3c8:	4b12      	ldr	r3, [pc, #72]	; (d414 <am_bsp_low_power_init+0x58>)
    d3ca:	4f13      	ldr	r7, [pc, #76]	; (d418 <am_bsp_low_power_init+0x5c>)
    d3cc:	6819      	ldr	r1, [r3, #0]
    d3ce:	2021      	movs	r0, #33	; 0x21
    d3d0:	f000 fa7e 	bl	d8d0 <am_hal_gpio_pinconfig>
    d3d4:	f001 fa56 	bl	e884 <am_hal_pwrctrl_low_power_init>
    d3d8:	2001      	movs	r0, #1
    d3da:	f001 fa9d 	bl	e918 <am_hal_rtc_osc_select>
    d3de:	2100      	movs	r1, #0
    d3e0:	2003      	movs	r0, #3
    d3e2:	f000 f9d9 	bl	d798 <am_hal_clkgen_control>
    d3e6:	f001 faa3 	bl	e930 <am_hal_rtc_osc_disable>
    d3ea:	4b0c      	ldr	r3, [pc, #48]	; (d41c <am_bsp_low_power_init+0x60>)
    d3ec:	681e      	ldr	r6, [r3, #0]
    d3ee:	2400      	movs	r4, #0
    d3f0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d3f4:	4631      	mov	r1, r6
    d3f6:	4628      	mov	r0, r5
    d3f8:	f000 fa6a 	bl	d8d0 <am_hal_gpio_pinconfig>
    d3fc:	2103      	movs	r1, #3
    d3fe:	4628      	mov	r0, r5
    d400:	f000 fba6 	bl	db50 <am_hal_gpio_state_write>
    d404:	3401      	adds	r4, #1
    d406:	4628      	mov	r0, r5
    d408:	2100      	movs	r1, #0
    d40a:	f000 fba1 	bl	db50 <am_hal_gpio_state_write>
    d40e:	2c04      	cmp	r4, #4
    d410:	d1ee      	bne.n	d3f0 <am_bsp_low_power_init+0x34>
    d412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d414:	0000f5f0 	.word	0x0000f5f0
    d418:	10001000 	.word	0x10001000
    d41c:	0000f5f4 	.word	0x0000f5f4

0000d420 <am_bsp_uart_printf_enable>:
    d420:	b510      	push	{r4, lr}
    d422:	4c10      	ldr	r4, [pc, #64]	; (d464 <am_bsp_uart_printf_enable+0x44>)
    d424:	4b10      	ldr	r3, [pc, #64]	; (d468 <am_bsp_uart_printf_enable+0x48>)
    d426:	4621      	mov	r1, r4
    d428:	2202      	movs	r2, #2
    d42a:	2000      	movs	r0, #0
    d42c:	601a      	str	r2, [r3, #0]
    d42e:	f001 fa89 	bl	e944 <am_hal_uart_initialize>
    d432:	2200      	movs	r2, #0
    d434:	4611      	mov	r1, r2
    d436:	6820      	ldr	r0, [r4, #0]
    d438:	f001 faac 	bl	e994 <am_hal_uart_power_control>
    d43c:	6820      	ldr	r0, [r4, #0]
    d43e:	490b      	ldr	r1, [pc, #44]	; (d46c <am_bsp_uart_printf_enable+0x4c>)
    d440:	f001 fb1a 	bl	ea78 <am_hal_uart_configure>
    d444:	4b0a      	ldr	r3, [pc, #40]	; (d470 <am_bsp_uart_printf_enable+0x50>)
    d446:	2030      	movs	r0, #48	; 0x30
    d448:	6819      	ldr	r1, [r3, #0]
    d44a:	f000 fa41 	bl	d8d0 <am_hal_gpio_pinconfig>
    d44e:	4b09      	ldr	r3, [pc, #36]	; (d474 <am_bsp_uart_printf_enable+0x54>)
    d450:	2031      	movs	r0, #49	; 0x31
    d452:	6819      	ldr	r1, [r3, #0]
    d454:	f000 fa3c 	bl	d8d0 <am_hal_gpio_pinconfig>
    d458:	4807      	ldr	r0, [pc, #28]	; (d478 <am_bsp_uart_printf_enable+0x58>)
    d45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d45e:	f7ff b923 	b.w	c6a8 <am_util_stdio_printf_init>
    d462:	bf00      	nop
    d464:	10001128 	.word	0x10001128
    d468:	1000112c 	.word	0x1000112c
    d46c:	0000f484 	.word	0x0000f484
    d470:	0000f4b0 	.word	0x0000f4b0
    d474:	0000f4ac 	.word	0x0000f4ac
    d478:	0000d375 	.word	0x0000d375

0000d47c <am_hal_adc_initialize>:
    d47c:	b108      	cbz	r0, d482 <am_hal_adc_initialize+0x6>
    d47e:	2005      	movs	r0, #5
    d480:	4770      	bx	lr
    d482:	b1a9      	cbz	r1, d4b0 <am_hal_adc_initialize+0x34>
    d484:	4a0b      	ldr	r2, [pc, #44]	; (d4b4 <am_hal_adc_initialize+0x38>)
    d486:	78d3      	ldrb	r3, [r2, #3]
    d488:	f013 0001 	ands.w	r0, r3, #1
    d48c:	d001      	beq.n	d492 <am_hal_adc_initialize+0x16>
    d48e:	2007      	movs	r0, #7
    d490:	4770      	bx	lr
    d492:	b430      	push	{r4, r5}
    d494:	f043 0301 	orr.w	r3, r3, #1
    d498:	70d3      	strb	r3, [r2, #3]
    d49a:	6813      	ldr	r3, [r2, #0]
    d49c:	4d06      	ldr	r5, [pc, #24]	; (d4b8 <am_hal_adc_initialize+0x3c>)
    d49e:	4c07      	ldr	r4, [pc, #28]	; (d4bc <am_hal_adc_initialize+0x40>)
    d4a0:	6050      	str	r0, [r2, #4]
    d4a2:	f365 0317 	bfi	r3, r5, #0, #24
    d4a6:	6013      	str	r3, [r2, #0]
    d4a8:	6020      	str	r0, [r4, #0]
    d4aa:	600a      	str	r2, [r1, #0]
    d4ac:	bc30      	pop	{r4, r5}
    d4ae:	4770      	bx	lr
    d4b0:	2006      	movs	r0, #6
    d4b2:	4770      	bx	lr
    d4b4:	1000129c 	.word	0x1000129c
    d4b8:	00afafaf 	.word	0x00afafaf
    d4bc:	10001298 	.word	0x10001298

0000d4c0 <am_hal_adc_configure>:
    d4c0:	b128      	cbz	r0, d4ce <am_hal_adc_configure+0xe>
    d4c2:	6803      	ldr	r3, [r0, #0]
    d4c4:	4a18      	ldr	r2, [pc, #96]	; (d528 <am_hal_adc_configure+0x68>)
    d4c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d4ca:	4293      	cmp	r3, r2
    d4cc:	d001      	beq.n	d4d2 <am_hal_adc_configure+0x12>
    d4ce:	2002      	movs	r0, #2
    d4d0:	4770      	bx	lr
    d4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4d4:	7808      	ldrb	r0, [r1, #0]
    d4d6:	784d      	ldrb	r5, [r1, #1]
    d4d8:	788c      	ldrb	r4, [r1, #2]
    d4da:	f891 e003 	ldrb.w	lr, [r1, #3]
    d4de:	790f      	ldrb	r7, [r1, #4]
    d4e0:	794a      	ldrb	r2, [r1, #5]
    d4e2:	798b      	ldrb	r3, [r1, #6]
    d4e4:	4e11      	ldr	r6, [pc, #68]	; (d52c <am_hal_adc_configure+0x6c>)
    d4e6:	0600      	lsls	r0, r0, #24
    d4e8:	04ed      	lsls	r5, r5, #19
    d4ea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d4ee:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d4f2:	4328      	orrs	r0, r5
    d4f4:	0424      	lsls	r4, r4, #16
    d4f6:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d4fa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d4fe:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d502:	4304      	orrs	r4, r0
    d504:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d508:	0139      	lsls	r1, r7, #4
    d50a:	4320      	orrs	r0, r4
    d50c:	f001 0110 	and.w	r1, r1, #16
    d510:	00d2      	lsls	r2, r2, #3
    d512:	4301      	orrs	r1, r0
    d514:	f002 0208 	and.w	r2, r2, #8
    d518:	009b      	lsls	r3, r3, #2
    d51a:	430a      	orrs	r2, r1
    d51c:	f003 0304 	and.w	r3, r3, #4
    d520:	4313      	orrs	r3, r2
    d522:	6033      	str	r3, [r6, #0]
    d524:	2000      	movs	r0, #0
    d526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d528:	01afafaf 	.word	0x01afafaf
    d52c:	50010000 	.word	0x50010000

0000d530 <am_hal_adc_configure_slot>:
    d530:	b128      	cbz	r0, d53e <am_hal_adc_configure_slot+0xe>
    d532:	6803      	ldr	r3, [r0, #0]
    d534:	4816      	ldr	r0, [pc, #88]	; (d590 <am_hal_adc_configure_slot+0x60>)
    d536:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d53a:	4283      	cmp	r3, r0
    d53c:	d001      	beq.n	d542 <am_hal_adc_configure_slot+0x12>
    d53e:	2002      	movs	r0, #2
    d540:	4770      	bx	lr
    d542:	2907      	cmp	r1, #7
    d544:	d901      	bls.n	d54a <am_hal_adc_configure_slot+0x1a>
    d546:	2005      	movs	r0, #5
    d548:	4770      	bx	lr
    d54a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d54c:	7813      	ldrb	r3, [r2, #0]
    d54e:	7854      	ldrb	r4, [r2, #1]
    d550:	7890      	ldrb	r0, [r2, #2]
    d552:	78d7      	ldrb	r7, [r2, #3]
    d554:	f892 e004 	ldrb.w	lr, [r2, #4]
    d558:	4d0e      	ldr	r5, [pc, #56]	; (d594 <am_hal_adc_configure_slot+0x64>)
    d55a:	4e0f      	ldr	r6, [pc, #60]	; (d598 <am_hal_adc_configure_slot+0x68>)
    d55c:	061b      	lsls	r3, r3, #24
    d55e:	0424      	lsls	r4, r4, #16
    d560:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    d564:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    d568:	4323      	orrs	r3, r4
    d56a:	0202      	lsls	r2, r0, #8
    d56c:	ea43 0e0e 	orr.w	lr, r3, lr
    d570:	440d      	add	r5, r1
    d572:	007b      	lsls	r3, r7, #1
    d574:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    d578:	ea4e 0202 	orr.w	r2, lr, r2
    d57c:	00ad      	lsls	r5, r5, #2
    d57e:	f003 0302 	and.w	r3, r3, #2
    d582:	4313      	orrs	r3, r2
    d584:	602b      	str	r3, [r5, #0]
    d586:	6833      	ldr	r3, [r6, #0]
    d588:	3301      	adds	r3, #1
    d58a:	6033      	str	r3, [r6, #0]
    d58c:	2000      	movs	r0, #0
    d58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d590:	01afafaf 	.word	0x01afafaf
    d594:	14004003 	.word	0x14004003
    d598:	10001298 	.word	0x10001298

0000d59c <am_hal_adc_enable>:
    d59c:	4603      	mov	r3, r0
    d59e:	b128      	cbz	r0, d5ac <am_hal_adc_enable+0x10>
    d5a0:	6802      	ldr	r2, [r0, #0]
    d5a2:	490c      	ldr	r1, [pc, #48]	; (d5d4 <am_hal_adc_enable+0x38>)
    d5a4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d5a8:	428a      	cmp	r2, r1
    d5aa:	d001      	beq.n	d5b0 <am_hal_adc_enable+0x14>
    d5ac:	2002      	movs	r0, #2
    d5ae:	4770      	bx	lr
    d5b0:	78c2      	ldrb	r2, [r0, #3]
    d5b2:	f002 0202 	and.w	r2, r2, #2
    d5b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d5ba:	b94a      	cbnz	r2, d5d0 <am_hal_adc_enable+0x34>
    d5bc:	4906      	ldr	r1, [pc, #24]	; (d5d8 <am_hal_adc_enable+0x3c>)
    d5be:	680a      	ldr	r2, [r1, #0]
    d5c0:	f042 0201 	orr.w	r2, r2, #1
    d5c4:	600a      	str	r2, [r1, #0]
    d5c6:	78da      	ldrb	r2, [r3, #3]
    d5c8:	f042 0202 	orr.w	r2, r2, #2
    d5cc:	70da      	strb	r2, [r3, #3]
    d5ce:	4770      	bx	lr
    d5d0:	2000      	movs	r0, #0
    d5d2:	4770      	bx	lr
    d5d4:	01afafaf 	.word	0x01afafaf
    d5d8:	50010000 	.word	0x50010000

0000d5dc <am_hal_adc_samples_read>:
    d5dc:	b148      	cbz	r0, d5f2 <am_hal_adc_samples_read+0x16>
    d5de:	6800      	ldr	r0, [r0, #0]
    d5e0:	b470      	push	{r4, r5, r6}
    d5e2:	4c1f      	ldr	r4, [pc, #124]	; (d660 <am_hal_adc_samples_read+0x84>)
    d5e4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    d5e8:	42a0      	cmp	r0, r4
    d5ea:	d004      	beq.n	d5f6 <am_hal_adc_samples_read+0x1a>
    d5ec:	2002      	movs	r0, #2
    d5ee:	bc70      	pop	{r4, r5, r6}
    d5f0:	4770      	bx	lr
    d5f2:	2002      	movs	r0, #2
    d5f4:	4770      	bx	lr
    d5f6:	b1db      	cbz	r3, d630 <am_hal_adc_samples_read+0x54>
    d5f8:	2000      	movs	r0, #0
    d5fa:	6814      	ldr	r4, [r2, #0]
    d5fc:	6010      	str	r0, [r2, #0]
    d5fe:	b1c9      	cbz	r1, d634 <am_hal_adc_samples_read+0x58>
    d600:	4d18      	ldr	r5, [pc, #96]	; (d664 <am_hal_adc_samples_read+0x88>)
    d602:	3308      	adds	r3, #8
    d604:	3904      	subs	r1, #4
    d606:	f851 0f04 	ldr.w	r0, [r1, #4]!
    d60a:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    d60c:	f3c0 7002 	ubfx	r0, r0, #28, #3
    d610:	f843 0c04 	str.w	r0, [r3, #-4]
    d614:	6808      	ldr	r0, [r1, #0]
    d616:	f3c0 108d 	ubfx	r0, r0, #6, #14
    d61a:	f843 0c08 	str.w	r0, [r3, #-8]
    d61e:	6810      	ldr	r0, [r2, #0]
    d620:	3001      	adds	r0, #1
    d622:	4284      	cmp	r4, r0
    d624:	f103 0308 	add.w	r3, r3, #8
    d628:	6010      	str	r0, [r2, #0]
    d62a:	d8ec      	bhi.n	d606 <am_hal_adc_samples_read+0x2a>
    d62c:	2000      	movs	r0, #0
    d62e:	e7de      	b.n	d5ee <am_hal_adc_samples_read+0x12>
    d630:	2006      	movs	r0, #6
    d632:	e7dc      	b.n	d5ee <am_hal_adc_samples_read+0x12>
    d634:	4e0b      	ldr	r6, [pc, #44]	; (d664 <am_hal_adc_samples_read+0x88>)
    d636:	3308      	adds	r3, #8
    d638:	e001      	b.n	d63e <am_hal_adc_samples_read+0x62>
    d63a:	4284      	cmp	r4, r0
    d63c:	d9f6      	bls.n	d62c <am_hal_adc_samples_read+0x50>
    d63e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    d640:	f3c1 108d 	ubfx	r0, r1, #6, #14
    d644:	f3c1 7502 	ubfx	r5, r1, #28, #3
    d648:	e903 0021 	stmdb	r3, {r0, r5}
    d64c:	6810      	ldr	r0, [r2, #0]
    d64e:	f3c1 5107 	ubfx	r1, r1, #20, #8
    d652:	3001      	adds	r0, #1
    d654:	3308      	adds	r3, #8
    d656:	6010      	str	r0, [r2, #0]
    d658:	2900      	cmp	r1, #0
    d65a:	d1ee      	bne.n	d63a <am_hal_adc_samples_read+0x5e>
    d65c:	e7e6      	b.n	d62c <am_hal_adc_samples_read+0x50>
    d65e:	bf00      	nop
    d660:	01afafaf 	.word	0x01afafaf
    d664:	50010000 	.word	0x50010000

0000d668 <am_hal_adc_power_control>:
    d668:	b140      	cbz	r0, d67c <am_hal_adc_power_control+0x14>
    d66a:	6803      	ldr	r3, [r0, #0]
    d66c:	b570      	push	{r4, r5, r6, lr}
    d66e:	4c2e      	ldr	r4, [pc, #184]	; (d728 <am_hal_adc_power_control+0xc0>)
    d670:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d674:	42a3      	cmp	r3, r4
    d676:	d003      	beq.n	d680 <am_hal_adc_power_control+0x18>
    d678:	2002      	movs	r0, #2
    d67a:	bd70      	pop	{r4, r5, r6, pc}
    d67c:	2002      	movs	r0, #2
    d67e:	4770      	bx	lr
    d680:	4604      	mov	r4, r0
    d682:	4615      	mov	r5, r2
    d684:	460e      	mov	r6, r1
    d686:	b329      	cbz	r1, d6d4 <am_hal_adc_power_control+0x6c>
    d688:	2902      	cmp	r1, #2
    d68a:	d821      	bhi.n	d6d0 <am_hal_adc_power_control+0x68>
    d68c:	b1da      	cbz	r2, d6c6 <am_hal_adc_power_control+0x5e>
    d68e:	4b27      	ldr	r3, [pc, #156]	; (d72c <am_hal_adc_power_control+0xc4>)
    d690:	68da      	ldr	r2, [r3, #12]
    d692:	6142      	str	r2, [r0, #20]
    d694:	691a      	ldr	r2, [r3, #16]
    d696:	6182      	str	r2, [r0, #24]
    d698:	695a      	ldr	r2, [r3, #20]
    d69a:	61c2      	str	r2, [r0, #28]
    d69c:	699a      	ldr	r2, [r3, #24]
    d69e:	6202      	str	r2, [r0, #32]
    d6a0:	69da      	ldr	r2, [r3, #28]
    d6a2:	6242      	str	r2, [r0, #36]	; 0x24
    d6a4:	6a1a      	ldr	r2, [r3, #32]
    d6a6:	6282      	str	r2, [r0, #40]	; 0x28
    d6a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d6aa:	62c2      	str	r2, [r0, #44]	; 0x2c
    d6ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d6ae:	6302      	str	r2, [r0, #48]	; 0x30
    d6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d6b2:	6342      	str	r2, [r0, #52]	; 0x34
    d6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d6b6:	6382      	str	r2, [r0, #56]	; 0x38
    d6b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d6bc:	63c2      	str	r2, [r0, #60]	; 0x3c
    d6be:	681b      	ldr	r3, [r3, #0]
    d6c0:	6103      	str	r3, [r0, #16]
    d6c2:	2301      	movs	r3, #1
    d6c4:	7303      	strb	r3, [r0, #12]
    d6c6:	200a      	movs	r0, #10
    d6c8:	f001 f8b0 	bl	e82c <am_hal_pwrctrl_periph_disable>
    d6cc:	2000      	movs	r0, #0
    d6ce:	bd70      	pop	{r4, r5, r6, pc}
    d6d0:	2006      	movs	r0, #6
    d6d2:	bd70      	pop	{r4, r5, r6, pc}
    d6d4:	b11a      	cbz	r2, d6de <am_hal_adc_power_control+0x76>
    d6d6:	7b03      	ldrb	r3, [r0, #12]
    d6d8:	b933      	cbnz	r3, d6e8 <am_hal_adc_power_control+0x80>
    d6da:	2007      	movs	r0, #7
    d6dc:	bd70      	pop	{r4, r5, r6, pc}
    d6de:	200a      	movs	r0, #10
    d6e0:	f001 f87a 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    d6e4:	4628      	mov	r0, r5
    d6e6:	bd70      	pop	{r4, r5, r6, pc}
    d6e8:	200a      	movs	r0, #10
    d6ea:	f001 f875 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    d6ee:	4b0f      	ldr	r3, [pc, #60]	; (d72c <am_hal_adc_power_control+0xc4>)
    d6f0:	6962      	ldr	r2, [r4, #20]
    d6f2:	60da      	str	r2, [r3, #12]
    d6f4:	69a2      	ldr	r2, [r4, #24]
    d6f6:	611a      	str	r2, [r3, #16]
    d6f8:	69e2      	ldr	r2, [r4, #28]
    d6fa:	615a      	str	r2, [r3, #20]
    d6fc:	6a22      	ldr	r2, [r4, #32]
    d6fe:	619a      	str	r2, [r3, #24]
    d700:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d702:	61da      	str	r2, [r3, #28]
    d704:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d706:	621a      	str	r2, [r3, #32]
    d708:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d70a:	625a      	str	r2, [r3, #36]	; 0x24
    d70c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d70e:	629a      	str	r2, [r3, #40]	; 0x28
    d710:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d712:	62da      	str	r2, [r3, #44]	; 0x2c
    d714:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d716:	631a      	str	r2, [r3, #48]	; 0x30
    d718:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d71a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    d71e:	6922      	ldr	r2, [r4, #16]
    d720:	601a      	str	r2, [r3, #0]
    d722:	4630      	mov	r0, r6
    d724:	7326      	strb	r6, [r4, #12]
    d726:	bd70      	pop	{r4, r5, r6, pc}
    d728:	01afafaf 	.word	0x01afafaf
    d72c:	50010000 	.word	0x50010000

0000d730 <am_hal_cachectrl_config>:
    d730:	b530      	push	{r4, r5, lr}
    d732:	b083      	sub	sp, #12
    d734:	4605      	mov	r5, r0
    d736:	f000 fa55 	bl	dbe4 <am_hal_interrupt_master_disable>
    d73a:	4c11      	ldr	r4, [pc, #68]	; (d780 <am_hal_cachectrl_config+0x50>)
    d73c:	9001      	str	r0, [sp, #4]
    d73e:	6823      	ldr	r3, [r4, #0]
    d740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d744:	6023      	str	r3, [r4, #0]
    d746:	9801      	ldr	r0, [sp, #4]
    d748:	f000 fa50 	bl	dbec <am_hal_interrupt_master_set>
    d74c:	78eb      	ldrb	r3, [r5, #3]
    d74e:	782a      	ldrb	r2, [r5, #0]
    d750:	78a8      	ldrb	r0, [r5, #2]
    d752:	7869      	ldrb	r1, [r5, #1]
    d754:	005b      	lsls	r3, r3, #1
    d756:	0112      	lsls	r2, r2, #4
    d758:	b2d2      	uxtb	r2, r2
    d75a:	f003 0302 	and.w	r3, r3, #2
    d75e:	4313      	orrs	r3, r2
    d760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d764:	0080      	lsls	r0, r0, #2
    d766:	f000 000c 	and.w	r0, r0, #12
    d76a:	020a      	lsls	r2, r1, #8
    d76c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d770:	4303      	orrs	r3, r0
    d772:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d776:	4313      	orrs	r3, r2
    d778:	2000      	movs	r0, #0
    d77a:	6023      	str	r3, [r4, #0]
    d77c:	b003      	add	sp, #12
    d77e:	bd30      	pop	{r4, r5, pc}
    d780:	40018000 	.word	0x40018000

0000d784 <am_hal_cachectrl_enable>:
    d784:	4a03      	ldr	r2, [pc, #12]	; (d794 <am_hal_cachectrl_enable+0x10>)
    d786:	6813      	ldr	r3, [r2, #0]
    d788:	f043 0301 	orr.w	r3, r3, #1
    d78c:	6013      	str	r3, [r2, #0]
    d78e:	2000      	movs	r0, #0
    d790:	4770      	bx	lr
    d792:	bf00      	nop
    d794:	40018000 	.word	0x40018000

0000d798 <am_hal_clkgen_control>:
    d798:	4b32      	ldr	r3, [pc, #200]	; (d864 <am_hal_clkgen_control+0xcc>)
    d79a:	681a      	ldr	r2, [r3, #0]
    d79c:	b912      	cbnz	r2, d7a4 <am_hal_clkgen_control+0xc>
    d79e:	4a32      	ldr	r2, [pc, #200]	; (d868 <am_hal_clkgen_control+0xd0>)
    d7a0:	6812      	ldr	r2, [r2, #0]
    d7a2:	601a      	str	r2, [r3, #0]
    d7a4:	2809      	cmp	r0, #9
    d7a6:	d85a      	bhi.n	d85e <am_hal_clkgen_control+0xc6>
    d7a8:	e8df f000 	tbb	[pc, r0]
    d7ac:	261e160d 	.word	0x261e160d
    d7b0:	4640362e 	.word	0x4640362e
    d7b4:	054e      	.short	0x054e
    d7b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7ba:	2000      	movs	r0, #0
    d7bc:	6a1a      	ldr	r2, [r3, #32]
    d7be:	f36f 0200 	bfc	r2, #0, #1
    d7c2:	621a      	str	r2, [r3, #32]
    d7c4:	4770      	bx	lr
    d7c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7ca:	2200      	movs	r2, #0
    d7cc:	2147      	movs	r1, #71	; 0x47
    d7ce:	6159      	str	r1, [r3, #20]
    d7d0:	4610      	mov	r0, r2
    d7d2:	619a      	str	r2, [r3, #24]
    d7d4:	615a      	str	r2, [r3, #20]
    d7d6:	4770      	bx	lr
    d7d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7dc:	2000      	movs	r0, #0
    d7de:	68d3      	ldr	r3, [r2, #12]
    d7e0:	f023 0301 	bic.w	r3, r3, #1
    d7e4:	60d3      	str	r3, [r2, #12]
    d7e6:	4770      	bx	lr
    d7e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7ec:	2000      	movs	r0, #0
    d7ee:	68d3      	ldr	r3, [r2, #12]
    d7f0:	f023 0302 	bic.w	r3, r3, #2
    d7f4:	60d3      	str	r3, [r2, #12]
    d7f6:	4770      	bx	lr
    d7f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7fc:	2000      	movs	r0, #0
    d7fe:	68d3      	ldr	r3, [r2, #12]
    d800:	f043 0301 	orr.w	r3, r3, #1
    d804:	60d3      	str	r3, [r2, #12]
    d806:	4770      	bx	lr
    d808:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d80c:	2000      	movs	r0, #0
    d80e:	68d3      	ldr	r3, [r2, #12]
    d810:	f043 0302 	orr.w	r3, r3, #2
    d814:	60d3      	str	r3, [r2, #12]
    d816:	4770      	bx	lr
    d818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d81c:	2200      	movs	r2, #0
    d81e:	2047      	movs	r0, #71	; 0x47
    d820:	2101      	movs	r1, #1
    d822:	6158      	str	r0, [r3, #20]
    d824:	6199      	str	r1, [r3, #24]
    d826:	4610      	mov	r0, r2
    d828:	615a      	str	r2, [r3, #20]
    d82a:	4770      	bx	lr
    d82c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d830:	2000      	movs	r0, #0
    d832:	68da      	ldr	r2, [r3, #12]
    d834:	60da      	str	r2, [r3, #12]
    d836:	4770      	bx	lr
    d838:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d83c:	2000      	movs	r0, #0
    d83e:	68d3      	ldr	r3, [r2, #12]
    d840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d844:	60d3      	str	r3, [r2, #12]
    d846:	4770      	bx	lr
    d848:	b139      	cbz	r1, d85a <am_hal_clkgen_control+0xc2>
    d84a:	680b      	ldr	r3, [r1, #0]
    d84c:	f043 0301 	orr.w	r3, r3, #1
    d850:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d854:	2000      	movs	r0, #0
    d856:	6213      	str	r3, [r2, #32]
    d858:	4770      	bx	lr
    d85a:	4b04      	ldr	r3, [pc, #16]	; (d86c <am_hal_clkgen_control+0xd4>)
    d85c:	e7f8      	b.n	d850 <am_hal_clkgen_control+0xb8>
    d85e:	2006      	movs	r0, #6
    d860:	4770      	bx	lr
    d862:	bf00      	nop
    d864:	10001130 	.word	0x10001130
    d868:	4ffff000 	.word	0x4ffff000
    d86c:	0025b801 	.word	0x0025b801

0000d870 <am_hal_flash_delay>:
    d870:	4b00      	ldr	r3, [pc, #0]	; (d874 <am_hal_flash_delay+0x4>)
    d872:	4718      	bx	r3
    d874:	0800009d 	.word	0x0800009d

0000d878 <am_hal_flash_delay_status_check>:
    d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d87c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d880:	460d      	mov	r5, r1
    d882:	4616      	mov	r6, r2
    d884:	461f      	mov	r7, r3
    d886:	b17c      	cbz	r4, d8a8 <am_hal_flash_delay_status_check+0x30>
    d888:	4604      	mov	r4, r0
    d88a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d8cc <am_hal_flash_delay_status_check+0x54>
    d88e:	e002      	b.n	d896 <am_hal_flash_delay_status_check+0x1e>
    d890:	b1c4      	cbz	r4, d8c4 <am_hal_flash_delay_status_check+0x4c>
    d892:	47c0      	blx	r8
    d894:	3c01      	subs	r4, #1
    d896:	682b      	ldr	r3, [r5, #0]
    d898:	4033      	ands	r3, r6
    d89a:	429f      	cmp	r7, r3
    d89c:	f04f 0001 	mov.w	r0, #1
    d8a0:	d1f6      	bne.n	d890 <am_hal_flash_delay_status_check+0x18>
    d8a2:	2000      	movs	r0, #0
    d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8a8:	f8df 8020 	ldr.w	r8, [pc, #32]	; d8cc <am_hal_flash_delay_status_check+0x54>
    d8ac:	4604      	mov	r4, r0
    d8ae:	e002      	b.n	d8b6 <am_hal_flash_delay_status_check+0x3e>
    d8b0:	b144      	cbz	r4, d8c4 <am_hal_flash_delay_status_check+0x4c>
    d8b2:	47c0      	blx	r8
    d8b4:	3c01      	subs	r4, #1
    d8b6:	682b      	ldr	r3, [r5, #0]
    d8b8:	4033      	ands	r3, r6
    d8ba:	429f      	cmp	r7, r3
    d8bc:	f04f 0001 	mov.w	r0, #1
    d8c0:	d0f6      	beq.n	d8b0 <am_hal_flash_delay_status_check+0x38>
    d8c2:	e7ee      	b.n	d8a2 <am_hal_flash_delay_status_check+0x2a>
    d8c4:	2004      	movs	r0, #4
    d8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8ca:	bf00      	nop
    d8cc:	0800009d 	.word	0x0800009d

0000d8d0 <am_hal_gpio_pinconfig>:
    d8d0:	2831      	cmp	r0, #49	; 0x31
    d8d2:	d901      	bls.n	d8d8 <am_hal_gpio_pinconfig+0x8>
    d8d4:	2006      	movs	r0, #6
    d8d6:	4770      	bx	lr
    d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8dc:	f001 0307 	and.w	r3, r1, #7
    d8e0:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d8e4:	b085      	sub	sp, #20
    d8e6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d8ea:	d014      	beq.n	d916 <am_hal_gpio_pinconfig+0x46>
    d8ec:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d8f0:	1db4      	adds	r4, r6, #6
    d8f2:	f004 0407 	and.w	r4, r4, #7
    d8f6:	2c03      	cmp	r4, #3
    d8f8:	f042 0201 	orr.w	r2, r2, #1
    d8fc:	f200 80ae 	bhi.w	da5c <am_hal_gpio_pinconfig+0x18c>
    d900:	4c85      	ldr	r4, [pc, #532]	; (db18 <am_hal_gpio_pinconfig+0x248>)
    d902:	5c24      	ldrb	r4, [r4, r0]
    d904:	07e7      	lsls	r7, r4, #31
    d906:	d403      	bmi.n	d910 <am_hal_gpio_pinconfig+0x40>
    d908:	4884      	ldr	r0, [pc, #528]	; (db1c <am_hal_gpio_pinconfig+0x24c>)
    d90a:	b005      	add	sp, #20
    d90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d910:	3e02      	subs	r6, #2
    d912:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d916:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d91a:	2c00      	cmp	r4, #0
    d91c:	f040 8098 	bne.w	da50 <am_hal_gpio_pinconfig+0x180>
    d920:	4c7f      	ldr	r4, [pc, #508]	; (db20 <am_hal_gpio_pinconfig+0x250>)
    d922:	4d80      	ldr	r5, [pc, #512]	; (db24 <am_hal_gpio_pinconfig+0x254>)
    d924:	5c24      	ldrb	r4, [r4, r0]
    d926:	5c2d      	ldrb	r5, [r5, r0]
    d928:	411c      	asrs	r4, r3
    d92a:	f014 0f01 	tst.w	r4, #1
    d92e:	bf0c      	ite	eq
    d930:	2400      	moveq	r4, #0
    d932:	2402      	movne	r4, #2
    d934:	42ab      	cmp	r3, r5
    d936:	ea42 0204 	orr.w	r2, r2, r4
    d93a:	f000 809b 	beq.w	da74 <am_hal_gpio_pinconfig+0x1a4>
    d93e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d942:	105d      	asrs	r5, r3, #1
    d944:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d948:	00db      	lsls	r3, r3, #3
    d94a:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d94e:	f003 0408 	and.w	r4, r3, #8
    d952:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d956:	f007 060c 	and.w	r6, r7, #12
    d95a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d95e:	2e04      	cmp	r6, #4
    d960:	ea43 0304 	orr.w	r3, r3, r4
    d964:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d968:	462c      	mov	r4, r5
    d96a:	f000 8090 	beq.w	da8e <am_hal_gpio_pinconfig+0x1be>
    d96e:	4c6e      	ldr	r4, [pc, #440]	; (db28 <am_hal_gpio_pinconfig+0x258>)
    d970:	6824      	ldr	r4, [r4, #0]
    d972:	ebc4 0901 	rsb	r9, r4, r1
    d976:	fab9 f989 	clz	r9, r9
    d97a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d97e:	f017 0f60 	tst.w	r7, #96	; 0x60
    d982:	bf04      	itt	eq
    d984:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d988:	f364 0300 	bfieq	r3, r4, #0, #1
    d98c:	0084      	lsls	r4, r0, #2
    d98e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d992:	2902      	cmp	r1, #2
    d994:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d998:	d07c      	beq.n	da94 <am_hal_gpio_pinconfig+0x1c4>
    d99a:	f200 8082 	bhi.w	daa2 <am_hal_gpio_pinconfig+0x1d2>
    d99e:	2901      	cmp	r1, #1
    d9a0:	bf08      	it	eq
    d9a2:	f042 0204 	orreq.w	r2, r2, #4
    d9a6:	f005 0518 	and.w	r5, r5, #24
    d9aa:	f04f 0800 	mov.w	r8, #0
    d9ae:	f004 041c 	and.w	r4, r4, #28
    d9b2:	0841      	lsrs	r1, r0, #1
    d9b4:	f020 0a03 	bic.w	sl, r0, #3
    d9b8:	270f      	movs	r7, #15
    d9ba:	f021 0103 	bic.w	r1, r1, #3
    d9be:	40a7      	lsls	r7, r4
    d9c0:	26ff      	movs	r6, #255	; 0xff
    d9c2:	fa03 f404 	lsl.w	r4, r3, r4
    d9c6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d9ca:	40ae      	lsls	r6, r5
    d9cc:	9101      	str	r1, [sp, #4]
    d9ce:	9300      	str	r3, [sp, #0]
    d9d0:	4683      	mov	fp, r0
    d9d2:	fa02 f505 	lsl.w	r5, r2, r5
    d9d6:	f000 f905 	bl	dbe4 <am_hal_interrupt_master_disable>
    d9da:	9b00      	ldr	r3, [sp, #0]
    d9dc:	9003      	str	r0, [sp, #12]
    d9de:	43ff      	mvns	r7, r7
    d9e0:	43f6      	mvns	r6, r6
    d9e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d9e6:	f8df e160 	ldr.w	lr, [pc, #352]	; db48 <am_hal_gpio_pinconfig+0x278>
    d9ea:	4850      	ldr	r0, [pc, #320]	; (db2c <am_hal_gpio_pinconfig+0x25c>)
    d9ec:	9901      	ldr	r1, [sp, #4]
    d9ee:	f1b9 0f00 	cmp.w	r9, #0
    d9f2:	d00b      	beq.n	da0c <am_hal_gpio_pinconfig+0x13c>
    d9f4:	f00b 021f 	and.w	r2, fp, #31
    d9f8:	f04f 0901 	mov.w	r9, #1
    d9fc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    da00:	f8df c148 	ldr.w	ip, [pc, #328]	; db4c <am_hal_gpio_pinconfig+0x27c>
    da04:	fa09 f202 	lsl.w	r2, r9, r2
    da08:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    da0c:	4a48      	ldr	r2, [pc, #288]	; (db30 <am_hal_gpio_pinconfig+0x260>)
    da0e:	f04f 0c73 	mov.w	ip, #115	; 0x73
    da12:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    da16:	f8d3 c000 	ldr.w	ip, [r3]
    da1a:	ea06 0c0c 	and.w	ip, r6, ip
    da1e:	ea4c 0505 	orr.w	r5, ip, r5
    da22:	601d      	str	r5, [r3, #0]
    da24:	f851 300e 	ldr.w	r3, [r1, lr]
    da28:	403b      	ands	r3, r7
    da2a:	4323      	orrs	r3, r4
    da2c:	f841 300e 	str.w	r3, [r1, lr]
    da30:	f85a 3000 	ldr.w	r3, [sl, r0]
    da34:	401e      	ands	r6, r3
    da36:	2400      	movs	r4, #0
    da38:	ea46 0608 	orr.w	r6, r6, r8
    da3c:	f84a 6000 	str.w	r6, [sl, r0]
    da40:	6614      	str	r4, [r2, #96]	; 0x60
    da42:	9803      	ldr	r0, [sp, #12]
    da44:	f000 f8d2 	bl	dbec <am_hal_interrupt_master_set>
    da48:	4620      	mov	r0, r4
    da4a:	b005      	add	sp, #20
    da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da50:	2c01      	cmp	r4, #1
    da52:	d015      	beq.n	da80 <am_hal_gpio_pinconfig+0x1b0>
    da54:	2c02      	cmp	r4, #2
    da56:	d032      	beq.n	dabe <am_hal_gpio_pinconfig+0x1ee>
    da58:	4836      	ldr	r0, [pc, #216]	; (db34 <am_hal_gpio_pinconfig+0x264>)
    da5a:	e756      	b.n	d90a <am_hal_gpio_pinconfig+0x3a>
    da5c:	2dc0      	cmp	r5, #192	; 0xc0
    da5e:	d029      	beq.n	dab4 <am_hal_gpio_pinconfig+0x1e4>
    da60:	2d20      	cmp	r5, #32
    da62:	f47f af58 	bne.w	d916 <am_hal_gpio_pinconfig+0x46>
    da66:	4c2c      	ldr	r4, [pc, #176]	; (db18 <am_hal_gpio_pinconfig+0x248>)
    da68:	5c24      	ldrb	r4, [r4, r0]
    da6a:	f014 0f09 	tst.w	r4, #9
    da6e:	f47f af4b 	bne.w	d908 <am_hal_gpio_pinconfig+0x38>
    da72:	e750      	b.n	d916 <am_hal_gpio_pinconfig+0x46>
    da74:	f3c1 4402 	ubfx	r4, r1, #16, #3
    da78:	2c07      	cmp	r4, #7
    da7a:	d127      	bne.n	dacc <am_hal_gpio_pinconfig+0x1fc>
    da7c:	482e      	ldr	r0, [pc, #184]	; (db38 <am_hal_gpio_pinconfig+0x268>)
    da7e:	e744      	b.n	d90a <am_hal_gpio_pinconfig+0x3a>
    da80:	4c25      	ldr	r4, [pc, #148]	; (db18 <am_hal_gpio_pinconfig+0x248>)
    da82:	5c24      	ldrb	r4, [r4, r0]
    da84:	07a5      	lsls	r5, r4, #30
    da86:	d5e7      	bpl.n	da58 <am_hal_gpio_pinconfig+0x188>
    da88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    da8c:	e748      	b.n	d920 <am_hal_gpio_pinconfig+0x50>
    da8e:	f04f 0901 	mov.w	r9, #1
    da92:	e774      	b.n	d97e <am_hal_gpio_pinconfig+0xae>
    da94:	f005 0518 	and.w	r5, r5, #24
    da98:	f04f 0801 	mov.w	r8, #1
    da9c:	fa08 f805 	lsl.w	r8, r8, r5
    daa0:	e785      	b.n	d9ae <am_hal_gpio_pinconfig+0xde>
    daa2:	f005 0518 	and.w	r5, r5, #24
    daa6:	f04f 0801 	mov.w	r8, #1
    daaa:	f042 0204 	orr.w	r2, r2, #4
    daae:	fa08 f805 	lsl.w	r8, r8, r5
    dab2:	e77c      	b.n	d9ae <am_hal_gpio_pinconfig+0xde>
    dab4:	2814      	cmp	r0, #20
    dab6:	f43f af2e 	beq.w	d916 <am_hal_gpio_pinconfig+0x46>
    daba:	4820      	ldr	r0, [pc, #128]	; (db3c <am_hal_gpio_pinconfig+0x26c>)
    dabc:	e725      	b.n	d90a <am_hal_gpio_pinconfig+0x3a>
    dabe:	4c16      	ldr	r4, [pc, #88]	; (db18 <am_hal_gpio_pinconfig+0x248>)
    dac0:	5c24      	ldrb	r4, [r4, r0]
    dac2:	0764      	lsls	r4, r4, #29
    dac4:	d5c8      	bpl.n	da58 <am_hal_gpio_pinconfig+0x188>
    dac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    daca:	e729      	b.n	d920 <am_hal_gpio_pinconfig+0x50>
    dacc:	4d1c      	ldr	r5, [pc, #112]	; (db40 <am_hal_gpio_pinconfig+0x270>)
    dace:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dad2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dad6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dada:	429e      	cmp	r6, r3
    dadc:	d00c      	beq.n	daf8 <am_hal_gpio_pinconfig+0x228>
    dade:	0084      	lsls	r4, r0, #2
    dae0:	4425      	add	r5, r4
    dae2:	786e      	ldrb	r6, [r5, #1]
    dae4:	429e      	cmp	r6, r3
    dae6:	d013      	beq.n	db10 <am_hal_gpio_pinconfig+0x240>
    dae8:	78ae      	ldrb	r6, [r5, #2]
    daea:	429e      	cmp	r6, r3
    daec:	d00e      	beq.n	db0c <am_hal_gpio_pinconfig+0x23c>
    daee:	78ed      	ldrb	r5, [r5, #3]
    daf0:	429d      	cmp	r5, r3
    daf2:	d00f      	beq.n	db14 <am_hal_gpio_pinconfig+0x244>
    daf4:	4813      	ldr	r0, [pc, #76]	; (db44 <am_hal_gpio_pinconfig+0x274>)
    daf6:	e708      	b.n	d90a <am_hal_gpio_pinconfig+0x3a>
    daf8:	2300      	movs	r3, #0
    dafa:	0084      	lsls	r4, r0, #2
    dafc:	005b      	lsls	r3, r3, #1
    dafe:	f3c1 5540 	ubfx	r5, r1, #21, #1
    db02:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    db06:	f04f 0900 	mov.w	r9, #0
    db0a:	e740      	b.n	d98e <am_hal_gpio_pinconfig+0xbe>
    db0c:	2302      	movs	r3, #2
    db0e:	e7f5      	b.n	dafc <am_hal_gpio_pinconfig+0x22c>
    db10:	2301      	movs	r3, #1
    db12:	e7f3      	b.n	dafc <am_hal_gpio_pinconfig+0x22c>
    db14:	2303      	movs	r3, #3
    db16:	e7f1      	b.n	dafc <am_hal_gpio_pinconfig+0x22c>
    db18:	0000f4c0 	.word	0x0000f4c0
    db1c:	08000100 	.word	0x08000100
    db20:	0000f5bc 	.word	0x0000f5bc
    db24:	0000f5f8 	.word	0x0000f5f8
    db28:	0000f5f0 	.word	0x0000f5f0
    db2c:	400100e0 	.word	0x400100e0
    db30:	40010000 	.word	0x40010000
    db34:	08000102 	.word	0x08000102
    db38:	08000103 	.word	0x08000103
    db3c:	08000101 	.word	0x08000101
    db40:	0000f4f4 	.word	0x0000f4f4
    db44:	08000104 	.word	0x08000104
    db48:	40010040 	.word	0x40010040
    db4c:	400100b4 	.word	0x400100b4

0000db50 <am_hal_gpio_state_write>:
    db50:	2831      	cmp	r0, #49	; 0x31
    db52:	d901      	bls.n	db58 <am_hal_gpio_state_write+0x8>
    db54:	2005      	movs	r0, #5
    db56:	4770      	bx	lr
    db58:	2905      	cmp	r1, #5
    db5a:	d901      	bls.n	db60 <am_hal_gpio_state_write+0x10>
    db5c:	2006      	movs	r0, #6
    db5e:	4770      	bx	lr
    db60:	b570      	push	{r4, r5, r6, lr}
    db62:	f000 031f 	and.w	r3, r0, #31
    db66:	b082      	sub	sp, #8
    db68:	2201      	movs	r2, #1
    db6a:	460d      	mov	r5, r1
    db6c:	4604      	mov	r4, r0
    db6e:	fa02 f603 	lsl.w	r6, r2, r3
    db72:	f000 f837 	bl	dbe4 <am_hal_interrupt_master_disable>
    db76:	1e69      	subs	r1, r5, #1
    db78:	9001      	str	r0, [sp, #4]
    db7a:	0960      	lsrs	r0, r4, #5
    db7c:	2904      	cmp	r1, #4
    db7e:	d81c      	bhi.n	dbba <am_hal_gpio_state_write+0x6a>
    db80:	e8df f001 	tbb	[pc, r1]
    db84:	030c1017 	.word	0x030c1017
    db88:	1f          	.byte	0x1f
    db89:	00          	.byte	0x00
    db8a:	4b11      	ldr	r3, [pc, #68]	; (dbd0 <am_hal_gpio_state_write+0x80>)
    db8c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    db90:	9801      	ldr	r0, [sp, #4]
    db92:	f000 f82b 	bl	dbec <am_hal_interrupt_master_set>
    db96:	2000      	movs	r0, #0
    db98:	b002      	add	sp, #8
    db9a:	bd70      	pop	{r4, r5, r6, pc}
    db9c:	4b0d      	ldr	r3, [pc, #52]	; (dbd4 <am_hal_gpio_state_write+0x84>)
    db9e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dba2:	e7f5      	b.n	db90 <am_hal_gpio_state_write+0x40>
    dba4:	4a0c      	ldr	r2, [pc, #48]	; (dbd8 <am_hal_gpio_state_write+0x88>)
    dba6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dbaa:	4073      	eors	r3, r6
    dbac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dbb0:	e7ee      	b.n	db90 <am_hal_gpio_state_write+0x40>
    dbb2:	4b0a      	ldr	r3, [pc, #40]	; (dbdc <am_hal_gpio_state_write+0x8c>)
    dbb4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dbb8:	e7ea      	b.n	db90 <am_hal_gpio_state_write+0x40>
    dbba:	4b09      	ldr	r3, [pc, #36]	; (dbe0 <am_hal_gpio_state_write+0x90>)
    dbbc:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dbc0:	e7e6      	b.n	db90 <am_hal_gpio_state_write+0x40>
    dbc2:	4a04      	ldr	r2, [pc, #16]	; (dbd4 <am_hal_gpio_state_write+0x84>)
    dbc4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dbc8:	4073      	eors	r3, r6
    dbca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dbce:	e7df      	b.n	db90 <am_hal_gpio_state_write+0x40>
    dbd0:	400100a8 	.word	0x400100a8
    dbd4:	400100b4 	.word	0x400100b4
    dbd8:	40010088 	.word	0x40010088
    dbdc:	40010090 	.word	0x40010090
    dbe0:	40010098 	.word	0x40010098

0000dbe4 <am_hal_interrupt_master_disable>:
    dbe4:	f3ef 8010 	mrs	r0, PRIMASK
    dbe8:	b672      	cpsid	i
    dbea:	4770      	bx	lr

0000dbec <am_hal_interrupt_master_set>:
    dbec:	f380 8810 	msr	PRIMASK, r0
    dbf0:	4770      	bx	lr
    dbf2:	bf00      	nop

0000dbf4 <internal_iom_reset_on_error>:
    dbf4:	b570      	push	{r4, r5, r6, lr}
    dbf6:	6844      	ldr	r4, [r0, #4]
    dbf8:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    dbfc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    dc00:	3404      	adds	r4, #4
    dc02:	0324      	lsls	r4, r4, #12
    dc04:	2300      	movs	r3, #0
    dc06:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    dc0a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    dc0e:	050b      	lsls	r3, r1, #20
    dc10:	d52a      	bpl.n	dc68 <internal_iom_reset_on_error+0x74>
    dc12:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    dc16:	079e      	lsls	r6, r3, #30
    dc18:	d450      	bmi.n	dcbc <internal_iom_reset_on_error+0xc8>
    dc1a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    dc1e:	079a      	lsls	r2, r3, #30
    dc20:	d508      	bpl.n	dc34 <internal_iom_reset_on_error+0x40>
    dc22:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dc26:	f3c3 4307 	ubfx	r3, r3, #16, #8
    dc2a:	2b03      	cmp	r3, #3
    dc2c:	d9f5      	bls.n	dc1a <internal_iom_reset_on_error+0x26>
    dc2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dc32:	e7f6      	b.n	dc22 <internal_iom_reset_on_error+0x2e>
    dc34:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    dc38:	f003 0306 	and.w	r3, r3, #6
    dc3c:	2b04      	cmp	r3, #4
    dc3e:	d1f9      	bne.n	dc34 <internal_iom_reset_on_error+0x40>
    dc40:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dc44:	f3c3 4307 	ubfx	r3, r3, #16, #8
    dc48:	b173      	cbz	r3, dc68 <internal_iom_reset_on_error+0x74>
    dc4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dc4e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    dc52:	2b03      	cmp	r3, #3
    dc54:	d9f4      	bls.n	dc40 <internal_iom_reset_on_error+0x4c>
    dc56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dc5a:	e7f6      	b.n	dc4a <internal_iom_reset_on_error+0x56>
    dc5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    dc60:	f003 0306 	and.w	r3, r3, #6
    dc64:	2b04      	cmp	r3, #4
    dc66:	d1f9      	bne.n	dc5c <internal_iom_reset_on_error+0x68>
    dc68:	06cb      	lsls	r3, r1, #27
    dc6a:	d520      	bpl.n	dcae <internal_iom_reset_on_error+0xba>
    dc6c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    dc70:	f003 0306 	and.w	r3, r3, #6
    dc74:	2b04      	cmp	r3, #4
    dc76:	d1f9      	bne.n	dc6c <internal_iom_reset_on_error+0x78>
    dc78:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    dc7c:	f36f 1304 	bfc	r3, #4, #1
    dc80:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    dc84:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    dc88:	f36f 0341 	bfc	r3, #1, #1
    dc8c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    dc90:	0040      	lsls	r0, r0, #1
    dc92:	f7ff fded 	bl	d870 <am_hal_flash_delay>
    dc96:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    dc9a:	f043 0302 	orr.w	r3, r3, #2
    dc9e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    dca2:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    dca6:	f043 0310 	orr.w	r3, r3, #16
    dcaa:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    dcae:	f04f 33ff 	mov.w	r3, #4294967295
    dcb2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    dcb6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    dcba:	bd70      	pop	{r4, r5, r6, pc}
    dcbc:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    dcc0:	4e07      	ldr	r6, [pc, #28]	; (dce0 <internal_iom_reset_on_error+0xec>)
    dcc2:	2a00      	cmp	r2, #0
    dcc4:	d0ca      	beq.n	dc5c <internal_iom_reset_on_error+0x68>
    dcc6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dcca:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dcce:	2b03      	cmp	r3, #3
    dcd0:	d9f9      	bls.n	dcc6 <internal_iom_reset_on_error+0xd2>
    dcd2:	2a04      	cmp	r2, #4
    dcd4:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    dcd8:	d9c0      	bls.n	dc5c <internal_iom_reset_on_error+0x68>
    dcda:	3a04      	subs	r2, #4
    dcdc:	e7f1      	b.n	dcc2 <internal_iom_reset_on_error+0xce>
    dcde:	bf00      	nop
    dce0:	deadbeef 	.word	0xdeadbeef

0000dce4 <am_hal_iom_initialize>:
    dce4:	2805      	cmp	r0, #5
    dce6:	d901      	bls.n	dcec <am_hal_iom_initialize+0x8>
    dce8:	2005      	movs	r0, #5
    dcea:	4770      	bx	lr
    dcec:	b1e1      	cbz	r1, dd28 <am_hal_iom_initialize+0x44>
    dcee:	b4f0      	push	{r4, r5, r6, r7}
    dcf0:	f640 049c 	movw	r4, #2204	; 0x89c
    dcf4:	4e0d      	ldr	r6, [pc, #52]	; (dd2c <am_hal_iom_initialize+0x48>)
    dcf6:	fb04 f400 	mul.w	r4, r4, r0
    dcfa:	1935      	adds	r5, r6, r4
    dcfc:	4602      	mov	r2, r0
    dcfe:	78e8      	ldrb	r0, [r5, #3]
    dd00:	f010 0301 	ands.w	r3, r0, #1
    dd04:	d002      	beq.n	dd0c <am_hal_iom_initialize+0x28>
    dd06:	2007      	movs	r0, #7
    dd08:	bcf0      	pop	{r4, r5, r6, r7}
    dd0a:	4770      	bx	lr
    dd0c:	f040 0001 	orr.w	r0, r0, #1
    dd10:	f363 0041 	bfi	r0, r3, #1, #1
    dd14:	70e8      	strb	r0, [r5, #3]
    dd16:	5937      	ldr	r7, [r6, r4]
    dd18:	4805      	ldr	r0, [pc, #20]	; (dd30 <am_hal_iom_initialize+0x4c>)
    dd1a:	f360 0717 	bfi	r7, r0, #0, #24
    dd1e:	5137      	str	r7, [r6, r4]
    dd20:	4618      	mov	r0, r3
    dd22:	606a      	str	r2, [r5, #4]
    dd24:	600d      	str	r5, [r1, #0]
    dd26:	e7ef      	b.n	dd08 <am_hal_iom_initialize+0x24>
    dd28:	2006      	movs	r0, #6
    dd2a:	4770      	bx	lr
    dd2c:	100012dc 	.word	0x100012dc
    dd30:	00123456 	.word	0x00123456

0000dd34 <am_hal_iom_enable>:
    dd34:	b128      	cbz	r0, dd42 <am_hal_iom_enable+0xe>
    dd36:	6803      	ldr	r3, [r0, #0]
    dd38:	4a34      	ldr	r2, [pc, #208]	; (de0c <am_hal_iom_enable+0xd8>)
    dd3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd3e:	4293      	cmp	r3, r2
    dd40:	d001      	beq.n	dd46 <am_hal_iom_enable+0x12>
    dd42:	2002      	movs	r0, #2
    dd44:	4770      	bx	lr
    dd46:	78c3      	ldrb	r3, [r0, #3]
    dd48:	079b      	lsls	r3, r3, #30
    dd4a:	d45d      	bmi.n	de08 <am_hal_iom_enable+0xd4>
    dd4c:	6843      	ldr	r3, [r0, #4]
    dd4e:	7a01      	ldrb	r1, [r0, #8]
    dd50:	b570      	push	{r4, r5, r6, lr}
    dd52:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dd56:	3304      	adds	r3, #4
    dd58:	031b      	lsls	r3, r3, #12
    dd5a:	3100      	adds	r1, #0
    dd5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    dd60:	bf18      	it	ne
    dd62:	2101      	movne	r1, #1
    dd64:	f3c2 0242 	ubfx	r2, r2, #1, #3
    dd68:	4291      	cmp	r1, r2
    dd6a:	bf0c      	ite	eq
    dd6c:	2201      	moveq	r2, #1
    dd6e:	2210      	movne	r2, #16
    dd70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    dd74:	68c3      	ldr	r3, [r0, #12]
    dd76:	b084      	sub	sp, #16
    dd78:	4604      	mov	r4, r0
    dd7a:	2b00      	cmp	r3, #0
    dd7c:	d039      	beq.n	ddf2 <am_hal_iom_enable+0xbe>
    dd7e:	6843      	ldr	r3, [r0, #4]
    dd80:	4923      	ldr	r1, [pc, #140]	; (de10 <am_hal_iom_enable+0xdc>)
    dd82:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dd86:	3304      	adds	r3, #4
    dd88:	031a      	lsls	r2, r3, #12
    dd8a:	2300      	movs	r3, #0
    dd8c:	6243      	str	r3, [r0, #36]	; 0x24
    dd8e:	61c3      	str	r3, [r0, #28]
    dd90:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    dd94:	6902      	ldr	r2, [r0, #16]
    dd96:	6840      	ldr	r0, [r0, #4]
    dd98:	68e6      	ldr	r6, [r4, #12]
    dd9a:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    dd9e:	2501      	movs	r5, #1
    dda0:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    dda4:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    dda8:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    ddac:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    ddb0:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    ddb4:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    ddb8:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    ddbc:	6223      	str	r3, [r4, #32]
    ddbe:	b2c0      	uxtb	r0, r0
    ddc0:	fa22 f305 	lsr.w	r3, r2, r5
    ddc4:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    ddc8:	f604 0228 	addw	r2, r4, #2088	; 0x828
    ddcc:	a901      	add	r1, sp, #4
    ddce:	9301      	str	r3, [sp, #4]
    ddd0:	9602      	str	r6, [sp, #8]
    ddd2:	f88d 500c 	strb.w	r5, [sp, #12]
    ddd6:	f001 f995 	bl	f104 <am_hal_cmdq_init>
    ddda:	6863      	ldr	r3, [r4, #4]
    dddc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dde0:	3304      	adds	r3, #4
    dde2:	031b      	lsls	r3, r3, #12
    dde4:	b960      	cbnz	r0, de00 <am_hal_iom_enable+0xcc>
    dde6:	f44f 7180 	mov.w	r1, #256	; 0x100
    ddea:	2202      	movs	r2, #2
    ddec:	6221      	str	r1, [r4, #32]
    ddee:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ddf2:	78e3      	ldrb	r3, [r4, #3]
    ddf4:	f043 0302 	orr.w	r3, r3, #2
    ddf8:	70e3      	strb	r3, [r4, #3]
    ddfa:	2000      	movs	r0, #0
    ddfc:	b004      	add	sp, #16
    ddfe:	bd70      	pop	{r4, r5, r6, pc}
    de00:	2202      	movs	r2, #2
    de02:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    de06:	e7f9      	b.n	ddfc <am_hal_iom_enable+0xc8>
    de08:	2000      	movs	r0, #0
    de0a:	4770      	bx	lr
    de0c:	01123456 	.word	0x01123456
    de10:	00800040 	.word	0x00800040

0000de14 <am_hal_iom_power_ctrl>:
    de14:	b140      	cbz	r0, de28 <am_hal_iom_power_ctrl+0x14>
    de16:	b538      	push	{r3, r4, r5, lr}
    de18:	6803      	ldr	r3, [r0, #0]
    de1a:	4c85      	ldr	r4, [pc, #532]	; (e030 <am_hal_iom_power_ctrl+0x21c>)
    de1c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de20:	42a3      	cmp	r3, r4
    de22:	d003      	beq.n	de2c <am_hal_iom_power_ctrl+0x18>
    de24:	2002      	movs	r0, #2
    de26:	bd38      	pop	{r3, r4, r5, pc}
    de28:	2002      	movs	r0, #2
    de2a:	4770      	bx	lr
    de2c:	4604      	mov	r4, r0
    de2e:	4615      	mov	r5, r2
    de30:	b199      	cbz	r1, de5a <am_hal_iom_power_ctrl+0x46>
    de32:	2902      	cmp	r1, #2
    de34:	d80f      	bhi.n	de56 <am_hal_iom_power_ctrl+0x42>
    de36:	78c3      	ldrb	r3, [r0, #3]
    de38:	6840      	ldr	r0, [r0, #4]
    de3a:	079a      	lsls	r2, r3, #30
    de3c:	d519      	bpl.n	de72 <am_hal_iom_power_ctrl+0x5e>
    de3e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    de42:	3304      	adds	r3, #4
    de44:	031b      	lsls	r3, r3, #12
    de46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    de4a:	f003 0306 	and.w	r3, r3, #6
    de4e:	2b04      	cmp	r3, #4
    de50:	d00c      	beq.n	de6c <am_hal_iom_power_ctrl+0x58>
    de52:	2003      	movs	r0, #3
    de54:	bd38      	pop	{r3, r4, r5, pc}
    de56:	2006      	movs	r0, #6
    de58:	bd38      	pop	{r3, r4, r5, pc}
    de5a:	2a00      	cmp	r2, #0
    de5c:	f000 80cf 	beq.w	dffe <am_hal_iom_power_ctrl+0x1ea>
    de60:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    de64:	2b00      	cmp	r3, #0
    de66:	d146      	bne.n	def6 <am_hal_iom_power_ctrl+0xe2>
    de68:	2007      	movs	r0, #7
    de6a:	bd38      	pop	{r3, r4, r5, pc}
    de6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    de6e:	2b00      	cmp	r3, #0
    de70:	d1ef      	bne.n	de52 <am_hal_iom_power_ctrl+0x3e>
    de72:	b3d5      	cbz	r5, deea <am_hal_iom_power_ctrl+0xd6>
    de74:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    de78:	3304      	adds	r3, #4
    de7a:	031b      	lsls	r3, r3, #12
    de7c:	2201      	movs	r2, #1
    de7e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    de82:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    de86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    de8a:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    de8e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    de92:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    de96:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    de9a:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    de9e:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    dea2:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    dea6:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    deaa:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    deae:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    deb2:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    deb6:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    deba:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    debe:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    dec2:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    dec6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    deca:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    dece:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ded2:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ded6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    deda:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    dede:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    dee2:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    dee6:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    deea:	3002      	adds	r0, #2
    deec:	b2c0      	uxtb	r0, r0
    deee:	f000 fc9d 	bl	e82c <am_hal_pwrctrl_periph_disable>
    def2:	2000      	movs	r0, #0
    def4:	bd38      	pop	{r3, r4, r5, pc}
    def6:	6843      	ldr	r3, [r0, #4]
    def8:	1c98      	adds	r0, r3, #2
    defa:	b2c0      	uxtb	r0, r0
    defc:	f000 fc6c 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    df00:	6863      	ldr	r3, [r4, #4]
    df02:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    df06:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df0a:	3304      	adds	r3, #4
    df0c:	031b      	lsls	r3, r3, #12
    df0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    df12:	6863      	ldr	r3, [r4, #4]
    df14:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    df18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df1c:	3304      	adds	r3, #4
    df1e:	031b      	lsls	r3, r3, #12
    df20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    df24:	6863      	ldr	r3, [r4, #4]
    df26:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    df2a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df2e:	3304      	adds	r3, #4
    df30:	031b      	lsls	r3, r3, #12
    df32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    df36:	6863      	ldr	r3, [r4, #4]
    df38:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    df3c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df40:	3304      	adds	r3, #4
    df42:	031b      	lsls	r3, r3, #12
    df44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    df48:	6863      	ldr	r3, [r4, #4]
    df4a:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    df4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df52:	3304      	adds	r3, #4
    df54:	031b      	lsls	r3, r3, #12
    df56:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    df5a:	6863      	ldr	r3, [r4, #4]
    df5c:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    df60:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df64:	3304      	adds	r3, #4
    df66:	031b      	lsls	r3, r3, #12
    df68:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    df6c:	6863      	ldr	r3, [r4, #4]
    df6e:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    df72:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df76:	3304      	adds	r3, #4
    df78:	031b      	lsls	r3, r3, #12
    df7a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    df7e:	6863      	ldr	r3, [r4, #4]
    df80:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    df84:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df88:	3304      	adds	r3, #4
    df8a:	031b      	lsls	r3, r3, #12
    df8c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    df90:	6863      	ldr	r3, [r4, #4]
    df92:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    df96:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df9a:	3304      	adds	r3, #4
    df9c:	031b      	lsls	r3, r3, #12
    df9e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    dfa2:	6863      	ldr	r3, [r4, #4]
    dfa4:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    dfa8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfac:	3304      	adds	r3, #4
    dfae:	031b      	lsls	r3, r3, #12
    dfb0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dfb4:	6863      	ldr	r3, [r4, #4]
    dfb6:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    dfba:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfbe:	3304      	adds	r3, #4
    dfc0:	031b      	lsls	r3, r3, #12
    dfc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dfc6:	6863      	ldr	r3, [r4, #4]
    dfc8:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    dfcc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfd0:	3304      	adds	r3, #4
    dfd2:	031b      	lsls	r3, r3, #12
    dfd4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    dfd8:	6863      	ldr	r3, [r4, #4]
    dfda:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    dfde:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfe2:	3304      	adds	r3, #4
    dfe4:	031b      	lsls	r3, r3, #12
    dfe6:	f022 0201 	bic.w	r2, r2, #1
    dfea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    dfee:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    dff2:	07db      	lsls	r3, r3, #31
    dff4:	d40a      	bmi.n	e00c <am_hal_iom_power_ctrl+0x1f8>
    dff6:	2000      	movs	r0, #0
    dff8:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    dffc:	bd38      	pop	{r3, r4, r5, pc}
    dffe:	6840      	ldr	r0, [r0, #4]
    e000:	3002      	adds	r0, #2
    e002:	b2c0      	uxtb	r0, r0
    e004:	f000 fbe8 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    e008:	4628      	mov	r0, r5
    e00a:	bd38      	pop	{r3, r4, r5, pc}
    e00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e00e:	b953      	cbnz	r3, e026 <am_hal_iom_power_ctrl+0x212>
    e010:	6863      	ldr	r3, [r4, #4]
    e012:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e016:	3304      	adds	r3, #4
    e018:	031b      	lsls	r3, r3, #12
    e01a:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e01e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e022:	e883 000c 	stmia.w	r3, {r2, r3}
    e026:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e02a:	f001 f8cf 	bl	f1cc <am_hal_cmdq_enable>
    e02e:	e7e2      	b.n	dff6 <am_hal_iom_power_ctrl+0x1e2>
    e030:	01123456 	.word	0x01123456

0000e034 <am_hal_iom_configure>:
    e034:	b128      	cbz	r0, e042 <am_hal_iom_configure+0xe>
    e036:	6803      	ldr	r3, [r0, #0]
    e038:	4a8b      	ldr	r2, [pc, #556]	; (e268 <am_hal_iom_configure+0x234>)
    e03a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e03e:	4293      	cmp	r3, r2
    e040:	d001      	beq.n	e046 <am_hal_iom_configure+0x12>
    e042:	2002      	movs	r0, #2
    e044:	4770      	bx	lr
    e046:	b111      	cbz	r1, e04e <am_hal_iom_configure+0x1a>
    e048:	6843      	ldr	r3, [r0, #4]
    e04a:	2b05      	cmp	r3, #5
    e04c:	d901      	bls.n	e052 <am_hal_iom_configure+0x1e>
    e04e:	2006      	movs	r0, #6
    e050:	4770      	bx	lr
    e052:	78c2      	ldrb	r2, [r0, #3]
    e054:	0792      	lsls	r2, r2, #30
    e056:	d501      	bpl.n	e05c <am_hal_iom_configure+0x28>
    e058:	2007      	movs	r0, #7
    e05a:	4770      	bx	lr
    e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e060:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e064:	3304      	adds	r3, #4
    e066:	780a      	ldrb	r2, [r1, #0]
    e068:	7202      	strb	r2, [r0, #8]
    e06a:	031b      	lsls	r3, r3, #12
    e06c:	f241 0410 	movw	r4, #4112	; 0x1010
    e070:	b083      	sub	sp, #12
    e072:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e076:	b942      	cbnz	r2, e08a <am_hal_iom_configure+0x56>
    e078:	f891 c008 	ldrb.w	ip, [r1, #8]
    e07c:	f1bc 0f03 	cmp.w	ip, #3
    e080:	d908      	bls.n	e094 <am_hal_iom_configure+0x60>
    e082:	2006      	movs	r0, #6
    e084:	b003      	add	sp, #12
    e086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e08a:	2a01      	cmp	r2, #1
    e08c:	f000 80c3 	beq.w	e216 <am_hal_iom_configure+0x1e2>
    e090:	2005      	movs	r0, #5
    e092:	e7f7      	b.n	e084 <am_hal_iom_configure+0x50>
    e094:	684f      	ldr	r7, [r1, #4]
    e096:	2f00      	cmp	r7, #0
    e098:	f000 80bb 	beq.w	e212 <am_hal_iom_configure+0x1de>
    e09c:	4e73      	ldr	r6, [pc, #460]	; (e26c <am_hal_iom_configure+0x238>)
    e09e:	fbb6 f6f7 	udiv	r6, r6, r7
    e0a2:	fb07 f206 	mul.w	r2, r7, r6
    e0a6:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    e0aa:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    e0ae:	2a00      	cmp	r2, #0
    e0b0:	bf18      	it	ne
    e0b2:	3601      	addne	r6, #1
    e0b4:	4274      	negs	r4, r6
    e0b6:	4034      	ands	r4, r6
    e0b8:	fab4 f484 	clz	r4, r4
    e0bc:	f1c4 041f 	rsb	r4, r4, #31
    e0c0:	2c06      	cmp	r4, #6
    e0c2:	bfa8      	it	ge
    e0c4:	2406      	movge	r4, #6
    e0c6:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    e0ca:	f240 80b7 	bls.w	e23c <am_hal_iom_configure+0x208>
    e0ce:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    e0d2:	4d67      	ldr	r5, [pc, #412]	; (e270 <am_hal_iom_configure+0x23c>)
    e0d4:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    e0d8:	42aa      	cmp	r2, r5
    e0da:	bf8c      	ite	hi
    e0dc:	f04f 0e00 	movhi.w	lr, #0
    e0e0:	f04f 0e01 	movls.w	lr, #1
    e0e4:	ea4f 024e 	mov.w	r2, lr, lsl #1
    e0e8:	3201      	adds	r2, #1
    e0ea:	fa02 f804 	lsl.w	r8, r2, r4
    e0ee:	fbb6 f5f8 	udiv	r5, r6, r8
    e0f2:	fb08 6815 	mls	r8, r8, r5, r6
    e0f6:	f1b8 0f00 	cmp.w	r8, #0
    e0fa:	bf18      	it	ne
    e0fc:	3501      	addne	r5, #1
    e0fe:	fab5 f885 	clz	r8, r5
    e102:	f1c8 081f 	rsb	r8, r8, #31
    e106:	f1b8 0f07 	cmp.w	r8, #7
    e10a:	f240 8094 	bls.w	e236 <am_hal_iom_configure+0x202>
    e10e:	3c07      	subs	r4, #7
    e110:	4444      	add	r4, r8
    e112:	f104 0901 	add.w	r9, r4, #1
    e116:	f1b9 0f07 	cmp.w	r9, #7
    e11a:	d87a      	bhi.n	e212 <am_hal_iom_configure+0x1de>
    e11c:	f1a8 0807 	sub.w	r8, r8, #7
    e120:	f04f 0a01 	mov.w	sl, #1
    e124:	fa0a fa08 	lsl.w	sl, sl, r8
    e128:	f10a 3aff 	add.w	sl, sl, #4294967295
    e12c:	ea0a 0a05 	and.w	sl, sl, r5
    e130:	fa25 f508 	lsr.w	r5, r5, r8
    e134:	f1ba 0f00 	cmp.w	sl, #0
    e138:	bf18      	it	ne
    e13a:	3501      	addne	r5, #1
    e13c:	f8df 8158 	ldr.w	r8, [pc, #344]	; e298 <am_hal_iom_configure+0x264>
    e140:	4547      	cmp	r7, r8
    e142:	d87e      	bhi.n	e242 <am_hal_iom_configure+0x20e>
    e144:	f04f 0801 	mov.w	r8, #1
    e148:	fa08 f804 	lsl.w	r8, r8, r4
    e14c:	ebb8 0806 	subs.w	r8, r8, r6
    e150:	bf18      	it	ne
    e152:	f04f 0801 	movne.w	r8, #1
    e156:	ea4f 066c 	mov.w	r6, ip, asr #1
    e15a:	2e01      	cmp	r6, #1
    e15c:	d074      	beq.n	e248 <am_hal_iom_configure+0x214>
    e15e:	3d01      	subs	r5, #1
    e160:	086e      	lsrs	r6, r5, #1
    e162:	9600      	str	r6, [sp, #0]
    e164:	fb05 fa08 	mul.w	sl, r5, r8
    e168:	40a2      	lsls	r2, r4
    e16a:	fb0a 2202 	mla	r2, sl, r2, r2
    e16e:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    e172:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    e176:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e26c <am_hal_iom_configure+0x238>
    e17a:	fbb9 fbf2 	udiv	fp, r9, r2
    e17e:	fb02 fa0b 	mul.w	sl, r2, fp
    e182:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    e186:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    e18a:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    e18e:	9601      	str	r6, [sp, #4]
    e190:	0852      	lsrs	r2, r2, #1
    e192:	9e00      	ldr	r6, [sp, #0]
    e194:	4552      	cmp	r2, sl
    e196:	bf2c      	ite	cs
    e198:	465a      	movcs	r2, fp
    e19a:	f10b 0201 	addcc.w	r2, fp, #1
    e19e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; e29c <am_hal_iom_configure+0x268>
    e1a2:	fbb2 fafb 	udiv	sl, r2, fp
    e1a6:	0436      	lsls	r6, r6, #16
    e1a8:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    e1ac:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    e1b0:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    e1b4:	fb0b 2b1a 	mls	fp, fp, sl, r2
    e1b8:	432e      	orrs	r6, r5
    e1ba:	f1bb 0f00 	cmp.w	fp, #0
    e1be:	d10a      	bne.n	e1d6 <am_hal_iom_configure+0x1a2>
    e1c0:	f1ba 0f00 	cmp.w	sl, #0
    e1c4:	d007      	beq.n	e1d6 <am_hal_iom_configure+0x1a2>
    e1c6:	f10a 35ff 	add.w	r5, sl, #4294967295
    e1ca:	ea15 0f0a 	tst.w	r5, sl
    e1ce:	d102      	bne.n	e1d6 <am_hal_iom_configure+0x1a2>
    e1d0:	9d01      	ldr	r5, [sp, #4]
    e1d2:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    e1d6:	2400      	movs	r4, #0
    e1d8:	4334      	orrs	r4, r6
    e1da:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    e1de:	f044 0401 	orr.w	r4, r4, #1
    e1e2:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    e1e6:	68cb      	ldr	r3, [r1, #12]
    e1e8:	690a      	ldr	r2, [r1, #16]
    e1ea:	60c3      	str	r3, [r0, #12]
    e1ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e1f0:	2300      	movs	r3, #0
    e1f2:	6102      	str	r2, [r0, #16]
    e1f4:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    e1f8:	4a1c      	ldr	r2, [pc, #112]	; (e26c <am_hal_iom_configure+0x238>)
    e1fa:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    e1fe:	fbb2 f7f7 	udiv	r7, r2, r7
    e202:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    e206:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    e20a:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    e20e:	4618      	mov	r0, r3
    e210:	e738      	b.n	e084 <am_hal_iom_configure+0x50>
    e212:	2400      	movs	r4, #0
    e214:	e7e1      	b.n	e1da <am_hal_iom_configure+0x1a6>
    e216:	684f      	ldr	r7, [r1, #4]
    e218:	4a16      	ldr	r2, [pc, #88]	; (e274 <am_hal_iom_configure+0x240>)
    e21a:	4297      	cmp	r7, r2
    e21c:	d01e      	beq.n	e25c <am_hal_iom_configure+0x228>
    e21e:	4a16      	ldr	r2, [pc, #88]	; (e278 <am_hal_iom_configure+0x244>)
    e220:	4297      	cmp	r7, r2
    e222:	d016      	beq.n	e252 <am_hal_iom_configure+0x21e>
    e224:	4a15      	ldr	r2, [pc, #84]	; (e27c <am_hal_iom_configure+0x248>)
    e226:	4297      	cmp	r7, r2
    e228:	f47f af2b 	bne.w	e082 <am_hal_iom_configure+0x4e>
    e22c:	4a14      	ldr	r2, [pc, #80]	; (e280 <am_hal_iom_configure+0x24c>)
    e22e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e232:	4c14      	ldr	r4, [pc, #80]	; (e284 <am_hal_iom_configure+0x250>)
    e234:	e7d3      	b.n	e1de <am_hal_iom_configure+0x1aa>
    e236:	f104 0901 	add.w	r9, r4, #1
    e23a:	e77f      	b.n	e13c <am_hal_iom_configure+0x108>
    e23c:	f04f 0e01 	mov.w	lr, #1
    e240:	e750      	b.n	e0e4 <am_hal_iom_configure+0xb0>
    e242:	f04f 0800 	mov.w	r8, #0
    e246:	e786      	b.n	e156 <am_hal_iom_configure+0x122>
    e248:	1eae      	subs	r6, r5, #2
    e24a:	0876      	lsrs	r6, r6, #1
    e24c:	9600      	str	r6, [sp, #0]
    e24e:	3d01      	subs	r5, #1
    e250:	e788      	b.n	e164 <am_hal_iom_configure+0x130>
    e252:	4a0d      	ldr	r2, [pc, #52]	; (e288 <am_hal_iom_configure+0x254>)
    e254:	4c0d      	ldr	r4, [pc, #52]	; (e28c <am_hal_iom_configure+0x258>)
    e256:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e25a:	e7c0      	b.n	e1de <am_hal_iom_configure+0x1aa>
    e25c:	4a0c      	ldr	r2, [pc, #48]	; (e290 <am_hal_iom_configure+0x25c>)
    e25e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e262:	4c0c      	ldr	r4, [pc, #48]	; (e294 <am_hal_iom_configure+0x260>)
    e264:	e7bb      	b.n	e1de <am_hal_iom_configure+0x1aa>
    e266:	bf00      	nop
    e268:	01123456 	.word	0x01123456
    e26c:	02dc6c00 	.word	0x02dc6c00
    e270:	007a11ff 	.word	0x007a11ff
    e274:	00061a80 	.word	0x00061a80
    e278:	000f4240 	.word	0x000f4240
    e27c:	000186a0 	.word	0x000186a0
    e280:	0003f070 	.word	0x0003f070
    e284:	773b1201 	.word	0x773b1201
    e288:	00213040 	.word	0x00213040
    e28c:	06031301 	.word	0x06031301
    e290:	0003f270 	.word	0x0003f270
    e294:	1d0e1201 	.word	0x1d0e1201
    e298:	00b71aff 	.word	0x00b71aff
    e29c:	0003d090 	.word	0x0003d090

0000e2a0 <am_hal_iom_blocking_transfer>:
    e2a0:	b128      	cbz	r0, e2ae <am_hal_iom_blocking_transfer+0xe>
    e2a2:	6803      	ldr	r3, [r0, #0]
    e2a4:	4ac1      	ldr	r2, [pc, #772]	; (e5ac <am_hal_iom_blocking_transfer+0x30c>)
    e2a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e2aa:	4293      	cmp	r3, r2
    e2ac:	d001      	beq.n	e2b2 <am_hal_iom_blocking_transfer+0x12>
    e2ae:	2002      	movs	r0, #2
    e2b0:	4770      	bx	lr
    e2b2:	b159      	cbz	r1, e2cc <am_hal_iom_blocking_transfer+0x2c>
    e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2b8:	f891 8010 	ldrb.w	r8, [r1, #16]
    e2bc:	f1b8 0f01 	cmp.w	r8, #1
    e2c0:	b087      	sub	sp, #28
    e2c2:	d905      	bls.n	e2d0 <am_hal_iom_blocking_transfer+0x30>
    e2c4:	2007      	movs	r0, #7
    e2c6:	b007      	add	sp, #28
    e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2cc:	2006      	movs	r0, #6
    e2ce:	4770      	bx	lr
    e2d0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    e2d4:	f1ba 0f00 	cmp.w	sl, #0
    e2d8:	d102      	bne.n	e2e0 <am_hal_iom_blocking_transfer+0x40>
    e2da:	f881 a010 	strb.w	sl, [r1, #16]
    e2de:	46d0      	mov	r8, sl
    e2e0:	f8d1 9004 	ldr.w	r9, [r1, #4]
    e2e4:	f1b9 0f03 	cmp.w	r9, #3
    e2e8:	d901      	bls.n	e2ee <am_hal_iom_blocking_transfer+0x4e>
    e2ea:	2006      	movs	r0, #6
    e2ec:	e7eb      	b.n	e2c6 <am_hal_iom_blocking_transfer+0x26>
    e2ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    e2f2:	f04f 33ff 	mov.w	r3, #4294967295
    e2f6:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e2fa:	4093      	lsls	r3, r2
    e2fc:	ea13 0f0b 	tst.w	r3, fp
    e300:	d1f3      	bne.n	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e302:	f1ba 0f00 	cmp.w	sl, #0
    e306:	f000 80bb 	beq.w	e480 <am_hal_iom_blocking_transfer+0x1e0>
    e30a:	f1b8 0f00 	cmp.w	r8, #0
    e30e:	f000 80c7 	beq.w	e4a0 <am_hal_iom_blocking_transfer+0x200>
    e312:	698b      	ldr	r3, [r1, #24]
    e314:	2b00      	cmp	r3, #0
    e316:	d0e8      	beq.n	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e318:	7a03      	ldrb	r3, [r0, #8]
    e31a:	2b01      	cmp	r3, #1
    e31c:	f040 80b4 	bne.w	e488 <am_hal_iom_blocking_transfer+0x1e8>
    e320:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    e324:	d8e1      	bhi.n	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e326:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    e32a:	2b02      	cmp	r3, #2
    e32c:	d0ca      	beq.n	e2c4 <am_hal_iom_blocking_transfer+0x24>
    e32e:	7f0b      	ldrb	r3, [r1, #28]
    e330:	694f      	ldr	r7, [r1, #20]
    e332:	f8d1 e018 	ldr.w	lr, [r1, #24]
    e336:	9303      	str	r3, [sp, #12]
    e338:	4604      	mov	r4, r0
    e33a:	2301      	movs	r3, #1
    e33c:	460d      	mov	r5, r1
    e33e:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    e342:	6866      	ldr	r6, [r4, #4]
    e344:	9300      	str	r3, [sp, #0]
    e346:	f04f 32ff 	mov.w	r2, #4294967295
    e34a:	2300      	movs	r3, #0
    e34c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    e350:	4598      	cmp	r8, r3
    e352:	bf18      	it	ne
    e354:	4677      	movne	r7, lr
    e356:	f7ff fa8f 	bl	d878 <am_hal_flash_delay_status_check>
    e35a:	2800      	cmp	r0, #0
    e35c:	d1b3      	bne.n	e2c6 <am_hal_iom_blocking_transfer+0x26>
    e35e:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    e362:	3604      	adds	r6, #4
    e364:	2301      	movs	r3, #1
    e366:	0336      	lsls	r6, r6, #12
    e368:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    e36c:	9300      	str	r3, [sp, #0]
    e36e:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    e372:	9304      	str	r3, [sp, #16]
    e374:	4619      	mov	r1, r3
    e376:	2206      	movs	r2, #6
    e378:	2304      	movs	r3, #4
    e37a:	f7ff fa7d 	bl	d878 <am_hal_flash_delay_status_check>
    e37e:	2800      	cmp	r0, #0
    e380:	d1a1      	bne.n	e2c6 <am_hal_iom_blocking_transfer+0x26>
    e382:	f04f 33ff 	mov.w	r3, #4294967295
    e386:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    e38a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e38e:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    e392:	682b      	ldr	r3, [r5, #0]
    e394:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    e398:	682b      	ldr	r3, [r5, #0]
    e39a:	9205      	str	r2, [sp, #20]
    e39c:	4423      	add	r3, r4
    e39e:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    e3a2:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    e3a6:	7a23      	ldrb	r3, [r4, #8]
    e3a8:	b903      	cbnz	r3, e3ac <am_hal_iom_blocking_transfer+0x10c>
    e3aa:	6828      	ldr	r0, [r5, #0]
    e3ac:	4a80      	ldr	r2, [pc, #512]	; (e5b0 <am_hal_iom_blocking_transfer+0x310>)
    e3ae:	0500      	lsls	r0, r0, #20
    e3b0:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    e3b4:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    e3b8:	ea0a 0202 	and.w	r2, sl, r2
    e3bc:	f1b8 0f01 	cmp.w	r8, #1
    e3c0:	ea42 0203 	orr.w	r2, r2, r3
    e3c4:	d074      	beq.n	e4b0 <am_hal_iom_blocking_transfer+0x210>
    e3c6:	f3cb 230f 	ubfx	r3, fp, #8, #16
    e3ca:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    e3ce:	ea4f 1149 	mov.w	r1, r9, lsl #5
    e3d2:	ea4f 600b 	mov.w	r0, fp, lsl #24
    e3d6:	f040 0001 	orr.w	r0, r0, #1
    e3da:	f001 0160 	and.w	r1, r1, #96	; 0x60
    e3de:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e3e2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    e3e6:	4301      	orrs	r1, r0
    e3e8:	9803      	ldr	r0, [sp, #12]
    e3ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e3ee:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    e3f2:	2b03      	cmp	r3, #3
    e3f4:	ea42 0201 	orr.w	r2, r2, r1
    e3f8:	f240 80b3 	bls.w	e562 <am_hal_iom_blocking_transfer+0x2c2>
    e3fc:	f1b8 0f00 	cmp.w	r8, #0
    e400:	d00a      	beq.n	e418 <am_hal_iom_blocking_transfer+0x178>
    e402:	4641      	mov	r1, r8
    e404:	f857 0b04 	ldr.w	r0, [r7], #4
    e408:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    e40c:	2903      	cmp	r1, #3
    e40e:	f1a3 0304 	sub.w	r3, r3, #4
    e412:	f1a1 0104 	sub.w	r1, r1, #4
    e416:	d82e      	bhi.n	e476 <am_hal_iom_blocking_transfer+0x1d6>
    e418:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e41c:	f04f 0800 	mov.w	r8, #0
    e420:	2701      	movs	r7, #1
    e422:	9904      	ldr	r1, [sp, #16]
    e424:	9700      	str	r7, [sp, #0]
    e426:	2304      	movs	r3, #4
    e428:	2206      	movs	r2, #6
    e42a:	4862      	ldr	r0, [pc, #392]	; (e5b4 <am_hal_iom_blocking_transfer+0x314>)
    e42c:	f7ff fa24 	bl	d878 <am_hal_flash_delay_status_check>
    e430:	4605      	mov	r5, r0
    e432:	b970      	cbnz	r0, e452 <am_hal_iom_blocking_transfer+0x1b2>
    e434:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e438:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    e43c:	d135      	bne.n	e4aa <am_hal_iom_blocking_transfer+0x20a>
    e43e:	0599      	lsls	r1, r3, #22
    e440:	f100 80cf 	bmi.w	e5e2 <am_hal_iom_blocking_transfer+0x342>
    e444:	06da      	lsls	r2, r3, #27
    e446:	f100 80ce 	bmi.w	e5e6 <am_hal_iom_blocking_transfer+0x346>
    e44a:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    e44e:	d00e      	beq.n	e46e <am_hal_iom_blocking_transfer+0x1ce>
    e450:	463d      	mov	r5, r7
    e452:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    e456:	4620      	mov	r0, r4
    e458:	f7ff fbcc 	bl	dbf4 <internal_iom_reset_on_error>
    e45c:	f04f 33ff 	mov.w	r3, #4294967295
    e460:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    e464:	9b05      	ldr	r3, [sp, #20]
    e466:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    e46a:	4628      	mov	r0, r5
    e46c:	e72b      	b.n	e2c6 <am_hal_iom_blocking_transfer+0x26>
    e46e:	f1b8 0f00 	cmp.w	r8, #0
    e472:	d0f3      	beq.n	e45c <am_hal_iom_blocking_transfer+0x1bc>
    e474:	e7ec      	b.n	e450 <am_hal_iom_blocking_transfer+0x1b0>
    e476:	2b03      	cmp	r3, #3
    e478:	d972      	bls.n	e560 <am_hal_iom_blocking_transfer+0x2c0>
    e47a:	2900      	cmp	r1, #0
    e47c:	d1c2      	bne.n	e404 <am_hal_iom_blocking_transfer+0x164>
    e47e:	e7cb      	b.n	e418 <am_hal_iom_blocking_transfer+0x178>
    e480:	7a03      	ldrb	r3, [r0, #8]
    e482:	2b01      	cmp	r3, #1
    e484:	f43f af4f 	beq.w	e326 <am_hal_iom_blocking_transfer+0x86>
    e488:	2b00      	cmp	r3, #0
    e48a:	f47f af4c 	bne.w	e326 <am_hal_iom_blocking_transfer+0x86>
    e48e:	680b      	ldr	r3, [r1, #0]
    e490:	2b03      	cmp	r3, #3
    e492:	f63f af2a 	bhi.w	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e496:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    e49a:	f4bf af26 	bcs.w	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e49e:	e742      	b.n	e326 <am_hal_iom_blocking_transfer+0x86>
    e4a0:	694b      	ldr	r3, [r1, #20]
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	f47f af38 	bne.w	e318 <am_hal_iom_blocking_transfer+0x78>
    e4a8:	e71f      	b.n	e2ea <am_hal_iom_blocking_transfer+0x4a>
    e4aa:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e4ae:	e7d0      	b.n	e452 <am_hal_iom_blocking_transfer+0x1b2>
    e4b0:	ea4f 1349 	mov.w	r3, r9, lsl #5
    e4b4:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    e4b8:	ea4f 610b 	mov.w	r1, fp, lsl #24
    e4bc:	9b03      	ldr	r3, [sp, #12]
    e4be:	f041 0102 	orr.w	r1, r1, #2
    e4c2:	f3cb 200f 	ubfx	r0, fp, #8, #16
    e4c6:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    e4ca:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    e4ce:	ea4e 0301 	orr.w	r3, lr, r1
    e4d2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    e4d6:	431a      	orrs	r2, r3
    e4d8:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e4dc:	2200      	movs	r2, #0
    e4de:	f1b8 0f00 	cmp.w	r8, #0
    e4e2:	d09b      	beq.n	e41c <am_hal_iom_blocking_transfer+0x17c>
    e4e4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e4e8:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e4ec:	2b03      	cmp	r3, #3
    e4ee:	d81e      	bhi.n	e52e <am_hal_iom_blocking_transfer+0x28e>
    e4f0:	4d30      	ldr	r5, [pc, #192]	; (e5b4 <am_hal_iom_blocking_transfer+0x314>)
    e4f2:	e001      	b.n	e4f8 <am_hal_iom_blocking_transfer+0x258>
    e4f4:	3d01      	subs	r5, #1
    e4f6:	d093      	beq.n	e420 <am_hal_iom_blocking_transfer+0x180>
    e4f8:	2001      	movs	r0, #1
    e4fa:	b10a      	cbz	r2, e500 <am_hal_iom_blocking_transfer+0x260>
    e4fc:	4598      	cmp	r8, r3
    e4fe:	d88f      	bhi.n	e420 <am_hal_iom_blocking_transfer+0x180>
    e500:	f7ff f9b6 	bl	d870 <am_hal_flash_delay>
    e504:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    e508:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e50c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e510:	2b03      	cmp	r3, #3
    e512:	f002 0201 	and.w	r2, r2, #1
    e516:	d9ed      	bls.n	e4f4 <am_hal_iom_blocking_transfer+0x254>
    e518:	e009      	b.n	e52e <am_hal_iom_blocking_transfer+0x28e>
    e51a:	2b03      	cmp	r3, #3
    e51c:	6039      	str	r1, [r7, #0]
    e51e:	f1a8 0804 	sub.w	r8, r8, #4
    e522:	d962      	bls.n	e5ea <am_hal_iom_blocking_transfer+0x34a>
    e524:	f1b8 0f00 	cmp.w	r8, #0
    e528:	f43f af78 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e52c:	4607      	mov	r7, r0
    e52e:	f1b8 0f03 	cmp.w	r8, #3
    e532:	f1a3 0304 	sub.w	r3, r3, #4
    e536:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    e53a:	f107 0004 	add.w	r0, r7, #4
    e53e:	d8ec      	bhi.n	e51a <am_hal_iom_blocking_transfer+0x27a>
    e540:	f1b8 0f01 	cmp.w	r8, #1
    e544:	7039      	strb	r1, [r7, #0]
    e546:	ea4f 2311 	mov.w	r3, r1, lsr #8
    e54a:	f43f af67 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e54e:	f1b8 0f02 	cmp.w	r8, #2
    e552:	707b      	strb	r3, [r7, #1]
    e554:	ea4f 4111 	mov.w	r1, r1, lsr #16
    e558:	f43f af60 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e55c:	70b9      	strb	r1, [r7, #2]
    e55e:	e75d      	b.n	e41c <am_hal_iom_blocking_transfer+0x17c>
    e560:	4688      	mov	r8, r1
    e562:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e566:	f1b8 0f00 	cmp.w	r8, #0
    e56a:	f43f af57 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e56e:	463b      	mov	r3, r7
    e570:	4647      	mov	r7, r8
    e572:	4698      	mov	r8, r3
    e574:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e578:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e57c:	2b03      	cmp	r3, #3
    e57e:	d81e      	bhi.n	e5be <am_hal_iom_blocking_transfer+0x31e>
    e580:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e584:	07d8      	lsls	r0, r3, #31
    e586:	d42a      	bmi.n	e5de <am_hal_iom_blocking_transfer+0x33e>
    e588:	4d0a      	ldr	r5, [pc, #40]	; (e5b4 <am_hal_iom_blocking_transfer+0x314>)
    e58a:	e005      	b.n	e598 <am_hal_iom_blocking_transfer+0x2f8>
    e58c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e590:	07db      	lsls	r3, r3, #31
    e592:	d424      	bmi.n	e5de <am_hal_iom_blocking_transfer+0x33e>
    e594:	3d01      	subs	r5, #1
    e596:	d022      	beq.n	e5de <am_hal_iom_blocking_transfer+0x33e>
    e598:	2001      	movs	r0, #1
    e59a:	f7ff f969 	bl	d870 <am_hal_flash_delay>
    e59e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e5a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e5a6:	2b03      	cmp	r3, #3
    e5a8:	d9f0      	bls.n	e58c <am_hal_iom_blocking_transfer+0x2ec>
    e5aa:	e008      	b.n	e5be <am_hal_iom_blocking_transfer+0x31e>
    e5ac:	01123456 	.word	0x01123456
    e5b0:	000fff00 	.word	0x000fff00
    e5b4:	0007a120 	.word	0x0007a120
    e5b8:	2f00      	cmp	r7, #0
    e5ba:	f43f af2f 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e5be:	f858 2b04 	ldr.w	r2, [r8], #4
    e5c2:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    e5c6:	2f03      	cmp	r7, #3
    e5c8:	f1a3 0304 	sub.w	r3, r3, #4
    e5cc:	f1a7 0704 	sub.w	r7, r7, #4
    e5d0:	f67f af24 	bls.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e5d4:	2b03      	cmp	r3, #3
    e5d6:	d8ef      	bhi.n	e5b8 <am_hal_iom_blocking_transfer+0x318>
    e5d8:	2f00      	cmp	r7, #0
    e5da:	d1cb      	bne.n	e574 <am_hal_iom_blocking_transfer+0x2d4>
    e5dc:	e71e      	b.n	e41c <am_hal_iom_blocking_transfer+0x17c>
    e5de:	46b8      	mov	r8, r7
    e5e0:	e71e      	b.n	e420 <am_hal_iom_blocking_transfer+0x180>
    e5e2:	4d05      	ldr	r5, [pc, #20]	; (e5f8 <am_hal_iom_blocking_transfer+0x358>)
    e5e4:	e735      	b.n	e452 <am_hal_iom_blocking_transfer+0x1b2>
    e5e6:	4d05      	ldr	r5, [pc, #20]	; (e5fc <am_hal_iom_blocking_transfer+0x35c>)
    e5e8:	e733      	b.n	e452 <am_hal_iom_blocking_transfer+0x1b2>
    e5ea:	f1b8 0f00 	cmp.w	r8, #0
    e5ee:	f43f af15 	beq.w	e41c <am_hal_iom_blocking_transfer+0x17c>
    e5f2:	4607      	mov	r7, r0
    e5f4:	e776      	b.n	e4e4 <am_hal_iom_blocking_transfer+0x244>
    e5f6:	bf00      	nop
    e5f8:	08000001 	.word	0x08000001
    e5fc:	08000002 	.word	0x08000002

0000e600 <am_hal_itm_disable>:
    e600:	b510      	push	{r4, lr}
    e602:	4b25      	ldr	r3, [pc, #148]	; (e698 <am_hal_itm_disable+0x98>)
    e604:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e608:	b9b3      	cbnz	r3, e638 <am_hal_itm_disable+0x38>
    e60a:	4b24      	ldr	r3, [pc, #144]	; (e69c <am_hal_itm_disable+0x9c>)
    e60c:	68da      	ldr	r2, [r3, #12]
    e60e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e612:	60da      	str	r2, [r3, #12]
    e614:	68da      	ldr	r2, [r3, #12]
    e616:	01d2      	lsls	r2, r2, #7
    e618:	d5fc      	bpl.n	e614 <am_hal_itm_disable+0x14>
    e61a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e61e:	4920      	ldr	r1, [pc, #128]	; (e6a0 <am_hal_itm_disable+0xa0>)
    e620:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    e624:	4a1f      	ldr	r2, [pc, #124]	; (e6a4 <am_hal_itm_disable+0xa4>)
    e626:	200f      	movs	r0, #15
    e628:	f04f 31ff 	mov.w	r1, #4294967295
    e62c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e630:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e634:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e638:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e63c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e640:	021b      	lsls	r3, r3, #8
    e642:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e646:	d4f9      	bmi.n	e63c <am_hal_itm_disable+0x3c>
    e648:	f240 20f7 	movw	r0, #759	; 0x2f7
    e64c:	f7ff f910 	bl	d870 <am_hal_flash_delay>
    e650:	4b13      	ldr	r3, [pc, #76]	; (e6a0 <am_hal_itm_disable+0xa0>)
    e652:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e656:	4621      	mov	r1, r4
    e658:	2064      	movs	r0, #100	; 0x64
    e65a:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    e65e:	f023 0301 	bic.w	r3, r3, #1
    e662:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    e666:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    e66a:	4b0f      	ldr	r3, [pc, #60]	; (e6a8 <am_hal_itm_disable+0xa8>)
    e66c:	4013      	ands	r3, r2
    e66e:	2b00      	cmp	r3, #0
    e670:	d1f9      	bne.n	e666 <am_hal_itm_disable+0x66>
    e672:	3801      	subs	r0, #1
    e674:	d1f1      	bne.n	e65a <am_hal_itm_disable+0x5a>
    e676:	4a09      	ldr	r2, [pc, #36]	; (e69c <am_hal_itm_disable+0x9c>)
    e678:	68d3      	ldr	r3, [r2, #12]
    e67a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e67e:	60d3      	str	r3, [r2, #12]
    e680:	68d3      	ldr	r3, [r2, #12]
    e682:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e686:	d1fb      	bne.n	e680 <am_hal_itm_disable+0x80>
    e688:	4a03      	ldr	r2, [pc, #12]	; (e698 <am_hal_itm_disable+0x98>)
    e68a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e68e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e692:	2b00      	cmp	r3, #0
    e694:	d1fb      	bne.n	e68e <am_hal_itm_disable+0x8e>
    e696:	bd10      	pop	{r4, pc}
    e698:	40020000 	.word	0x40020000
    e69c:	e000edf0 	.word	0xe000edf0
    e6a0:	c5acce55 	.word	0xc5acce55
    e6a4:	00150511 	.word	0x00150511
    e6a8:	00800001 	.word	0x00800001

0000e6ac <am_hal_mcuctrl_info_get>:
    e6ac:	b4f0      	push	{r4, r5, r6, r7}
    e6ae:	b121      	cbz	r1, e6ba <am_hal_mcuctrl_info_get+0xe>
    e6b0:	2801      	cmp	r0, #1
    e6b2:	d038      	beq.n	e726 <am_hal_mcuctrl_info_get+0x7a>
    e6b4:	d320      	bcc.n	e6f8 <am_hal_mcuctrl_info_get+0x4c>
    e6b6:	2802      	cmp	r0, #2
    e6b8:	d002      	beq.n	e6c0 <am_hal_mcuctrl_info_get+0x14>
    e6ba:	2006      	movs	r0, #6
    e6bc:	bcf0      	pop	{r4, r5, r6, r7}
    e6be:	4770      	bx	lr
    e6c0:	4a41      	ldr	r2, [pc, #260]	; (e7c8 <am_hal_mcuctrl_info_get+0x11c>)
    e6c2:	684d      	ldr	r5, [r1, #4]
    e6c4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e6c8:	694c      	ldr	r4, [r1, #20]
    e6ca:	f003 0601 	and.w	r6, r3, #1
    e6ce:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e6d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e6d6:	700e      	strb	r6, [r1, #0]
    e6d8:	7208      	strb	r0, [r1, #8]
    e6da:	740b      	strb	r3, [r1, #16]
    e6dc:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e6e0:	60cb      	str	r3, [r1, #12]
    e6e2:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e6e6:	4328      	orrs	r0, r5
    e6e8:	6048      	str	r0, [r1, #4]
    e6ea:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e6ee:	4323      	orrs	r3, r4
    e6f0:	2000      	movs	r0, #0
    e6f2:	614b      	str	r3, [r1, #20]
    e6f4:	bcf0      	pop	{r4, r5, r6, r7}
    e6f6:	4770      	bx	lr
    e6f8:	4a33      	ldr	r2, [pc, #204]	; (e7c8 <am_hal_mcuctrl_info_get+0x11c>)
    e6fa:	6993      	ldr	r3, [r2, #24]
    e6fc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e700:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e704:	7008      	strb	r0, [r1, #0]
    e706:	704b      	strb	r3, [r1, #1]
    e708:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e70c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e710:	710b      	strb	r3, [r1, #4]
    e712:	6953      	ldr	r3, [r2, #20]
    e714:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e718:	f003 0301 	and.w	r3, r3, #1
    e71c:	2000      	movs	r0, #0
    e71e:	708a      	strb	r2, [r1, #2]
    e720:	70cb      	strb	r3, [r1, #3]
    e722:	bcf0      	pop	{r4, r5, r6, r7}
    e724:	4770      	bx	lr
    e726:	4b28      	ldr	r3, [pc, #160]	; (e7c8 <am_hal_mcuctrl_info_get+0x11c>)
    e728:	4c28      	ldr	r4, [pc, #160]	; (e7cc <am_hal_mcuctrl_info_get+0x120>)
    e72a:	681a      	ldr	r2, [r3, #0]
    e72c:	600a      	str	r2, [r1, #0]
    e72e:	6858      	ldr	r0, [r3, #4]
    e730:	6048      	str	r0, [r1, #4]
    e732:	6898      	ldr	r0, [r3, #8]
    e734:	6088      	str	r0, [r1, #8]
    e736:	68d8      	ldr	r0, [r3, #12]
    e738:	60c8      	str	r0, [r1, #12]
    e73a:	691d      	ldr	r5, [r3, #16]
    e73c:	4824      	ldr	r0, [pc, #144]	; (e7d0 <am_hal_mcuctrl_info_get+0x124>)
    e73e:	610d      	str	r5, [r1, #16]
    e740:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e744:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e748:	695d      	ldr	r5, [r3, #20]
    e74a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e74e:	4b21      	ldr	r3, [pc, #132]	; (e7d4 <am_hal_mcuctrl_info_get+0x128>)
    e750:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e754:	6208      	str	r0, [r1, #32]
    e756:	f002 0201 	and.w	r2, r2, #1
    e75a:	614d      	str	r5, [r1, #20]
    e75c:	61cc      	str	r4, [r1, #28]
    e75e:	618a      	str	r2, [r1, #24]
    e760:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e764:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e768:	b2d0      	uxtb	r0, r2
    e76a:	f004 020f 	and.w	r2, r4, #15
    e76e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e772:	624a      	str	r2, [r1, #36]	; 0x24
    e774:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e778:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e77c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e780:	f004 020f 	and.w	r2, r4, #15
    e784:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e788:	628a      	str	r2, [r1, #40]	; 0x28
    e78a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e78e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e792:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e796:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e79a:	4302      	orrs	r2, r0
    e79c:	62ca      	str	r2, [r1, #44]	; 0x2c
    e79e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e7a2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e7a6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e7aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e7ae:	b2c0      	uxtb	r0, r0
    e7b0:	0400      	lsls	r0, r0, #16
    e7b2:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e7b6:	b2d2      	uxtb	r2, r2
    e7b8:	431a      	orrs	r2, r3
    e7ba:	b2e3      	uxtb	r3, r4
    e7bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e7c0:	630b      	str	r3, [r1, #48]	; 0x30
    e7c2:	2000      	movs	r0, #0
    e7c4:	bcf0      	pop	{r4, r5, r6, r7}
    e7c6:	4770      	bx	lr
    e7c8:	40020000 	.word	0x40020000
    e7cc:	0000f630 	.word	0x0000f630
    e7d0:	0000f670 	.word	0x0000f670
    e7d4:	f0000f00 	.word	0xf0000f00

0000e7d8 <am_hal_pwrctrl_periph_enable>:
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	b082      	sub	sp, #8
    e7dc:	4604      	mov	r4, r0
    e7de:	f7ff fa01 	bl	dbe4 <am_hal_interrupt_master_disable>
    e7e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e7e6:	4d0f      	ldr	r5, [pc, #60]	; (e824 <am_hal_pwrctrl_periph_enable+0x4c>)
    e7e8:	4e0f      	ldr	r6, [pc, #60]	; (e828 <am_hal_pwrctrl_periph_enable+0x50>)
    e7ea:	9001      	str	r0, [sp, #4]
    e7ec:	00a4      	lsls	r4, r4, #2
    e7ee:	68aa      	ldr	r2, [r5, #8]
    e7f0:	5933      	ldr	r3, [r6, r4]
    e7f2:	4313      	orrs	r3, r2
    e7f4:	60ab      	str	r3, [r5, #8]
    e7f6:	9801      	ldr	r0, [sp, #4]
    e7f8:	4434      	add	r4, r6
    e7fa:	f7ff f9f7 	bl	dbec <am_hal_interrupt_master_set>
    e7fe:	2077      	movs	r0, #119	; 0x77
    e800:	f7ff f836 	bl	d870 <am_hal_flash_delay>
    e804:	69ab      	ldr	r3, [r5, #24]
    e806:	6864      	ldr	r4, [r4, #4]
    e808:	4223      	tst	r3, r4
    e80a:	d103      	bne.n	e814 <am_hal_pwrctrl_periph_enable+0x3c>
    e80c:	2077      	movs	r0, #119	; 0x77
    e80e:	f7ff f82f 	bl	d870 <am_hal_flash_delay>
    e812:	69ab      	ldr	r3, [r5, #24]
    e814:	4b03      	ldr	r3, [pc, #12]	; (e824 <am_hal_pwrctrl_periph_enable+0x4c>)
    e816:	699b      	ldr	r3, [r3, #24]
    e818:	4223      	tst	r3, r4
    e81a:	bf0c      	ite	eq
    e81c:	2001      	moveq	r0, #1
    e81e:	2000      	movne	r0, #0
    e820:	b002      	add	sp, #8
    e822:	bd70      	pop	{r4, r5, r6, pc}
    e824:	40021000 	.word	0x40021000
    e828:	0000f6b0 	.word	0x0000f6b0

0000e82c <am_hal_pwrctrl_periph_disable>:
    e82c:	b570      	push	{r4, r5, r6, lr}
    e82e:	b082      	sub	sp, #8
    e830:	4604      	mov	r4, r0
    e832:	f7ff f9d7 	bl	dbe4 <am_hal_interrupt_master_disable>
    e836:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e83a:	4d10      	ldr	r5, [pc, #64]	; (e87c <am_hal_pwrctrl_periph_disable+0x50>)
    e83c:	4e10      	ldr	r6, [pc, #64]	; (e880 <am_hal_pwrctrl_periph_disable+0x54>)
    e83e:	9001      	str	r0, [sp, #4]
    e840:	00a4      	lsls	r4, r4, #2
    e842:	68ab      	ldr	r3, [r5, #8]
    e844:	5932      	ldr	r2, [r6, r4]
    e846:	ea23 0302 	bic.w	r3, r3, r2
    e84a:	60ab      	str	r3, [r5, #8]
    e84c:	9801      	ldr	r0, [sp, #4]
    e84e:	4434      	add	r4, r6
    e850:	f7ff f9cc 	bl	dbec <am_hal_interrupt_master_set>
    e854:	2077      	movs	r0, #119	; 0x77
    e856:	f7ff f80b 	bl	d870 <am_hal_flash_delay>
    e85a:	69ab      	ldr	r3, [r5, #24]
    e85c:	6864      	ldr	r4, [r4, #4]
    e85e:	4223      	tst	r3, r4
    e860:	d003      	beq.n	e86a <am_hal_pwrctrl_periph_disable+0x3e>
    e862:	2077      	movs	r0, #119	; 0x77
    e864:	f7ff f804 	bl	d870 <am_hal_flash_delay>
    e868:	69ab      	ldr	r3, [r5, #24]
    e86a:	4b04      	ldr	r3, [pc, #16]	; (e87c <am_hal_pwrctrl_periph_disable+0x50>)
    e86c:	699b      	ldr	r3, [r3, #24]
    e86e:	4223      	tst	r3, r4
    e870:	bf14      	ite	ne
    e872:	2001      	movne	r0, #1
    e874:	2000      	moveq	r0, #0
    e876:	b002      	add	sp, #8
    e878:	bd70      	pop	{r4, r5, r6, pc}
    e87a:	bf00      	nop
    e87c:	40021000 	.word	0x40021000
    e880:	0000f6b0 	.word	0x0000f6b0

0000e884 <am_hal_pwrctrl_low_power_init>:
    e884:	b530      	push	{r4, r5, lr}
    e886:	4b1f      	ldr	r3, [pc, #124]	; (e904 <am_hal_pwrctrl_low_power_init+0x80>)
    e888:	681a      	ldr	r2, [r3, #0]
    e88a:	b083      	sub	sp, #12
    e88c:	b912      	cbnz	r2, e894 <am_hal_pwrctrl_low_power_init+0x10>
    e88e:	4a1e      	ldr	r2, [pc, #120]	; (e908 <am_hal_pwrctrl_low_power_init+0x84>)
    e890:	6812      	ldr	r2, [r2, #0]
    e892:	601a      	str	r2, [r3, #0]
    e894:	4c1d      	ldr	r4, [pc, #116]	; (e90c <am_hal_pwrctrl_low_power_init+0x88>)
    e896:	69a3      	ldr	r3, [r4, #24]
    e898:	05db      	lsls	r3, r3, #23
    e89a:	d502      	bpl.n	e8a2 <am_hal_pwrctrl_low_power_init+0x1e>
    e89c:	2000      	movs	r0, #0
    e89e:	b003      	add	sp, #12
    e8a0:	bd30      	pop	{r4, r5, pc}
    e8a2:	4d1b      	ldr	r5, [pc, #108]	; (e910 <am_hal_pwrctrl_low_power_init+0x8c>)
    e8a4:	491b      	ldr	r1, [pc, #108]	; (e914 <am_hal_pwrctrl_low_power_init+0x90>)
    e8a6:	7e2a      	ldrb	r2, [r5, #24]
    e8a8:	2001      	movs	r0, #1
    e8aa:	4302      	orrs	r2, r0
    e8ac:	2307      	movs	r3, #7
    e8ae:	762a      	strb	r2, [r5, #24]
    e8b0:	9000      	str	r0, [sp, #0]
    e8b2:	461a      	mov	r2, r3
    e8b4:	f242 7010 	movw	r0, #10000	; 0x2710
    e8b8:	f7fe ffde 	bl	d878 <am_hal_flash_delay_status_check>
    e8bc:	b110      	cbz	r0, e8c4 <am_hal_pwrctrl_low_power_init+0x40>
    e8be:	2004      	movs	r0, #4
    e8c0:	b003      	add	sp, #12
    e8c2:	bd30      	pop	{r4, r5, pc}
    e8c4:	6823      	ldr	r3, [r4, #0]
    e8c6:	f043 0301 	orr.w	r3, r3, #1
    e8ca:	6023      	str	r3, [r4, #0]
    e8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e8d2:	6263      	str	r3, [r4, #36]	; 0x24
    e8d4:	68eb      	ldr	r3, [r5, #12]
    e8d6:	b2db      	uxtb	r3, r3
    e8d8:	2b11      	cmp	r3, #17
    e8da:	d1df      	bne.n	e89c <am_hal_pwrctrl_low_power_init+0x18>
    e8dc:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e8e0:	f360 5356 	bfi	r3, r0, #21, #2
    e8e4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e8e8:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e8ec:	220f      	movs	r2, #15
    e8ee:	f362 138b 	bfi	r3, r2, #6, #6
    e8f2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e8f6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e8fa:	f362 0305 	bfi	r3, r2, #0, #6
    e8fe:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e902:	e7cc      	b.n	e89e <am_hal_pwrctrl_low_power_init+0x1a>
    e904:	10001130 	.word	0x10001130
    e908:	4ffff000 	.word	0x4ffff000
    e90c:	40021000 	.word	0x40021000
    e910:	40020000 	.word	0x40020000
    e914:	40020018 	.word	0x40020018

0000e918 <am_hal_rtc_osc_select>:
    e918:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e91c:	2801      	cmp	r0, #1
    e91e:	68d3      	ldr	r3, [r2, #12]
    e920:	bf0c      	ite	eq
    e922:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    e926:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e92a:	60d3      	str	r3, [r2, #12]
    e92c:	4770      	bx	lr
    e92e:	bf00      	nop

0000e930 <am_hal_rtc_osc_disable>:
    e930:	4a03      	ldr	r2, [pc, #12]	; (e940 <am_hal_rtc_osc_disable+0x10>)
    e932:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e936:	f043 0310 	orr.w	r3, r3, #16
    e93a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e93e:	4770      	bx	lr
    e940:	40004200 	.word	0x40004200

0000e944 <am_hal_uart_initialize>:
    e944:	2801      	cmp	r0, #1
    e946:	d901      	bls.n	e94c <am_hal_uart_initialize+0x8>
    e948:	2005      	movs	r0, #5
    e94a:	4770      	bx	lr
    e94c:	b169      	cbz	r1, e96a <am_hal_uart_initialize+0x26>
    e94e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e950:	2264      	movs	r2, #100	; 0x64
    e952:	4e0e      	ldr	r6, [pc, #56]	; (e98c <am_hal_uart_initialize+0x48>)
    e954:	fb02 f200 	mul.w	r2, r2, r0
    e958:	18b4      	adds	r4, r6, r2
    e95a:	4603      	mov	r3, r0
    e95c:	78e0      	ldrb	r0, [r4, #3]
    e95e:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e962:	b2fd      	uxtb	r5, r7
    e964:	b11d      	cbz	r5, e96e <am_hal_uart_initialize+0x2a>
    e966:	2007      	movs	r0, #7
    e968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e96a:	2006      	movs	r0, #6
    e96c:	4770      	bx	lr
    e96e:	f040 0001 	orr.w	r0, r0, #1
    e972:	70e0      	strb	r0, [r4, #3]
    e974:	58b0      	ldr	r0, [r6, r2]
    e976:	f8df e018 	ldr.w	lr, [pc, #24]	; e990 <am_hal_uart_initialize+0x4c>
    e97a:	f36e 0017 	bfi	r0, lr, #0, #24
    e97e:	50b0      	str	r0, [r6, r2]
    e980:	6263      	str	r3, [r4, #36]	; 0x24
    e982:	7127      	strb	r7, [r4, #4]
    e984:	6625      	str	r5, [r4, #96]	; 0x60
    e986:	4628      	mov	r0, r5
    e988:	600c      	str	r4, [r1, #0]
    e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e98c:	10004684 	.word	0x10004684
    e990:	00ea9e06 	.word	0x00ea9e06

0000e994 <am_hal_uart_power_control>:
    e994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e998:	6804      	ldr	r4, [r0, #0]
    e99a:	4b36      	ldr	r3, [pc, #216]	; (ea74 <am_hal_uart_power_control+0xe0>)
    e99c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e9a0:	429c      	cmp	r4, r3
    e9a2:	b083      	sub	sp, #12
    e9a4:	d003      	beq.n	e9ae <am_hal_uart_power_control+0x1a>
    e9a6:	2002      	movs	r0, #2
    e9a8:	b003      	add	sp, #12
    e9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e9ae:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e9b0:	4605      	mov	r5, r0
    e9b2:	f107 0008 	add.w	r0, r7, #8
    e9b6:	4691      	mov	r9, r2
    e9b8:	460e      	mov	r6, r1
    e9ba:	fa5f f880 	uxtb.w	r8, r0
    e9be:	b181      	cbz	r1, e9e2 <am_hal_uart_power_control+0x4e>
    e9c0:	2902      	cmp	r1, #2
    e9c2:	d80c      	bhi.n	e9de <am_hal_uart_power_control+0x4a>
    e9c4:	b992      	cbnz	r2, e9ec <am_hal_uart_power_control+0x58>
    e9c6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9ca:	371c      	adds	r7, #28
    e9cc:	033f      	lsls	r7, r7, #12
    e9ce:	f04f 33ff 	mov.w	r3, #4294967295
    e9d2:	647b      	str	r3, [r7, #68]	; 0x44
    e9d4:	4640      	mov	r0, r8
    e9d6:	f7ff ff29 	bl	e82c <am_hal_pwrctrl_periph_disable>
    e9da:	2000      	movs	r0, #0
    e9dc:	e7e4      	b.n	e9a8 <am_hal_uart_power_control+0x14>
    e9de:	2006      	movs	r0, #6
    e9e0:	e7e2      	b.n	e9a8 <am_hal_uart_power_control+0x14>
    e9e2:	b322      	cbz	r2, ea2e <am_hal_uart_power_control+0x9a>
    e9e4:	792b      	ldrb	r3, [r5, #4]
    e9e6:	bb3b      	cbnz	r3, ea38 <am_hal_uart_power_control+0xa4>
    e9e8:	2007      	movs	r0, #7
    e9ea:	e7dd      	b.n	e9a8 <am_hal_uart_power_control+0x14>
    e9ec:	f7ff f8fa 	bl	dbe4 <am_hal_interrupt_master_disable>
    e9f0:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e9f4:	331c      	adds	r3, #28
    e9f6:	031b      	lsls	r3, r3, #12
    e9f8:	9001      	str	r0, [sp, #4]
    e9fa:	6a1a      	ldr	r2, [r3, #32]
    e9fc:	60aa      	str	r2, [r5, #8]
    e9fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ea00:	60ea      	str	r2, [r5, #12]
    ea02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ea04:	612a      	str	r2, [r5, #16]
    ea06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ea08:	616a      	str	r2, [r5, #20]
    ea0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ea0c:	61aa      	str	r2, [r5, #24]
    ea0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ea10:	61ea      	str	r2, [r5, #28]
    ea12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ea14:	622b      	str	r3, [r5, #32]
    ea16:	2301      	movs	r3, #1
    ea18:	712b      	strb	r3, [r5, #4]
    ea1a:	9801      	ldr	r0, [sp, #4]
    ea1c:	f7ff f8e6 	bl	dbec <am_hal_interrupt_master_set>
    ea20:	682b      	ldr	r3, [r5, #0]
    ea22:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea26:	42a3      	cmp	r3, r4
    ea28:	d1d4      	bne.n	e9d4 <am_hal_uart_power_control+0x40>
    ea2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ea2c:	e7cb      	b.n	e9c6 <am_hal_uart_power_control+0x32>
    ea2e:	4640      	mov	r0, r8
    ea30:	f7ff fed2 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    ea34:	4648      	mov	r0, r9
    ea36:	e7b7      	b.n	e9a8 <am_hal_uart_power_control+0x14>
    ea38:	4640      	mov	r0, r8
    ea3a:	f7ff fecd 	bl	e7d8 <am_hal_pwrctrl_periph_enable>
    ea3e:	f7ff f8d1 	bl	dbe4 <am_hal_interrupt_master_disable>
    ea42:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    ea46:	331c      	adds	r3, #28
    ea48:	031b      	lsls	r3, r3, #12
    ea4a:	68aa      	ldr	r2, [r5, #8]
    ea4c:	9000      	str	r0, [sp, #0]
    ea4e:	621a      	str	r2, [r3, #32]
    ea50:	68ea      	ldr	r2, [r5, #12]
    ea52:	625a      	str	r2, [r3, #36]	; 0x24
    ea54:	692a      	ldr	r2, [r5, #16]
    ea56:	629a      	str	r2, [r3, #40]	; 0x28
    ea58:	696a      	ldr	r2, [r5, #20]
    ea5a:	62da      	str	r2, [r3, #44]	; 0x2c
    ea5c:	69aa      	ldr	r2, [r5, #24]
    ea5e:	631a      	str	r2, [r3, #48]	; 0x30
    ea60:	69ea      	ldr	r2, [r5, #28]
    ea62:	635a      	str	r2, [r3, #52]	; 0x34
    ea64:	6a2a      	ldr	r2, [r5, #32]
    ea66:	639a      	str	r2, [r3, #56]	; 0x38
    ea68:	9800      	ldr	r0, [sp, #0]
    ea6a:	712e      	strb	r6, [r5, #4]
    ea6c:	f7ff f8be 	bl	dbec <am_hal_interrupt_master_set>
    ea70:	4630      	mov	r0, r6
    ea72:	e799      	b.n	e9a8 <am_hal_uart_power_control+0x14>
    ea74:	01ea9e06 	.word	0x01ea9e06

0000ea78 <am_hal_uart_configure>:
    ea78:	6803      	ldr	r3, [r0, #0]
    ea7a:	4a7a      	ldr	r2, [pc, #488]	; (ec64 <am_hal_uart_configure+0x1ec>)
    ea7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea80:	4293      	cmp	r3, r2
    ea82:	d001      	beq.n	ea88 <am_hal_uart_configure+0x10>
    ea84:	2002      	movs	r0, #2
    ea86:	4770      	bx	lr
    ea88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ea8e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea92:	351c      	adds	r5, #28
    ea94:	032d      	lsls	r5, r5, #12
    ea96:	2700      	movs	r7, #0
    ea98:	b084      	sub	sp, #16
    ea9a:	632f      	str	r7, [r5, #48]	; 0x30
    ea9c:	460e      	mov	r6, r1
    ea9e:	4604      	mov	r4, r0
    eaa0:	f7ff f8a0 	bl	dbe4 <am_hal_interrupt_master_disable>
    eaa4:	9001      	str	r0, [sp, #4]
    eaa6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eaa8:	f043 0308 	orr.w	r3, r3, #8
    eaac:	862b      	strh	r3, [r5, #48]	; 0x30
    eaae:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eab0:	2201      	movs	r2, #1
    eab2:	f362 1306 	bfi	r3, r2, #4, #3
    eab6:	862b      	strh	r3, [r5, #48]	; 0x30
    eab8:	9801      	ldr	r0, [sp, #4]
    eaba:	f7ff f897 	bl	dbec <am_hal_interrupt_master_set>
    eabe:	f7ff f891 	bl	dbe4 <am_hal_interrupt_master_disable>
    eac2:	9002      	str	r0, [sp, #8]
    eac4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eac6:	f367 0300 	bfi	r3, r7, #0, #1
    eaca:	862b      	strh	r3, [r5, #48]	; 0x30
    eacc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eace:	f367 2349 	bfi	r3, r7, #9, #1
    ead2:	862b      	strh	r3, [r5, #48]	; 0x30
    ead4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ead6:	f367 2308 	bfi	r3, r7, #8, #1
    eada:	862b      	strh	r3, [r5, #48]	; 0x30
    eadc:	9802      	ldr	r0, [sp, #8]
    eade:	f7ff f885 	bl	dbec <am_hal_interrupt_master_set>
    eae2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    eae4:	f3c3 1302 	ubfx	r3, r3, #4, #3
    eae8:	3b01      	subs	r3, #1
    eaea:	2b03      	cmp	r3, #3
    eaec:	d854      	bhi.n	eb98 <am_hal_uart_configure+0x120>
    eaee:	e8df f003 	tbb	[pc, r3]
    eaf2:	020e      	.short	0x020e
    eaf4:	1114      	.short	0x1114
    eaf6:	495c      	ldr	r1, [pc, #368]	; (ec68 <am_hal_uart_configure+0x1f0>)
    eaf8:	485c      	ldr	r0, [pc, #368]	; (ec6c <am_hal_uart_configure+0x1f4>)
    eafa:	6832      	ldr	r2, [r6, #0]
    eafc:	0112      	lsls	r2, r2, #4
    eafe:	fbb0 f3f2 	udiv	r3, r0, r2
    eb02:	b96b      	cbnz	r3, eb20 <am_hal_uart_configure+0xa8>
    eb04:	485a      	ldr	r0, [pc, #360]	; (ec70 <am_hal_uart_configure+0x1f8>)
    eb06:	6623      	str	r3, [r4, #96]	; 0x60
    eb08:	b004      	add	sp, #16
    eb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb0e:	4959      	ldr	r1, [pc, #356]	; (ec74 <am_hal_uart_configure+0x1fc>)
    eb10:	4859      	ldr	r0, [pc, #356]	; (ec78 <am_hal_uart_configure+0x200>)
    eb12:	e7f2      	b.n	eafa <am_hal_uart_configure+0x82>
    eb14:	4959      	ldr	r1, [pc, #356]	; (ec7c <am_hal_uart_configure+0x204>)
    eb16:	485a      	ldr	r0, [pc, #360]	; (ec80 <am_hal_uart_configure+0x208>)
    eb18:	e7ef      	b.n	eafa <am_hal_uart_configure+0x82>
    eb1a:	495a      	ldr	r1, [pc, #360]	; (ec84 <am_hal_uart_configure+0x20c>)
    eb1c:	485a      	ldr	r0, [pc, #360]	; (ec88 <am_hal_uart_configure+0x210>)
    eb1e:	e7ec      	b.n	eafa <am_hal_uart_configure+0x82>
    eb20:	fbb1 f2f2 	udiv	r2, r1, r2
    eb24:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    eb28:	626b      	str	r3, [r5, #36]	; 0x24
    eb2a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    eb2e:	626b      	str	r3, [r5, #36]	; 0x24
    eb30:	fbb0 f0f1 	udiv	r0, r0, r1
    eb34:	62aa      	str	r2, [r5, #40]	; 0x28
    eb36:	6620      	str	r0, [r4, #96]	; 0x60
    eb38:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eb3a:	f36f 338e 	bfc	r3, #14, #1
    eb3e:	862b      	strh	r3, [r5, #48]	; 0x30
    eb40:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eb42:	f36f 33cf 	bfc	r3, #15, #1
    eb46:	862b      	strh	r3, [r5, #48]	; 0x30
    eb48:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    eb4a:	6933      	ldr	r3, [r6, #16]
    eb4c:	4313      	orrs	r3, r2
    eb4e:	632b      	str	r3, [r5, #48]	; 0x30
    eb50:	6973      	ldr	r3, [r6, #20]
    eb52:	636b      	str	r3, [r5, #52]	; 0x34
    eb54:	6871      	ldr	r1, [r6, #4]
    eb56:	68b3      	ldr	r3, [r6, #8]
    eb58:	68f2      	ldr	r2, [r6, #12]
    eb5a:	430b      	orrs	r3, r1
    eb5c:	f043 0310 	orr.w	r3, r3, #16
    eb60:	4313      	orrs	r3, r2
    eb62:	62eb      	str	r3, [r5, #44]	; 0x2c
    eb64:	f7ff f83e 	bl	dbe4 <am_hal_interrupt_master_disable>
    eb68:	9003      	str	r0, [sp, #12]
    eb6a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eb6c:	f043 0301 	orr.w	r3, r3, #1
    eb70:	862b      	strh	r3, [r5, #48]	; 0x30
    eb72:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eb74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    eb78:	862b      	strh	r3, [r5, #48]	; 0x30
    eb7a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eb7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    eb80:	862b      	strh	r3, [r5, #48]	; 0x30
    eb82:	9803      	ldr	r0, [sp, #12]
    eb84:	f7ff f832 	bl	dbec <am_hal_interrupt_master_set>
    eb88:	6825      	ldr	r5, [r4, #0]
    eb8a:	4b36      	ldr	r3, [pc, #216]	; (ec64 <am_hal_uart_configure+0x1ec>)
    eb8c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    eb90:	429d      	cmp	r5, r3
    eb92:	d005      	beq.n	eba0 <am_hal_uart_configure+0x128>
    eb94:	2000      	movs	r0, #0
    eb96:	e7b7      	b.n	eb08 <am_hal_uart_configure+0x90>
    eb98:	2300      	movs	r3, #0
    eb9a:	6623      	str	r3, [r4, #96]	; 0x60
    eb9c:	483b      	ldr	r0, [pc, #236]	; (ec8c <am_hal_uart_configure+0x214>)
    eb9e:	e7b3      	b.n	eb08 <am_hal_uart_configure+0x90>
    eba0:	69b1      	ldr	r1, [r6, #24]
    eba2:	6a37      	ldr	r7, [r6, #32]
    eba4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    eba8:	b109      	cbz	r1, ebae <am_hal_uart_configure+0x136>
    ebaa:	69f3      	ldr	r3, [r6, #28]
    ebac:	bb3b      	cbnz	r3, ebfe <am_hal_uart_configure+0x186>
    ebae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ebb0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ebb4:	f103 021c 	add.w	r2, r3, #28
    ebb8:	0312      	lsls	r2, r2, #12
    ebba:	2100      	movs	r1, #0
    ebbc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    ebc0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    ebc2:	f021 0120 	bic.w	r1, r1, #32
    ebc6:	6391      	str	r1, [r2, #56]	; 0x38
    ebc8:	b1b7      	cbz	r7, ebf8 <am_hal_uart_configure+0x180>
    ebca:	f1b8 0f00 	cmp.w	r8, #0
    ebce:	d12e      	bne.n	ec2e <am_hal_uart_configure+0x1b6>
    ebd0:	6823      	ldr	r3, [r4, #0]
    ebd2:	4a24      	ldr	r2, [pc, #144]	; (ec64 <am_hal_uart_configure+0x1ec>)
    ebd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ebd8:	2100      	movs	r1, #0
    ebda:	4293      	cmp	r3, r2
    ebdc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    ebe0:	d1d8      	bne.n	eb94 <am_hal_uart_configure+0x11c>
    ebe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ebe4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ebe8:	331c      	adds	r3, #28
    ebea:	031b      	lsls	r3, r3, #12
    ebec:	2000      	movs	r0, #0
    ebee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ebf0:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    ebf4:	639a      	str	r2, [r3, #56]	; 0x38
    ebf6:	e787      	b.n	eb08 <am_hal_uart_configure+0x90>
    ebf8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    ebfc:	e7f4      	b.n	ebe8 <am_hal_uart_configure+0x170>
    ebfe:	2201      	movs	r2, #1
    ec00:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    ec04:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ec08:	f000 fb00 	bl	f20c <am_hal_queue_init>
    ec0c:	6823      	ldr	r3, [r4, #0]
    ec0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec12:	42ab      	cmp	r3, r5
    ec14:	d1be      	bne.n	eb94 <am_hal_uart_configure+0x11c>
    ec16:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ec18:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ec1c:	331c      	adds	r3, #28
    ec1e:	031b      	lsls	r3, r3, #12
    ec20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec22:	f042 0220 	orr.w	r2, r2, #32
    ec26:	639a      	str	r2, [r3, #56]	; 0x38
    ec28:	2f00      	cmp	r7, #0
    ec2a:	d1ce      	bne.n	ebca <am_hal_uart_configure+0x152>
    ec2c:	e7d0      	b.n	ebd0 <am_hal_uart_configure+0x158>
    ec2e:	2201      	movs	r2, #1
    ec30:	4643      	mov	r3, r8
    ec32:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    ec36:	4639      	mov	r1, r7
    ec38:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ec3c:	f000 fae6 	bl	f20c <am_hal_queue_init>
    ec40:	6823      	ldr	r3, [r4, #0]
    ec42:	4a08      	ldr	r2, [pc, #32]	; (ec64 <am_hal_uart_configure+0x1ec>)
    ec44:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec48:	4293      	cmp	r3, r2
    ec4a:	d1a3      	bne.n	eb94 <am_hal_uart_configure+0x11c>
    ec4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ec4e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ec52:	331c      	adds	r3, #28
    ec54:	031b      	lsls	r3, r3, #12
    ec56:	2000      	movs	r0, #0
    ec58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec5a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    ec5e:	639a      	str	r2, [r3, #56]	; 0x38
    ec60:	e752      	b.n	eb08 <am_hal_uart_configure+0x90>
    ec62:	bf00      	nop
    ec64:	01ea9e06 	.word	0x01ea9e06
    ec68:	2dc6c000 	.word	0x2dc6c000
    ec6c:	00b71b00 	.word	0x00b71b00
    ec70:	08000003 	.word	0x08000003
    ec74:	5b8d8000 	.word	0x5b8d8000
    ec78:	016e3600 	.word	0x016e3600
    ec7c:	0b71b000 	.word	0x0b71b000
    ec80:	002dc6c0 	.word	0x002dc6c0
    ec84:	16e36000 	.word	0x16e36000
    ec88:	005b8d80 	.word	0x005b8d80
    ec8c:	08000002 	.word	0x08000002

0000ec90 <am_hal_uart_transfer>:
    ec90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec94:	680f      	ldr	r7, [r1, #0]
    ec96:	b091      	sub	sp, #68	; 0x44
    ec98:	4605      	mov	r5, r0
    ec9a:	b13f      	cbz	r7, ecac <am_hal_uart_transfer+0x1c>
    ec9c:	2f01      	cmp	r7, #1
    ec9e:	bf18      	it	ne
    eca0:	2707      	movne	r7, #7
    eca2:	d024      	beq.n	ecee <am_hal_uart_transfer+0x5e>
    eca4:	4638      	mov	r0, r7
    eca6:	b011      	add	sp, #68	; 0x44
    eca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecac:	f8d1 900c 	ldr.w	r9, [r1, #12]
    ecb0:	690b      	ldr	r3, [r1, #16]
    ecb2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    ecb6:	688e      	ldr	r6, [r1, #8]
    ecb8:	9300      	str	r3, [sp, #0]
    ecba:	f1b9 0f00 	cmp.w	r9, #0
    ecbe:	d031      	beq.n	ed24 <am_hal_uart_transfer+0x94>
    ecc0:	2e00      	cmp	r6, #0
    ecc2:	f000 819c 	beq.w	effe <am_hal_uart_transfer+0x36e>
    ecc6:	2800      	cmp	r0, #0
    ecc8:	f000 8097 	beq.w	edfa <am_hal_uart_transfer+0x16a>
    eccc:	6803      	ldr	r3, [r0, #0]
    ecce:	4aa9      	ldr	r2, [pc, #676]	; (ef74 <am_hal_uart_transfer+0x2e4>)
    ecd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ecd4:	4293      	cmp	r3, r2
    ecd6:	f000 8092 	beq.w	edfe <am_hal_uart_transfer+0x16e>
    ecda:	46b8      	mov	r8, r7
    ecdc:	9b00      	ldr	r3, [sp, #0]
    ecde:	b10b      	cbz	r3, ece4 <am_hal_uart_transfer+0x54>
    ece0:	f8c3 8000 	str.w	r8, [r3]
    ece4:	2702      	movs	r7, #2
    ece6:	4638      	mov	r0, r7
    ece8:	b011      	add	sp, #68	; 0x44
    ecea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecee:	1d0b      	adds	r3, r1, #4
    ecf0:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    ecf4:	f1b9 0f00 	cmp.w	r9, #0
    ecf8:	d043      	beq.n	ed82 <am_hal_uart_transfer+0xf2>
    ecfa:	2f00      	cmp	r7, #0
    ecfc:	f000 8185 	beq.w	f00a <am_hal_uart_transfer+0x37a>
    ed00:	2800      	cmp	r0, #0
    ed02:	f000 80eb 	beq.w	eedc <am_hal_uart_transfer+0x24c>
    ed06:	6802      	ldr	r2, [r0, #0]
    ed08:	499a      	ldr	r1, [pc, #616]	; (ef74 <am_hal_uart_transfer+0x2e4>)
    ed0a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ed0e:	428a      	cmp	r2, r1
    ed10:	f000 80e7 	beq.w	eee2 <am_hal_uart_transfer+0x252>
    ed14:	2600      	movs	r6, #0
    ed16:	2702      	movs	r7, #2
    ed18:	f1bb 0f00 	cmp.w	fp, #0
    ed1c:	d0c2      	beq.n	eca4 <am_hal_uart_transfer+0x14>
    ed1e:	f8cb 6000 	str.w	r6, [fp]
    ed22:	e7bf      	b.n	eca4 <am_hal_uart_transfer+0x14>
    ed24:	2800      	cmp	r0, #0
    ed26:	d0dd      	beq.n	ece4 <am_hal_uart_transfer+0x54>
    ed28:	6803      	ldr	r3, [r0, #0]
    ed2a:	4a92      	ldr	r2, [pc, #584]	; (ef74 <am_hal_uart_transfer+0x2e4>)
    ed2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ed30:	4293      	cmp	r3, r2
    ed32:	d1d7      	bne.n	ece4 <am_hal_uart_transfer+0x54>
    ed34:	9b00      	ldr	r3, [sp, #0]
    ed36:	b10b      	cbz	r3, ed3c <am_hal_uart_transfer+0xac>
    ed38:	f8c3 9000 	str.w	r9, [r3]
    ed3c:	b1fe      	cbz	r6, ed7e <am_hal_uart_transfer+0xee>
    ed3e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ed42:	2b00      	cmp	r3, #0
    ed44:	f040 8165 	bne.w	f012 <am_hal_uart_transfer+0x382>
    ed48:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ed4a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ed4e:	311c      	adds	r1, #28
    ed50:	0309      	lsls	r1, r1, #12
    ed52:	698a      	ldr	r2, [r1, #24]
    ed54:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ed58:	2a00      	cmp	r2, #0
    ed5a:	f040 818d 	bne.w	f078 <am_hal_uart_transfer+0x3e8>
    ed5e:	f10a 33ff 	add.w	r3, sl, #4294967295
    ed62:	e003      	b.n	ed6c <am_hal_uart_transfer+0xdc>
    ed64:	6988      	ldr	r0, [r1, #24]
    ed66:	0680      	lsls	r0, r0, #26
    ed68:	f100 8151 	bmi.w	f00e <am_hal_uart_transfer+0x37e>
    ed6c:	3201      	adds	r2, #1
    ed6e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    ed72:	6008      	str	r0, [r1, #0]
    ed74:	4296      	cmp	r6, r2
    ed76:	d1f5      	bne.n	ed64 <am_hal_uart_transfer+0xd4>
    ed78:	9b00      	ldr	r3, [sp, #0]
    ed7a:	b103      	cbz	r3, ed7e <am_hal_uart_transfer+0xee>
    ed7c:	601e      	str	r6, [r3, #0]
    ed7e:	2700      	movs	r7, #0
    ed80:	e790      	b.n	eca4 <am_hal_uart_transfer+0x14>
    ed82:	2800      	cmp	r0, #0
    ed84:	d0ae      	beq.n	ece4 <am_hal_uart_transfer+0x54>
    ed86:	6802      	ldr	r2, [r0, #0]
    ed88:	497a      	ldr	r1, [pc, #488]	; (ef74 <am_hal_uart_transfer+0x2e4>)
    ed8a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ed8e:	428a      	cmp	r2, r1
    ed90:	d1a8      	bne.n	ece4 <am_hal_uart_transfer+0x54>
    ed92:	f1bb 0f00 	cmp.w	fp, #0
    ed96:	d001      	beq.n	ed9c <am_hal_uart_transfer+0x10c>
    ed98:	f8cb 9000 	str.w	r9, [fp]
    ed9c:	2f00      	cmp	r7, #0
    ed9e:	d0ee      	beq.n	ed7e <am_hal_uart_transfer+0xee>
    eda0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    eda4:	2c00      	cmp	r4, #0
    eda6:	f040 816c 	bne.w	f082 <am_hal_uart_transfer+0x3f2>
    edaa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    edac:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    edb0:	321c      	adds	r2, #28
    edb2:	0312      	lsls	r2, r2, #12
    edb4:	6990      	ldr	r0, [r2, #24]
    edb6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    edba:	2800      	cmp	r0, #0
    edbc:	f040 819d 	bne.w	f0fa <am_hal_uart_transfer+0x46a>
    edc0:	6811      	ldr	r1, [r2, #0]
    edc2:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    edc6:	bf08      	it	eq
    edc8:	f103 33ff 	addeq.w	r3, r3, #4294967295
    edcc:	d008      	beq.n	ede0 <am_hal_uart_transfer+0x150>
    edce:	e190      	b.n	f0f2 <am_hal_uart_transfer+0x462>
    edd0:	6991      	ldr	r1, [r2, #24]
    edd2:	06c8      	lsls	r0, r1, #27
    edd4:	d409      	bmi.n	edea <am_hal_uart_transfer+0x15a>
    edd6:	6811      	ldr	r1, [r2, #0]
    edd8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    eddc:	f040 814e 	bne.w	f07c <am_hal_uart_transfer+0x3ec>
    ede0:	3401      	adds	r4, #1
    ede2:	42a7      	cmp	r7, r4
    ede4:	f803 1f01 	strb.w	r1, [r3, #1]!
    ede8:	d1f2      	bne.n	edd0 <am_hal_uart_transfer+0x140>
    edea:	2700      	movs	r7, #0
    edec:	f1bb 0f00 	cmp.w	fp, #0
    edf0:	f43f af58 	beq.w	eca4 <am_hal_uart_transfer+0x14>
    edf4:	f8cb 4000 	str.w	r4, [fp]
    edf8:	e754      	b.n	eca4 <am_hal_uart_transfer+0x14>
    edfa:	4680      	mov	r8, r0
    edfc:	e76e      	b.n	ecdc <am_hal_uart_transfer+0x4c>
    edfe:	9301      	str	r3, [sp, #4]
    ee00:	4651      	mov	r1, sl
    ee02:	46bb      	mov	fp, r7
    ee04:	46b8      	mov	r8, r7
    ee06:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ee0a:	b9f2      	cbnz	r2, ee4a <am_hal_uart_transfer+0x1ba>
    ee0c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ee0e:	b19e      	cbz	r6, ee38 <am_hal_uart_transfer+0x1a8>
    ee10:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ee14:	321c      	adds	r2, #28
    ee16:	0312      	lsls	r2, r2, #12
    ee18:	3901      	subs	r1, #1
    ee1a:	6994      	ldr	r4, [r2, #24]
    ee1c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    ee20:	b11c      	cbz	r4, ee2a <am_hal_uart_transfer+0x19a>
    ee22:	e047      	b.n	eeb4 <am_hal_uart_transfer+0x224>
    ee24:	6993      	ldr	r3, [r2, #24]
    ee26:	069b      	lsls	r3, r3, #26
    ee28:	d441      	bmi.n	eeae <am_hal_uart_transfer+0x21e>
    ee2a:	3401      	adds	r4, #1
    ee2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ee30:	6013      	str	r3, [r2, #0]
    ee32:	42b4      	cmp	r4, r6
    ee34:	d1f6      	bne.n	ee24 <am_hal_uart_transfer+0x194>
    ee36:	44a0      	add	r8, r4
    ee38:	9b00      	ldr	r3, [sp, #0]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d09f      	beq.n	ed7e <am_hal_uart_transfer+0xee>
    ee3e:	4638      	mov	r0, r7
    ee40:	f8c3 8000 	str.w	r8, [r3]
    ee44:	b011      	add	sp, #68	; 0x44
    ee46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee4a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    ee4c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    ee4e:	1b14      	subs	r4, r2, r4
    ee50:	42b4      	cmp	r4, r6
    ee52:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    ee56:	bf28      	it	cs
    ee58:	4634      	movcs	r4, r6
    ee5a:	4622      	mov	r2, r4
    ee5c:	4618      	mov	r0, r3
    ee5e:	9302      	str	r3, [sp, #8]
    ee60:	f000 f9e0 	bl	f224 <am_hal_queue_item_add>
    ee64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ee66:	9303      	str	r3, [sp, #12]
    ee68:	f7fe febc 	bl	dbe4 <am_hal_interrupt_master_disable>
    ee6c:	9b03      	ldr	r3, [sp, #12]
    ee6e:	9008      	str	r0, [sp, #32]
    ee70:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ee74:	331c      	adds	r3, #28
    ee76:	031b      	lsls	r3, r3, #12
    ee78:	9303      	str	r3, [sp, #12]
    ee7a:	e00d      	b.n	ee98 <am_hal_uart_transfer+0x208>
    ee7c:	f000 fa0a 	bl	f294 <am_hal_queue_item_get>
    ee80:	b190      	cbz	r0, eea8 <am_hal_uart_transfer+0x218>
    ee82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ee84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ee88:	331c      	adds	r3, #28
    ee8a:	031b      	lsls	r3, r3, #12
    ee8c:	699a      	ldr	r2, [r3, #24]
    ee8e:	0692      	lsls	r2, r2, #26
    ee90:	bf5c      	itt	pl
    ee92:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    ee96:	601a      	strpl	r2, [r3, #0]
    ee98:	9b03      	ldr	r3, [sp, #12]
    ee9a:	9802      	ldr	r0, [sp, #8]
    ee9c:	699b      	ldr	r3, [r3, #24]
    ee9e:	069b      	lsls	r3, r3, #26
    eea0:	f04f 0201 	mov.w	r2, #1
    eea4:	a907      	add	r1, sp, #28
    eea6:	d5e9      	bpl.n	ee7c <am_hal_uart_transfer+0x1ec>
    eea8:	9808      	ldr	r0, [sp, #32]
    eeaa:	f7fe fe9f 	bl	dbec <am_hal_interrupt_master_set>
    eeae:	1b36      	subs	r6, r6, r4
    eeb0:	44a0      	add	r8, r4
    eeb2:	d0c1      	beq.n	ee38 <am_hal_uart_transfer+0x1a8>
    eeb4:	2001      	movs	r0, #1
    eeb6:	f7fe fcdb 	bl	d870 <am_hal_flash_delay>
    eeba:	f1b9 3fff 	cmp.w	r9, #4294967295
    eebe:	d001      	beq.n	eec4 <am_hal_uart_transfer+0x234>
    eec0:	f10b 0b01 	add.w	fp, fp, #1
    eec4:	45d9      	cmp	r9, fp
    eec6:	d9b7      	bls.n	ee38 <am_hal_uart_transfer+0x1a8>
    eec8:	682a      	ldr	r2, [r5, #0]
    eeca:	9b01      	ldr	r3, [sp, #4]
    eecc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eed0:	429a      	cmp	r2, r3
    eed2:	eb0a 0108 	add.w	r1, sl, r8
    eed6:	f47f af01 	bne.w	ecdc <am_hal_uart_transfer+0x4c>
    eeda:	e794      	b.n	ee06 <am_hal_uart_transfer+0x176>
    eedc:	4606      	mov	r6, r0
    eede:	2702      	movs	r7, #2
    eee0:	e71a      	b.n	ed18 <am_hal_uart_transfer+0x88>
    eee2:	9200      	str	r2, [sp, #0]
    eee4:	f100 0248 	add.w	r2, r0, #72	; 0x48
    eee8:	f04f 0a00 	mov.w	sl, #0
    eeec:	9202      	str	r2, [sp, #8]
    eeee:	465a      	mov	r2, fp
    eef0:	4698      	mov	r8, r3
    eef2:	469b      	mov	fp, r3
    eef4:	4656      	mov	r6, sl
    eef6:	4613      	mov	r3, r2
    eef8:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    eefc:	2a00      	cmp	r2, #0
    eefe:	d152      	bne.n	efa6 <am_hal_uart_transfer+0x316>
    ef00:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ef02:	b3a7      	cbz	r7, ef6e <am_hal_uart_transfer+0x2de>
    ef04:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ef08:	311c      	adds	r1, #28
    ef0a:	0309      	lsls	r1, r1, #12
    ef0c:	698a      	ldr	r2, [r1, #24]
    ef0e:	06d0      	lsls	r0, r2, #27
    ef10:	d432      	bmi.n	ef78 <am_hal_uart_transfer+0x2e8>
    ef12:	680a      	ldr	r2, [r1, #0]
    ef14:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    ef18:	f040 80aa 	bne.w	f070 <am_hal_uart_transfer+0x3e0>
    ef1c:	f108 38ff 	add.w	r8, r8, #4294967295
    ef20:	e006      	b.n	ef30 <am_hal_uart_transfer+0x2a0>
    ef22:	698a      	ldr	r2, [r1, #24]
    ef24:	06d2      	lsls	r2, r2, #27
    ef26:	d41f      	bmi.n	ef68 <am_hal_uart_transfer+0x2d8>
    ef28:	680a      	ldr	r2, [r1, #0]
    ef2a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ef2e:	d161      	bne.n	eff4 <am_hal_uart_transfer+0x364>
    ef30:	3401      	adds	r4, #1
    ef32:	42bc      	cmp	r4, r7
    ef34:	f808 2f01 	strb.w	r2, [r8, #1]!
    ef38:	d1f3      	bne.n	ef22 <am_hal_uart_transfer+0x292>
    ef3a:	469b      	mov	fp, r3
    ef3c:	4426      	add	r6, r4
    ef3e:	f1bb 0f00 	cmp.w	fp, #0
    ef42:	f43f af1c 	beq.w	ed7e <am_hal_uart_transfer+0xee>
    ef46:	f8cb 6000 	str.w	r6, [fp]
    ef4a:	2700      	movs	r7, #0
    ef4c:	e6aa      	b.n	eca4 <am_hal_uart_transfer+0x14>
    ef4e:	9807      	ldr	r0, [sp, #28]
    ef50:	f7fe fe4c 	bl	dbec <am_hal_interrupt_master_set>
    ef54:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ef56:	9802      	ldr	r0, [sp, #8]
    ef58:	42bc      	cmp	r4, r7
    ef5a:	bf28      	it	cs
    ef5c:	463c      	movcs	r4, r7
    ef5e:	4641      	mov	r1, r8
    ef60:	4622      	mov	r2, r4
    ef62:	f000 f997 	bl	f294 <am_hal_queue_item_get>
    ef66:	9b01      	ldr	r3, [sp, #4]
    ef68:	1b3f      	subs	r7, r7, r4
    ef6a:	4426      	add	r6, r4
    ef6c:	d104      	bne.n	ef78 <am_hal_uart_transfer+0x2e8>
    ef6e:	469b      	mov	fp, r3
    ef70:	e7e5      	b.n	ef3e <am_hal_uart_transfer+0x2ae>
    ef72:	bf00      	nop
    ef74:	01ea9e06 	.word	0x01ea9e06
    ef78:	2001      	movs	r0, #1
    ef7a:	9301      	str	r3, [sp, #4]
    ef7c:	f7fe fc78 	bl	d870 <am_hal_flash_delay>
    ef80:	f1b9 3fff 	cmp.w	r9, #4294967295
    ef84:	9b01      	ldr	r3, [sp, #4]
    ef86:	d001      	beq.n	ef8c <am_hal_uart_transfer+0x2fc>
    ef88:	f10a 0a01 	add.w	sl, sl, #1
    ef8c:	45d1      	cmp	r9, sl
    ef8e:	d9ee      	bls.n	ef6e <am_hal_uart_transfer+0x2de>
    ef90:	682a      	ldr	r2, [r5, #0]
    ef92:	9900      	ldr	r1, [sp, #0]
    ef94:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ef98:	428a      	cmp	r2, r1
    ef9a:	eb0b 0806 	add.w	r8, fp, r6
    ef9e:	d0ab      	beq.n	eef8 <am_hal_uart_transfer+0x268>
    efa0:	469b      	mov	fp, r3
    efa2:	2702      	movs	r7, #2
    efa4:	e6b8      	b.n	ed18 <am_hal_uart_transfer+0x88>
    efa6:	9301      	str	r3, [sp, #4]
    efa8:	f7fe fe1c 	bl	dbe4 <am_hal_interrupt_master_disable>
    efac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    efae:	9007      	str	r0, [sp, #28]
    efb0:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    efb4:	301c      	adds	r0, #28
    efb6:	9b01      	ldr	r3, [sp, #4]
    efb8:	0300      	lsls	r0, r0, #12
    efba:	ac08      	add	r4, sp, #32
    efbc:	2200      	movs	r2, #0
    efbe:	6981      	ldr	r1, [r0, #24]
    efc0:	06c9      	lsls	r1, r1, #27
    efc2:	d409      	bmi.n	efd8 <am_hal_uart_transfer+0x348>
    efc4:	6801      	ldr	r1, [r0, #0]
    efc6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    efca:	f102 0201 	add.w	r2, r2, #1
    efce:	d118      	bne.n	f002 <am_hal_uart_transfer+0x372>
    efd0:	2a20      	cmp	r2, #32
    efd2:	f804 1b01 	strb.w	r1, [r4], #1
    efd6:	d1f2      	bne.n	efbe <am_hal_uart_transfer+0x32e>
    efd8:	a908      	add	r1, sp, #32
    efda:	9802      	ldr	r0, [sp, #8]
    efdc:	9301      	str	r3, [sp, #4]
    efde:	f000 f921 	bl	f224 <am_hal_queue_item_add>
    efe2:	9b01      	ldr	r3, [sp, #4]
    efe4:	2800      	cmp	r0, #0
    efe6:	d1b2      	bne.n	ef4e <am_hal_uart_transfer+0x2be>
    efe8:	4f45      	ldr	r7, [pc, #276]	; (f100 <am_hal_uart_transfer+0x470>)
    efea:	469b      	mov	fp, r3
    efec:	9807      	ldr	r0, [sp, #28]
    efee:	f7fe fdfd 	bl	dbec <am_hal_interrupt_master_set>
    eff2:	e691      	b.n	ed18 <am_hal_uart_transfer+0x88>
    eff4:	469b      	mov	fp, r3
    eff6:	4426      	add	r6, r4
    eff8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    effc:	e68c      	b.n	ed18 <am_hal_uart_transfer+0x88>
    effe:	46b8      	mov	r8, r7
    f000:	e71a      	b.n	ee38 <am_hal_uart_transfer+0x1a8>
    f002:	469b      	mov	fp, r3
    f004:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f008:	e7f0      	b.n	efec <am_hal_uart_transfer+0x35c>
    f00a:	463e      	mov	r6, r7
    f00c:	e797      	b.n	ef3e <am_hal_uart_transfer+0x2ae>
    f00e:	4616      	mov	r6, r2
    f010:	e6b2      	b.n	ed78 <am_hal_uart_transfer+0xe8>
    f012:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f014:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f016:	1a9b      	subs	r3, r3, r2
    f018:	429e      	cmp	r6, r3
    f01a:	bf28      	it	cs
    f01c:	461e      	movcs	r6, r3
    f01e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    f022:	4651      	mov	r1, sl
    f024:	4632      	mov	r2, r6
    f026:	4620      	mov	r0, r4
    f028:	f000 f8fc 	bl	f224 <am_hal_queue_item_add>
    f02c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f02e:	f7fe fdd9 	bl	dbe4 <am_hal_interrupt_master_disable>
    f032:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f036:	371c      	adds	r7, #28
    f038:	033f      	lsls	r7, r7, #12
    f03a:	9005      	str	r0, [sp, #20]
    f03c:	e00d      	b.n	f05a <am_hal_uart_transfer+0x3ca>
    f03e:	f000 f929 	bl	f294 <am_hal_queue_item_get>
    f042:	b188      	cbz	r0, f068 <am_hal_uart_transfer+0x3d8>
    f044:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f046:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f04a:	331c      	adds	r3, #28
    f04c:	031b      	lsls	r3, r3, #12
    f04e:	699a      	ldr	r2, [r3, #24]
    f050:	0692      	lsls	r2, r2, #26
    f052:	bf5c      	itt	pl
    f054:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    f058:	601a      	strpl	r2, [r3, #0]
    f05a:	69bb      	ldr	r3, [r7, #24]
    f05c:	069b      	lsls	r3, r3, #26
    f05e:	f04f 0201 	mov.w	r2, #1
    f062:	a908      	add	r1, sp, #32
    f064:	4620      	mov	r0, r4
    f066:	d5ea      	bpl.n	f03e <am_hal_uart_transfer+0x3ae>
    f068:	9805      	ldr	r0, [sp, #20]
    f06a:	f7fe fdbf 	bl	dbec <am_hal_interrupt_master_set>
    f06e:	e683      	b.n	ed78 <am_hal_uart_transfer+0xe8>
    f070:	469b      	mov	fp, r3
    f072:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f076:	e64f      	b.n	ed18 <am_hal_uart_transfer+0x88>
    f078:	461e      	mov	r6, r3
    f07a:	e67d      	b.n	ed78 <am_hal_uart_transfer+0xe8>
    f07c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f080:	e6b4      	b.n	edec <am_hal_uart_transfer+0x15c>
    f082:	9300      	str	r3, [sp, #0]
    f084:	f7fe fdae 	bl	dbe4 <am_hal_interrupt_master_disable>
    f088:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f08a:	9006      	str	r0, [sp, #24]
    f08c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f090:	321c      	adds	r2, #28
    f092:	0311      	lsls	r1, r2, #12
    f094:	a808      	add	r0, sp, #32
    f096:	2200      	movs	r2, #0
    f098:	9b00      	ldr	r3, [sp, #0]
    f09a:	e009      	b.n	f0b0 <am_hal_uart_transfer+0x420>
    f09c:	680c      	ldr	r4, [r1, #0]
    f09e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    f0a2:	f102 0201 	add.w	r2, r2, #1
    f0a6:	d121      	bne.n	f0ec <am_hal_uart_transfer+0x45c>
    f0a8:	2a20      	cmp	r2, #32
    f0aa:	f800 4b01 	strb.w	r4, [r0], #1
    f0ae:	d002      	beq.n	f0b6 <am_hal_uart_transfer+0x426>
    f0b0:	698c      	ldr	r4, [r1, #24]
    f0b2:	06e4      	lsls	r4, r4, #27
    f0b4:	d5f2      	bpl.n	f09c <am_hal_uart_transfer+0x40c>
    f0b6:	f105 0648 	add.w	r6, r5, #72	; 0x48
    f0ba:	a908      	add	r1, sp, #32
    f0bc:	4630      	mov	r0, r6
    f0be:	9300      	str	r3, [sp, #0]
    f0c0:	f000 f8b0 	bl	f224 <am_hal_queue_item_add>
    f0c4:	b920      	cbnz	r0, f0d0 <am_hal_uart_transfer+0x440>
    f0c6:	4f0e      	ldr	r7, [pc, #56]	; (f100 <am_hal_uart_transfer+0x470>)
    f0c8:	9806      	ldr	r0, [sp, #24]
    f0ca:	f7fe fd8f 	bl	dbec <am_hal_interrupt_master_set>
    f0ce:	e5e9      	b.n	eca4 <am_hal_uart_transfer+0x14>
    f0d0:	9806      	ldr	r0, [sp, #24]
    f0d2:	f7fe fd8b 	bl	dbec <am_hal_interrupt_master_set>
    f0d6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f0d8:	9b00      	ldr	r3, [sp, #0]
    f0da:	42bc      	cmp	r4, r7
    f0dc:	bf28      	it	cs
    f0de:	463c      	movcs	r4, r7
    f0e0:	4619      	mov	r1, r3
    f0e2:	4630      	mov	r0, r6
    f0e4:	4622      	mov	r2, r4
    f0e6:	f000 f8d5 	bl	f294 <am_hal_queue_item_get>
    f0ea:	e67e      	b.n	edea <am_hal_uart_transfer+0x15a>
    f0ec:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f0f0:	e7ea      	b.n	f0c8 <am_hal_uart_transfer+0x438>
    f0f2:	4604      	mov	r4, r0
    f0f4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f0f8:	e678      	b.n	edec <am_hal_uart_transfer+0x15c>
    f0fa:	4627      	mov	r7, r4
    f0fc:	e676      	b.n	edec <am_hal_uart_transfer+0x15c>
    f0fe:	bf00      	nop
    f100:	08000001 	.word	0x08000001

0000f104 <am_hal_cmdq_init>:
    f104:	2807      	cmp	r0, #7
    f106:	d901      	bls.n	f10c <am_hal_cmdq_init+0x8>
    f108:	2005      	movs	r0, #5
    f10a:	4770      	bx	lr
    f10c:	b1c9      	cbz	r1, f142 <am_hal_cmdq_init+0x3e>
    f10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f112:	684c      	ldr	r4, [r1, #4]
    f114:	b194      	cbz	r4, f13c <am_hal_cmdq_init+0x38>
    f116:	b18a      	cbz	r2, f13c <am_hal_cmdq_init+0x38>
    f118:	680e      	ldr	r6, [r1, #0]
    f11a:	2e01      	cmp	r6, #1
    f11c:	d90e      	bls.n	f13c <am_hal_cmdq_init+0x38>
    f11e:	272c      	movs	r7, #44	; 0x2c
    f120:	f8df c09c 	ldr.w	ip, [pc, #156]	; f1c0 <am_hal_cmdq_init+0xbc>
    f124:	fb07 f700 	mul.w	r7, r7, r0
    f128:	eb0c 0507 	add.w	r5, ip, r7
    f12c:	f895 e003 	ldrb.w	lr, [r5, #3]
    f130:	f01e 0301 	ands.w	r3, lr, #1
    f134:	d007      	beq.n	f146 <am_hal_cmdq_init+0x42>
    f136:	2007      	movs	r0, #7
    f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f13c:	2006      	movs	r0, #6
    f13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f142:	2006      	movs	r0, #6
    f144:	4770      	bx	lr
    f146:	f04e 0e01 	orr.w	lr, lr, #1
    f14a:	00f6      	lsls	r6, r6, #3
    f14c:	f363 0e41 	bfi	lr, r3, #1, #1
    f150:	f885 e003 	strb.w	lr, [r5, #3]
    f154:	eb06 0804 	add.w	r8, r6, r4
    f158:	f8df e068 	ldr.w	lr, [pc, #104]	; f1c4 <am_hal_cmdq_init+0xc0>
    f15c:	f8c5 8008 	str.w	r8, [r5, #8]
    f160:	606c      	str	r4, [r5, #4]
    f162:	60ec      	str	r4, [r5, #12]
    f164:	616c      	str	r4, [r5, #20]
    f166:	612c      	str	r4, [r5, #16]
    f168:	61ae      	str	r6, [r5, #24]
    f16a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f16e:	f85c 6007 	ldr.w	r6, [ip, r7]
    f172:	f8df 8054 	ldr.w	r8, [pc, #84]	; f1c8 <am_hal_cmdq_init+0xc4>
    f176:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    f17a:	f368 0617 	bfi	r6, r8, #0, #24
    f17e:	f8d0 e008 	ldr.w	lr, [r0, #8]
    f182:	f84c 6007 	str.w	r6, [ip, r7]
    f186:	6268      	str	r0, [r5, #36]	; 0x24
    f188:	61eb      	str	r3, [r5, #28]
    f18a:	622b      	str	r3, [r5, #32]
    f18c:	f8ce 3000 	str.w	r3, [lr]
    f190:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f192:	7a09      	ldrb	r1, [r1, #8]
    f194:	68c0      	ldr	r0, [r0, #12]
    f196:	6003      	str	r3, [r0, #0]
    f198:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f19a:	6906      	ldr	r6, [r0, #16]
    f19c:	6940      	ldr	r0, [r0, #20]
    f19e:	6837      	ldr	r7, [r6, #0]
    f1a0:	4338      	orrs	r0, r7
    f1a2:	6030      	str	r0, [r6, #0]
    f1a4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f1a6:	6840      	ldr	r0, [r0, #4]
    f1a8:	6004      	str	r4, [r0, #0]
    f1aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f1ac:	0049      	lsls	r1, r1, #1
    f1ae:	6804      	ldr	r4, [r0, #0]
    f1b0:	f001 0102 	and.w	r1, r1, #2
    f1b4:	6021      	str	r1, [r4, #0]
    f1b6:	4618      	mov	r0, r3
    f1b8:	6015      	str	r5, [r2, #0]
    f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1be:	bf00      	nop
    f1c0:	10001134 	.word	0x10001134
    f1c4:	0000f764 	.word	0x0000f764
    f1c8:	00cdcdcd 	.word	0x00cdcdcd

0000f1cc <am_hal_cmdq_enable>:
    f1cc:	4603      	mov	r3, r0
    f1ce:	b128      	cbz	r0, f1dc <am_hal_cmdq_enable+0x10>
    f1d0:	6802      	ldr	r2, [r0, #0]
    f1d2:	490d      	ldr	r1, [pc, #52]	; (f208 <am_hal_cmdq_enable+0x3c>)
    f1d4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f1d8:	428a      	cmp	r2, r1
    f1da:	d001      	beq.n	f1e0 <am_hal_cmdq_enable+0x14>
    f1dc:	2002      	movs	r0, #2
    f1de:	4770      	bx	lr
    f1e0:	78c2      	ldrb	r2, [r0, #3]
    f1e2:	f002 0202 	and.w	r2, r2, #2
    f1e6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f1ea:	b952      	cbnz	r2, f202 <am_hal_cmdq_enable+0x36>
    f1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f1ee:	6811      	ldr	r1, [r2, #0]
    f1f0:	680a      	ldr	r2, [r1, #0]
    f1f2:	f042 0201 	orr.w	r2, r2, #1
    f1f6:	600a      	str	r2, [r1, #0]
    f1f8:	78da      	ldrb	r2, [r3, #3]
    f1fa:	f042 0202 	orr.w	r2, r2, #2
    f1fe:	70da      	strb	r2, [r3, #3]
    f200:	4770      	bx	lr
    f202:	2000      	movs	r0, #0
    f204:	4770      	bx	lr
    f206:	bf00      	nop
    f208:	01cdcdcd 	.word	0x01cdcdcd

0000f20c <am_hal_queue_init>:
    f20c:	b410      	push	{r4}
    f20e:	2400      	movs	r4, #0
    f210:	6004      	str	r4, [r0, #0]
    f212:	6044      	str	r4, [r0, #4]
    f214:	6084      	str	r4, [r0, #8]
    f216:	60c3      	str	r3, [r0, #12]
    f218:	6102      	str	r2, [r0, #16]
    f21a:	6141      	str	r1, [r0, #20]
    f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f220:	4770      	bx	lr
    f222:	bf00      	nop

0000f224 <am_hal_queue_item_add>:
    f224:	b5f0      	push	{r4, r5, r6, r7, lr}
    f226:	4604      	mov	r4, r0
    f228:	6906      	ldr	r6, [r0, #16]
    f22a:	b083      	sub	sp, #12
    f22c:	fb06 f602 	mul.w	r6, r6, r2
    f230:	460d      	mov	r5, r1
    f232:	f7fe fcd7 	bl	dbe4 <am_hal_interrupt_master_disable>
    f236:	68e7      	ldr	r7, [r4, #12]
    f238:	68a2      	ldr	r2, [r4, #8]
    f23a:	9001      	str	r0, [sp, #4]
    f23c:	1abb      	subs	r3, r7, r2
    f23e:	429e      	cmp	r6, r3
    f240:	d826      	bhi.n	f290 <am_hal_queue_item_add+0x6c>
    f242:	b196      	cbz	r6, f26a <am_hal_queue_item_add+0x46>
    f244:	6823      	ldr	r3, [r4, #0]
    f246:	4629      	mov	r1, r5
    f248:	b1c5      	cbz	r5, f27c <am_hal_queue_item_add+0x58>
    f24a:	19af      	adds	r7, r5, r6
    f24c:	6962      	ldr	r2, [r4, #20]
    f24e:	f811 0b01 	ldrb.w	r0, [r1], #1
    f252:	54d0      	strb	r0, [r2, r3]
    f254:	6823      	ldr	r3, [r4, #0]
    f256:	68e5      	ldr	r5, [r4, #12]
    f258:	3301      	adds	r3, #1
    f25a:	42b9      	cmp	r1, r7
    f25c:	fbb3 f0f5 	udiv	r0, r3, r5
    f260:	fb05 3310 	mls	r3, r5, r0, r3
    f264:	6023      	str	r3, [r4, #0]
    f266:	d1f1      	bne.n	f24c <am_hal_queue_item_add+0x28>
    f268:	68a2      	ldr	r2, [r4, #8]
    f26a:	4432      	add	r2, r6
    f26c:	60a2      	str	r2, [r4, #8]
    f26e:	2401      	movs	r4, #1
    f270:	9801      	ldr	r0, [sp, #4]
    f272:	f7fe fcbb 	bl	dbec <am_hal_interrupt_master_set>
    f276:	4620      	mov	r0, r4
    f278:	b003      	add	sp, #12
    f27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f27c:	3101      	adds	r1, #1
    f27e:	3301      	adds	r3, #1
    f280:	428e      	cmp	r6, r1
    f282:	fbb3 f0f7 	udiv	r0, r3, r7
    f286:	fb07 3310 	mls	r3, r7, r0, r3
    f28a:	d1f7      	bne.n	f27c <am_hal_queue_item_add+0x58>
    f28c:	6023      	str	r3, [r4, #0]
    f28e:	e7ec      	b.n	f26a <am_hal_queue_item_add+0x46>
    f290:	2400      	movs	r4, #0
    f292:	e7ed      	b.n	f270 <am_hal_queue_item_add+0x4c>

0000f294 <am_hal_queue_item_get>:
    f294:	b5f0      	push	{r4, r5, r6, r7, lr}
    f296:	4604      	mov	r4, r0
    f298:	6906      	ldr	r6, [r0, #16]
    f29a:	b083      	sub	sp, #12
    f29c:	fb06 f602 	mul.w	r6, r6, r2
    f2a0:	460d      	mov	r5, r1
    f2a2:	f7fe fc9f 	bl	dbe4 <am_hal_interrupt_master_disable>
    f2a6:	68a2      	ldr	r2, [r4, #8]
    f2a8:	9001      	str	r0, [sp, #4]
    f2aa:	4296      	cmp	r6, r2
    f2ac:	d81c      	bhi.n	f2e8 <am_hal_queue_item_get+0x54>
    f2ae:	b196      	cbz	r6, f2d6 <am_hal_queue_item_get+0x42>
    f2b0:	6863      	ldr	r3, [r4, #4]
    f2b2:	b1dd      	cbz	r5, f2ec <am_hal_queue_item_get+0x58>
    f2b4:	4629      	mov	r1, r5
    f2b6:	19af      	adds	r7, r5, r6
    f2b8:	6962      	ldr	r2, [r4, #20]
    f2ba:	5cd3      	ldrb	r3, [r2, r3]
    f2bc:	f801 3b01 	strb.w	r3, [r1], #1
    f2c0:	6863      	ldr	r3, [r4, #4]
    f2c2:	68e5      	ldr	r5, [r4, #12]
    f2c4:	3301      	adds	r3, #1
    f2c6:	428f      	cmp	r7, r1
    f2c8:	fbb3 f0f5 	udiv	r0, r3, r5
    f2cc:	fb05 3310 	mls	r3, r5, r0, r3
    f2d0:	6063      	str	r3, [r4, #4]
    f2d2:	d1f1      	bne.n	f2b8 <am_hal_queue_item_get+0x24>
    f2d4:	68a2      	ldr	r2, [r4, #8]
    f2d6:	1b92      	subs	r2, r2, r6
    f2d8:	60a2      	str	r2, [r4, #8]
    f2da:	2401      	movs	r4, #1
    f2dc:	9801      	ldr	r0, [sp, #4]
    f2de:	f7fe fc85 	bl	dbec <am_hal_interrupt_master_set>
    f2e2:	4620      	mov	r0, r4
    f2e4:	b003      	add	sp, #12
    f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2e8:	2400      	movs	r4, #0
    f2ea:	e7f7      	b.n	f2dc <am_hal_queue_item_get+0x48>
    f2ec:	68e0      	ldr	r0, [r4, #12]
    f2ee:	4629      	mov	r1, r5
    f2f0:	3101      	adds	r1, #1
    f2f2:	3301      	adds	r3, #1
    f2f4:	428e      	cmp	r6, r1
    f2f6:	fbb3 f5f0 	udiv	r5, r3, r0
    f2fa:	fb00 3315 	mls	r3, r0, r5, r3
    f2fe:	d1f7      	bne.n	f2f0 <am_hal_queue_item_get+0x5c>
    f300:	6063      	str	r3, [r4, #4]
    f302:	e7e8      	b.n	f2d6 <am_hal_queue_item_get+0x42>

0000f304 <g_AM_PIN_29_ADCSE1>:
    f304:	0000 0000 7053 7261 466b 6e75 5420 6e65     ....SparkFun Ten
    f314:	6f73 6672 6f6c 2077 6544 7562 2067 754f     sorflow Debug Ou
    f324:	7074 7475 2820 5753 294f 0a0d 0000 0000     tput (SWO)......
    f334:	6548 6c6c 2c6f 5520 5241 2154 0a0d 0000     Hello, UART!....
    f344:	6553 646e 6520 7272 203a 6425 000a 0000     Send err: %d....
    f354:	6552 6563 7669 2065 7265 3a72 2520 0a64     Receive err: %d.
    f364:	0000 0000 6341 6563 656c 6f72 656d 6574     ....Acceleromete
    f374:	2072 4857 5f4f 4d41 495f 2820 6873 756f     r WHO_AM_I (shou
    f384:	646c 6220 2065 7830 3333 3a29 3020 2578     ld be 0x33): 0x%
    f394:	0a78 0000 7245 6f72 2072 202d 6572 6573     x...Error - rese
    f3a4:	7672 7461 6f69 206e 666f 7420 6568 4120     rvation of the A
    f3b4:	4344 6920 736e 6174 636e 2065 6166 6c69     DC instance fail
    f3c4:	6465 0a2e 0000 0000 7245 6f72 2072 202d     ed......Error - 
    f3d4:	4441 2043 6f70 6577 2072 6e6f 6620 6961     ADC power on fai
    f3e4:	656c 2e64 000a 0000 7245 6f72 2072 202d     led.....Error - 
    f3f4:	6f63 666e 6769 7275 6e69 2067 4441 2043     configuring ADC 
    f404:	6166 6c69 6465 0a2e 0000 0000 7245 6f72     failed......Erro
    f414:	2072 202d 6f63 666e 6769 7275 6e69 2067     r - configuring 
    f424:	4441 2043 6c53 746f 3020 6620 6961 656c     ADC Slot 0 faile
    f434:	2e64 000a 7245 6f72 2072 202d 6e65 6261     d...Error - enab
    f444:	696c 676e 4120 4344 6620 6961 656c 2e64     ling ADC failed.
    f454:	000a 0000 4441 2043 6c53 746f 3d20 2020     ....ADC Slot =  
    f464:	6425 000a 3825 382e 2058 0000 0a0a 0a0a     %d..%8.8X ......
    f474:	0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0000     ................

0000f484 <g_sBspUartConfig>:
    f484:	c200 0001 0060 0000 0000 0000 0000 0000     ....`...........
    f494:	0000 0000 0012 0000 0000 0000 0000 0000     ................
	...

0000f4ac <g_AM_BSP_GPIO_COM_UART_RX>:
    f4ac:	0000 0000                                   ....

0000f4b0 <g_AM_BSP_GPIO_COM_UART_TX>:
    f4b0:	0000 0000                                   ....

0000f4b4 <g_AM_BSP_GPIO_IOM4_SCL>:
    f4b4:	0b44 0004                                   D...

0000f4b8 <g_AM_BSP_GPIO_IOM4_SDA>:
    f4b8:	0b44 0004                                   D...

0000f4bc <am_hal_cachectrl_defaults>:
    f4bc:	0308 0000                                   ....

0000f4c0 <g_ui8Bit76Capabilities>:
    f4c0:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    f4d0:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    f4e0:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    f4f0:	0101 0000                                   ....

0000f4f4 <g_ui8NCEtable>:
    f4f4:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    f504:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    f514:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    f524:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    f534:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    f544:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    f554:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    f564:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    f574:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    f584:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    f594:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    f5a4:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    f5b4:	1202 3222 1303 4323                         .."2..#C

0000f5bc <g_ui8Inpen>:
    f5bc:	2323 e224 23a1 1007 4303 e100 a151 3561     ##$..#...C..Q.a5
    f5cc:	c525 4181 b001 d160 3130 31a1 f101 1100     %..A..`.01.1....
    f5dc:	21b1 01d1 11e5 3005 1037 3130 6100 4000     .!.....07.01.a.@
    f5ec:	3130 0000                                   01..

0000f5f0 <g_AM_HAL_GPIO_DISABLE>:
    f5f0:	0003 0000                                   ....

0000f5f4 <g_AM_HAL_GPIO_OUTPUT>:
    f5f4:	0403 0000                                   ....

0000f5f8 <g_ui8nCEpins>:
    f5f8:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    f608:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    f618:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    f628:	0101 0000                                   ....

0000f62c <g_AM_HAL_GPIO_OUTPUT_12>:
    f62c:	0703 0000                                   ....

0000f630 <g_am_hal_mcuctrl_flash_size>:
    f630:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f640:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
	...

0000f670 <g_am_hal_mcuctrl_sram_size>:
    f670:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f680:	0000 0004 0000 0008 0000 0010 0000 0006     ................
	...

0000f6b0 <am_hal_pwrctrl_peripheral_control>:
	...
    f6bc:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    f6cc:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    f6dc:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    f6ec:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    f6fc:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    f70c:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    f71c:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    f72c:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    f73c:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    f74c:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    f75c:	0100 0000 0100 0000                         ........

0000f764 <gAmHalCmdQReg>:
    f764:	4294 5000 4298 5000 42ac 5000 42b0 5000     .B.P.B.P.B.P.B.P
    f774:	42a8 5000 8000 0000 429c 5000 0001 0000     .B.P.....B.P....
    f784:	0004 0000 0002 0000 5294 5000 5298 5000     .........R.P.R.P
    f794:	52ac 5000 52b0 5000 52a8 5000 8000 0000     .R.P.R.P.R.P....
    f7a4:	529c 5000 0001 0000 0004 0000 0002 0000     .R.P............
    f7b4:	6294 5000 6298 5000 62ac 5000 62b0 5000     .b.P.b.P.b.P.b.P
    f7c4:	62a8 5000 8000 0000 629c 5000 0001 0000     .b.P.....b.P....
    f7d4:	0004 0000 0002 0000 7294 5000 7298 5000     .........r.P.r.P
    f7e4:	72ac 5000 72b0 5000 72a8 5000 8000 0000     .r.P.r.P.r.P....
    f7f4:	729c 5000 0001 0000 0004 0000 0002 0000     .r.P............
    f804:	8294 5000 8298 5000 82ac 5000 82b0 5000     ...P...P...P...P
    f814:	82a8 5000 8000 0000 829c 5000 0001 0000     ...P.......P....
    f824:	0004 0000 0002 0000 9294 5000 9298 5000     ...........P...P
    f834:	92ac 5000 92b0 5000 92a8 5000 8000 0000     ...P...P...P....
    f844:	929c 5000 0001 0000 0004 0000 0002 0000     ...P............
    f854:	42a0 5001 42a8 5001 42c0 5001 42c4 5001     .B.P.B.P.B.P.B.P
    f864:	42b8 5001 4000 0000 42ac 5001 0001 0000     .B.P.@...B.P....
    f874:	0004 0000 0008 0000 c248 5000 c24c 5000     ........H..PL..P
    f884:	c260 5000 c264 5000 c25c 5000 8000 0000     `..Pd..P\..P....
    f894:	c250 5000 0001 0000 0004 0000 0002 0000     P..P............
