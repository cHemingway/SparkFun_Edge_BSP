
bin/tensorflow_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 29 d1 00 00 21 d1 00 00 4d c2 00 00     ....)...!...M...
    c010:	4d c2 00 00 4d c2 00 00 4d c2 00 00 00 00 00 00     M...M...M.......
	...
    c02c:	25 d1 00 00 25 d1 00 00 00 00 00 00 25 d1 00 00     %...%.......%...
    c03c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c04c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c05c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c06c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 91 d1 00 00     %...%...%.......
    c07c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 55 d2 00 00     %...%...%...U...
    c08c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c09c:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c0ac:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c0bc:	25 d1 00 00 25 d1 00 00 25 d1 00 00 25 d1 00 00     %...%...%...%...
    c0cc:	25 d1 00 00                                         %...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a0:	2100      	movs	r1, #0
{
    c1a2:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a4:	4608      	mov	r0, r1
    c1a6:	f001 fc1b 	bl	d9e0 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1aa:	481f      	ldr	r0, [pc, #124]	; (c228 <main+0x88>)
    c1ac:	f001 fbe4 	bl	d978 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b0:	f001 fc0c 	bl	d9cc <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1b4:	f001 f996 	bl	d4e4 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1b8:	f001 f9c6 	bl	d548 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1bc:	4b1b      	ldr	r3, [pc, #108]	; (c22c <main+0x8c>)
    c1be:	681c      	ldr	r4, [r3, #0]
    c1c0:	202e      	movs	r0, #46	; 0x2e
    c1c2:	4621      	mov	r1, r4
    c1c4:	f001 fd8c 	bl	dce0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1c8:	4621      	mov	r1, r4
    c1ca:	2025      	movs	r0, #37	; 0x25
    c1cc:	f001 fd88 	bl	dce0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1d0:	4621      	mov	r1, r4
    c1d2:	202c      	movs	r0, #44	; 0x2c
    c1d4:	f001 fd84 	bl	dce0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1d8:	4621      	mov	r1, r4
    c1da:	202f      	movs	r0, #47	; 0x2f
    c1dc:	f001 fd80 	bl	dce0 <am_hal_gpio_pinconfig>

    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1e0:	4b13      	ldr	r3, [pc, #76]	; (c230 <main+0x90>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1ea:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1ec:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c1f0:	601c      	str	r4, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1f2:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1f4:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1f6:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c1f8:	f000 ff8c 	bl	d114 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c1fc:	480d      	ldr	r0, [pc, #52]	; (c234 <main+0x94>)
    c1fe:	f000 ff6d 	bl	d0dc <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c202:	4a0d      	ldr	r2, [pc, #52]	; (c238 <main+0x98>)
    c204:	490d      	ldr	r1, [pc, #52]	; (c23c <main+0x9c>)
    c206:	480e      	ldr	r0, [pc, #56]	; (c240 <main+0xa0>)
    c208:	f000 ff68 	bl	d0dc <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (SWO)\r\n");
    c20c:	480d      	ldr	r0, [pc, #52]	; (c244 <main+0xa4>)
    c20e:	f000 ff65 	bl	d0dc <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c212:	480d      	ldr	r0, [pc, #52]	; (c248 <main+0xa8>)
    c214:	f001 f942 	bl	d49c <am_bsp_uart_string_print>
    initAccelerometer();
    c218:	f001 f8aa 	bl	d370 <initAccelerometer>
    return 0;
}

static int testADC(void)
{
    initADC();
    c21c:	f001 f87c 	bl	d318 <initADC>
    enableAdcInterrupts();
    c220:	f001 f89a 	bl	d358 <enableAdcInterrupts>
    c224:	e7fe      	b.n	c224 <main+0x84>
    c226:	bf00      	nop
    c228:	0000fa0c 	.word	0x0000fa0c
    c22c:	0000fb7c 	.word	0x0000fb7c
    c230:	40010094 	.word	0x40010094
    c234:	0000f71c 	.word	0x0000f71c
    c238:	0000f738 	.word	0x0000f738
    c23c:	0000f744 	.word	0x0000f744
    c240:	0000f750 	.word	0x0000f750
    c244:	0000f768 	.word	0x0000f768
    c248:	0000f794 	.word	0x0000f794

0000c24c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c24c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c24e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c252:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c254:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c258:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c25c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c260:	f000 f806 	bl	c270 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c264:	bd01      	pop	{r0, pc}
    c266:	bf00      	nop

0000c268 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c268:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c26a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c26c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c26e:	4770      	bx	lr

0000c270 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c270:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c272:	2300      	movs	r3, #0
{
    c274:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c276:	e9cd 3300 	strd	r3, r3, [sp]
    c27a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c27e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c282:	4a27      	ldr	r2, [pc, #156]	; (c320 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c284:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c286:	6813      	ldr	r3, [r2, #0]
    c288:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c28c:	b2db      	uxtb	r3, r3
    c28e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c292:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c294:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c298:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c29e:	0c1b      	lsrs	r3, r3, #16
    c2a0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2a4:	6913      	ldr	r3, [r2, #16]
    c2a6:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2a8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c2ac:	0792      	lsls	r2, r2, #30
{
    c2ae:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2b0:	d430      	bmi.n	c314 <am_util_faultisr_collect_data+0xa4>
    c2b2:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2b6:	4619      	mov	r1, r3
    c2b8:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2ba:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2bc:	f7ff ffd4 	bl	c268 <getStackedReg>
    c2c0:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2c2:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2c4:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2c6:	f7ff ffcf 	bl	c268 <getStackedReg>
    c2ca:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2cc:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2ce:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2d0:	f7ff ffca 	bl	c268 <getStackedReg>
    c2d4:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c2d6:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2d8:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c2da:	f7ff ffc5 	bl	c268 <getStackedReg>
    c2de:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c2e0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c2e2:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c2e4:	f7ff ffc0 	bl	c268 <getStackedReg>
    c2e8:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c2ea:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c2ec:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c2ee:	f7ff ffbb 	bl	c268 <getStackedReg>
    c2f2:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c2f4:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c2f6:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c2f8:	f7ff ffb6 	bl	c268 <getStackedReg>
    c2fc:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c2fe:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c300:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c302:	f7ff ffb1 	bl	c268 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c306:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c308:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c30a:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c30c:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c30e:	f002 fbd9 	bl	eac4 <am_hal_mcuctrl_info_get>
    c312:	e7fe      	b.n	c312 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c314:	4601      	mov	r1, r0
    c316:	2006      	movs	r0, #6
    c318:	f7ff ffa6 	bl	c268 <getStackedReg>
    c31c:	4602      	mov	r2, r0
    c31e:	e7ca      	b.n	c2b6 <am_util_faultisr_collect_data+0x46>
    c320:	e000ed28 	.word	0xe000ed28

0000c324 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c328:	b097      	sub	sp, #92	; 0x5c
    c32a:	4682      	mov	sl, r0
    c32c:	468b      	mov	fp, r1
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c32e:	2300      	movs	r3, #0
{
    c330:	920d      	str	r2, [sp, #52]	; 0x34
    c332:	469c      	mov	ip, r3
    c334:	e9cd ab00 	strd	sl, fp, [sp]
    c338:	4606      	mov	r6, r0
    c33a:	460f      	mov	r7, r1
    c33c:	e00b      	b.n	c356 <uint64_to_str+0x32>
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c33e:	f80b 2c01 	strb.w	r2, [fp, #-1]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c342:	4619      	mov	r1, r3
    c344:	2200      	movs	r2, #0
    c346:	e9cd 1200 	strd	r1, r2, [sp]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c34a:	2b00      	cmp	r3, #0
    c34c:	f000 80a5 	beq.w	c49a <uint64_to_str+0x176>
    c350:	e9dd 6700 	ldrd	r6, r7, [sp]
{
    c354:	46f4      	mov	ip, lr
        q64 += (q64 >> 4);
    c356:	2300      	movs	r3, #0
    c358:	2400      	movs	r4, #0
    c35a:	e9cd 3402 	strd	r3, r4, [sp, #8]
        q64 += (q64 >> 8);
    c35e:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 16);
    c362:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 32);
    c366:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 >>= 3;
    c36a:	4698      	mov	r8, r3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c36c:	08b3      	lsrs	r3, r6, #2
    c36e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
        q32 += (q32 >> 4);
    c372:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c376:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q64 >>= 3;
    c37a:	46a1      	mov	r9, r4
        q32 += (q32 >> 16);
    c37c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c380:	08da      	lsrs	r2, r3, #3
        return q64 + ((r64 + 6) >> 4);
    c382:	4644      	mov	r4, r8
    c384:	464d      	mov	r5, r9
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c386:	4633      	mov	r3, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c388:	08b0      	lsrs	r0, r6, #2
        return q64 + ((r64 + 6) >> 4);
    c38a:	e9cd 4508 	strd	r4, r5, [sp, #32]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c38e:	3306      	adds	r3, #6
        r32 = ui32Val - q32*10;
    c390:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    c394:	f10c 0e01 	add.w	lr, ip, #1
        tbuf[ix++] = uMod + '0';
    c398:	ae0f      	add	r6, sp, #60	; 0x3c
    c39a:	4476      	add	r6, lr
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c39c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3a0:	ea40 7087 	orr.w	r0, r0, r7, lsl #30
    if ( ui64Val >> 32 )
    c3a4:	463c      	mov	r4, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3a6:	08b9      	lsrs	r1, r7, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c3a8:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        tbuf[ix++] = uMod + '0';
    c3ac:	46b3      	mov	fp, r6
    c3ae:	4637      	mov	r7, r6
    c3b0:	9e00      	ldr	r6, [sp, #0]
        uMod = ui64Val - (u64Tmp * 10);
    c3b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c3b6:	2500      	movs	r5, #0
        uMod = ui64Val - (u64Tmp * 10);
    c3b8:	eba6 0242 	sub.w	r2, r6, r2, lsl #1
    if ( ui64Val >> 32 )
    c3bc:	ea54 0a05 	orrs.w	sl, r4, r5
        tbuf[ix++] = uMod + '0';
    c3c0:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c3c4:	d0bb      	beq.n	c33e <uint64_to_str+0x1a>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3c6:	e9dd 2300 	ldrd	r2, r3, [sp]
    c3ca:	085b      	lsrs	r3, r3, #1
    c3cc:	ea4f 0232 	mov.w	r2, r2, rrx
    c3d0:	eb12 0a00 	adds.w	sl, r2, r0
    c3d4:	eb43 0b01 	adc.w	fp, r3, r1
        q64 += (q64 >> 4);
    c3d8:	ea4f 131a 	mov.w	r3, sl, lsr #4
    c3dc:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
    c3e0:	9302      	str	r3, [sp, #8]
    c3e2:	ea4f 131b 	mov.w	r3, fp, lsr #4
    c3e6:	9303      	str	r3, [sp, #12]
    c3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c3ec:	eb12 020a 	adds.w	r2, r2, sl
    c3f0:	eb43 030b 	adc.w	r3, r3, fp
        q64 += (q64 >> 8);
    c3f4:	0a11      	lsrs	r1, r2, #8
    c3f6:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c3fa:	9104      	str	r1, [sp, #16]
    c3fc:	0a19      	lsrs	r1, r3, #8
    c3fe:	9105      	str	r1, [sp, #20]
    c400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c404:	1880      	adds	r0, r0, r2
    c406:	4159      	adcs	r1, r3
    c408:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c40a:	0c01      	lsrs	r1, r0, #16
    c40c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c410:	9106      	str	r1, [sp, #24]
    c412:	0c19      	lsrs	r1, r3, #16
    c414:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 8);
    c416:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c41c:	1880      	adds	r0, r0, r2
    c41e:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c420:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    c424:	4602      	mov	r2, r0
    c426:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c42c:	1880      	adds	r0, r0, r2
    c42e:	4159      	adcs	r1, r3
        q64 >>= 3;
    c430:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c434:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c438:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    c43c:	e9dd ab00 	ldrd	sl, fp, [sp]
        r64 = ui64Val - q64*10;
    c440:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c444:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c448:	eb12 0008 	adds.w	r0, r2, r8
    c44c:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c450:	eb43 0109 	adc.w	r1, r3, r9
        return q64 + ((r64 + 6) >> 4);
    c454:	f11a 0a06 	adds.w	sl, sl, #6
    c458:	f14b 0b00 	adc.w	fp, fp, #0
        r64 = ui64Val - q64*10;
    c45c:	1802      	adds	r2, r0, r0
    c45e:	eb41 0301 	adc.w	r3, r1, r1
        return q64 + ((r64 + 6) >> 4);
    c462:	ebba 0002 	subs.w	r0, sl, r2
    c466:	eb6b 0103 	sbc.w	r1, fp, r3
    c46a:	0903      	lsrs	r3, r0, #4
    c46c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    c470:	9308      	str	r3, [sp, #32]
    c472:	090b      	lsrs	r3, r1, #4
    c474:	9309      	str	r3, [sp, #36]	; 0x24
    c476:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
    c47a:	eb1a 0a08 	adds.w	sl, sl, r8
    c47e:	eb4b 0b09 	adc.w	fp, fp, r9
    c482:	4653      	mov	r3, sl
    c484:	465c      	mov	r4, fp
    c486:	e9cd 3400 	strd	r3, r4, [sp]
        uMod = ui64Val - (u64Tmp * 10);
    c48a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    c48e:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c492:	3630      	adds	r6, #48	; 0x30
    c494:	f807 6c01 	strb.w	r6, [r7, #-1]
    c498:	e75a      	b.n	c350 <uint64_to_str+0x2c>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c49a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c49c:	4660      	mov	r0, ip
    c49e:	b16a      	cbz	r2, c4bc <uint64_to_str+0x198>
    c4a0:	465b      	mov	r3, fp
    c4a2:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c4a4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c4a8:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c4ac:	a90f      	add	r1, sp, #60	; 0x3c
    c4ae:	4299      	cmp	r1, r3
    c4b0:	d1f8      	bne.n	c4a4 <uint64_to_str+0x180>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c4b4:	4403      	add	r3, r0
    c4b6:	461a      	mov	r2, r3
    c4b8:	2300      	movs	r3, #0
    c4ba:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c4bc:	4670      	mov	r0, lr
    c4be:	b017      	add	sp, #92	; 0x5c
    c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c4c4 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c4c4:	4b01      	ldr	r3, [pc, #4]	; (c4cc <am_util_stdio_printf_init+0x8>)
    c4c6:	6018      	str	r0, [r3, #0]
}
    c4c8:	4770      	bx	lr
    c4ca:	bf00      	nop
    c4cc:	100012a4 	.word	0x100012a4

0000c4d0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4d4:	b09b      	sub	sp, #108	; 0x6c
    c4d6:	4682      	mov	sl, r0
    c4d8:	4689      	mov	r9, r1
    c4da:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c4dc:	f04f 0b00 	mov.w	fp, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c4e0:	f899 3000 	ldrb.w	r3, [r9]
    c4e4:	b1bb      	cbz	r3, c516 <am_util_stdio_vsprintf+0x46>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c4e6:	2b25      	cmp	r3, #37	; 0x25
    c4e8:	f109 0501 	add.w	r5, r9, #1
    c4ec:	d01c      	beq.n	c528 <am_util_stdio_vsprintf+0x58>
    c4ee:	f10b 0201 	add.w	r2, fp, #1
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c4f2:	f1ba 0f00 	cmp.w	sl, #0
    c4f6:	f000 8091 	beq.w	c61c <am_util_stdio_vsprintf+0x14c>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c4fa:	2b0a      	cmp	r3, #10
    c4fc:	f10a 0101 	add.w	r1, sl, #1
    c500:	f000 808f 	beq.w	c622 <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c504:	f88a 3000 	strb.w	r3, [sl]
    c508:	4693      	mov	fp, r2
    c50a:	468a      	mov	sl, r1
            }

            ++pcFmt;
    c50c:	46a9      	mov	r9, r5
    while ( *pcFmt != 0x0 )
    c50e:	f899 3000 	ldrb.w	r3, [r9]
    c512:	2b00      	cmp	r3, #0
    c514:	d1e7      	bne.n	c4e6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c516:	f1ba 0f00 	cmp.w	sl, #0
    c51a:	d001      	beq.n	c520 <am_util_stdio_vsprintf+0x50>
    {
        *pcBuf = 0x0;
    c51c:	f88a 3000 	strb.w	r3, [sl]
    }

    return (ui32CharCnt);
}
    c520:	4658      	mov	r0, fp
    c522:	b01b      	add	sp, #108	; 0x6c
    c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c528:	f899 3001 	ldrb.w	r3, [r9, #1]
    c52c:	2b30      	cmp	r3, #48	; 0x30
    c52e:	bf03      	ittte	eq
    c530:	f899 3002 	ldrbeq.w	r3, [r9, #2]
            ++pcFmt;
    c534:	f109 0502 	addeq.w	r5, r9, #2
            ui8PadChar = '0';
    c538:	f04f 0830 	moveq.w	r8, #48	; 0x30
        ui8PadChar = ' ';
    c53c:	f04f 0820 	movne.w	r8, #32
    if ( *pcStr == '-')
    c540:	2b2d      	cmp	r3, #45	; 0x2d
    c542:	d07e      	beq.n	c642 <am_util_stdio_vsprintf+0x172>
    uint32_t ui32Val = 0, uCnt = 0;
    c544:	2100      	movs	r1, #0
    bool bNeg = false;
    c546:	460e      	mov	r6, r1
    if ( *pcStr == '-')
    c548:	462a      	mov	r2, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c54a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c54e:	2809      	cmp	r0, #9
    c550:	f04f 0400 	mov.w	r4, #0
    c554:	d80f      	bhi.n	c576 <am_util_stdio_vsprintf+0xa6>
        ui32Val *= 10;
    c556:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        ui32Val += (*pcStr - '0');
    c55a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c55e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c562:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c566:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c568:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
        ++uCnt;
    c56c:	f101 0101 	add.w	r1, r1, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c570:	d9f1      	bls.n	c556 <am_util_stdio_vsprintf+0x86>
    c572:	5c6b      	ldrb	r3, [r5, r1]
    c574:	186a      	adds	r2, r5, r1
    return bNeg ? -ui32Val : ui32Val;
    c576:	b106      	cbz	r6, c57a <am_util_stdio_vsprintf+0xaa>
    c578:	4264      	negs	r4, r4
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c57a:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c57c:	4621      	mov	r1, r4
    c57e:	f102 0901 	add.w	r9, r2, #1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c582:	f000 8167 	beq.w	c854 <am_util_stdio_vsprintf+0x384>
    c586:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
    c58a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
        if (*pcFmt == '.')
    c58e:	2b2e      	cmp	r3, #46	; 0x2e
    c590:	910e      	str	r1, [sp, #56]	; 0x38
    c592:	f000 813b 	beq.w	c80c <am_util_stdio_vsprintf+0x33c>
        iPrecision = 6;             // printf() default precision for %f is 6
    c596:	2506      	movs	r5, #6
        if ( *pcFmt == 'l' )
    c598:	2b6c      	cmp	r3, #108	; 0x6c
    c59a:	d157      	bne.n	c64c <am_util_stdio_vsprintf+0x17c>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c59c:	7853      	ldrb	r3, [r2, #1]
    c59e:	2b6c      	cmp	r3, #108	; 0x6c
    c5a0:	f000 808e 	beq.w	c6c0 <am_util_stdio_vsprintf+0x1f0>
        switch ( *pcFmt )
    c5a4:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c5a8:	f109 0901 	add.w	r9, r9, #1
    c5ac:	2a32      	cmp	r2, #50	; 0x32
    c5ae:	f200 8123 	bhi.w	c7f8 <am_util_stdio_vsprintf+0x328>
    c5b2:	e8df f012 	tbh	[pc, r2, lsl #1]
    c5b6:	00c2      	.short	0x00c2
    c5b8:	01210121 	.word	0x01210121
    c5bc:	01210121 	.word	0x01210121
    c5c0:	01210121 	.word	0x01210121
    c5c4:	01210121 	.word	0x01210121
    c5c8:	01210121 	.word	0x01210121
    c5cc:	01210121 	.word	0x01210121
    c5d0:	01210121 	.word	0x01210121
    c5d4:	01210121 	.word	0x01210121
    c5d8:	01990121 	.word	0x01990121
    c5dc:	01210121 	.word	0x01210121
    c5e0:	01210121 	.word	0x01210121
    c5e4:	01210121 	.word	0x01210121
    c5e8:	01210121 	.word	0x01210121
    c5ec:	01210121 	.word	0x01210121
    c5f0:	01b60113 	.word	0x01b60113
    c5f4:	00c20121 	.word	0x00c20121
    c5f8:	01210121 	.word	0x01210121
    c5fc:	012101b6 	.word	0x012101b6
    c600:	01210121 	.word	0x01210121
    c604:	01210121 	.word	0x01210121
    c608:	01210121 	.word	0x01210121
    c60c:	01210121 	.word	0x01210121
    c610:	0121014e 	.word	0x0121014e
    c614:	01210235 	.word	0x01210235
    c618:	024e0121 	.word	0x024e0121
    c61c:	4693      	mov	fp, r2
            ++pcFmt;
    c61e:	46a9      	mov	r9, r5
    c620:	e775      	b.n	c50e <am_util_stdio_vsprintf+0x3e>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c622:	48a6      	ldr	r0, [pc, #664]	; (c8bc <am_util_stdio_vsprintf+0x3ec>)
    c624:	7800      	ldrb	r0, [r0, #0]
    c626:	2800      	cmp	r0, #0
    c628:	f43f af6c 	beq.w	c504 <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c62c:	4650      	mov	r0, sl
    c62e:	230d      	movs	r3, #13
    c630:	f800 3b02 	strb.w	r3, [r0], #2
    c634:	468a      	mov	sl, r1
    c636:	f899 3000 	ldrb.w	r3, [r9]
    c63a:	f10b 0202 	add.w	r2, fp, #2
    c63e:	4601      	mov	r1, r0
    c640:	e760      	b.n	c504 <am_util_stdio_vsprintf+0x34>
        uCnt++;
    c642:	2101      	movs	r1, #1
        bNeg = true;
    c644:	460e      	mov	r6, r1
        pcStr++;
    c646:	186a      	adds	r2, r5, r1
    c648:	786b      	ldrb	r3, [r5, #1]
    c64a:	e77e      	b.n	c54a <am_util_stdio_vsprintf+0x7a>
        switch ( *pcFmt )
    c64c:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c650:	2a32      	cmp	r2, #50	; 0x32
    c652:	f200 80d1 	bhi.w	c7f8 <am_util_stdio_vsprintf+0x328>
    c656:	e8df f012 	tbh	[pc, r2, lsl #1]
    c65a:	0070      	.short	0x0070
    c65c:	00cf00cf 	.word	0x00cf00cf
    c660:	00cf00cf 	.word	0x00cf00cf
    c664:	00cf00cf 	.word	0x00cf00cf
    c668:	00cf00cf 	.word	0x00cf00cf
    c66c:	00cf00cf 	.word	0x00cf00cf
    c670:	00cf00cf 	.word	0x00cf00cf
    c674:	00cf00cf 	.word	0x00cf00cf
    c678:	00cf00cf 	.word	0x00cf00cf
    c67c:	014700cf 	.word	0x014700cf
    c680:	00cf00cf 	.word	0x00cf00cf
    c684:	00cf00cf 	.word	0x00cf00cf
    c688:	00cf00cf 	.word	0x00cf00cf
    c68c:	00cf00cf 	.word	0x00cf00cf
    c690:	00cf00cf 	.word	0x00cf00cf
    c694:	016400c1 	.word	0x016400c1
    c698:	007000cf 	.word	0x007000cf
    c69c:	00cf00cf 	.word	0x00cf00cf
    c6a0:	00cf0164 	.word	0x00cf0164
    c6a4:	00cf00cf 	.word	0x00cf00cf
    c6a8:	00cf00cf 	.word	0x00cf00cf
    c6ac:	00cf00cf 	.word	0x00cf00cf
    c6b0:	00cf00cf 	.word	0x00cf00cf
    c6b4:	00cf00fc 	.word	0x00cf00fc
    c6b8:	00cf01e3 	.word	0x00cf01e3
    c6bc:	01fa00cf 	.word	0x01fa00cf
    c6c0:	7893      	ldrb	r3, [r2, #2]
    c6c2:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
    c6c6:	f102 0903 	add.w	r9, r2, #3
    c6ca:	2932      	cmp	r1, #50	; 0x32
    c6cc:	f200 8094 	bhi.w	c7f8 <am_util_stdio_vsprintf+0x328>
    c6d0:	e8df f011 	tbh	[pc, r1, lsl #1]
    c6d4:	00920033 	.word	0x00920033
    c6d8:	00920092 	.word	0x00920092
    c6dc:	00920092 	.word	0x00920092
    c6e0:	00920092 	.word	0x00920092
    c6e4:	00920092 	.word	0x00920092
    c6e8:	00920092 	.word	0x00920092
    c6ec:	00920092 	.word	0x00920092
    c6f0:	00920092 	.word	0x00920092
    c6f4:	00920092 	.word	0x00920092
    c6f8:	00920414 	.word	0x00920414
    c6fc:	00920092 	.word	0x00920092
    c700:	00920092 	.word	0x00920092
    c704:	00920092 	.word	0x00920092
    c708:	00920092 	.word	0x00920092
    c70c:	00840092 	.word	0x00840092
    c710:	00920222 	.word	0x00920222
    c714:	00920033 	.word	0x00920033
    c718:	02220092 	.word	0x02220092
    c71c:	00920092 	.word	0x00920092
    c720:	00920092 	.word	0x00920092
    c724:	00920092 	.word	0x00920092
    c728:	00920092 	.word	0x00920092
    c72c:	00bf0092 	.word	0x00bf0092
    c730:	02160092 	.word	0x02160092
    c734:	00920092 	.word	0x00920092
    c738:	0412      	.short	0x0412
                if ( pcBuf )
    c73a:	f1ba 0f00 	cmp.w	sl, #0
    c73e:	f43f aecf 	beq.w	c4e0 <am_util_stdio_vsprintf+0x10>
                    float fValue = va_arg(pArgs, double);
    c742:	9b01      	ldr	r3, [sp, #4]
    c744:	3307      	adds	r3, #7
    c746:	f023 0307 	bic.w	r3, r3, #7
    c74a:	e9d3 0100 	ldrd	r0, r1, [r3]
    c74e:	3308      	adds	r3, #8
    c750:	9301      	str	r3, [sp, #4]
    c752:	f7ff fcd5 	bl	c100 <__aeabi_d2f>
    c756:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c75a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c75e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c764:	f8ca 3000 	str.w	r3, [sl]
    if (fValue == 0.0f)
    c768:	f000 843e 	beq.w	cfe8 <am_util_stdio_vsprintf+0xb18>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c76c:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c770:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    c774:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c776:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c778:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c77c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c780:	f300 844a 	bgt.w	d018 <am_util_stdio_vsprintf+0xb48>
    else if (iExp2 < -23)
    c784:	f112 0f17 	cmn.w	r2, #23
    c788:	f2c0 8479 	blt.w	d07e <am_util_stdio_vsprintf+0xbae>
    else if (iExp2 >= 23)
    c78c:	2a16      	cmp	r2, #22
    c78e:	f10a 0701 	add.w	r7, sl, #1
    c792:	f340 836f 	ble.w	ce74 <am_util_stdio_vsprintf+0x9a4>
        i32IntPart = i32Significand << (iExp2 - 23);
    c796:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c798:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c79a:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c79e:	f2c0 844d 	blt.w	d03c <am_util_stdio_vsprintf+0xb6c>
    c7a2:	4656      	mov	r6, sl
    i32FracPart = 0;
    c7a4:	2400      	movs	r4, #0
    if (i32IntPart == 0)
    c7a6:	2800      	cmp	r0, #0
    c7a8:	f040 843c 	bne.w	d024 <am_util_stdio_vsprintf+0xb54>
    c7ac:	1c7a      	adds	r2, r7, #1
        *pcBuf++ = '0';
    c7ae:	f04f 0330 	mov.w	r3, #48	; 0x30
    c7b2:	7033      	strb	r3, [r6, #0]
    *pcBuf++ = '.';
    c7b4:	232e      	movs	r3, #46	; 0x2e
    c7b6:	703b      	strb	r3, [r7, #0]
    if (i32FracPart == 0)
    c7b8:	2c00      	cmp	r4, #0
    c7ba:	f040 83d8 	bne.w	cf6e <am_util_stdio_vsprintf+0xa9e>
        *pcBuf++ = '0';
    c7be:	1cba      	adds	r2, r7, #2
    c7c0:	f04f 0330 	mov.w	r3, #48	; 0x30
    c7c4:	707b      	strb	r3, [r7, #1]
    c7c6:	eba2 010a 	sub.w	r1, r2, sl
    *pcBuf = 0x00;
    c7ca:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c7cc:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    c7ce:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    c7d0:	f2c0 841e 	blt.w	d010 <am_util_stdio_vsprintf+0xb40>
    c7d4:	460b      	mov	r3, r1
                    ui32CharCnt += iVal;
    c7d6:	449b      	add	fp, r3
                    pcBuf += iVal;
    c7d8:	449a      	add	sl, r3
    c7da:	e681      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7dc:	9a01      	ldr	r2, [sp, #4]
    c7de:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c7e0:	f1ba 0f00 	cmp.w	sl, #0
    c7e4:	d004      	beq.n	c7f0 <am_util_stdio_vsprintf+0x320>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7e6:	6812      	ldr	r2, [r2, #0]
    c7e8:	f88a 2000 	strb.w	r2, [sl]
                    *pcBuf++ = ui8CharSpecifier;
    c7ec:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c7f0:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7f4:	9301      	str	r3, [sp, #4]
                break;
    c7f6:	e673      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
                if ( pcBuf )
    c7f8:	f1ba 0f00 	cmp.w	sl, #0
    c7fc:	d003      	beq.n	c806 <am_util_stdio_vsprintf+0x336>
                    *pcBuf++ = *pcFmt;
    c7fe:	f88a 3000 	strb.w	r3, [sl]
    c802:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c806:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c80a:	e669      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
    if ( *pcStr == '-')
    c80c:	7851      	ldrb	r1, [r2, #1]
    c80e:	292d      	cmp	r1, #45	; 0x2d
    c810:	f000 821a 	beq.w	cc48 <am_util_stdio_vsprintf+0x778>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c814:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c818:	2b09      	cmp	r3, #9
    c81a:	f200 8305 	bhi.w	ce28 <am_util_stdio_vsprintf+0x958>
    bool bNeg = false;
    c81e:	2600      	movs	r6, #0
    uint32_t ui32Val = 0, uCnt = 0;
    c820:	4632      	mov	r2, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c822:	4648      	mov	r0, r9
        uCnt++;
    c824:	2300      	movs	r3, #0
        ui32Val *= 10;
    c826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    c82a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c82e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    c832:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    c836:	2d09      	cmp	r5, #9
        ui32Val += (*pcStr - '0');
    c838:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        ++uCnt;
    c83c:	f102 0201 	add.w	r2, r2, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c840:	d9f1      	bls.n	c826 <am_util_stdio_vsprintf+0x356>
    return bNeg ? -ui32Val : ui32Val;
    c842:	b106      	cbz	r6, c846 <am_util_stdio_vsprintf+0x376>
    c844:	425b      	negs	r3, r3
            pcFmt += ui32NumChars;
    c846:	444a      	add	r2, r9
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    c848:	461d      	mov	r5, r3
    c84a:	f102 0901 	add.w	r9, r2, #1
    c84e:	7813      	ldrb	r3, [r2, #0]
    c850:	e6a2      	b.n	c598 <am_util_stdio_vsprintf+0xc8>
        switch ( *pcFmt )
    c852:	990e      	ldr	r1, [sp, #56]	; 0x38
                pcStr = va_arg(pArgs, char *);
    c854:	9b01      	ldr	r3, [sp, #4]
    c856:	681f      	ldr	r7, [r3, #0]
    c858:	1d1a      	adds	r2, r3, #4
    if ( !pcBuf )
    c85a:	b38f      	cbz	r7, c8c0 <am_util_stdio_vsprintf+0x3f0>
    while ( *pcBuf++ )
    c85c:	7838      	ldrb	r0, [r7, #0]
    c85e:	1c7b      	adds	r3, r7, #1
    c860:	461c      	mov	r4, r3
    c862:	2800      	cmp	r0, #0
    c864:	f000 835c 	beq.w	cf20 <am_util_stdio_vsprintf+0xa50>
    c868:	1be6      	subs	r6, r4, r7
    c86a:	f814 5b01 	ldrb.w	r5, [r4], #1
    c86e:	2d00      	cmp	r5, #0
    c870:	d1fa      	bne.n	c868 <am_util_stdio_vsprintf+0x398>
                if ( iWidth > 0 )
    c872:	2900      	cmp	r1, #0
    c874:	dd02      	ble.n	c87c <am_util_stdio_vsprintf+0x3ac>
                    if ( ui32strlen < iWidth )
    c876:	428e      	cmp	r6, r1
    c878:	f0c0 8356 	bcc.w	cf28 <am_util_stdio_vsprintf+0xa58>
    c87c:	465c      	mov	r4, fp
    c87e:	1be4      	subs	r4, r4, r7
    c880:	4657      	mov	r7, sl
                        *pcBuf++ = *pcStr;
    c882:	4655      	mov	r5, sl
    c884:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    c888:	b15f      	cbz	r7, c8a2 <am_util_stdio_vsprintf+0x3d2>
                        *pcBuf++ = *pcStr;
    c88a:	7028      	strb	r0, [r5, #0]
                while (*pcStr != 0x0)
    c88c:	f813 0b01 	ldrb.w	r0, [r3], #1
                        *pcBuf++ = *pcStr;
    c890:	3701      	adds	r7, #1
                while (*pcStr != 0x0)
    c892:	2800      	cmp	r0, #0
    c894:	f000 81c5 	beq.w	cc22 <am_util_stdio_vsprintf+0x752>
                        *pcBuf++ = *pcStr;
    c898:	463d      	mov	r5, r7
    c89a:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    c89e:	2f00      	cmp	r7, #0
    c8a0:	d1f3      	bne.n	c88a <am_util_stdio_vsprintf+0x3ba>
    c8a2:	46ba      	mov	sl, r7
    c8a4:	eb04 0b03 	add.w	fp, r4, r3
                while (*pcStr != 0x0)
    c8a8:	f813 0b01 	ldrb.w	r0, [r3], #1
    c8ac:	2800      	cmp	r0, #0
    c8ae:	d1f9      	bne.n	c8a4 <am_util_stdio_vsprintf+0x3d4>
                if ( iWidth )
    c8b0:	2900      	cmp	r1, #0
    c8b2:	f040 81ba 	bne.w	cc2a <am_util_stdio_vsprintf+0x75a>
                pcStr = va_arg(pArgs, char *);
    c8b6:	9201      	str	r2, [sp, #4]
    c8b8:	e612      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
    c8ba:	bf00      	nop
    c8bc:	10001030 	.word	0x10001030
                if ( iWidth > 0 )
    c8c0:	2900      	cmp	r1, #0
    c8c2:	f340 838a 	ble.w	cfda <am_util_stdio_vsprintf+0xb0a>
        return ui32RetVal;
    c8c6:	463e      	mov	r6, r7
    if ( i32NumChars <= 0 )
    c8c8:	2900      	cmp	r1, #0
    c8ca:	f300 8304 	bgt.w	ced6 <am_util_stdio_vsprintf+0xa06>
    c8ce:	465c      	mov	r4, fp
    c8d0:	2300      	movs	r3, #0
                        pcBuf += pcBuf ? iWidth : 0;
    c8d2:	f1ba 0f00 	cmp.w	sl, #0
    c8d6:	d000      	beq.n	c8da <am_util_stdio_vsprintf+0x40a>
    c8d8:	449a      	add	sl, r3
                while (*pcStr != 0x0)
    c8da:	7838      	ldrb	r0, [r7, #0]
    c8dc:	2800      	cmp	r0, #0
    c8de:	f000 83f3 	beq.w	d0c8 <am_util_stdio_vsprintf+0xbf8>
                        iWidth = 0;
    c8e2:	2100      	movs	r1, #0
    c8e4:	1c7b      	adds	r3, r7, #1
    c8e6:	e7ca      	b.n	c87e <am_util_stdio_vsprintf+0x3ae>
        bLower = bLongLong = false;
    c8e8:	2500      	movs	r5, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8ea:	9b01      	ldr	r3, [sp, #4]
    c8ec:	681a      	ldr	r2, [r3, #0]
                                      va_arg(pArgs, uint32_t);
    c8ee:	3304      	adds	r3, #4
    c8f0:	9301      	str	r3, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8f2:	2300      	movs	r3, #0
                if ( iWidth )
    c8f4:	2c00      	cmp	r4, #0
    c8f6:	f040 80bd 	bne.w	ca74 <am_util_stdio_vsprintf+0x5a4>
    if ( ui64Val == 0 )
    c8fa:	ea52 0103 	orrs.w	r1, r2, r3
    c8fe:	f040 80dd 	bne.w	cabc <am_util_stdio_vsprintf+0x5ec>
    if (pcBuf)
    c902:	f1ba 0f00 	cmp.w	sl, #0
    c906:	f000 828d 	beq.w	ce24 <am_util_stdio_vsprintf+0x954>
            *pcBuf++ = tbuf[ix];
    c90a:	f10a 0501 	add.w	r5, sl, #1
    c90e:	f04f 0330 	mov.w	r3, #48	; 0x30
    c912:	f88a 3000 	strb.w	r3, [sl]
    c916:	2001      	movs	r0, #1
    c918:	46aa      	mov	sl, r5
        *pcBuf = 0;
    c91a:	2300      	movs	r3, #0
    c91c:	702b      	strb	r3, [r5, #0]
                ui32CharCnt += iVal;
    c91e:	4483      	add	fp, r0
                break;
    c920:	e5de      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c922:	9b01      	ldr	r3, [sp, #4]
    c924:	6818      	ldr	r0, [r3, #0]
                                     va_arg(pArgs, int32_t);
    c926:	3304      	adds	r3, #4
    c928:	9301      	str	r3, [sp, #4]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c92a:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    c92c:	2800      	cmp	r0, #0
    c92e:	f171 0300 	sbcs.w	r3, r1, #0
    c932:	f2c0 8194 	blt.w	cc5e <am_util_stdio_vsprintf+0x78e>
                    ui64Val = i64Val;
    c936:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    c93a:	2c00      	cmp	r4, #0
    c93c:	d065      	beq.n	ca0a <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    c93e:	4603      	mov	r3, r0
    c940:	430b      	orrs	r3, r1
    return ndigits_in_u64((uint64_t) i64Val);
    c942:	460c      	mov	r4, r1
    c944:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    c946:	bf0c      	ite	eq
    c948:	f04f 0e01 	moveq.w	lr, #1
    c94c:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    c950:	4323      	orrs	r3, r4
    c952:	f000 8396 	beq.w	d082 <am_util_stdio_vsprintf+0xbb2>
                    bNeg = false;
    c956:	2300      	movs	r3, #0
    c958:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
    c95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c960:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
    c964:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        q64 += (q64 >> 4);
    c96c:	2300      	movs	r3, #0
    c96e:	2400      	movs	r4, #0
    c970:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    c974:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    c978:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    c97c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c980:	0843      	lsrs	r3, r0, #1
    c982:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q32 += (q32 >> 4);
    c986:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c98a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c98e:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c992:	08db      	lsrs	r3, r3, #3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c994:	4602      	mov	r2, r0
        r32 = ui32Val - q32*10;
    c996:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c99a:	0886      	lsrs	r6, r0, #2
    if ( ui64Val >> 32 )
    c99c:	460c      	mov	r4, r1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c99e:	3206      	adds	r2, #6
    if ( ui64Val >> 32 )
    c9a0:	2500      	movs	r5, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c9a2:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
    c9a6:	088f      	lsrs	r7, r1, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9a8:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
    if ( ui64Val >> 32 )
    c9ac:	ea54 0105 	orrs.w	r1, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9b0:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    c9b4:	f040 80ba 	bne.w	cb2c <am_util_stdio_vsprintf+0x65c>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9b8:	4619      	mov	r1, r3
    c9ba:	2200      	movs	r2, #0
        ++iNDigits;
    c9bc:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while ( ui64Val )
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	d1cf      	bne.n	c968 <am_util_stdio_vsprintf+0x498>
                    iWidth -= ndigits_in_i64(ui64Val);
    c9c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9ca:	eba3 0e0e 	sub.w	lr, r3, lr
                    if ( bNeg )
    c9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9d0:	e9dd 8b10 	ldrd	r8, fp, [sp, #64]	; 0x40
    c9d4:	e9dd a912 	ldrd	sl, r9, [sp, #72]	; 0x48
    c9d8:	b13b      	cbz	r3, c9ea <am_util_stdio_vsprintf+0x51a>
                        if ( ui8PadChar == '0' )
    c9da:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    c9de:	f10e 3eff 	add.w	lr, lr, #4294967295
                        if ( ui8PadChar == '0' )
    c9e2:	f000 82a3 	beq.w	cf2c <am_util_stdio_vsprintf+0xa5c>
    c9e6:	2301      	movs	r3, #1
    c9e8:	930f      	str	r3, [sp, #60]	; 0x3c
    if ( i32NumChars <= 0 )
    c9ea:	f1be 0f00 	cmp.w	lr, #0
    c9ee:	f300 821e 	bgt.w	ce2e <am_util_stdio_vsprintf+0x95e>
    c9f2:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    c9f4:	f1ba 0f00 	cmp.w	sl, #0
    c9f8:	f000 82fc 	beq.w	cff4 <am_util_stdio_vsprintf+0xb24>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c9fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    pcBuf += pcBuf ? iWidth : 0;
    c9fe:	4492      	add	sl, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ca00:	b11b      	cbz	r3, ca0a <am_util_stdio_vsprintf+0x53a>
    ca02:	f1b8 0f20 	cmp.w	r8, #32
    ca06:	f000 8132 	beq.w	cc6e <am_util_stdio_vsprintf+0x79e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ca0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ca0e:	4652      	mov	r2, sl
    ca10:	f7ff fc88 	bl	c324 <uint64_to_str>
                if ( pcBuf )
    ca14:	f1ba 0f00 	cmp.w	sl, #0
    ca18:	d081      	beq.n	c91e <am_util_stdio_vsprintf+0x44e>
                    pcBuf += iVal;
    ca1a:	4482      	add	sl, r0
                ui32CharCnt += iVal;
    ca1c:	4483      	add	fp, r0
    ca1e:	e55f      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca20:	9a01      	ldr	r2, [sp, #4]
    ca22:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    ca24:	3204      	adds	r2, #4
    ca26:	9201      	str	r2, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca28:	4619      	mov	r1, r3
    ca2a:	2200      	movs	r2, #0
    ca2c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
                if ( iWidth )
    ca30:	2c00      	cmp	r4, #0
    ca32:	f040 8127 	bne.w	cc84 <am_util_stdio_vsprintf+0x7b4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ca36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ca3a:	4652      	mov	r2, sl
    ca3c:	f7ff fc72 	bl	c324 <uint64_to_str>
                if ( pcBuf )
    ca40:	f1ba 0f00 	cmp.w	sl, #0
    ca44:	d1e9      	bne.n	ca1a <am_util_stdio_vsprintf+0x54a>
    ca46:	f04f 0a00 	mov.w	sl, #0
                ui32CharCnt += iVal;
    ca4a:	4483      	add	fp, r0
    ca4c:	e548      	b.n	c4e0 <am_util_stdio_vsprintf+0x10>
                bLower = true;
    ca4e:	2501      	movs	r5, #1
    ca50:	e74b      	b.n	c8ea <am_util_stdio_vsprintf+0x41a>
        bLower = bLongLong = false;
    ca52:	2300      	movs	r3, #0
                bLower = true;
    ca54:	2501      	movs	r5, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca56:	2b00      	cmp	r3, #0
    ca58:	f43f af47 	beq.w	c8ea <am_util_stdio_vsprintf+0x41a>
    ca5c:	9b01      	ldr	r3, [sp, #4]
    ca5e:	3307      	adds	r3, #7
    ca60:	f023 0307 	bic.w	r3, r3, #7
    ca64:	f103 0208 	add.w	r2, r3, #8
    ca68:	9201      	str	r2, [sp, #4]
    ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
                if ( iWidth )
    ca6e:	2c00      	cmp	r4, #0
    ca70:	f43f af43 	beq.w	c8fa <am_util_stdio_vsprintf+0x42a>
    int iDigits = ui64Val ? 0 : 1;
    ca74:	ea52 0103 	orrs.w	r1, r2, r3
    ca78:	bf0c      	ite	eq
    ca7a:	2401      	moveq	r4, #1
    ca7c:	2400      	movne	r4, #0
    while ( ui64Val )
    ca7e:	ea52 0103 	orrs.w	r1, r2, r3
    ca82:	d00c      	beq.n	ca9e <am_util_stdio_vsprintf+0x5ce>
    ca84:	4610      	mov	r0, r2
    ca86:	4619      	mov	r1, r3
        ui64Val >>= 4;
    ca88:	0906      	lsrs	r6, r0, #4
    ca8a:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    ca8e:	090f      	lsrs	r7, r1, #4
    ca90:	4630      	mov	r0, r6
    ca92:	4639      	mov	r1, r7
    while ( ui64Val )
    ca94:	ea50 0601 	orrs.w	r6, r0, r1
        ++iDigits;
    ca98:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    ca9c:	d1f4      	bne.n	ca88 <am_util_stdio_vsprintf+0x5b8>
                    iWidth -= ndigits_in_hex(ui64Val);
    ca9e:	990e      	ldr	r1, [sp, #56]	; 0x38
    caa0:	1b09      	subs	r1, r1, r4
    if ( i32NumChars <= 0 )
    caa2:	2900      	cmp	r1, #0
    caa4:	f300 81a1 	bgt.w	cdea <am_util_stdio_vsprintf+0x91a>
    caa8:	2000      	movs	r0, #0
                    pcBuf += pcBuf ? iWidth : 0;
    caaa:	f1ba 0f00 	cmp.w	sl, #0
    caae:	f000 81b5 	beq.w	ce1c <am_util_stdio_vsprintf+0x94c>
    if ( ui64Val == 0 )
    cab2:	ea52 0103 	orrs.w	r1, r2, r3
    cab6:	4482      	add	sl, r0
    cab8:	f43f af23 	beq.w	c902 <am_util_stdio_vsprintf+0x432>
    cabc:	2d00      	cmp	r5, #0
    cabe:	bf14      	ite	ne
    cac0:	2527      	movne	r5, #39	; 0x27
    cac2:	2507      	moveq	r5, #7
    if ( i32NumChars <= 0 )
    cac4:	af15      	add	r7, sp, #84	; 0x54
    int iNumDig, ix = 0;
    cac6:	2600      	movs	r6, #0
    cac8:	f8cd 9008 	str.w	r9, [sp, #8]
        ui64Val >>= 4;
    cacc:	0914      	lsrs	r4, r2, #4
        cCh = ui64Val & 0xf;
    cace:	f002 020f 	and.w	r2, r2, #15
        ui64Val >>= 4;
    cad2:	ea4f 1813 	mov.w	r8, r3, lsr #4
            cCh += bLower ? 0x27 : 0x7;
    cad6:	18a8      	adds	r0, r5, r2
        if ( cCh > 9 )
    cad8:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    cada:	46c6      	mov	lr, r8
    cadc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    cae0:	f100 0030 	add.w	r0, r0, #48	; 0x30
    cae4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    cae8:	f106 0901 	add.w	r9, r6, #1
        if ( cCh > 9 )
    caec:	d978      	bls.n	cbe0 <am_util_stdio_vsprintf+0x710>
        ui64Val >>= 4;
    caee:	4622      	mov	r2, r4
    caf0:	4643      	mov	r3, r8
    while ( ui64Val )
    caf2:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    caf6:	f807 0b01 	strb.w	r0, [r7], #1
    while ( ui64Val )
    cafa:	d07a      	beq.n	cbf2 <am_util_stdio_vsprintf+0x722>
    if ( i32NumChars <= 0 )
    cafc:	464e      	mov	r6, r9
    cafe:	e7e5      	b.n	cacc <am_util_stdio_vsprintf+0x5fc>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cb00:	9b01      	ldr	r3, [sp, #4]
    cb02:	3307      	adds	r3, #7
    cb04:	f023 0307 	bic.w	r3, r3, #7
    cb08:	f103 0208 	add.w	r2, r3, #8
    cb0c:	9201      	str	r2, [sp, #4]
    cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb12:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    cb16:	e78b      	b.n	ca30 <am_util_stdio_vsprintf+0x560>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cb18:	9b01      	ldr	r3, [sp, #4]
    cb1a:	3307      	adds	r3, #7
    cb1c:	f023 0307 	bic.w	r3, r3, #7
    cb20:	f103 0208 	add.w	r2, r3, #8
    cb24:	9201      	str	r2, [sp, #4]
    cb26:	e9d3 0100 	ldrd	r0, r1, [r3]
    cb2a:	e6ff      	b.n	c92c <am_util_stdio_vsprintf+0x45c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb30:	085b      	lsrs	r3, r3, #1
    cb32:	ea4f 0232 	mov.w	r2, r2, rrx
    cb36:	1990      	adds	r0, r2, r6
    cb38:	eb43 0107 	adc.w	r1, r3, r7
        q64 += (q64 >> 4);
    cb3c:	0903      	lsrs	r3, r0, #4
    cb3e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    cb42:	9308      	str	r3, [sp, #32]
    cb44:	090b      	lsrs	r3, r1, #4
    cb46:	9309      	str	r3, [sp, #36]	; 0x24
    cb48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cb4c:	1812      	adds	r2, r2, r0
    cb4e:	414b      	adcs	r3, r1
        q64 += (q64 >> 8);
    cb50:	0a11      	lsrs	r1, r2, #8
    cb52:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cb56:	9106      	str	r1, [sp, #24]
    cb58:	0a19      	lsrs	r1, r3, #8
    cb5a:	9107      	str	r1, [sp, #28]
    cb5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cb60:	1880      	adds	r0, r0, r2
    cb62:	4159      	adcs	r1, r3
    cb64:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    cb66:	0c01      	lsrs	r1, r0, #16
    cb68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cb6c:	9104      	str	r1, [sp, #16]
    cb6e:	0c19      	lsrs	r1, r3, #16
    cb70:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    cb72:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    cb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cb78:	1880      	adds	r0, r0, r2
    cb7a:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cb7c:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cb80:	4602      	mov	r2, r0
    cb82:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cb84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cb88:	1880      	adds	r0, r0, r2
    cb8a:	4159      	adcs	r1, r3
        q64 >>= 3;
    cb8c:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cb90:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cb94:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cb9c:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cba0:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cba4:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cba8:	eb12 0408 	adds.w	r4, r2, r8
    cbac:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cbb0:	3006      	adds	r0, #6
    cbb2:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cbb6:	1922      	adds	r2, r4, r4
    cbb8:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cbbc:	1a80      	subs	r0, r0, r2
    cbbe:	eb61 0103 	sbc.w	r1, r1, r3
    cbc2:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cbc6:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cbca:	eb1a 0308 	adds.w	r3, sl, r8
    cbce:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cbd2:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cbd6:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cbda:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cbde:	e6c3      	b.n	c968 <am_util_stdio_vsprintf+0x498>
        ui64Val >>= 4;
    cbe0:	4622      	mov	r2, r4
    cbe2:	4643      	mov	r3, r8
    while ( ui64Val )
    cbe4:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cbe8:	f106 0901 	add.w	r9, r6, #1
    cbec:	f807 cb01 	strb.w	ip, [r7], #1
    while ( ui64Val )
    cbf0:	d184      	bne.n	cafc <am_util_stdio_vsprintf+0x62c>
    cbf2:	464d      	mov	r5, r9
    cbf4:	4628      	mov	r0, r5
    cbf6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    if (pcBuf)
    cbfa:	f1ba 0f00 	cmp.w	sl, #0
    cbfe:	f43f af22 	beq.w	ca46 <am_util_stdio_vsprintf+0x576>
    cc02:	ab15      	add	r3, sp, #84	; 0x54
    cc04:	eb0a 0405 	add.w	r4, sl, r5
    cc08:	442b      	add	r3, r5
    cc0a:	f10a 32ff 	add.w	r2, sl, #4294967295
            *pcBuf++ = tbuf[ix];
    cc0e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cc12:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cc16:	a915      	add	r1, sp, #84	; 0x54
    cc18:	4299      	cmp	r1, r3
    cc1a:	d1f8      	bne.n	cc0e <am_util_stdio_vsprintf+0x73e>
    cc1c:	4455      	add	r5, sl
    cc1e:	46a2      	mov	sl, r4
    cc20:	e67b      	b.n	c91a <am_util_stdio_vsprintf+0x44a>
    cc22:	46ba      	mov	sl, r7
                if ( iWidth )
    cc24:	2900      	cmp	r1, #0
    cc26:	f43f ae46 	beq.w	c8b6 <am_util_stdio_vsprintf+0x3e6>
                    iWidth = -iWidth;
    cc2a:	4249      	negs	r1, r1
                    if ( ui32strlen < iWidth )
    cc2c:	42b1      	cmp	r1, r6
    cc2e:	f67f ae42 	bls.w	c8b6 <am_util_stdio_vsprintf+0x3e6>
                        iWidth -= ui32strlen;
    cc32:	1b89      	subs	r1, r1, r6
    if ( i32NumChars <= 0 )
    cc34:	2900      	cmp	r1, #0
    cc36:	f300 8163 	bgt.w	cf00 <am_util_stdio_vsprintf+0xa30>
    cc3a:	2100      	movs	r1, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cc3c:	f1ba 0f00 	cmp.w	sl, #0
    cc40:	f43f ae39 	beq.w	c8b6 <am_util_stdio_vsprintf+0x3e6>
    cc44:	448a      	add	sl, r1
    cc46:	e636      	b.n	c8b6 <am_util_stdio_vsprintf+0x3e6>
    cc48:	7891      	ldrb	r1, [r2, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc4a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cc4e:	2b09      	cmp	r3, #9
        pcStr++;
    cc50:	f102 0002 	add.w	r0, r2, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc54:	f200 8234 	bhi.w	d0c0 <am_util_stdio_vsprintf+0xbf0>
        bNeg = true;
    cc58:	2601      	movs	r6, #1
        uCnt++;
    cc5a:	4632      	mov	r2, r6
    cc5c:	e5e2      	b.n	c824 <am_util_stdio_vsprintf+0x354>
                    ui64Val = -i64Val;          // Get absolute value
    cc5e:	4240      	negs	r0, r0
    cc60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cc64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cc68:	2c00      	cmp	r4, #0
    cc6a:	f040 80fa 	bne.w	ce62 <am_util_stdio_vsprintf+0x992>
                        if ( pcBuf )
    cc6e:	f1ba 0f00 	cmp.w	sl, #0
    cc72:	d004      	beq.n	cc7e <am_util_stdio_vsprintf+0x7ae>
                            *pcBuf++ = '-';
    cc74:	232d      	movs	r3, #45	; 0x2d
    cc76:	f88a 3000 	strb.w	r3, [sl]
    cc7a:	f10a 0a01 	add.w	sl, sl, #1
                        ++ui32CharCnt;
    cc7e:	f10b 0b01 	add.w	fp, fp, #1
    cc82:	e6c2      	b.n	ca0a <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    cc84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cc88:	4603      	mov	r3, r0
    cc8a:	430b      	orrs	r3, r1
    while ( ui64Val )
    cc8c:	460c      	mov	r4, r1
    cc8e:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    cc90:	bf0c      	ite	eq
    cc92:	f04f 0e01 	moveq.w	lr, #1
    cc96:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cc9a:	4323      	orrs	r3, r4
    cc9c:	d03c      	beq.n	cd18 <am_util_stdio_vsprintf+0x848>
    cc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cca2:	e9cd ba10 	strd	fp, sl, [sp, #64]	; 0x40
    cca6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    ccaa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccae:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
        q64 += (q64 >> 4);
    ccb2:	2300      	movs	r3, #0
    ccb4:	2400      	movs	r4, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccb6:	08a8      	lsrs	r0, r5, #2
        q64 += (q64 >> 4);
    ccb8:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    ccbc:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    ccc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    ccc4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccc8:	ea40 7086 	orr.w	r0, r0, r6, lsl #30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cccc:	462c      	mov	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccce:	08b1      	lsrs	r1, r6, #2
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ccd0:	086e      	lsrs	r6, r5, #1
    ccd2:	eb06 0694 	add.w	r6, r6, r4, lsr #2
        q32 += (q32 >> 4);
    ccd6:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    if ( ui64Val >> 32 )
    ccda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        q32 += (q32 >> 8);
    ccde:	eb06 2616 	add.w	r6, r6, r6, lsr #8
        q32 += (q32 >> 16);
    cce2:	eb06 4616 	add.w	r6, r6, r6, lsr #16
        q32 >>= 3;
    cce6:	08f6      	lsrs	r6, r6, #3
        r32 = ui32Val - q32*10;
    cce8:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
    if ( ui64Val >> 32 )
    ccec:	461c      	mov	r4, r3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccee:	1d97      	adds	r7, r2, #6
    if ( ui64Val >> 32 )
    ccf0:	2500      	movs	r5, #0
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccf2:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
    if ( ui64Val >> 32 )
    ccf6:	ea54 0305 	orrs.w	r3, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccfa:	eb06 1617 	add.w	r6, r6, r7, lsr #4
    if ( ui64Val >> 32 )
    ccfe:	d118      	bne.n	cd32 <am_util_stdio_vsprintf+0x862>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd00:	4633      	mov	r3, r6
    cd02:	2400      	movs	r4, #0
        ++iNDigits;
    cd04:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd08:	e9cd 3402 	strd	r3, r4, [sp, #8]
    while ( ui64Val )
    cd0c:	2e00      	cmp	r6, #0
    cd0e:	d1ce      	bne.n	ccae <am_util_stdio_vsprintf+0x7de>
    cd10:	e9dd 8b0f 	ldrd	r8, fp, [sp, #60]	; 0x3c
    cd14:	e9dd a911 	ldrd	sl, r9, [sp, #68]	; 0x44
                    iWidth -= ndigits_in_u64(ui64Val);
    cd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd1a:	eba3 030e 	sub.w	r3, r3, lr
    if ( i32NumChars <= 0 )
    cd1e:	2b00      	cmp	r3, #0
    cd20:	f300 80c7 	bgt.w	ceb2 <am_util_stdio_vsprintf+0x9e2>
    cd24:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cd26:	f1ba 0f00 	cmp.w	sl, #0
    cd2a:	f000 8190 	beq.w	d04e <am_util_stdio_vsprintf+0xb7e>
    cd2e:	4492      	add	sl, r2
    cd30:	e681      	b.n	ca36 <am_util_stdio_vsprintf+0x566>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cd32:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cd36:	087f      	lsrs	r7, r7, #1
    cd38:	ea4f 0636 	mov.w	r6, r6, rrx
    cd3c:	1982      	adds	r2, r0, r6
    cd3e:	eb41 0307 	adc.w	r3, r1, r7
        q64 += (q64 >> 4);
    cd42:	0911      	lsrs	r1, r2, #4
    cd44:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    cd48:	9108      	str	r1, [sp, #32]
    cd4a:	0919      	lsrs	r1, r3, #4
    cd4c:	9109      	str	r1, [sp, #36]	; 0x24
    cd4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    cd52:	1880      	adds	r0, r0, r2
    cd54:	4159      	adcs	r1, r3
    cd56:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    cd58:	0a01      	lsrs	r1, r0, #8
    cd5a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cd5e:	9106      	str	r1, [sp, #24]
    cd60:	0a19      	lsrs	r1, r3, #8
    cd62:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 4);
    cd64:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    cd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cd6a:	1880      	adds	r0, r0, r2
    cd6c:	4159      	adcs	r1, r3
    cd6e:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    cd70:	0c01      	lsrs	r1, r0, #16
    cd72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cd76:	9104      	str	r1, [sp, #16]
    cd78:	0c19      	lsrs	r1, r3, #16
    cd7a:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    cd7c:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    cd7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cd82:	1880      	adds	r0, r0, r2
    cd84:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cd86:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cd8a:	4602      	mov	r2, r0
    cd8c:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cd8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cd92:	1880      	adds	r0, r0, r2
    cd94:	4159      	adcs	r1, r3
        q64 >>= 3;
    cd96:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cd9a:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cd9e:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cda6:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cdaa:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cdae:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cdb2:	eb12 0408 	adds.w	r4, r2, r8
    cdb6:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cdba:	3006      	adds	r0, #6
    cdbc:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cdc0:	1922      	adds	r2, r4, r4
    cdc2:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cdc6:	1a80      	subs	r0, r0, r2
    cdc8:	eb61 0103 	sbc.w	r1, r1, r3
    cdcc:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cdd0:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cdd4:	eb1a 0308 	adds.w	r3, sl, r8
    cdd8:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cddc:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cde0:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cde4:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cde8:	e761      	b.n	ccae <am_util_stdio_vsprintf+0x7de>
    while ( i32NumChars-- )
    cdea:	3901      	subs	r1, #1
    cdec:	4656      	mov	r6, sl
    int32_t i32Cnt = 0;
    cdee:	2000      	movs	r0, #0
    cdf0:	1e4f      	subs	r7, r1, #1
    cdf2:	1c44      	adds	r4, r0, #1
        if ( pcBuf )
    cdf4:	b156      	cbz	r6, ce0c <am_util_stdio_vsprintf+0x93c>
            *pcBuf++ = cPadChar;
    cdf6:	46bc      	mov	ip, r7
    cdf8:	460f      	mov	r7, r1
    cdfa:	f886 8000 	strb.w	r8, [r6]
    cdfe:	4620      	mov	r0, r4
    ce00:	4661      	mov	r1, ip
    ce02:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    ce04:	2f00      	cmp	r7, #0
    ce06:	d1f3      	bne.n	cdf0 <am_util_stdio_vsprintf+0x920>
    ce08:	4483      	add	fp, r0
    ce0a:	e64e      	b.n	caaa <am_util_stdio_vsprintf+0x5da>
    ce0c:	2900      	cmp	r1, #0
    ce0e:	f000 8126 	beq.w	d05e <am_util_stdio_vsprintf+0xb8e>
    ce12:	3902      	subs	r1, #2
    ce14:	3002      	adds	r0, #2
    ce16:	2f00      	cmp	r7, #0
    ce18:	d1ea      	bne.n	cdf0 <am_util_stdio_vsprintf+0x920>
    ce1a:	e7f5      	b.n	ce08 <am_util_stdio_vsprintf+0x938>
    if ( ui64Val == 0 )
    ce1c:	ea52 0103 	orrs.w	r1, r2, r3
    ce20:	f47f ae4c 	bne.w	cabc <am_util_stdio_vsprintf+0x5ec>
    ce24:	2001      	movs	r0, #1
    ce26:	e60e      	b.n	ca46 <am_util_stdio_vsprintf+0x576>
    uint32_t ui32Val = 0, uCnt = 0;
    ce28:	2200      	movs	r2, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce2a:	4613      	mov	r3, r2
    ce2c:	e50b      	b.n	c846 <am_util_stdio_vsprintf+0x376>
    while ( i32NumChars-- )
    ce2e:	f10e 33ff 	add.w	r3, lr, #4294967295
    ce32:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    ce34:	2200      	movs	r2, #0
    ce36:	1e5c      	subs	r4, r3, #1
    ce38:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    ce3a:	b150      	cbz	r0, ce52 <am_util_stdio_vsprintf+0x982>
            *pcBuf++ = cPadChar;
    ce3c:	4625      	mov	r5, r4
    ce3e:	461c      	mov	r4, r3
    ce40:	f880 8000 	strb.w	r8, [r0]
    ce44:	460a      	mov	r2, r1
    ce46:	462b      	mov	r3, r5
    ce48:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    ce4a:	2c00      	cmp	r4, #0
    ce4c:	d1f3      	bne.n	ce36 <am_util_stdio_vsprintf+0x966>
    ce4e:	4493      	add	fp, r2
    ce50:	e5d0      	b.n	c9f4 <am_util_stdio_vsprintf+0x524>
    ce52:	2b00      	cmp	r3, #0
    ce54:	f000 8110 	beq.w	d078 <am_util_stdio_vsprintf+0xba8>
    ce58:	3b02      	subs	r3, #2
    ce5a:	3202      	adds	r2, #2
    ce5c:	2c00      	cmp	r4, #0
    ce5e:	d1ea      	bne.n	ce36 <am_util_stdio_vsprintf+0x966>
    ce60:	e7f5      	b.n	ce4e <am_util_stdio_vsprintf+0x97e>
    int iNDigits = ui64Val ? 0 : 1;
    ce62:	4603      	mov	r3, r0
    ce64:	430b      	orrs	r3, r1
    ce66:	bf0c      	ite	eq
    ce68:	f04f 0e01 	moveq.w	lr, #1
    ce6c:	f04f 0e00 	movne.w	lr, #0
                    bNeg = true;
    ce70:	2301      	movs	r3, #1
    ce72:	e571      	b.n	c958 <am_util_stdio_vsprintf+0x488>
    else if (iExp2 >= 0)
    ce74:	2a00      	cmp	r2, #0
    ce76:	f2c0 80f5 	blt.w	d064 <am_util_stdio_vsprintf+0xb94>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ce7a:	f1a1 047e 	sub.w	r4, r1, #126	; 0x7e
    ce7e:	fa00 f404 	lsl.w	r4, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    ce82:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    ce86:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ce88:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    ce8c:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    ce90:	f2c0 80d5 	blt.w	d03e <am_util_stdio_vsprintf+0xb6e>
    ce94:	4656      	mov	r6, sl
            uint64_to_str(i32IntPart, pcBuf);
    ce96:	4632      	mov	r2, r6
    ce98:	17c1      	asrs	r1, r0, #31
    ce9a:	f7ff fa43 	bl	c324 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    ce9e:	7833      	ldrb	r3, [r6, #0]
    cea0:	b90b      	cbnz	r3, cea6 <am_util_stdio_vsprintf+0x9d6>
    cea2:	e100      	b.n	d0a6 <am_util_stdio_vsprintf+0xbd6>
    cea4:	463e      	mov	r6, r7
    cea6:	7873      	ldrb	r3, [r6, #1]
            pcBuf++;
    cea8:	1c77      	adds	r7, r6, #1
        while (*pcBuf)    // Get to end of new string
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d1fa      	bne.n	cea4 <am_util_stdio_vsprintf+0x9d4>
    ceae:	1cb2      	adds	r2, r6, #2
    ceb0:	e480      	b.n	c7b4 <am_util_stdio_vsprintf+0x2e4>
    while ( i32NumChars-- )
    ceb2:	3b01      	subs	r3, #1
    ceb4:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    ceb6:	2200      	movs	r2, #0
    ceb8:	1c51      	adds	r1, r2, #1
    ceba:	1e5c      	subs	r4, r3, #1
        if ( pcBuf )
    cebc:	2800      	cmp	r0, #0
    cebe:	d042      	beq.n	cf46 <am_util_stdio_vsprintf+0xa76>
            *pcBuf++ = cPadChar;
    cec0:	4625      	mov	r5, r4
    cec2:	f880 8000 	strb.w	r8, [r0]
    cec6:	461c      	mov	r4, r3
    cec8:	460a      	mov	r2, r1
    ceca:	462b      	mov	r3, r5
    cecc:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cece:	2c00      	cmp	r4, #0
    ced0:	d1f2      	bne.n	ceb8 <am_util_stdio_vsprintf+0x9e8>
    ced2:	4493      	add	fp, r2
    ced4:	e727      	b.n	cd26 <am_util_stdio_vsprintf+0x856>
    ced6:	1e48      	subs	r0, r1, #1
    ced8:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    ceda:	2300      	movs	r3, #0
    cedc:	1c59      	adds	r1, r3, #1
    cede:	1e45      	subs	r5, r0, #1
        if ( pcBuf )
    cee0:	b3bc      	cbz	r4, cf52 <am_util_stdio_vsprintf+0xa82>
            *pcBuf++ = cPadChar;
    cee2:	f884 8000 	strb.w	r8, [r4]
    cee6:	460b      	mov	r3, r1
    cee8:	3401      	adds	r4, #1
    ceea:	4601      	mov	r1, r0
    while ( i32NumChars-- )
    ceec:	4628      	mov	r0, r5
    ceee:	2900      	cmp	r1, #0
    cef0:	d1f4      	bne.n	cedc <am_util_stdio_vsprintf+0xa0c>
    cef2:	eb0b 0403 	add.w	r4, fp, r3
    cef6:	e4ec      	b.n	c8d2 <am_util_stdio_vsprintf+0x402>
                bLongLong = true;
    cef8:	2301      	movs	r3, #1
    cefa:	e5ab      	b.n	ca54 <am_util_stdio_vsprintf+0x584>
        bLower = bLongLong = false;
    cefc:	2500      	movs	r5, #0
    cefe:	e5ad      	b.n	ca5c <am_util_stdio_vsprintf+0x58c>
    while ( i32NumChars-- )
    cf00:	1e4b      	subs	r3, r1, #1
    cf02:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    cf04:	2100      	movs	r1, #0
    cf06:	1c48      	adds	r0, r1, #1
    cf08:	1e5d      	subs	r5, r3, #1
        if ( pcBuf )
    cf0a:	b34c      	cbz	r4, cf60 <am_util_stdio_vsprintf+0xa90>
            *pcBuf++ = cPadChar;
    cf0c:	f884 8000 	strb.w	r8, [r4]
    cf10:	4601      	mov	r1, r0
    cf12:	3401      	adds	r4, #1
    cf14:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    cf16:	462b      	mov	r3, r5
    cf18:	2800      	cmp	r0, #0
    cf1a:	d1f4      	bne.n	cf06 <am_util_stdio_vsprintf+0xa36>
    cf1c:	448b      	add	fp, r1
    cf1e:	e68d      	b.n	cc3c <am_util_stdio_vsprintf+0x76c>
                if ( iWidth > 0 )
    cf20:	2900      	cmp	r1, #0
    cf22:	f340 809a 	ble.w	d05a <am_util_stdio_vsprintf+0xb8a>
                    if ( ui32strlen < iWidth )
    cf26:	4606      	mov	r6, r0
    cf28:	1b89      	subs	r1, r1, r6
    cf2a:	e4cd      	b.n	c8c8 <am_util_stdio_vsprintf+0x3f8>
                            if ( pcBuf )
    cf2c:	f1ba 0f00 	cmp.w	sl, #0
    cf30:	d004      	beq.n	cf3c <am_util_stdio_vsprintf+0xa6c>
                                *pcBuf++ = '-';
    cf32:	232d      	movs	r3, #45	; 0x2d
    cf34:	f88a 3000 	strb.w	r3, [sl]
    cf38:	f10a 0a01 	add.w	sl, sl, #1
                            ++ui32CharCnt;
    cf3c:	2301      	movs	r3, #1
    cf3e:	f10b 0b01 	add.w	fp, fp, #1
    cf42:	930f      	str	r3, [sp, #60]	; 0x3c
    cf44:	e551      	b.n	c9ea <am_util_stdio_vsprintf+0x51a>
    while ( i32NumChars-- )
    cf46:	2b00      	cmp	r3, #0
    cf48:	f000 80a1 	beq.w	d08e <am_util_stdio_vsprintf+0xbbe>
    cf4c:	3b02      	subs	r3, #2
    cf4e:	3202      	adds	r2, #2
    cf50:	e7bd      	b.n	cece <am_util_stdio_vsprintf+0x9fe>
    cf52:	2800      	cmp	r0, #0
    cf54:	f000 809e 	beq.w	d094 <am_util_stdio_vsprintf+0xbc4>
    cf58:	4629      	mov	r1, r5
    cf5a:	3302      	adds	r3, #2
    cf5c:	1e85      	subs	r5, r0, #2
    cf5e:	e7c5      	b.n	ceec <am_util_stdio_vsprintf+0xa1c>
    cf60:	2b00      	cmp	r3, #0
    cf62:	f000 809d 	beq.w	d0a0 <am_util_stdio_vsprintf+0xbd0>
    cf66:	4628      	mov	r0, r5
    cf68:	3102      	adds	r1, #2
    cf6a:	1e9d      	subs	r5, r3, #2
    cf6c:	e7d3      	b.n	cf16 <am_util_stdio_vsprintf+0xa46>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cf6e:	eba2 010a 	sub.w	r1, r2, sl
    cf72:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cf76:	42ab      	cmp	r3, r5
    cf78:	bfa8      	it	ge
    cf7a:	462b      	movge	r3, r5
        for (jx = 0; jx < iMax; jx++)
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	dd0d      	ble.n	cf9c <am_util_stdio_vsprintf+0xacc>
    cf80:	18d1      	adds	r1, r2, r3
            i32FracPart *= 10;
    cf82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cf86:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cf88:	1623      	asrs	r3, r4, #24
    cf8a:	3330      	adds	r3, #48	; 0x30
    cf8c:	f802 3b01 	strb.w	r3, [r2], #1
        for (jx = 0; jx < iMax; jx++)
    cf90:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
    cf92:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cf96:	d1f4      	bne.n	cf82 <am_util_stdio_vsprintf+0xab2>
    cf98:	eba2 010a 	sub.w	r1, r2, sl
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cf9c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cfa0:	f344 53c7 	sbfx	r3, r4, #23, #8
    cfa4:	2b04      	cmp	r3, #4
    cfa6:	f77f ac10 	ble.w	c7ca <am_util_stdio_vsprintf+0x2fa>
            pcBuftmp = pcBuf - 1;
    cfaa:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    cfac:	459a      	cmp	sl, r3
    cfae:	f63f ac0c 	bhi.w	c7ca <am_util_stdio_vsprintf+0x2fa>
    cfb2:	f10a 35ff 	add.w	r5, sl, #4294967295
    cfb6:	e005      	b.n	cfc4 <am_util_stdio_vsprintf+0xaf4>
                    *pcBuftmp = '0';
    cfb8:	f04f 0030 	mov.w	r0, #48	; 0x30
    cfbc:	7058      	strb	r0, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    cfbe:	429d      	cmp	r5, r3
    cfc0:	f43f ac03 	beq.w	c7ca <am_util_stdio_vsprintf+0x2fa>
    cfc4:	461c      	mov	r4, r3
                if ( *pcBuftmp == '.' )
    cfc6:	f813 0901 	ldrb.w	r0, [r3], #-1
    cfca:	282e      	cmp	r0, #46	; 0x2e
    cfcc:	d0f7      	beq.n	cfbe <am_util_stdio_vsprintf+0xaee>
                else if ( *pcBuftmp == '9' )
    cfce:	2839      	cmp	r0, #57	; 0x39
    cfd0:	d0f2      	beq.n	cfb8 <am_util_stdio_vsprintf+0xae8>
                    *pcBuftmp += 1;
    cfd2:	3001      	adds	r0, #1
    cfd4:	7020      	strb	r0, [r4, #0]
    cfd6:	f7ff bbf8 	b.w	c7ca <am_util_stdio_vsprintf+0x2fa>
                while (*pcStr != 0x0)
    cfda:	7838      	ldrb	r0, [r7, #0]
    cfdc:	2800      	cmp	r0, #0
    cfde:	d03c      	beq.n	d05a <am_util_stdio_vsprintf+0xb8a>
    cfe0:	465c      	mov	r4, fp
        return ui32RetVal;
    cfe2:	463e      	mov	r6, r7
    cfe4:	2301      	movs	r3, #1
    cfe6:	e44a      	b.n	c87e <am_util_stdio_vsprintf+0x3ae>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cfe8:	4b39      	ldr	r3, [pc, #228]	; (d0d0 <am_util_stdio_vsprintf+0xc00>)
    cfea:	f8ca 3000 	str.w	r3, [sl]
    cfee:	2303      	movs	r3, #3
    cff0:	f7ff bbf1 	b.w	c7d6 <am_util_stdio_vsprintf+0x306>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cff6:	b11b      	cbz	r3, d000 <am_util_stdio_vsprintf+0xb30>
    cff8:	f1b8 0f20 	cmp.w	r8, #32
    cffc:	f43f ae3f 	beq.w	cc7e <am_util_stdio_vsprintf+0x7ae>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d004:	4652      	mov	r2, sl
    d006:	f7ff f98d 	bl	c324 <uint64_to_str>
                ui32CharCnt += iVal;
    d00a:	4483      	add	fp, r0
    d00c:	f7ff ba68 	b.w	c4e0 <am_util_stdio_vsprintf+0x10>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d010:	1c4b      	adds	r3, r1, #1
    d012:	d034      	beq.n	d07e <am_util_stdio_vsprintf+0xbae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d014:	3102      	adds	r1, #2
    d016:	d141      	bne.n	d09c <am_util_stdio_vsprintf+0xbcc>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d018:	4b2e      	ldr	r3, [pc, #184]	; (d0d4 <am_util_stdio_vsprintf+0xc04>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d01a:	f8ca 3000 	str.w	r3, [sl]
    d01e:	2303      	movs	r3, #3
    d020:	f7ff bbd9 	b.w	c7d6 <am_util_stdio_vsprintf+0x306>
        if (i32IntPart > 0)
    d024:	f73f af37 	bgt.w	ce96 <am_util_stdio_vsprintf+0x9c6>
            uint64_to_str(-i32IntPart, pcBuf);
    d028:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    d02a:	232d      	movs	r3, #45	; 0x2d
    d02c:	7033      	strb	r3, [r6, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d02e:	463a      	mov	r2, r7
    d030:	17c1      	asrs	r1, r0, #31
    d032:	463e      	mov	r6, r7
    d034:	f7ff f976 	bl	c324 <uint64_to_str>
    d038:	3701      	adds	r7, #1
    d03a:	e730      	b.n	ce9e <am_util_stdio_vsprintf+0x9ce>
    i32FracPart = 0;
    d03c:	2400      	movs	r4, #0
        *pcBuf++ = '-';
    d03e:	4653      	mov	r3, sl
    d040:	222d      	movs	r2, #45	; 0x2d
    d042:	f803 2b02 	strb.w	r2, [r3], #2
    d046:	463e      	mov	r6, r7
    d048:	461f      	mov	r7, r3
    d04a:	f7ff bbac 	b.w	c7a6 <am_util_stdio_vsprintf+0x2d6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d04e:	4652      	mov	r2, sl
    d050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d054:	f7ff f966 	bl	c324 <uint64_to_str>
    d058:	e4f5      	b.n	ca46 <am_util_stdio_vsprintf+0x576>
        return ui32RetVal;
    d05a:	4606      	mov	r6, r0
    d05c:	e428      	b.n	c8b0 <am_util_stdio_vsprintf+0x3e0>
    d05e:	4620      	mov	r0, r4
    d060:	44a3      	add	fp, r4
    d062:	e522      	b.n	caaa <am_util_stdio_vsprintf+0x5da>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d064:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d066:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d068:	fa40 f402 	asr.w	r4, r0, r2
    d06c:	f10a 0202 	add.w	r2, sl, #2
    if (unFloatValue.I32 < 0)
    d070:	db1d      	blt.n	d0ae <am_util_stdio_vsprintf+0xbde>
    d072:	4656      	mov	r6, sl
    d074:	f7ff bb9b 	b.w	c7ae <am_util_stdio_vsprintf+0x2de>
    d078:	460a      	mov	r2, r1
    d07a:	448b      	add	fp, r1
    d07c:	e4ba      	b.n	c9f4 <am_util_stdio_vsprintf+0x524>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d07e:	4b14      	ldr	r3, [pc, #80]	; (d0d0 <am_util_stdio_vsprintf+0xc00>)
    d080:	e7cb      	b.n	d01a <am_util_stdio_vsprintf+0xb4a>
                    iWidth -= ndigits_in_i64(ui64Val);
    d082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d084:	eba3 0e0e 	sub.w	lr, r3, lr
                    bNeg = false;
    d088:	2300      	movs	r3, #0
    d08a:	930f      	str	r3, [sp, #60]	; 0x3c
    d08c:	e4ad      	b.n	c9ea <am_util_stdio_vsprintf+0x51a>
    d08e:	460a      	mov	r2, r1
    d090:	448b      	add	fp, r1
    d092:	e648      	b.n	cd26 <am_util_stdio_vsprintf+0x856>
    d094:	460b      	mov	r3, r1
    d096:	eb0b 0401 	add.w	r4, fp, r1
    d09a:	e41a      	b.n	c8d2 <am_util_stdio_vsprintf+0x402>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d09c:	4b0e      	ldr	r3, [pc, #56]	; (d0d8 <am_util_stdio_vsprintf+0xc08>)
    d09e:	e7bc      	b.n	d01a <am_util_stdio_vsprintf+0xb4a>
    d0a0:	4601      	mov	r1, r0
    d0a2:	4483      	add	fp, r0
    d0a4:	e5ca      	b.n	cc3c <am_util_stdio_vsprintf+0x76c>
        while (*pcBuf)    // Get to end of new string
    d0a6:	463a      	mov	r2, r7
    d0a8:	4637      	mov	r7, r6
    d0aa:	f7ff bb83 	b.w	c7b4 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf++ = '-';
    d0ae:	4653      	mov	r3, sl
    d0b0:	212d      	movs	r1, #45	; 0x2d
    d0b2:	f803 1b03 	strb.w	r1, [r3], #3
    d0b6:	463e      	mov	r6, r7
    d0b8:	4617      	mov	r7, r2
    d0ba:	461a      	mov	r2, r3
    d0bc:	f7ff bb77 	b.w	c7ae <am_util_stdio_vsprintf+0x2de>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d0c0:	2300      	movs	r3, #0
        uCnt++;
    d0c2:	2201      	movs	r2, #1
    d0c4:	f7ff bbbe 	b.w	c844 <am_util_stdio_vsprintf+0x374>
                pcStr = va_arg(pArgs, char *);
    d0c8:	9201      	str	r2, [sp, #4]
                        ui32CharCnt += iWidth;
    d0ca:	46a3      	mov	fp, r4
    d0cc:	f7ff ba08 	b.w	c4e0 <am_util_stdio_vsprintf+0x10>
    d0d0:	00302e30 	.word	0x00302e30
    d0d4:	00232e23 	.word	0x00232e23
    d0d8:	003f2e3f 	.word	0x003f2e3f

0000d0dc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d0dc:	b40f      	push	{r0, r1, r2, r3}
    d0de:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d0e0:	4d0a      	ldr	r5, [pc, #40]	; (d10c <am_util_stdio_printf+0x30>)
    d0e2:	682c      	ldr	r4, [r5, #0]
{
    d0e4:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d0e6:	b154      	cbz	r4, d0fe <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d0e8:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0ea:	461a      	mov	r2, r3
    d0ec:	9906      	ldr	r1, [sp, #24]
    d0ee:	4808      	ldr	r0, [pc, #32]	; (d110 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d0f0:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0f2:	f7ff f9ed 	bl	c4d0 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d0f6:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0f8:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d0fa:	4805      	ldr	r0, [pc, #20]	; (d110 <am_util_stdio_printf+0x34>)
    d0fc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d0fe:	4620      	mov	r0, r4
    d100:	b003      	add	sp, #12
    d102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d106:	b004      	add	sp, #16
    d108:	4770      	bx	lr
    d10a:	bf00      	nop
    d10c:	100012a4 	.word	0x100012a4
    d110:	10001034 	.word	0x10001034

0000d114 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d114:	4801      	ldr	r0, [pc, #4]	; (d11c <am_util_stdio_terminal_clear+0x8>)
    d116:	f7ff bfe1 	b.w	d0dc <am_util_stdio_printf>
    d11a:	bf00      	nop
    d11c:	0000f7a4 	.word	0x0000f7a4

0000d120 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    d120:	e7fe      	b.n	d120 <NMI_Handler>
    d122:	bf00      	nop

0000d124 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d124:	e7fe      	b.n	d124 <DebugMon_Handler>
    d126:	bf00      	nop

0000d128 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d128:	4811      	ldr	r0, [pc, #68]	; (d170 <zero_loop+0x12>)
    d12a:	4912      	ldr	r1, [pc, #72]	; (d174 <zero_loop+0x16>)
    d12c:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d12e:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d132:	4811      	ldr	r0, [pc, #68]	; (d178 <zero_loop+0x1a>)
    d134:	6801      	ldr	r1, [r0, #0]
    d136:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d13a:	6001      	str	r1, [r0, #0]
    d13c:	f3bf 8f4f 	dsb	sy
    d140:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d144:	480d      	ldr	r0, [pc, #52]	; (d17c <zero_loop+0x1e>)
    d146:	490e      	ldr	r1, [pc, #56]	; (d180 <zero_loop+0x22>)
    d148:	4a0e      	ldr	r2, [pc, #56]	; (d184 <zero_loop+0x26>)

0000d14a <copy_loop>:
    d14a:	f850 3b04 	ldr.w	r3, [r0], #4
    d14e:	f841 3b04 	str.w	r3, [r1], #4
    d152:	4291      	cmp	r1, r2
    d154:	dbf9      	blt.n	d14a <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d156:	480c      	ldr	r0, [pc, #48]	; (d188 <zero_loop+0x2a>)
    d158:	490c      	ldr	r1, [pc, #48]	; (d18c <zero_loop+0x2e>)
    d15a:	f04f 0200 	mov.w	r2, #0

0000d15e <zero_loop>:
    d15e:	4288      	cmp	r0, r1
    d160:	bfb8      	it	lt
    d162:	f840 2b04 	strlt.w	r2, [r0], #4
    d166:	dbfa      	blt.n	d15e <zero_loop>
    main();
    d168:	f7ff f81a 	bl	c1a0 <main>
    __asm("    bkpt     ");
    d16c:	be00      	bkpt	0x0000
    d16e:	0000      	.short	0x0000
    d170:	e000ed08 	.word	0xe000ed08
    d174:	0000c000 	.word	0x0000c000
    d178:	e000ed88 	.word	0xe000ed88
    d17c:	0000fdf4 	.word	0x0000fdf4
    d180:	10001000 	.word	0x10001000
    d184:	10001030 	.word	0x10001030
    d188:	10001030 	.word	0x10001030
    d18c:	1000475c 	.word	0x1000475c

0000d190 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_29_ADCSE1,
};

void
am_ctimer_isr(void)
{
    d190:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d192:	2001      	movs	r0, #1
{
    d194:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d196:	f000 fd63 	bl	dc60 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d19a:	4927      	ldr	r1, [pc, #156]	; (d238 <am_ctimer_isr+0xa8>)
    d19c:	2000      	movs	r0, #0
    d19e:	f000 fa01 	bl	d5a4 <am_hal_adc_initialize>
    d1a2:	2800      	cmp	r0, #0
    d1a4:	d144      	bne.n	d230 <am_ctimer_isr+0xa0>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d1a6:	4c24      	ldr	r4, [pc, #144]	; (d238 <am_ctimer_isr+0xa8>)
    d1a8:	2200      	movs	r2, #0
    d1aa:	6820      	ldr	r0, [r4, #0]
    d1ac:	4611      	mov	r1, r2
    d1ae:	f000 fb7f 	bl	d8b0 <am_hal_adc_power_control>
    d1b2:	2800      	cmp	r0, #0
    d1b4:	d138      	bne.n	d228 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d1b6:	4b21      	ldr	r3, [pc, #132]	; (d23c <am_ctimer_isr+0xac>)
    d1b8:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d1ba:	2201      	movs	r2, #1
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d1bc:	2300      	movs	r3, #0
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d1be:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d1c0:	f88d 300c 	strb.w	r3, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d1c4:	a902      	add	r1, sp, #8
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    d1c6:	f88d 300d 	strb.w	r3, [sp, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d1ca:	f88d 200e 	strb.w	r2, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d1ce:	f000 fa2b 	bl	d628 <am_hal_adc_configure>
    d1d2:	bb28      	cbnz	r0, d220 <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d1d4:	2300      	movs	r3, #0
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    d1d6:	2501      	movs	r5, #1
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d1d8:	4619      	mov	r1, r3
    d1da:	466a      	mov	r2, sp
    d1dc:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d1de:	f88d 3000 	strb.w	r3, [sp]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    d1e2:	f88d 3001 	strb.w	r3, [sp, #1]
    ADCSlotConfig.bWindowCompare  = false;
    d1e6:	f88d 3003 	strb.w	r3, [sp, #3]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    d1ea:	f88d 5002 	strb.w	r5, [sp, #2]
    ADCSlotConfig.bEnabled        = true;
    d1ee:	f88d 5004 	strb.w	r5, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d1f2:	f000 fa51 	bl	d698 <am_hal_adc_configure_slot>
    d1f6:	b978      	cbnz	r0, d218 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d1f8:	2101      	movs	r1, #1
    d1fa:	6820      	ldr	r0, [r4, #0]
    d1fc:	f000 faba 	bl	d774 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d200:	6820      	ldr	r0, [r4, #0]
    d202:	f000 fa7f 	bl	d704 <am_hal_adc_enable>
    d206:	b110      	cbz	r0, d20e <am_ctimer_isr+0x7e>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d208:	480d      	ldr	r0, [pc, #52]	; (d240 <am_ctimer_isr+0xb0>)
    d20a:	f7ff ff67 	bl	d0dc <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d20e:	6820      	ldr	r0, [r4, #0]
    d210:	f000 fb3c 	bl	d88c <am_hal_adc_sw_trigger>
}
    d214:	b005      	add	sp, #20
    d216:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d218:	480a      	ldr	r0, [pc, #40]	; (d244 <am_ctimer_isr+0xb4>)
    d21a:	f7ff ff5f 	bl	d0dc <am_util_stdio_printf>
    d21e:	e7eb      	b.n	d1f8 <am_ctimer_isr+0x68>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d220:	4809      	ldr	r0, [pc, #36]	; (d248 <am_ctimer_isr+0xb8>)
    d222:	f7ff ff5b 	bl	d0dc <am_util_stdio_printf>
    d226:	e7d5      	b.n	d1d4 <am_ctimer_isr+0x44>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d228:	4808      	ldr	r0, [pc, #32]	; (d24c <am_ctimer_isr+0xbc>)
    d22a:	f7ff ff57 	bl	d0dc <am_util_stdio_printf>
    d22e:	e7c2      	b.n	d1b6 <am_ctimer_isr+0x26>
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d230:	4807      	ldr	r0, [pc, #28]	; (d250 <am_ctimer_isr+0xc0>)
    d232:	f7ff ff53 	bl	d0dc <am_util_stdio_printf>
    d236:	e7b6      	b.n	d1a6 <am_ctimer_isr+0x16>
    d238:	10001134 	.word	0x10001134
    d23c:	00070001 	.word	0x00070001
    d240:	0000f95c 	.word	0x0000f95c
    d244:	0000f934 	.word	0x0000f934
    d248:	0000f910 	.word	0x0000f910
    d24c:	0000f8f0 	.word	0x0000f8f0
    d250:	0000f8bc 	.word	0x0000f8bc

0000d254 <am_adc_isr>:
{
    d254:	b530      	push	{r4, r5, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d256:	4c28      	ldr	r4, [pc, #160]	; (d2f8 <am_adc_isr+0xa4>)
{
    d258:	b085      	sub	sp, #20
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d25a:	2200      	movs	r2, #0
    d25c:	6820      	ldr	r0, [r4, #0]
    d25e:	4669      	mov	r1, sp
    d260:	f000 fa9e 	bl	d7a0 <am_hal_adc_interrupt_status>
    d264:	2800      	cmp	r0, #0
    d266:	d13e      	bne.n	d2e6 <am_adc_isr+0x92>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d268:	9900      	ldr	r1, [sp, #0]
    d26a:	6820      	ldr	r0, [r4, #0]
    d26c:	f000 fab6 	bl	d7dc <am_hal_adc_interrupt_clear>
    d270:	2800      	cmp	r0, #0
    d272:	d134      	bne.n	d2de <am_adc_isr+0x8a>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d274:	9b00      	ldr	r3, [sp, #0]
    d276:	6820      	ldr	r0, [r4, #0]
    d278:	07db      	lsls	r3, r3, #31
    d27a:	d412      	bmi.n	d2a2 <am_adc_isr+0x4e>
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d27c:	f000 fa62 	bl	d744 <am_hal_adc_disable>
    d280:	bb08      	cbnz	r0, d2c6 <am_adc_isr+0x72>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d282:	200a      	movs	r0, #10
    d284:	f001 fcde 	bl	ec44 <am_hal_pwrctrl_periph_disable>
    d288:	bb28      	cbnz	r0, d2d6 <am_adc_isr+0x82>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d28a:	6820      	ldr	r0, [r4, #0]
    d28c:	f000 f9ac 	bl	d5e8 <am_hal_adc_deinitialize>
    d290:	b110      	cbz	r0, d298 <am_adc_isr+0x44>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d292:	481a      	ldr	r0, [pc, #104]	; (d2fc <am_adc_isr+0xa8>)
    d294:	f7ff ff22 	bl	d0dc <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d298:	6820      	ldr	r0, [r4, #0]
    d29a:	f000 faf7 	bl	d88c <am_hal_adc_sw_trigger>
}
    d29e:	b005      	add	sp, #20
    d2a0:	bd30      	pop	{r4, r5, pc}
        uint32_t    ui32NumSamples = 1;
    d2a2:	2501      	movs	r5, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d2a4:	ab02      	add	r3, sp, #8
    d2a6:	aa01      	add	r2, sp, #4
    d2a8:	2100      	movs	r1, #0
        uint32_t    ui32NumSamples = 1;
    d2aa:	9501      	str	r5, [sp, #4]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d2ac:	f000 faa8 	bl	d800 <am_hal_adc_samples_read>
    d2b0:	b9e8      	cbnz	r0, d2ee <am_adc_isr+0x9a>
    am_util_stdio_printf("ADC: %d = %d\n", Sample.ui32Slot, Sample.ui32Sample);
    d2b2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    d2b6:	4812      	ldr	r0, [pc, #72]	; (d300 <am_adc_isr+0xac>)
    d2b8:	f7ff ff10 	bl	d0dc <am_util_stdio_printf>
    d2bc:	6820      	ldr	r0, [r4, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d2be:	f000 fa41 	bl	d744 <am_hal_adc_disable>
    d2c2:	2800      	cmp	r0, #0
    d2c4:	d0dd      	beq.n	d282 <am_adc_isr+0x2e>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d2c6:	480f      	ldr	r0, [pc, #60]	; (d304 <am_adc_isr+0xb0>)
    d2c8:	f7ff ff08 	bl	d0dc <am_util_stdio_printf>
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d2cc:	200a      	movs	r0, #10
    d2ce:	f001 fcb9 	bl	ec44 <am_hal_pwrctrl_periph_disable>
    d2d2:	2800      	cmp	r0, #0
    d2d4:	d0d9      	beq.n	d28a <am_adc_isr+0x36>
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d2d6:	480c      	ldr	r0, [pc, #48]	; (d308 <am_adc_isr+0xb4>)
    d2d8:	f7ff ff00 	bl	d0dc <am_util_stdio_printf>
    d2dc:	e7d5      	b.n	d28a <am_adc_isr+0x36>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d2de:	480b      	ldr	r0, [pc, #44]	; (d30c <am_adc_isr+0xb8>)
    d2e0:	f7ff fefc 	bl	d0dc <am_util_stdio_printf>
    d2e4:	e7c6      	b.n	d274 <am_adc_isr+0x20>
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d2e6:	480a      	ldr	r0, [pc, #40]	; (d310 <am_adc_isr+0xbc>)
    d2e8:	f7ff fef8 	bl	d0dc <am_util_stdio_printf>
    d2ec:	e7bc      	b.n	d268 <am_adc_isr+0x14>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d2ee:	4809      	ldr	r0, [pc, #36]	; (d314 <am_adc_isr+0xc0>)
    d2f0:	f7ff fef4 	bl	d0dc <am_util_stdio_printf>
    d2f4:	e7dd      	b.n	d2b2 <am_adc_isr+0x5e>
    d2f6:	bf00      	nop
    d2f8:	10001134 	.word	0x10001134
    d2fc:	0000f890 	.word	0x0000f890
    d300:	0000f830 	.word	0x0000f830
    d304:	0000f840 	.word	0x0000f840
    d308:	0000f860 	.word	0x0000f860
    d30c:	0000f7dc 	.word	0x0000f7dc
    d310:	0000f7b8 	.word	0x0000f7b8
    d314:	0000f804 	.word	0x0000f804

0000d318 <initADC>:
{
    d318:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(29, g_AM_PIN_29_ADCSE1);
    d31a:	4b0e      	ldr	r3, [pc, #56]	; (d354 <initADC+0x3c>)
    d31c:	201d      	movs	r0, #29
    d31e:	6819      	ldr	r1, [r3, #0]
    d320:	f000 fcde 	bl	dce0 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d324:	f44f 7215 	mov.w	r2, #596	; 0x254
    d328:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d32c:	2000      	movs	r0, #0
    d32e:	f000 fbc3 	bl	dab8 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d332:	2001      	movs	r0, #1
    d334:	f000 fc80 	bl	dc38 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d338:	2300      	movs	r3, #0
    d33a:	4618      	mov	r0, r3
    d33c:	220a      	movs	r2, #10
    d33e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d342:	f000 fc23 	bl	db8c <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d346:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d34a:	2000      	movs	r0, #0
    d34c:	f000 fbf4 	bl	db38 <am_hal_ctimer_start>
}
    d350:	2000      	movs	r0, #0
    d352:	bd08      	pop	{r3, pc}
    d354:	0000f97c 	.word	0x0000f97c

0000d358 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d358:	4b04      	ldr	r3, [pc, #16]	; (d36c <enableAdcInterrupts+0x14>)
    d35a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d35e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d362:	6019      	str	r1, [r3, #0]
    d364:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d366:	f000 be45 	b.w	dff4 <am_hal_interrupt_master_enable>
    d36a:	bf00      	nop
    d36c:	e000e100 	.word	0xe000e100

0000d370 <initAccelerometer>:
#include "am_bsp.h"
#include "am_util.h"
#include "tf_accelerometer.h"

int initAccelerometer(void)
{
    d370:	b5f0      	push	{r4, r5, r6, r7, lr}
    d372:	b095      	sub	sp, #84	; 0x54
    void * iomHandle;
    uint32_t iom = AM_BSP_I2C_ACCELEROMETER_IOM; // IO module 4 -- switch to 3 if using IOM3
    uint32_t retVal32 = 0;
    uint32_t i2cTX[2] = {0, 0}; // WHO_AM_I register
    d374:	2300      	movs	r3, #0
    uint32_t i2cRX[1] = {0};

    am_hal_iom_config_t i2cConfig =
    d376:	2501      	movs	r5, #1
    d378:	4a42      	ldr	r2, [pc, #264]	; (d484 <initAccelerometer+0x114>)
    d37a:	9305      	str	r3, [sp, #20]
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d37c:	a901      	add	r1, sp, #4
    d37e:	2003      	movs	r0, #3
    uint32_t i2cTX[2] = {0, 0}; // WHO_AM_I register
    d380:	e9cd 3303 	strd	r3, r3, [sp, #12]
    uint32_t i2cRX[1] = {0};
    d384:	9302      	str	r3, [sp, #8]
    am_hal_iom_config_t i2cConfig =
    d386:	e9cd 3307 	strd	r3, r3, [sp, #28]
    d38a:	9309      	str	r3, [sp, #36]	; 0x24
    d38c:	f88d 5014 	strb.w	r5, [sp, #20]
    d390:	9206      	str	r2, [sp, #24]
    retVal32 = am_hal_iom_initialize(iom, &iomHandle);
    d392:	f000 feb3 	bl	e0fc <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -1;
    d396:	2800      	cmp	r0, #0
    d398:	d168      	bne.n	d46c <initAccelerometer+0xfc>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d39a:	4602      	mov	r2, r0
    d39c:	4601      	mov	r1, r0
    d39e:	9801      	ldr	r0, [sp, #4]
    d3a0:	f000 ff44 	bl	e22c <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -2;
    d3a4:	2800      	cmp	r0, #0
    d3a6:	d164      	bne.n	d472 <initAccelerometer+0x102>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d3a8:	a905      	add	r1, sp, #20
    d3aa:	9801      	ldr	r0, [sp, #4]
    d3ac:	f001 f84e 	bl	e44c <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -3;
    d3b0:	2800      	cmp	r0, #0
    d3b2:	d161      	bne.n	d478 <initAccelerometer+0x108>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d3b4:	4b34      	ldr	r3, [pc, #208]	; (d488 <initAccelerometer+0x118>)
    d3b6:	202b      	movs	r0, #43	; 0x2b
    d3b8:	6819      	ldr	r1, [r3, #0]
    d3ba:	f000 fc91 	bl	dce0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d3be:	4b33      	ldr	r3, [pc, #204]	; (d48c <initAccelerometer+0x11c>)
    d3c0:	202a      	movs	r0, #42	; 0x2a
    d3c2:	6819      	ldr	r1, [r3, #0]
    d3c4:	f000 fc8c 	bl	dce0 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d3c8:	9801      	ldr	r0, [sp, #4]
    d3ca:	f000 febf 	bl	e14c <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -4;
    d3ce:	2800      	cmp	r0, #0
    d3d0:	d155      	bne.n	d47e <initAccelerometer+0x10e>


    am_hal_iom_transfer_t iomTransfer = 
    d3d2:	2219      	movs	r2, #25
    d3d4:	2300      	movs	r3, #0
    d3d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    d3da:	2200      	movs	r2, #0
    d3dc:	2301      	movs	r3, #1
    d3de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    d3e2:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    d3e6:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    d3ea:	aa02      	add	r2, sp, #8
    d3ec:	a803      	add	r0, sp, #12
        .ui8Priority = 1,
        .ui32PauseCondition = 0,
        .ui32StatusSetClr = 0
    };

    i2cTX[0] = 0x0F; // WHO_AM_I register
    d3ee:	230f      	movs	r3, #15
    am_hal_iom_transfer_t iomTransfer = 
    d3f0:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d3f4:	a90a      	add	r1, sp, #40	; 0x28
    am_hal_iom_transfer_t iomTransfer = 
    d3f6:	2600      	movs	r6, #0
    d3f8:	2700      	movs	r7, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d3fa:	9801      	ldr	r0, [sp, #4]
    am_hal_iom_transfer_t iomTransfer = 
    d3fc:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
    d400:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
    d404:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
    i2cTX[0] = 0x0F; // WHO_AM_I register
    d408:	9303      	str	r3, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d40a:	f001 f955 	bl	e6b8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d40e:	4604      	mov	r4, r0
    d410:	b9f0      	cbnz	r0, d450 <initAccelerometer+0xe0>

    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.bContinue = false;
    iomTransfer.ui32NumBytes = 1;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d412:	a90a      	add	r1, sp, #40	; 0x28
    d414:	9801      	ldr	r0, [sp, #4]
    iomTransfer.bContinue = false;
    d416:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d41a:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
    iomTransfer.ui32NumBytes = 1;
    d41e:	950d      	str	r5, [sp, #52]	; 0x34
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d420:	f001 f94a 	bl	e6b8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d424:	4604      	mov	r4, r0
    d426:	b9d0      	cbnz	r0, d45e <initAccelerometer+0xee>
    {
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }

    am_util_stdio_printf("Accelerometer WHO_AM_I (should be 0x33): 0x%x\n", i2cRX[0]);
    d428:	9902      	ldr	r1, [sp, #8]
    d42a:	4819      	ldr	r0, [pc, #100]	; (d490 <initAccelerometer+0x120>)
    d42c:	f7ff fe56 	bl	d0dc <am_util_stdio_printf>

    // Power-down the accelerometer
    i2cTX[0] = 0x20; // Register 0x20 (CTRL_REG1)
    d430:	2220      	movs	r2, #32
    i2cTX[1] = 0x00; // Write value 0 (power-down mode)
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    iomTransfer.bContinue = false;
    iomTransfer.ui32NumBytes = 2;
    d432:	2302      	movs	r3, #2
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d434:	a90a      	add	r1, sp, #40	; 0x28
    d436:	9801      	ldr	r0, [sp, #4]
    i2cTX[1] = 0x00; // Write value 0 (power-down mode)
    d438:	9404      	str	r4, [sp, #16]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d43a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    iomTransfer.bContinue = false;
    d43e:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    i2cTX[0] = 0x20; // Register 0x20 (CTRL_REG1)
    d442:	9203      	str	r2, [sp, #12]
    iomTransfer.ui32NumBytes = 2;
    d444:	930d      	str	r3, [sp, #52]	; 0x34
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d446:	f001 f937 	bl	e6b8 <am_hal_iom_blocking_transfer>

    return 0;
    d44a:	4620      	mov	r0, r4
    d44c:	b015      	add	sp, #84	; 0x54
    d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d450:	4601      	mov	r1, r0
    d452:	4810      	ldr	r0, [pc, #64]	; (d494 <initAccelerometer+0x124>)
    d454:	f7ff fe42 	bl	d0dc <am_util_stdio_printf>
        return retVal32;
    d458:	4620      	mov	r0, r4
    d45a:	b015      	add	sp, #84	; 0x54
    d45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d45e:	4601      	mov	r1, r0
    d460:	480d      	ldr	r0, [pc, #52]	; (d498 <initAccelerometer+0x128>)
    d462:	f7ff fe3b 	bl	d0dc <am_util_stdio_printf>
        return retVal32;
    d466:	4620      	mov	r0, r4
    d468:	b015      	add	sp, #84	; 0x54
    d46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -1;
    d46c:	f04f 30ff 	mov.w	r0, #4294967295
    d470:	e7ec      	b.n	d44c <initAccelerometer+0xdc>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -2;
    d472:	f06f 0001 	mvn.w	r0, #1
    d476:	e7e9      	b.n	d44c <initAccelerometer+0xdc>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -3;
    d478:	f06f 0002 	mvn.w	r0, #2
    d47c:	e7e6      	b.n	d44c <initAccelerometer+0xdc>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return -4;
    d47e:	f06f 0003 	mvn.w	r0, #3
    d482:	e7e3      	b.n	d44c <initAccelerometer+0xdc>
    d484:	000186a0 	.word	0x000186a0
    d488:	0000fa04 	.word	0x0000fa04
    d48c:	0000fa08 	.word	0x0000fa08
    d490:	0000f9a4 	.word	0x0000f9a4
    d494:	0000f980 	.word	0x0000f980
    d498:	0000f990 	.word	0x0000f990

0000d49c <am_bsp_uart_string_print>:
    d49c:	b510      	push	{r4, lr}
    d49e:	b086      	sub	sp, #24
    d4a0:	7804      	ldrb	r4, [r0, #0]
    d4a2:	2300      	movs	r3, #0
    d4a4:	9300      	str	r3, [sp, #0]
    d4a6:	b134      	cbz	r4, d4b6 <am_bsp_uart_string_print+0x1a>
    d4a8:	461c      	mov	r4, r3
    d4aa:	4603      	mov	r3, r0
    d4ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d4b0:	3401      	adds	r4, #1
    d4b2:	2a00      	cmp	r2, #0
    d4b4:	d1fa      	bne.n	d4ac <am_bsp_uart_string_print+0x10>
    d4b6:	4b0a      	ldr	r3, [pc, #40]	; (d4e0 <am_bsp_uart_string_print+0x44>)
    d4b8:	9002      	str	r0, [sp, #8]
    d4ba:	2200      	movs	r2, #0
    d4bc:	6818      	ldr	r0, [r3, #0]
    d4be:	9403      	str	r4, [sp, #12]
    d4c0:	f04f 33ff 	mov.w	r3, #4294967295
    d4c4:	a901      	add	r1, sp, #4
    d4c6:	9304      	str	r3, [sp, #16]
    d4c8:	9201      	str	r2, [sp, #4]
    d4ca:	f8cd d014 	str.w	sp, [sp, #20]
    d4ce:	f001 fdeb 	bl	f0a8 <am_hal_uart_transfer>
    d4d2:	9b00      	ldr	r3, [sp, #0]
    d4d4:	42a3      	cmp	r3, r4
    d4d6:	d000      	beq.n	d4da <am_bsp_uart_string_print+0x3e>
    d4d8:	e7fe      	b.n	d4d8 <am_bsp_uart_string_print+0x3c>
    d4da:	b006      	add	sp, #24
    d4dc:	bd10      	pop	{r4, pc}
    d4de:	bf00      	nop
    d4e0:	10001138 	.word	0x10001138

0000d4e4 <am_bsp_low_power_init>:
    d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4e6:	f001 fa97 	bl	ea18 <am_hal_itm_disable>
    d4ea:	2000      	movs	r0, #0
    d4ec:	f7fe ffea 	bl	c4c4 <am_util_stdio_printf_init>
    d4f0:	4b12      	ldr	r3, [pc, #72]	; (d53c <am_bsp_low_power_init+0x58>)
    d4f2:	4f13      	ldr	r7, [pc, #76]	; (d540 <am_bsp_low_power_init+0x5c>)
    d4f4:	6819      	ldr	r1, [r3, #0]
    d4f6:	2021      	movs	r0, #33	; 0x21
    d4f8:	f000 fbf2 	bl	dce0 <am_hal_gpio_pinconfig>
    d4fc:	f001 fbce 	bl	ec9c <am_hal_pwrctrl_low_power_init>
    d500:	2001      	movs	r0, #1
    d502:	f001 fc15 	bl	ed30 <am_hal_rtc_osc_select>
    d506:	2100      	movs	r1, #0
    d508:	2003      	movs	r0, #3
    d50a:	f000 fa69 	bl	d9e0 <am_hal_clkgen_control>
    d50e:	f001 fc1b 	bl	ed48 <am_hal_rtc_osc_disable>
    d512:	4b0c      	ldr	r3, [pc, #48]	; (d544 <am_bsp_low_power_init+0x60>)
    d514:	681e      	ldr	r6, [r3, #0]
    d516:	2400      	movs	r4, #0
    d518:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d51c:	4631      	mov	r1, r6
    d51e:	4628      	mov	r0, r5
    d520:	f000 fbde 	bl	dce0 <am_hal_gpio_pinconfig>
    d524:	2103      	movs	r1, #3
    d526:	4628      	mov	r0, r5
    d528:	f000 fd1a 	bl	df60 <am_hal_gpio_state_write>
    d52c:	3401      	adds	r4, #1
    d52e:	4628      	mov	r0, r5
    d530:	2100      	movs	r1, #0
    d532:	f000 fd15 	bl	df60 <am_hal_gpio_state_write>
    d536:	2c04      	cmp	r4, #4
    d538:	d1ee      	bne.n	d518 <am_bsp_low_power_init+0x34>
    d53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d53c:	0000fb40 	.word	0x0000fb40
    d540:	10001000 	.word	0x10001000
    d544:	0000fb44 	.word	0x0000fb44

0000d548 <am_bsp_uart_printf_enable>:
    d548:	b510      	push	{r4, lr}
    d54a:	4c10      	ldr	r4, [pc, #64]	; (d58c <am_bsp_uart_printf_enable+0x44>)
    d54c:	4b10      	ldr	r3, [pc, #64]	; (d590 <am_bsp_uart_printf_enable+0x48>)
    d54e:	4621      	mov	r1, r4
    d550:	2202      	movs	r2, #2
    d552:	2000      	movs	r0, #0
    d554:	601a      	str	r2, [r3, #0]
    d556:	f001 fc01 	bl	ed5c <am_hal_uart_initialize>
    d55a:	2200      	movs	r2, #0
    d55c:	4611      	mov	r1, r2
    d55e:	6820      	ldr	r0, [r4, #0]
    d560:	f001 fc24 	bl	edac <am_hal_uart_power_control>
    d564:	6820      	ldr	r0, [r4, #0]
    d566:	490b      	ldr	r1, [pc, #44]	; (d594 <am_bsp_uart_printf_enable+0x4c>)
    d568:	f001 fc92 	bl	ee90 <am_hal_uart_configure>
    d56c:	4b0a      	ldr	r3, [pc, #40]	; (d598 <am_bsp_uart_printf_enable+0x50>)
    d56e:	2030      	movs	r0, #48	; 0x30
    d570:	6819      	ldr	r1, [r3, #0]
    d572:	f000 fbb5 	bl	dce0 <am_hal_gpio_pinconfig>
    d576:	4b09      	ldr	r3, [pc, #36]	; (d59c <am_bsp_uart_printf_enable+0x54>)
    d578:	2031      	movs	r0, #49	; 0x31
    d57a:	6819      	ldr	r1, [r3, #0]
    d57c:	f000 fbb0 	bl	dce0 <am_hal_gpio_pinconfig>
    d580:	4807      	ldr	r0, [pc, #28]	; (d5a0 <am_bsp_uart_printf_enable+0x58>)
    d582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d586:	f7fe bf9d 	b.w	c4c4 <am_util_stdio_printf_init>
    d58a:	bf00      	nop
    d58c:	10001138 	.word	0x10001138
    d590:	1000113c 	.word	0x1000113c
    d594:	0000f9d4 	.word	0x0000f9d4
    d598:	0000fa00 	.word	0x0000fa00
    d59c:	0000f9fc 	.word	0x0000f9fc
    d5a0:	0000d49d 	.word	0x0000d49d

0000d5a4 <am_hal_adc_initialize>:
    d5a4:	b108      	cbz	r0, d5aa <am_hal_adc_initialize+0x6>
    d5a6:	2005      	movs	r0, #5
    d5a8:	4770      	bx	lr
    d5aa:	b1a9      	cbz	r1, d5d8 <am_hal_adc_initialize+0x34>
    d5ac:	4a0b      	ldr	r2, [pc, #44]	; (d5dc <am_hal_adc_initialize+0x38>)
    d5ae:	78d3      	ldrb	r3, [r2, #3]
    d5b0:	f013 0001 	ands.w	r0, r3, #1
    d5b4:	d001      	beq.n	d5ba <am_hal_adc_initialize+0x16>
    d5b6:	2007      	movs	r0, #7
    d5b8:	4770      	bx	lr
    d5ba:	b430      	push	{r4, r5}
    d5bc:	f043 0301 	orr.w	r3, r3, #1
    d5c0:	70d3      	strb	r3, [r2, #3]
    d5c2:	6813      	ldr	r3, [r2, #0]
    d5c4:	4d06      	ldr	r5, [pc, #24]	; (d5e0 <am_hal_adc_initialize+0x3c>)
    d5c6:	4c07      	ldr	r4, [pc, #28]	; (d5e4 <am_hal_adc_initialize+0x40>)
    d5c8:	6050      	str	r0, [r2, #4]
    d5ca:	f365 0317 	bfi	r3, r5, #0, #24
    d5ce:	6013      	str	r3, [r2, #0]
    d5d0:	6020      	str	r0, [r4, #0]
    d5d2:	600a      	str	r2, [r1, #0]
    d5d4:	bc30      	pop	{r4, r5}
    d5d6:	4770      	bx	lr
    d5d8:	2006      	movs	r0, #6
    d5da:	4770      	bx	lr
    d5dc:	100012ac 	.word	0x100012ac
    d5e0:	00afafaf 	.word	0x00afafaf
    d5e4:	100012a8 	.word	0x100012a8

0000d5e8 <am_hal_adc_deinitialize>:
    d5e8:	b128      	cbz	r0, d5f6 <am_hal_adc_deinitialize+0xe>
    d5ea:	6803      	ldr	r3, [r0, #0]
    d5ec:	4a0c      	ldr	r2, [pc, #48]	; (d620 <am_hal_adc_deinitialize+0x38>)
    d5ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d5f2:	4293      	cmp	r3, r2
    d5f4:	d001      	beq.n	d5fa <am_hal_adc_deinitialize+0x12>
    d5f6:	2002      	movs	r0, #2
    d5f8:	4770      	bx	lr
    d5fa:	78c3      	ldrb	r3, [r0, #3]
    d5fc:	079b      	lsls	r3, r3, #30
    d5fe:	d508      	bpl.n	d612 <am_hal_adc_deinitialize+0x2a>
    d600:	4b08      	ldr	r3, [pc, #32]	; (d624 <am_hal_adc_deinitialize+0x3c>)
    d602:	681a      	ldr	r2, [r3, #0]
    d604:	f36f 0200 	bfc	r2, #0, #1
    d608:	601a      	str	r2, [r3, #0]
    d60a:	78c3      	ldrb	r3, [r0, #3]
    d60c:	f36f 0341 	bfc	r3, #1, #1
    d610:	70c3      	strb	r3, [r0, #3]
    d612:	78c3      	ldrb	r3, [r0, #3]
    d614:	f36f 0300 	bfc	r3, #0, #1
    d618:	70c3      	strb	r3, [r0, #3]
    d61a:	2000      	movs	r0, #0
    d61c:	4770      	bx	lr
    d61e:	bf00      	nop
    d620:	01afafaf 	.word	0x01afafaf
    d624:	50010000 	.word	0x50010000

0000d628 <am_hal_adc_configure>:
    d628:	b128      	cbz	r0, d636 <am_hal_adc_configure+0xe>
    d62a:	6803      	ldr	r3, [r0, #0]
    d62c:	4a18      	ldr	r2, [pc, #96]	; (d690 <am_hal_adc_configure+0x68>)
    d62e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d632:	4293      	cmp	r3, r2
    d634:	d001      	beq.n	d63a <am_hal_adc_configure+0x12>
    d636:	2002      	movs	r0, #2
    d638:	4770      	bx	lr
    d63a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d63c:	7808      	ldrb	r0, [r1, #0]
    d63e:	784d      	ldrb	r5, [r1, #1]
    d640:	788c      	ldrb	r4, [r1, #2]
    d642:	f891 e003 	ldrb.w	lr, [r1, #3]
    d646:	790f      	ldrb	r7, [r1, #4]
    d648:	794a      	ldrb	r2, [r1, #5]
    d64a:	798b      	ldrb	r3, [r1, #6]
    d64c:	4e11      	ldr	r6, [pc, #68]	; (d694 <am_hal_adc_configure+0x6c>)
    d64e:	0600      	lsls	r0, r0, #24
    d650:	04ed      	lsls	r5, r5, #19
    d652:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d656:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d65a:	4328      	orrs	r0, r5
    d65c:	0424      	lsls	r4, r4, #16
    d65e:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d662:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d666:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d66a:	4304      	orrs	r4, r0
    d66c:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d670:	0139      	lsls	r1, r7, #4
    d672:	4320      	orrs	r0, r4
    d674:	f001 0110 	and.w	r1, r1, #16
    d678:	00d2      	lsls	r2, r2, #3
    d67a:	4301      	orrs	r1, r0
    d67c:	f002 0208 	and.w	r2, r2, #8
    d680:	009b      	lsls	r3, r3, #2
    d682:	430a      	orrs	r2, r1
    d684:	f003 0304 	and.w	r3, r3, #4
    d688:	4313      	orrs	r3, r2
    d68a:	6033      	str	r3, [r6, #0]
    d68c:	2000      	movs	r0, #0
    d68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d690:	01afafaf 	.word	0x01afafaf
    d694:	50010000 	.word	0x50010000

0000d698 <am_hal_adc_configure_slot>:
    d698:	b128      	cbz	r0, d6a6 <am_hal_adc_configure_slot+0xe>
    d69a:	6803      	ldr	r3, [r0, #0]
    d69c:	4816      	ldr	r0, [pc, #88]	; (d6f8 <am_hal_adc_configure_slot+0x60>)
    d69e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d6a2:	4283      	cmp	r3, r0
    d6a4:	d001      	beq.n	d6aa <am_hal_adc_configure_slot+0x12>
    d6a6:	2002      	movs	r0, #2
    d6a8:	4770      	bx	lr
    d6aa:	2907      	cmp	r1, #7
    d6ac:	d901      	bls.n	d6b2 <am_hal_adc_configure_slot+0x1a>
    d6ae:	2005      	movs	r0, #5
    d6b0:	4770      	bx	lr
    d6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6b4:	7813      	ldrb	r3, [r2, #0]
    d6b6:	7854      	ldrb	r4, [r2, #1]
    d6b8:	7890      	ldrb	r0, [r2, #2]
    d6ba:	78d7      	ldrb	r7, [r2, #3]
    d6bc:	f892 e004 	ldrb.w	lr, [r2, #4]
    d6c0:	4d0e      	ldr	r5, [pc, #56]	; (d6fc <am_hal_adc_configure_slot+0x64>)
    d6c2:	4e0f      	ldr	r6, [pc, #60]	; (d700 <am_hal_adc_configure_slot+0x68>)
    d6c4:	061b      	lsls	r3, r3, #24
    d6c6:	0424      	lsls	r4, r4, #16
    d6c8:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    d6cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    d6d0:	4323      	orrs	r3, r4
    d6d2:	0202      	lsls	r2, r0, #8
    d6d4:	ea43 0e0e 	orr.w	lr, r3, lr
    d6d8:	440d      	add	r5, r1
    d6da:	007b      	lsls	r3, r7, #1
    d6dc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    d6e0:	ea4e 0202 	orr.w	r2, lr, r2
    d6e4:	00ad      	lsls	r5, r5, #2
    d6e6:	f003 0302 	and.w	r3, r3, #2
    d6ea:	4313      	orrs	r3, r2
    d6ec:	602b      	str	r3, [r5, #0]
    d6ee:	6833      	ldr	r3, [r6, #0]
    d6f0:	3301      	adds	r3, #1
    d6f2:	6033      	str	r3, [r6, #0]
    d6f4:	2000      	movs	r0, #0
    d6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6f8:	01afafaf 	.word	0x01afafaf
    d6fc:	14004003 	.word	0x14004003
    d700:	100012a8 	.word	0x100012a8

0000d704 <am_hal_adc_enable>:
    d704:	4603      	mov	r3, r0
    d706:	b128      	cbz	r0, d714 <am_hal_adc_enable+0x10>
    d708:	6802      	ldr	r2, [r0, #0]
    d70a:	490c      	ldr	r1, [pc, #48]	; (d73c <am_hal_adc_enable+0x38>)
    d70c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d710:	428a      	cmp	r2, r1
    d712:	d001      	beq.n	d718 <am_hal_adc_enable+0x14>
    d714:	2002      	movs	r0, #2
    d716:	4770      	bx	lr
    d718:	78c2      	ldrb	r2, [r0, #3]
    d71a:	f002 0202 	and.w	r2, r2, #2
    d71e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d722:	b94a      	cbnz	r2, d738 <am_hal_adc_enable+0x34>
    d724:	4906      	ldr	r1, [pc, #24]	; (d740 <am_hal_adc_enable+0x3c>)
    d726:	680a      	ldr	r2, [r1, #0]
    d728:	f042 0201 	orr.w	r2, r2, #1
    d72c:	600a      	str	r2, [r1, #0]
    d72e:	78da      	ldrb	r2, [r3, #3]
    d730:	f042 0202 	orr.w	r2, r2, #2
    d734:	70da      	strb	r2, [r3, #3]
    d736:	4770      	bx	lr
    d738:	2000      	movs	r0, #0
    d73a:	4770      	bx	lr
    d73c:	01afafaf 	.word	0x01afafaf
    d740:	50010000 	.word	0x50010000

0000d744 <am_hal_adc_disable>:
    d744:	b128      	cbz	r0, d752 <am_hal_adc_disable+0xe>
    d746:	6803      	ldr	r3, [r0, #0]
    d748:	4a08      	ldr	r2, [pc, #32]	; (d76c <am_hal_adc_disable+0x28>)
    d74a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d74e:	4293      	cmp	r3, r2
    d750:	d001      	beq.n	d756 <am_hal_adc_disable+0x12>
    d752:	2002      	movs	r0, #2
    d754:	4770      	bx	lr
    d756:	4b06      	ldr	r3, [pc, #24]	; (d770 <am_hal_adc_disable+0x2c>)
    d758:	681a      	ldr	r2, [r3, #0]
    d75a:	f36f 0200 	bfc	r2, #0, #1
    d75e:	601a      	str	r2, [r3, #0]
    d760:	78c3      	ldrb	r3, [r0, #3]
    d762:	f36f 0341 	bfc	r3, #1, #1
    d766:	70c3      	strb	r3, [r0, #3]
    d768:	2000      	movs	r0, #0
    d76a:	4770      	bx	lr
    d76c:	01afafaf 	.word	0x01afafaf
    d770:	50010000 	.word	0x50010000

0000d774 <am_hal_adc_interrupt_enable>:
    d774:	b128      	cbz	r0, d782 <am_hal_adc_interrupt_enable+0xe>
    d776:	6803      	ldr	r3, [r0, #0]
    d778:	4a07      	ldr	r2, [pc, #28]	; (d798 <am_hal_adc_interrupt_enable+0x24>)
    d77a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d77e:	4293      	cmp	r3, r2
    d780:	d001      	beq.n	d786 <am_hal_adc_interrupt_enable+0x12>
    d782:	2002      	movs	r0, #2
    d784:	4770      	bx	lr
    d786:	4b05      	ldr	r3, [pc, #20]	; (d79c <am_hal_adc_interrupt_enable+0x28>)
    d788:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d78c:	4311      	orrs	r1, r2
    d78e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d792:	2000      	movs	r0, #0
    d794:	4770      	bx	lr
    d796:	bf00      	nop
    d798:	01afafaf 	.word	0x01afafaf
    d79c:	50010000 	.word	0x50010000

0000d7a0 <am_hal_adc_interrupt_status>:
    d7a0:	b128      	cbz	r0, d7ae <am_hal_adc_interrupt_status+0xe>
    d7a2:	6803      	ldr	r3, [r0, #0]
    d7a4:	480b      	ldr	r0, [pc, #44]	; (d7d4 <am_hal_adc_interrupt_status+0x34>)
    d7a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7aa:	4283      	cmp	r3, r0
    d7ac:	d001      	beq.n	d7b2 <am_hal_adc_interrupt_status+0x12>
    d7ae:	2002      	movs	r0, #2
    d7b0:	4770      	bx	lr
    d7b2:	b92a      	cbnz	r2, d7c0 <am_hal_adc_interrupt_status+0x20>
    d7b4:	4b08      	ldr	r3, [pc, #32]	; (d7d8 <am_hal_adc_interrupt_status+0x38>)
    d7b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d7ba:	600b      	str	r3, [r1, #0]
    d7bc:	4610      	mov	r0, r2
    d7be:	4770      	bx	lr
    d7c0:	4a05      	ldr	r2, [pc, #20]	; (d7d8 <am_hal_adc_interrupt_status+0x38>)
    d7c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    d7c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d7ca:	4003      	ands	r3, r0
    d7cc:	600b      	str	r3, [r1, #0]
    d7ce:	2000      	movs	r0, #0
    d7d0:	4770      	bx	lr
    d7d2:	bf00      	nop
    d7d4:	01afafaf 	.word	0x01afafaf
    d7d8:	50010000 	.word	0x50010000

0000d7dc <am_hal_adc_interrupt_clear>:
    d7dc:	b128      	cbz	r0, d7ea <am_hal_adc_interrupt_clear+0xe>
    d7de:	6803      	ldr	r3, [r0, #0]
    d7e0:	4a05      	ldr	r2, [pc, #20]	; (d7f8 <am_hal_adc_interrupt_clear+0x1c>)
    d7e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7e6:	4293      	cmp	r3, r2
    d7e8:	d001      	beq.n	d7ee <am_hal_adc_interrupt_clear+0x12>
    d7ea:	2002      	movs	r0, #2
    d7ec:	4770      	bx	lr
    d7ee:	4b03      	ldr	r3, [pc, #12]	; (d7fc <am_hal_adc_interrupt_clear+0x20>)
    d7f0:	2000      	movs	r0, #0
    d7f2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    d7f6:	4770      	bx	lr
    d7f8:	01afafaf 	.word	0x01afafaf
    d7fc:	50010000 	.word	0x50010000

0000d800 <am_hal_adc_samples_read>:
    d800:	b148      	cbz	r0, d816 <am_hal_adc_samples_read+0x16>
    d802:	6800      	ldr	r0, [r0, #0]
    d804:	b470      	push	{r4, r5, r6}
    d806:	4c1f      	ldr	r4, [pc, #124]	; (d884 <am_hal_adc_samples_read+0x84>)
    d808:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    d80c:	42a0      	cmp	r0, r4
    d80e:	d004      	beq.n	d81a <am_hal_adc_samples_read+0x1a>
    d810:	2002      	movs	r0, #2
    d812:	bc70      	pop	{r4, r5, r6}
    d814:	4770      	bx	lr
    d816:	2002      	movs	r0, #2
    d818:	4770      	bx	lr
    d81a:	b1db      	cbz	r3, d854 <am_hal_adc_samples_read+0x54>
    d81c:	2000      	movs	r0, #0
    d81e:	6814      	ldr	r4, [r2, #0]
    d820:	6010      	str	r0, [r2, #0]
    d822:	b1c9      	cbz	r1, d858 <am_hal_adc_samples_read+0x58>
    d824:	4d18      	ldr	r5, [pc, #96]	; (d888 <am_hal_adc_samples_read+0x88>)
    d826:	3308      	adds	r3, #8
    d828:	3904      	subs	r1, #4
    d82a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    d82e:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    d830:	f3c0 7002 	ubfx	r0, r0, #28, #3
    d834:	f843 0c04 	str.w	r0, [r3, #-4]
    d838:	6808      	ldr	r0, [r1, #0]
    d83a:	f3c0 108d 	ubfx	r0, r0, #6, #14
    d83e:	f843 0c08 	str.w	r0, [r3, #-8]
    d842:	6810      	ldr	r0, [r2, #0]
    d844:	3001      	adds	r0, #1
    d846:	4284      	cmp	r4, r0
    d848:	f103 0308 	add.w	r3, r3, #8
    d84c:	6010      	str	r0, [r2, #0]
    d84e:	d8ec      	bhi.n	d82a <am_hal_adc_samples_read+0x2a>
    d850:	2000      	movs	r0, #0
    d852:	e7de      	b.n	d812 <am_hal_adc_samples_read+0x12>
    d854:	2006      	movs	r0, #6
    d856:	e7dc      	b.n	d812 <am_hal_adc_samples_read+0x12>
    d858:	4e0b      	ldr	r6, [pc, #44]	; (d888 <am_hal_adc_samples_read+0x88>)
    d85a:	3308      	adds	r3, #8
    d85c:	e001      	b.n	d862 <am_hal_adc_samples_read+0x62>
    d85e:	4284      	cmp	r4, r0
    d860:	d9f6      	bls.n	d850 <am_hal_adc_samples_read+0x50>
    d862:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    d864:	f3c1 108d 	ubfx	r0, r1, #6, #14
    d868:	f3c1 7502 	ubfx	r5, r1, #28, #3
    d86c:	e903 0021 	stmdb	r3, {r0, r5}
    d870:	6810      	ldr	r0, [r2, #0]
    d872:	f3c1 5107 	ubfx	r1, r1, #20, #8
    d876:	3001      	adds	r0, #1
    d878:	3308      	adds	r3, #8
    d87a:	6010      	str	r0, [r2, #0]
    d87c:	2900      	cmp	r1, #0
    d87e:	d1ee      	bne.n	d85e <am_hal_adc_samples_read+0x5e>
    d880:	e7e6      	b.n	d850 <am_hal_adc_samples_read+0x50>
    d882:	bf00      	nop
    d884:	01afafaf 	.word	0x01afafaf
    d888:	50010000 	.word	0x50010000

0000d88c <am_hal_adc_sw_trigger>:
    d88c:	b128      	cbz	r0, d89a <am_hal_adc_sw_trigger+0xe>
    d88e:	6803      	ldr	r3, [r0, #0]
    d890:	4a05      	ldr	r2, [pc, #20]	; (d8a8 <am_hal_adc_sw_trigger+0x1c>)
    d892:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d896:	4293      	cmp	r3, r2
    d898:	d001      	beq.n	d89e <am_hal_adc_sw_trigger+0x12>
    d89a:	2002      	movs	r0, #2
    d89c:	4770      	bx	lr
    d89e:	4b03      	ldr	r3, [pc, #12]	; (d8ac <am_hal_adc_sw_trigger+0x20>)
    d8a0:	2237      	movs	r2, #55	; 0x37
    d8a2:	609a      	str	r2, [r3, #8]
    d8a4:	2000      	movs	r0, #0
    d8a6:	4770      	bx	lr
    d8a8:	01afafaf 	.word	0x01afafaf
    d8ac:	50010000 	.word	0x50010000

0000d8b0 <am_hal_adc_power_control>:
    d8b0:	b140      	cbz	r0, d8c4 <am_hal_adc_power_control+0x14>
    d8b2:	6803      	ldr	r3, [r0, #0]
    d8b4:	b570      	push	{r4, r5, r6, lr}
    d8b6:	4c2e      	ldr	r4, [pc, #184]	; (d970 <am_hal_adc_power_control+0xc0>)
    d8b8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8bc:	42a3      	cmp	r3, r4
    d8be:	d003      	beq.n	d8c8 <am_hal_adc_power_control+0x18>
    d8c0:	2002      	movs	r0, #2
    d8c2:	bd70      	pop	{r4, r5, r6, pc}
    d8c4:	2002      	movs	r0, #2
    d8c6:	4770      	bx	lr
    d8c8:	4604      	mov	r4, r0
    d8ca:	4615      	mov	r5, r2
    d8cc:	460e      	mov	r6, r1
    d8ce:	b329      	cbz	r1, d91c <am_hal_adc_power_control+0x6c>
    d8d0:	2902      	cmp	r1, #2
    d8d2:	d821      	bhi.n	d918 <am_hal_adc_power_control+0x68>
    d8d4:	b1da      	cbz	r2, d90e <am_hal_adc_power_control+0x5e>
    d8d6:	4b27      	ldr	r3, [pc, #156]	; (d974 <am_hal_adc_power_control+0xc4>)
    d8d8:	68da      	ldr	r2, [r3, #12]
    d8da:	6142      	str	r2, [r0, #20]
    d8dc:	691a      	ldr	r2, [r3, #16]
    d8de:	6182      	str	r2, [r0, #24]
    d8e0:	695a      	ldr	r2, [r3, #20]
    d8e2:	61c2      	str	r2, [r0, #28]
    d8e4:	699a      	ldr	r2, [r3, #24]
    d8e6:	6202      	str	r2, [r0, #32]
    d8e8:	69da      	ldr	r2, [r3, #28]
    d8ea:	6242      	str	r2, [r0, #36]	; 0x24
    d8ec:	6a1a      	ldr	r2, [r3, #32]
    d8ee:	6282      	str	r2, [r0, #40]	; 0x28
    d8f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d8f2:	62c2      	str	r2, [r0, #44]	; 0x2c
    d8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8f6:	6302      	str	r2, [r0, #48]	; 0x30
    d8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d8fa:	6342      	str	r2, [r0, #52]	; 0x34
    d8fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d8fe:	6382      	str	r2, [r0, #56]	; 0x38
    d900:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d904:	63c2      	str	r2, [r0, #60]	; 0x3c
    d906:	681b      	ldr	r3, [r3, #0]
    d908:	6103      	str	r3, [r0, #16]
    d90a:	2301      	movs	r3, #1
    d90c:	7303      	strb	r3, [r0, #12]
    d90e:	200a      	movs	r0, #10
    d910:	f001 f998 	bl	ec44 <am_hal_pwrctrl_periph_disable>
    d914:	2000      	movs	r0, #0
    d916:	bd70      	pop	{r4, r5, r6, pc}
    d918:	2006      	movs	r0, #6
    d91a:	bd70      	pop	{r4, r5, r6, pc}
    d91c:	b11a      	cbz	r2, d926 <am_hal_adc_power_control+0x76>
    d91e:	7b03      	ldrb	r3, [r0, #12]
    d920:	b933      	cbnz	r3, d930 <am_hal_adc_power_control+0x80>
    d922:	2007      	movs	r0, #7
    d924:	bd70      	pop	{r4, r5, r6, pc}
    d926:	200a      	movs	r0, #10
    d928:	f001 f962 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    d92c:	4628      	mov	r0, r5
    d92e:	bd70      	pop	{r4, r5, r6, pc}
    d930:	200a      	movs	r0, #10
    d932:	f001 f95d 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    d936:	4b0f      	ldr	r3, [pc, #60]	; (d974 <am_hal_adc_power_control+0xc4>)
    d938:	6962      	ldr	r2, [r4, #20]
    d93a:	60da      	str	r2, [r3, #12]
    d93c:	69a2      	ldr	r2, [r4, #24]
    d93e:	611a      	str	r2, [r3, #16]
    d940:	69e2      	ldr	r2, [r4, #28]
    d942:	615a      	str	r2, [r3, #20]
    d944:	6a22      	ldr	r2, [r4, #32]
    d946:	619a      	str	r2, [r3, #24]
    d948:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d94a:	61da      	str	r2, [r3, #28]
    d94c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d94e:	621a      	str	r2, [r3, #32]
    d950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d952:	625a      	str	r2, [r3, #36]	; 0x24
    d954:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d956:	629a      	str	r2, [r3, #40]	; 0x28
    d958:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d95a:	62da      	str	r2, [r3, #44]	; 0x2c
    d95c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d95e:	631a      	str	r2, [r3, #48]	; 0x30
    d960:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d962:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    d966:	6922      	ldr	r2, [r4, #16]
    d968:	601a      	str	r2, [r3, #0]
    d96a:	4630      	mov	r0, r6
    d96c:	7326      	strb	r6, [r4, #12]
    d96e:	bd70      	pop	{r4, r5, r6, pc}
    d970:	01afafaf 	.word	0x01afafaf
    d974:	50010000 	.word	0x50010000

0000d978 <am_hal_cachectrl_config>:
    d978:	b530      	push	{r4, r5, lr}
    d97a:	b083      	sub	sp, #12
    d97c:	4605      	mov	r5, r0
    d97e:	f000 fb3d 	bl	dffc <am_hal_interrupt_master_disable>
    d982:	4c11      	ldr	r4, [pc, #68]	; (d9c8 <am_hal_cachectrl_config+0x50>)
    d984:	9001      	str	r0, [sp, #4]
    d986:	6823      	ldr	r3, [r4, #0]
    d988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d98c:	6023      	str	r3, [r4, #0]
    d98e:	9801      	ldr	r0, [sp, #4]
    d990:	f000 fb38 	bl	e004 <am_hal_interrupt_master_set>
    d994:	78eb      	ldrb	r3, [r5, #3]
    d996:	782a      	ldrb	r2, [r5, #0]
    d998:	78a8      	ldrb	r0, [r5, #2]
    d99a:	7869      	ldrb	r1, [r5, #1]
    d99c:	005b      	lsls	r3, r3, #1
    d99e:	0112      	lsls	r2, r2, #4
    d9a0:	b2d2      	uxtb	r2, r2
    d9a2:	f003 0302 	and.w	r3, r3, #2
    d9a6:	4313      	orrs	r3, r2
    d9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d9ac:	0080      	lsls	r0, r0, #2
    d9ae:	f000 000c 	and.w	r0, r0, #12
    d9b2:	020a      	lsls	r2, r1, #8
    d9b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d9b8:	4303      	orrs	r3, r0
    d9ba:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d9be:	4313      	orrs	r3, r2
    d9c0:	2000      	movs	r0, #0
    d9c2:	6023      	str	r3, [r4, #0]
    d9c4:	b003      	add	sp, #12
    d9c6:	bd30      	pop	{r4, r5, pc}
    d9c8:	40018000 	.word	0x40018000

0000d9cc <am_hal_cachectrl_enable>:
    d9cc:	4a03      	ldr	r2, [pc, #12]	; (d9dc <am_hal_cachectrl_enable+0x10>)
    d9ce:	6813      	ldr	r3, [r2, #0]
    d9d0:	f043 0301 	orr.w	r3, r3, #1
    d9d4:	6013      	str	r3, [r2, #0]
    d9d6:	2000      	movs	r0, #0
    d9d8:	4770      	bx	lr
    d9da:	bf00      	nop
    d9dc:	40018000 	.word	0x40018000

0000d9e0 <am_hal_clkgen_control>:
    d9e0:	4b32      	ldr	r3, [pc, #200]	; (daac <am_hal_clkgen_control+0xcc>)
    d9e2:	681a      	ldr	r2, [r3, #0]
    d9e4:	b912      	cbnz	r2, d9ec <am_hal_clkgen_control+0xc>
    d9e6:	4a32      	ldr	r2, [pc, #200]	; (dab0 <am_hal_clkgen_control+0xd0>)
    d9e8:	6812      	ldr	r2, [r2, #0]
    d9ea:	601a      	str	r2, [r3, #0]
    d9ec:	2809      	cmp	r0, #9
    d9ee:	d85a      	bhi.n	daa6 <am_hal_clkgen_control+0xc6>
    d9f0:	e8df f000 	tbb	[pc, r0]
    d9f4:	261e160d 	.word	0x261e160d
    d9f8:	4640362e 	.word	0x4640362e
    d9fc:	054e      	.short	0x054e
    d9fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da02:	2000      	movs	r0, #0
    da04:	6a1a      	ldr	r2, [r3, #32]
    da06:	f36f 0200 	bfc	r2, #0, #1
    da0a:	621a      	str	r2, [r3, #32]
    da0c:	4770      	bx	lr
    da0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da12:	2200      	movs	r2, #0
    da14:	2147      	movs	r1, #71	; 0x47
    da16:	6159      	str	r1, [r3, #20]
    da18:	4610      	mov	r0, r2
    da1a:	619a      	str	r2, [r3, #24]
    da1c:	615a      	str	r2, [r3, #20]
    da1e:	4770      	bx	lr
    da20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da24:	2000      	movs	r0, #0
    da26:	68d3      	ldr	r3, [r2, #12]
    da28:	f023 0301 	bic.w	r3, r3, #1
    da2c:	60d3      	str	r3, [r2, #12]
    da2e:	4770      	bx	lr
    da30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da34:	2000      	movs	r0, #0
    da36:	68d3      	ldr	r3, [r2, #12]
    da38:	f023 0302 	bic.w	r3, r3, #2
    da3c:	60d3      	str	r3, [r2, #12]
    da3e:	4770      	bx	lr
    da40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da44:	2000      	movs	r0, #0
    da46:	68d3      	ldr	r3, [r2, #12]
    da48:	f043 0301 	orr.w	r3, r3, #1
    da4c:	60d3      	str	r3, [r2, #12]
    da4e:	4770      	bx	lr
    da50:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da54:	2000      	movs	r0, #0
    da56:	68d3      	ldr	r3, [r2, #12]
    da58:	f043 0302 	orr.w	r3, r3, #2
    da5c:	60d3      	str	r3, [r2, #12]
    da5e:	4770      	bx	lr
    da60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da64:	2200      	movs	r2, #0
    da66:	2047      	movs	r0, #71	; 0x47
    da68:	2101      	movs	r1, #1
    da6a:	6158      	str	r0, [r3, #20]
    da6c:	6199      	str	r1, [r3, #24]
    da6e:	4610      	mov	r0, r2
    da70:	615a      	str	r2, [r3, #20]
    da72:	4770      	bx	lr
    da74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da78:	2000      	movs	r0, #0
    da7a:	68da      	ldr	r2, [r3, #12]
    da7c:	60da      	str	r2, [r3, #12]
    da7e:	4770      	bx	lr
    da80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da84:	2000      	movs	r0, #0
    da86:	68d3      	ldr	r3, [r2, #12]
    da88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da8c:	60d3      	str	r3, [r2, #12]
    da8e:	4770      	bx	lr
    da90:	b139      	cbz	r1, daa2 <am_hal_clkgen_control+0xc2>
    da92:	680b      	ldr	r3, [r1, #0]
    da94:	f043 0301 	orr.w	r3, r3, #1
    da98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da9c:	2000      	movs	r0, #0
    da9e:	6213      	str	r3, [r2, #32]
    daa0:	4770      	bx	lr
    daa2:	4b04      	ldr	r3, [pc, #16]	; (dab4 <am_hal_clkgen_control+0xd4>)
    daa4:	e7f8      	b.n	da98 <am_hal_clkgen_control+0xb8>
    daa6:	2006      	movs	r0, #6
    daa8:	4770      	bx	lr
    daaa:	bf00      	nop
    daac:	10001140 	.word	0x10001140
    dab0:	4ffff000 	.word	0x4ffff000
    dab4:	0025b801 	.word	0x0025b801

0000dab8 <am_hal_ctimer_config_single>:
    dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    daba:	b083      	sub	sp, #12
    dabc:	460e      	mov	r6, r1
    dabe:	4614      	mov	r4, r2
    dac0:	0147      	lsls	r7, r0, #5
    dac2:	4605      	mov	r5, r0
    dac4:	f000 fa9a 	bl	dffc <am_hal_interrupt_master_disable>
    dac8:	4a19      	ldr	r2, [pc, #100]	; (db30 <am_hal_ctimer_config_single+0x78>)
    daca:	9001      	str	r0, [sp, #4]
    dacc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dad0:	58bb      	ldr	r3, [r7, r2]
    dad2:	d021      	beq.n	db18 <am_hal_ctimer_config_single+0x60>
    dad4:	ea23 0306 	bic.w	r3, r3, r6
    dad8:	1c71      	adds	r1, r6, #1
    dada:	ea43 0304 	orr.w	r3, r3, r4
    dade:	d00c      	beq.n	dafa <am_hal_ctimer_config_single+0x42>
    dae0:	50bb      	str	r3, [r7, r2]
    dae2:	9801      	ldr	r0, [sp, #4]
    dae4:	f000 fa8e 	bl	e004 <am_hal_interrupt_master_set>
    dae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    daec:	429e      	cmp	r6, r3
    daee:	d01c      	beq.n	db2a <am_hal_ctimer_config_single+0x72>
    daf0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    daf4:	d017      	beq.n	db26 <am_hal_ctimer_config_single+0x6e>
    daf6:	b003      	add	sp, #12
    daf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dafa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dafe:	50bb      	str	r3, [r7, r2]
    db00:	9801      	ldr	r0, [sp, #4]
    db02:	f000 fa7f 	bl	e004 <am_hal_interrupt_master_set>
    db06:	2200      	movs	r2, #0
    db08:	4b0a      	ldr	r3, [pc, #40]	; (db34 <am_hal_ctimer_config_single+0x7c>)
    db0a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    db0e:	f3c4 0444 	ubfx	r4, r4, #1, #5
    db12:	54ac      	strb	r4, [r5, r2]
    db14:	b003      	add	sp, #12
    db16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db18:	0424      	lsls	r4, r4, #16
    db1a:	b29b      	uxth	r3, r3
    db1c:	4323      	orrs	r3, r4
    db1e:	50bb      	str	r3, [r7, r2]
    db20:	9801      	ldr	r0, [sp, #4]
    db22:	f000 fa6f 	bl	e004 <am_hal_interrupt_master_set>
    db26:	2201      	movs	r2, #1
    db28:	e7ee      	b.n	db08 <am_hal_ctimer_config_single+0x50>
    db2a:	2200      	movs	r2, #0
    db2c:	e7ec      	b.n	db08 <am_hal_ctimer_config_single+0x50>
    db2e:	bf00      	nop
    db30:	4000800c 	.word	0x4000800c
    db34:	10001020 	.word	0x10001020

0000db38 <am_hal_ctimer_start>:
    db38:	b570      	push	{r4, r5, r6, lr}
    db3a:	b082      	sub	sp, #8
    db3c:	460c      	mov	r4, r1
    db3e:	0146      	lsls	r6, r0, #5
    db40:	4605      	mov	r5, r0
    db42:	f000 fa5b 	bl	dffc <am_hal_interrupt_master_disable>
    db46:	4a0f      	ldr	r2, [pc, #60]	; (db84 <am_hal_ctimer_start+0x4c>)
    db48:	9001      	str	r0, [sp, #4]
    db4a:	58b3      	ldr	r3, [r6, r2]
    db4c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    db50:	ea23 0301 	bic.w	r3, r3, r1
    db54:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    db58:	430b      	orrs	r3, r1
    db5a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    db5e:	bf0c      	ite	eq
    db60:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    db64:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    db68:	50b3      	str	r3, [r6, r2]
    db6a:	4b07      	ldr	r3, [pc, #28]	; (db88 <am_hal_ctimer_start+0x50>)
    db6c:	9801      	ldr	r0, [sp, #4]
    db6e:	bf0c      	ite	eq
    db70:	2101      	moveq	r1, #1
    db72:	2100      	movne	r1, #0
    db74:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    db78:	545c      	strb	r4, [r3, r1]
    db7a:	f000 fa43 	bl	e004 <am_hal_interrupt_master_set>
    db7e:	b002      	add	sp, #8
    db80:	bd70      	pop	{r4, r5, r6, pc}
    db82:	bf00      	nop
    db84:	4000800c 	.word	0x4000800c
    db88:	10001020 	.word	0x10001020

0000db8c <am_hal_ctimer_period_set>:
    db8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db90:	b082      	sub	sp, #8
    db92:	4689      	mov	r9, r1
    db94:	4698      	mov	r8, r3
    db96:	0147      	lsls	r7, r0, #5
    db98:	4614      	mov	r4, r2
    db9a:	f000 fa2f 	bl	dffc <am_hal_interrupt_master_disable>
    db9e:	f8df a094 	ldr.w	sl, [pc, #148]	; dc34 <am_hal_ctimer_period_set+0xa8>
    dba2:	9001      	str	r0, [sp, #4]
    dba4:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dba8:	4d20      	ldr	r5, [pc, #128]	; (dc2c <am_hal_ctimer_period_set+0xa0>)
    dbaa:	4e21      	ldr	r6, [pc, #132]	; (dc30 <am_hal_ctimer_period_set+0xa4>)
    dbac:	f857 300a 	ldr.w	r3, [r7, sl]
    dbb0:	d01a      	beq.n	dbe8 <am_hal_ctimer_period_set+0x5c>
    dbb2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dbb6:	2b80      	cmp	r3, #128	; 0x80
    dbb8:	d01b      	beq.n	dbf2 <am_hal_ctimer_period_set+0x66>
    dbba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dbbe:	2000      	movs	r0, #0
    dbc0:	4591      	cmp	r9, r2
    dbc2:	4603      	mov	r3, r0
    dbc4:	d01e      	beq.n	dc04 <am_hal_ctimer_period_set+0x78>
    dbc6:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dbca:	d025      	beq.n	dc18 <am_hal_ctimer_period_set+0x8c>
    dbcc:	0c1b      	lsrs	r3, r3, #16
    dbce:	b2a2      	uxth	r2, r4
    dbd0:	041b      	lsls	r3, r3, #16
    dbd2:	4310      	orrs	r0, r2
    dbd4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dbd8:	5178      	str	r0, [r7, r5]
    dbda:	51bb      	str	r3, [r7, r6]
    dbdc:	9801      	ldr	r0, [sp, #4]
    dbde:	f000 fa11 	bl	e004 <am_hal_interrupt_master_set>
    dbe2:	b002      	add	sp, #8
    dbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbe8:	0c1b      	lsrs	r3, r3, #16
    dbea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dbee:	2b80      	cmp	r3, #128	; 0x80
    dbf0:	d111      	bne.n	dc16 <am_hal_ctimer_period_set+0x8a>
    dbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dbf6:	4591      	cmp	r9, r2
    dbf8:	ea4f 4004 	mov.w	r0, r4, lsl #16
    dbfc:	4623      	mov	r3, r4
    dbfe:	ebc8 0404 	rsb	r4, r8, r4
    dc02:	d1e0      	bne.n	dbc6 <am_hal_ctimer_period_set+0x3a>
    dc04:	b2a3      	uxth	r3, r4
    dc06:	4318      	orrs	r0, r3
    dc08:	5178      	str	r0, [r7, r5]
    dc0a:	9801      	ldr	r0, [sp, #4]
    dc0c:	f000 f9fa 	bl	e004 <am_hal_interrupt_master_set>
    dc10:	b002      	add	sp, #8
    dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc16:	2000      	movs	r0, #0
    dc18:	b2a3      	uxth	r3, r4
    dc1a:	4318      	orrs	r0, r3
    dc1c:	51b8      	str	r0, [r7, r6]
    dc1e:	9801      	ldr	r0, [sp, #4]
    dc20:	f000 f9f0 	bl	e004 <am_hal_interrupt_master_set>
    dc24:	b002      	add	sp, #8
    dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc2a:	bf00      	nop
    dc2c:	40008004 	.word	0x40008004
    dc30:	40008008 	.word	0x40008008
    dc34:	4000800c 	.word	0x4000800c

0000dc38 <am_hal_ctimer_int_enable>:
    dc38:	b510      	push	{r4, lr}
    dc3a:	b082      	sub	sp, #8
    dc3c:	4604      	mov	r4, r0
    dc3e:	f000 f9dd 	bl	dffc <am_hal_interrupt_master_disable>
    dc42:	4b06      	ldr	r3, [pc, #24]	; (dc5c <am_hal_ctimer_int_enable+0x24>)
    dc44:	9001      	str	r0, [sp, #4]
    dc46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dc4a:	4314      	orrs	r4, r2
    dc4c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    dc50:	9801      	ldr	r0, [sp, #4]
    dc52:	f000 f9d7 	bl	e004 <am_hal_interrupt_master_set>
    dc56:	b002      	add	sp, #8
    dc58:	bd10      	pop	{r4, pc}
    dc5a:	bf00      	nop
    dc5c:	40008000 	.word	0x40008000

0000dc60 <am_hal_ctimer_int_clear>:
    dc60:	b510      	push	{r4, lr}
    dc62:	b082      	sub	sp, #8
    dc64:	4604      	mov	r4, r0
    dc66:	f000 f9c9 	bl	dffc <am_hal_interrupt_master_disable>
    dc6a:	4b04      	ldr	r3, [pc, #16]	; (dc7c <am_hal_ctimer_int_clear+0x1c>)
    dc6c:	9001      	str	r0, [sp, #4]
    dc6e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    dc72:	9801      	ldr	r0, [sp, #4]
    dc74:	f000 f9c6 	bl	e004 <am_hal_interrupt_master_set>
    dc78:	b002      	add	sp, #8
    dc7a:	bd10      	pop	{r4, pc}
    dc7c:	40008000 	.word	0x40008000

0000dc80 <am_hal_flash_delay>:
    dc80:	4b00      	ldr	r3, [pc, #0]	; (dc84 <am_hal_flash_delay+0x4>)
    dc82:	4718      	bx	r3
    dc84:	0800009d 	.word	0x0800009d

0000dc88 <am_hal_flash_delay_status_check>:
    dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc8c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    dc90:	460d      	mov	r5, r1
    dc92:	4616      	mov	r6, r2
    dc94:	461f      	mov	r7, r3
    dc96:	b17c      	cbz	r4, dcb8 <am_hal_flash_delay_status_check+0x30>
    dc98:	4604      	mov	r4, r0
    dc9a:	f8df 8040 	ldr.w	r8, [pc, #64]	; dcdc <am_hal_flash_delay_status_check+0x54>
    dc9e:	e002      	b.n	dca6 <am_hal_flash_delay_status_check+0x1e>
    dca0:	b1c4      	cbz	r4, dcd4 <am_hal_flash_delay_status_check+0x4c>
    dca2:	47c0      	blx	r8
    dca4:	3c01      	subs	r4, #1
    dca6:	682b      	ldr	r3, [r5, #0]
    dca8:	4033      	ands	r3, r6
    dcaa:	429f      	cmp	r7, r3
    dcac:	f04f 0001 	mov.w	r0, #1
    dcb0:	d1f6      	bne.n	dca0 <am_hal_flash_delay_status_check+0x18>
    dcb2:	2000      	movs	r0, #0
    dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcb8:	f8df 8020 	ldr.w	r8, [pc, #32]	; dcdc <am_hal_flash_delay_status_check+0x54>
    dcbc:	4604      	mov	r4, r0
    dcbe:	e002      	b.n	dcc6 <am_hal_flash_delay_status_check+0x3e>
    dcc0:	b144      	cbz	r4, dcd4 <am_hal_flash_delay_status_check+0x4c>
    dcc2:	47c0      	blx	r8
    dcc4:	3c01      	subs	r4, #1
    dcc6:	682b      	ldr	r3, [r5, #0]
    dcc8:	4033      	ands	r3, r6
    dcca:	429f      	cmp	r7, r3
    dccc:	f04f 0001 	mov.w	r0, #1
    dcd0:	d0f6      	beq.n	dcc0 <am_hal_flash_delay_status_check+0x38>
    dcd2:	e7ee      	b.n	dcb2 <am_hal_flash_delay_status_check+0x2a>
    dcd4:	2004      	movs	r0, #4
    dcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcda:	bf00      	nop
    dcdc:	0800009d 	.word	0x0800009d

0000dce0 <am_hal_gpio_pinconfig>:
    dce0:	2831      	cmp	r0, #49	; 0x31
    dce2:	d901      	bls.n	dce8 <am_hal_gpio_pinconfig+0x8>
    dce4:	2006      	movs	r0, #6
    dce6:	4770      	bx	lr
    dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcec:	f001 0307 	and.w	r3, r1, #7
    dcf0:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    dcf4:	b085      	sub	sp, #20
    dcf6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    dcfa:	d014      	beq.n	dd26 <am_hal_gpio_pinconfig+0x46>
    dcfc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dd00:	1db4      	adds	r4, r6, #6
    dd02:	f004 0407 	and.w	r4, r4, #7
    dd06:	2c03      	cmp	r4, #3
    dd08:	f042 0201 	orr.w	r2, r2, #1
    dd0c:	f200 80ae 	bhi.w	de6c <am_hal_gpio_pinconfig+0x18c>
    dd10:	4c85      	ldr	r4, [pc, #532]	; (df28 <am_hal_gpio_pinconfig+0x248>)
    dd12:	5c24      	ldrb	r4, [r4, r0]
    dd14:	07e7      	lsls	r7, r4, #31
    dd16:	d403      	bmi.n	dd20 <am_hal_gpio_pinconfig+0x40>
    dd18:	4884      	ldr	r0, [pc, #528]	; (df2c <am_hal_gpio_pinconfig+0x24c>)
    dd1a:	b005      	add	sp, #20
    dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd20:	3e02      	subs	r6, #2
    dd22:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dd26:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    dd2a:	2c00      	cmp	r4, #0
    dd2c:	f040 8098 	bne.w	de60 <am_hal_gpio_pinconfig+0x180>
    dd30:	4c7f      	ldr	r4, [pc, #508]	; (df30 <am_hal_gpio_pinconfig+0x250>)
    dd32:	4d80      	ldr	r5, [pc, #512]	; (df34 <am_hal_gpio_pinconfig+0x254>)
    dd34:	5c24      	ldrb	r4, [r4, r0]
    dd36:	5c2d      	ldrb	r5, [r5, r0]
    dd38:	411c      	asrs	r4, r3
    dd3a:	f014 0f01 	tst.w	r4, #1
    dd3e:	bf0c      	ite	eq
    dd40:	2400      	moveq	r4, #0
    dd42:	2402      	movne	r4, #2
    dd44:	42ab      	cmp	r3, r5
    dd46:	ea42 0204 	orr.w	r2, r2, r4
    dd4a:	f000 809b 	beq.w	de84 <am_hal_gpio_pinconfig+0x1a4>
    dd4e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    dd52:	105d      	asrs	r5, r3, #1
    dd54:	f3c1 2681 	ubfx	r6, r1, #10, #2
    dd58:	00db      	lsls	r3, r3, #3
    dd5a:	f3c1 2707 	ubfx	r7, r1, #8, #8
    dd5e:	f003 0408 	and.w	r4, r3, #8
    dd62:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    dd66:	f007 060c 	and.w	r6, r7, #12
    dd6a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dd6e:	2e04      	cmp	r6, #4
    dd70:	ea43 0304 	orr.w	r3, r3, r4
    dd74:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dd78:	462c      	mov	r4, r5
    dd7a:	f000 8090 	beq.w	de9e <am_hal_gpio_pinconfig+0x1be>
    dd7e:	4c6e      	ldr	r4, [pc, #440]	; (df38 <am_hal_gpio_pinconfig+0x258>)
    dd80:	6824      	ldr	r4, [r4, #0]
    dd82:	ebc4 0901 	rsb	r9, r4, r1
    dd86:	fab9 f989 	clz	r9, r9
    dd8a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    dd8e:	f017 0f60 	tst.w	r7, #96	; 0x60
    dd92:	bf04      	itt	eq
    dd94:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    dd98:	f364 0300 	bfieq	r3, r4, #0, #1
    dd9c:	0084      	lsls	r4, r0, #2
    dd9e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dda2:	2902      	cmp	r1, #2
    dda4:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    dda8:	d07c      	beq.n	dea4 <am_hal_gpio_pinconfig+0x1c4>
    ddaa:	f200 8082 	bhi.w	deb2 <am_hal_gpio_pinconfig+0x1d2>
    ddae:	2901      	cmp	r1, #1
    ddb0:	bf08      	it	eq
    ddb2:	f042 0204 	orreq.w	r2, r2, #4
    ddb6:	f005 0518 	and.w	r5, r5, #24
    ddba:	f04f 0800 	mov.w	r8, #0
    ddbe:	f004 041c 	and.w	r4, r4, #28
    ddc2:	0841      	lsrs	r1, r0, #1
    ddc4:	f020 0a03 	bic.w	sl, r0, #3
    ddc8:	270f      	movs	r7, #15
    ddca:	f021 0103 	bic.w	r1, r1, #3
    ddce:	40a7      	lsls	r7, r4
    ddd0:	26ff      	movs	r6, #255	; 0xff
    ddd2:	fa03 f404 	lsl.w	r4, r3, r4
    ddd6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    ddda:	40ae      	lsls	r6, r5
    dddc:	9101      	str	r1, [sp, #4]
    ddde:	9300      	str	r3, [sp, #0]
    dde0:	4683      	mov	fp, r0
    dde2:	fa02 f505 	lsl.w	r5, r2, r5
    dde6:	f000 f909 	bl	dffc <am_hal_interrupt_master_disable>
    ddea:	9b00      	ldr	r3, [sp, #0]
    ddec:	9003      	str	r0, [sp, #12]
    ddee:	43ff      	mvns	r7, r7
    ddf0:	43f6      	mvns	r6, r6
    ddf2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ddf6:	f8df e160 	ldr.w	lr, [pc, #352]	; df58 <am_hal_gpio_pinconfig+0x278>
    ddfa:	4850      	ldr	r0, [pc, #320]	; (df3c <am_hal_gpio_pinconfig+0x25c>)
    ddfc:	9901      	ldr	r1, [sp, #4]
    ddfe:	f1b9 0f00 	cmp.w	r9, #0
    de02:	d00b      	beq.n	de1c <am_hal_gpio_pinconfig+0x13c>
    de04:	f00b 021f 	and.w	r2, fp, #31
    de08:	f04f 0901 	mov.w	r9, #1
    de0c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    de10:	f8df c148 	ldr.w	ip, [pc, #328]	; df5c <am_hal_gpio_pinconfig+0x27c>
    de14:	fa09 f202 	lsl.w	r2, r9, r2
    de18:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    de1c:	4a48      	ldr	r2, [pc, #288]	; (df40 <am_hal_gpio_pinconfig+0x260>)
    de1e:	f04f 0c73 	mov.w	ip, #115	; 0x73
    de22:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    de26:	f8d3 c000 	ldr.w	ip, [r3]
    de2a:	ea06 0c0c 	and.w	ip, r6, ip
    de2e:	ea4c 0505 	orr.w	r5, ip, r5
    de32:	601d      	str	r5, [r3, #0]
    de34:	f851 300e 	ldr.w	r3, [r1, lr]
    de38:	403b      	ands	r3, r7
    de3a:	4323      	orrs	r3, r4
    de3c:	f841 300e 	str.w	r3, [r1, lr]
    de40:	f85a 3000 	ldr.w	r3, [sl, r0]
    de44:	401e      	ands	r6, r3
    de46:	2400      	movs	r4, #0
    de48:	ea46 0608 	orr.w	r6, r6, r8
    de4c:	f84a 6000 	str.w	r6, [sl, r0]
    de50:	6614      	str	r4, [r2, #96]	; 0x60
    de52:	9803      	ldr	r0, [sp, #12]
    de54:	f000 f8d6 	bl	e004 <am_hal_interrupt_master_set>
    de58:	4620      	mov	r0, r4
    de5a:	b005      	add	sp, #20
    de5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de60:	2c01      	cmp	r4, #1
    de62:	d015      	beq.n	de90 <am_hal_gpio_pinconfig+0x1b0>
    de64:	2c02      	cmp	r4, #2
    de66:	d032      	beq.n	dece <am_hal_gpio_pinconfig+0x1ee>
    de68:	4836      	ldr	r0, [pc, #216]	; (df44 <am_hal_gpio_pinconfig+0x264>)
    de6a:	e756      	b.n	dd1a <am_hal_gpio_pinconfig+0x3a>
    de6c:	2dc0      	cmp	r5, #192	; 0xc0
    de6e:	d029      	beq.n	dec4 <am_hal_gpio_pinconfig+0x1e4>
    de70:	2d20      	cmp	r5, #32
    de72:	f47f af58 	bne.w	dd26 <am_hal_gpio_pinconfig+0x46>
    de76:	4c2c      	ldr	r4, [pc, #176]	; (df28 <am_hal_gpio_pinconfig+0x248>)
    de78:	5c24      	ldrb	r4, [r4, r0]
    de7a:	f014 0f09 	tst.w	r4, #9
    de7e:	f47f af4b 	bne.w	dd18 <am_hal_gpio_pinconfig+0x38>
    de82:	e750      	b.n	dd26 <am_hal_gpio_pinconfig+0x46>
    de84:	f3c1 4402 	ubfx	r4, r1, #16, #3
    de88:	2c07      	cmp	r4, #7
    de8a:	d127      	bne.n	dedc <am_hal_gpio_pinconfig+0x1fc>
    de8c:	482e      	ldr	r0, [pc, #184]	; (df48 <am_hal_gpio_pinconfig+0x268>)
    de8e:	e744      	b.n	dd1a <am_hal_gpio_pinconfig+0x3a>
    de90:	4c25      	ldr	r4, [pc, #148]	; (df28 <am_hal_gpio_pinconfig+0x248>)
    de92:	5c24      	ldrb	r4, [r4, r0]
    de94:	07a5      	lsls	r5, r4, #30
    de96:	d5e7      	bpl.n	de68 <am_hal_gpio_pinconfig+0x188>
    de98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    de9c:	e748      	b.n	dd30 <am_hal_gpio_pinconfig+0x50>
    de9e:	f04f 0901 	mov.w	r9, #1
    dea2:	e774      	b.n	dd8e <am_hal_gpio_pinconfig+0xae>
    dea4:	f005 0518 	and.w	r5, r5, #24
    dea8:	f04f 0801 	mov.w	r8, #1
    deac:	fa08 f805 	lsl.w	r8, r8, r5
    deb0:	e785      	b.n	ddbe <am_hal_gpio_pinconfig+0xde>
    deb2:	f005 0518 	and.w	r5, r5, #24
    deb6:	f04f 0801 	mov.w	r8, #1
    deba:	f042 0204 	orr.w	r2, r2, #4
    debe:	fa08 f805 	lsl.w	r8, r8, r5
    dec2:	e77c      	b.n	ddbe <am_hal_gpio_pinconfig+0xde>
    dec4:	2814      	cmp	r0, #20
    dec6:	f43f af2e 	beq.w	dd26 <am_hal_gpio_pinconfig+0x46>
    deca:	4820      	ldr	r0, [pc, #128]	; (df4c <am_hal_gpio_pinconfig+0x26c>)
    decc:	e725      	b.n	dd1a <am_hal_gpio_pinconfig+0x3a>
    dece:	4c16      	ldr	r4, [pc, #88]	; (df28 <am_hal_gpio_pinconfig+0x248>)
    ded0:	5c24      	ldrb	r4, [r4, r0]
    ded2:	0764      	lsls	r4, r4, #29
    ded4:	d5c8      	bpl.n	de68 <am_hal_gpio_pinconfig+0x188>
    ded6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    deda:	e729      	b.n	dd30 <am_hal_gpio_pinconfig+0x50>
    dedc:	4d1c      	ldr	r5, [pc, #112]	; (df50 <am_hal_gpio_pinconfig+0x270>)
    dede:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dee2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dee6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    deea:	429e      	cmp	r6, r3
    deec:	d00c      	beq.n	df08 <am_hal_gpio_pinconfig+0x228>
    deee:	0084      	lsls	r4, r0, #2
    def0:	4425      	add	r5, r4
    def2:	786e      	ldrb	r6, [r5, #1]
    def4:	429e      	cmp	r6, r3
    def6:	d013      	beq.n	df20 <am_hal_gpio_pinconfig+0x240>
    def8:	78ae      	ldrb	r6, [r5, #2]
    defa:	429e      	cmp	r6, r3
    defc:	d00e      	beq.n	df1c <am_hal_gpio_pinconfig+0x23c>
    defe:	78ed      	ldrb	r5, [r5, #3]
    df00:	429d      	cmp	r5, r3
    df02:	d00f      	beq.n	df24 <am_hal_gpio_pinconfig+0x244>
    df04:	4813      	ldr	r0, [pc, #76]	; (df54 <am_hal_gpio_pinconfig+0x274>)
    df06:	e708      	b.n	dd1a <am_hal_gpio_pinconfig+0x3a>
    df08:	2300      	movs	r3, #0
    df0a:	0084      	lsls	r4, r0, #2
    df0c:	005b      	lsls	r3, r3, #1
    df0e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    df12:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    df16:	f04f 0900 	mov.w	r9, #0
    df1a:	e740      	b.n	dd9e <am_hal_gpio_pinconfig+0xbe>
    df1c:	2302      	movs	r3, #2
    df1e:	e7f5      	b.n	df0c <am_hal_gpio_pinconfig+0x22c>
    df20:	2301      	movs	r3, #1
    df22:	e7f3      	b.n	df0c <am_hal_gpio_pinconfig+0x22c>
    df24:	2303      	movs	r3, #3
    df26:	e7f1      	b.n	df0c <am_hal_gpio_pinconfig+0x22c>
    df28:	0000fa10 	.word	0x0000fa10
    df2c:	08000100 	.word	0x08000100
    df30:	0000fb0c 	.word	0x0000fb0c
    df34:	0000fb48 	.word	0x0000fb48
    df38:	0000fb40 	.word	0x0000fb40
    df3c:	400100e0 	.word	0x400100e0
    df40:	40010000 	.word	0x40010000
    df44:	08000102 	.word	0x08000102
    df48:	08000103 	.word	0x08000103
    df4c:	08000101 	.word	0x08000101
    df50:	0000fa44 	.word	0x0000fa44
    df54:	08000104 	.word	0x08000104
    df58:	40010040 	.word	0x40010040
    df5c:	400100b4 	.word	0x400100b4

0000df60 <am_hal_gpio_state_write>:
    df60:	2831      	cmp	r0, #49	; 0x31
    df62:	d901      	bls.n	df68 <am_hal_gpio_state_write+0x8>
    df64:	2005      	movs	r0, #5
    df66:	4770      	bx	lr
    df68:	2905      	cmp	r1, #5
    df6a:	d901      	bls.n	df70 <am_hal_gpio_state_write+0x10>
    df6c:	2006      	movs	r0, #6
    df6e:	4770      	bx	lr
    df70:	b570      	push	{r4, r5, r6, lr}
    df72:	f000 031f 	and.w	r3, r0, #31
    df76:	b082      	sub	sp, #8
    df78:	2201      	movs	r2, #1
    df7a:	460d      	mov	r5, r1
    df7c:	4604      	mov	r4, r0
    df7e:	fa02 f603 	lsl.w	r6, r2, r3
    df82:	f000 f83b 	bl	dffc <am_hal_interrupt_master_disable>
    df86:	1e69      	subs	r1, r5, #1
    df88:	9001      	str	r0, [sp, #4]
    df8a:	0960      	lsrs	r0, r4, #5
    df8c:	2904      	cmp	r1, #4
    df8e:	d81c      	bhi.n	dfca <am_hal_gpio_state_write+0x6a>
    df90:	e8df f001 	tbb	[pc, r1]
    df94:	030c1017 	.word	0x030c1017
    df98:	1f          	.byte	0x1f
    df99:	00          	.byte	0x00
    df9a:	4b11      	ldr	r3, [pc, #68]	; (dfe0 <am_hal_gpio_state_write+0x80>)
    df9c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dfa0:	9801      	ldr	r0, [sp, #4]
    dfa2:	f000 f82f 	bl	e004 <am_hal_interrupt_master_set>
    dfa6:	2000      	movs	r0, #0
    dfa8:	b002      	add	sp, #8
    dfaa:	bd70      	pop	{r4, r5, r6, pc}
    dfac:	4b0d      	ldr	r3, [pc, #52]	; (dfe4 <am_hal_gpio_state_write+0x84>)
    dfae:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dfb2:	e7f5      	b.n	dfa0 <am_hal_gpio_state_write+0x40>
    dfb4:	4a0c      	ldr	r2, [pc, #48]	; (dfe8 <am_hal_gpio_state_write+0x88>)
    dfb6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dfba:	4073      	eors	r3, r6
    dfbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dfc0:	e7ee      	b.n	dfa0 <am_hal_gpio_state_write+0x40>
    dfc2:	4b0a      	ldr	r3, [pc, #40]	; (dfec <am_hal_gpio_state_write+0x8c>)
    dfc4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dfc8:	e7ea      	b.n	dfa0 <am_hal_gpio_state_write+0x40>
    dfca:	4b09      	ldr	r3, [pc, #36]	; (dff0 <am_hal_gpio_state_write+0x90>)
    dfcc:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dfd0:	e7e6      	b.n	dfa0 <am_hal_gpio_state_write+0x40>
    dfd2:	4a04      	ldr	r2, [pc, #16]	; (dfe4 <am_hal_gpio_state_write+0x84>)
    dfd4:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dfd8:	4073      	eors	r3, r6
    dfda:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dfde:	e7df      	b.n	dfa0 <am_hal_gpio_state_write+0x40>
    dfe0:	400100a8 	.word	0x400100a8
    dfe4:	400100b4 	.word	0x400100b4
    dfe8:	40010088 	.word	0x40010088
    dfec:	40010090 	.word	0x40010090
    dff0:	40010098 	.word	0x40010098

0000dff4 <am_hal_interrupt_master_enable>:
    dff4:	f3ef 8010 	mrs	r0, PRIMASK
    dff8:	b662      	cpsie	i
    dffa:	4770      	bx	lr

0000dffc <am_hal_interrupt_master_disable>:
    dffc:	f3ef 8010 	mrs	r0, PRIMASK
    e000:	b672      	cpsid	i
    e002:	4770      	bx	lr

0000e004 <am_hal_interrupt_master_set>:
    e004:	f380 8810 	msr	PRIMASK, r0
    e008:	4770      	bx	lr
    e00a:	bf00      	nop

0000e00c <internal_iom_reset_on_error>:
    e00c:	b570      	push	{r4, r5, r6, lr}
    e00e:	6844      	ldr	r4, [r0, #4]
    e010:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e014:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e018:	3404      	adds	r4, #4
    e01a:	0324      	lsls	r4, r4, #12
    e01c:	2300      	movs	r3, #0
    e01e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e022:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e026:	050b      	lsls	r3, r1, #20
    e028:	d52a      	bpl.n	e080 <internal_iom_reset_on_error+0x74>
    e02a:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e02e:	079e      	lsls	r6, r3, #30
    e030:	d450      	bmi.n	e0d4 <internal_iom_reset_on_error+0xc8>
    e032:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e036:	079a      	lsls	r2, r3, #30
    e038:	d508      	bpl.n	e04c <internal_iom_reset_on_error+0x40>
    e03a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e03e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e042:	2b03      	cmp	r3, #3
    e044:	d9f5      	bls.n	e032 <internal_iom_reset_on_error+0x26>
    e046:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e04a:	e7f6      	b.n	e03a <internal_iom_reset_on_error+0x2e>
    e04c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e050:	f003 0306 	and.w	r3, r3, #6
    e054:	2b04      	cmp	r3, #4
    e056:	d1f9      	bne.n	e04c <internal_iom_reset_on_error+0x40>
    e058:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e05c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e060:	b173      	cbz	r3, e080 <internal_iom_reset_on_error+0x74>
    e062:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e066:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e06a:	2b03      	cmp	r3, #3
    e06c:	d9f4      	bls.n	e058 <internal_iom_reset_on_error+0x4c>
    e06e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e072:	e7f6      	b.n	e062 <internal_iom_reset_on_error+0x56>
    e074:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e078:	f003 0306 	and.w	r3, r3, #6
    e07c:	2b04      	cmp	r3, #4
    e07e:	d1f9      	bne.n	e074 <internal_iom_reset_on_error+0x68>
    e080:	06cb      	lsls	r3, r1, #27
    e082:	d520      	bpl.n	e0c6 <internal_iom_reset_on_error+0xba>
    e084:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e088:	f003 0306 	and.w	r3, r3, #6
    e08c:	2b04      	cmp	r3, #4
    e08e:	d1f9      	bne.n	e084 <internal_iom_reset_on_error+0x78>
    e090:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e094:	f36f 1304 	bfc	r3, #4, #1
    e098:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e09c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e0a0:	f36f 0341 	bfc	r3, #1, #1
    e0a4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e0a8:	0040      	lsls	r0, r0, #1
    e0aa:	f7ff fde9 	bl	dc80 <am_hal_flash_delay>
    e0ae:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e0b2:	f043 0302 	orr.w	r3, r3, #2
    e0b6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e0ba:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e0be:	f043 0310 	orr.w	r3, r3, #16
    e0c2:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e0c6:	f04f 33ff 	mov.w	r3, #4294967295
    e0ca:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e0ce:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e0d2:	bd70      	pop	{r4, r5, r6, pc}
    e0d4:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e0d8:	4e07      	ldr	r6, [pc, #28]	; (e0f8 <internal_iom_reset_on_error+0xec>)
    e0da:	2a00      	cmp	r2, #0
    e0dc:	d0ca      	beq.n	e074 <internal_iom_reset_on_error+0x68>
    e0de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e0e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e0e6:	2b03      	cmp	r3, #3
    e0e8:	d9f9      	bls.n	e0de <internal_iom_reset_on_error+0xd2>
    e0ea:	2a04      	cmp	r2, #4
    e0ec:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e0f0:	d9c0      	bls.n	e074 <internal_iom_reset_on_error+0x68>
    e0f2:	3a04      	subs	r2, #4
    e0f4:	e7f1      	b.n	e0da <internal_iom_reset_on_error+0xce>
    e0f6:	bf00      	nop
    e0f8:	deadbeef 	.word	0xdeadbeef

0000e0fc <am_hal_iom_initialize>:
    e0fc:	2805      	cmp	r0, #5
    e0fe:	d901      	bls.n	e104 <am_hal_iom_initialize+0x8>
    e100:	2005      	movs	r0, #5
    e102:	4770      	bx	lr
    e104:	b1e1      	cbz	r1, e140 <am_hal_iom_initialize+0x44>
    e106:	b4f0      	push	{r4, r5, r6, r7}
    e108:	f640 049c 	movw	r4, #2204	; 0x89c
    e10c:	4e0d      	ldr	r6, [pc, #52]	; (e144 <am_hal_iom_initialize+0x48>)
    e10e:	fb04 f400 	mul.w	r4, r4, r0
    e112:	1935      	adds	r5, r6, r4
    e114:	4602      	mov	r2, r0
    e116:	78e8      	ldrb	r0, [r5, #3]
    e118:	f010 0301 	ands.w	r3, r0, #1
    e11c:	d002      	beq.n	e124 <am_hal_iom_initialize+0x28>
    e11e:	2007      	movs	r0, #7
    e120:	bcf0      	pop	{r4, r5, r6, r7}
    e122:	4770      	bx	lr
    e124:	f040 0001 	orr.w	r0, r0, #1
    e128:	f363 0041 	bfi	r0, r3, #1, #1
    e12c:	70e8      	strb	r0, [r5, #3]
    e12e:	5937      	ldr	r7, [r6, r4]
    e130:	4805      	ldr	r0, [pc, #20]	; (e148 <am_hal_iom_initialize+0x4c>)
    e132:	f360 0717 	bfi	r7, r0, #0, #24
    e136:	5137      	str	r7, [r6, r4]
    e138:	4618      	mov	r0, r3
    e13a:	606a      	str	r2, [r5, #4]
    e13c:	600d      	str	r5, [r1, #0]
    e13e:	e7ef      	b.n	e120 <am_hal_iom_initialize+0x24>
    e140:	2006      	movs	r0, #6
    e142:	4770      	bx	lr
    e144:	100012ec 	.word	0x100012ec
    e148:	00123456 	.word	0x00123456

0000e14c <am_hal_iom_enable>:
    e14c:	b128      	cbz	r0, e15a <am_hal_iom_enable+0xe>
    e14e:	6803      	ldr	r3, [r0, #0]
    e150:	4a34      	ldr	r2, [pc, #208]	; (e224 <am_hal_iom_enable+0xd8>)
    e152:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e156:	4293      	cmp	r3, r2
    e158:	d001      	beq.n	e15e <am_hal_iom_enable+0x12>
    e15a:	2002      	movs	r0, #2
    e15c:	4770      	bx	lr
    e15e:	78c3      	ldrb	r3, [r0, #3]
    e160:	079b      	lsls	r3, r3, #30
    e162:	d45d      	bmi.n	e220 <am_hal_iom_enable+0xd4>
    e164:	6843      	ldr	r3, [r0, #4]
    e166:	7a01      	ldrb	r1, [r0, #8]
    e168:	b570      	push	{r4, r5, r6, lr}
    e16a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e16e:	3304      	adds	r3, #4
    e170:	031b      	lsls	r3, r3, #12
    e172:	3100      	adds	r1, #0
    e174:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e178:	bf18      	it	ne
    e17a:	2101      	movne	r1, #1
    e17c:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e180:	4291      	cmp	r1, r2
    e182:	bf0c      	ite	eq
    e184:	2201      	moveq	r2, #1
    e186:	2210      	movne	r2, #16
    e188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e18c:	68c3      	ldr	r3, [r0, #12]
    e18e:	b084      	sub	sp, #16
    e190:	4604      	mov	r4, r0
    e192:	2b00      	cmp	r3, #0
    e194:	d039      	beq.n	e20a <am_hal_iom_enable+0xbe>
    e196:	6843      	ldr	r3, [r0, #4]
    e198:	4923      	ldr	r1, [pc, #140]	; (e228 <am_hal_iom_enable+0xdc>)
    e19a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e19e:	3304      	adds	r3, #4
    e1a0:	031a      	lsls	r2, r3, #12
    e1a2:	2300      	movs	r3, #0
    e1a4:	6243      	str	r3, [r0, #36]	; 0x24
    e1a6:	61c3      	str	r3, [r0, #28]
    e1a8:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    e1ac:	6902      	ldr	r2, [r0, #16]
    e1ae:	6840      	ldr	r0, [r0, #4]
    e1b0:	68e6      	ldr	r6, [r4, #12]
    e1b2:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    e1b6:	2501      	movs	r5, #1
    e1b8:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    e1bc:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    e1c0:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    e1c4:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    e1c8:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    e1cc:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    e1d0:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    e1d4:	6223      	str	r3, [r4, #32]
    e1d6:	b2c0      	uxtb	r0, r0
    e1d8:	fa22 f305 	lsr.w	r3, r2, r5
    e1dc:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    e1e0:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e1e4:	a901      	add	r1, sp, #4
    e1e6:	9301      	str	r3, [sp, #4]
    e1e8:	9602      	str	r6, [sp, #8]
    e1ea:	f88d 500c 	strb.w	r5, [sp, #12]
    e1ee:	f001 f995 	bl	f51c <am_hal_cmdq_init>
    e1f2:	6863      	ldr	r3, [r4, #4]
    e1f4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e1f8:	3304      	adds	r3, #4
    e1fa:	031b      	lsls	r3, r3, #12
    e1fc:	b960      	cbnz	r0, e218 <am_hal_iom_enable+0xcc>
    e1fe:	f44f 7180 	mov.w	r1, #256	; 0x100
    e202:	2202      	movs	r2, #2
    e204:	6221      	str	r1, [r4, #32]
    e206:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e20a:	78e3      	ldrb	r3, [r4, #3]
    e20c:	f043 0302 	orr.w	r3, r3, #2
    e210:	70e3      	strb	r3, [r4, #3]
    e212:	2000      	movs	r0, #0
    e214:	b004      	add	sp, #16
    e216:	bd70      	pop	{r4, r5, r6, pc}
    e218:	2202      	movs	r2, #2
    e21a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e21e:	e7f9      	b.n	e214 <am_hal_iom_enable+0xc8>
    e220:	2000      	movs	r0, #0
    e222:	4770      	bx	lr
    e224:	01123456 	.word	0x01123456
    e228:	00800040 	.word	0x00800040

0000e22c <am_hal_iom_power_ctrl>:
    e22c:	b140      	cbz	r0, e240 <am_hal_iom_power_ctrl+0x14>
    e22e:	b538      	push	{r3, r4, r5, lr}
    e230:	6803      	ldr	r3, [r0, #0]
    e232:	4c85      	ldr	r4, [pc, #532]	; (e448 <am_hal_iom_power_ctrl+0x21c>)
    e234:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e238:	42a3      	cmp	r3, r4
    e23a:	d003      	beq.n	e244 <am_hal_iom_power_ctrl+0x18>
    e23c:	2002      	movs	r0, #2
    e23e:	bd38      	pop	{r3, r4, r5, pc}
    e240:	2002      	movs	r0, #2
    e242:	4770      	bx	lr
    e244:	4604      	mov	r4, r0
    e246:	4615      	mov	r5, r2
    e248:	b199      	cbz	r1, e272 <am_hal_iom_power_ctrl+0x46>
    e24a:	2902      	cmp	r1, #2
    e24c:	d80f      	bhi.n	e26e <am_hal_iom_power_ctrl+0x42>
    e24e:	78c3      	ldrb	r3, [r0, #3]
    e250:	6840      	ldr	r0, [r0, #4]
    e252:	079a      	lsls	r2, r3, #30
    e254:	d519      	bpl.n	e28a <am_hal_iom_power_ctrl+0x5e>
    e256:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e25a:	3304      	adds	r3, #4
    e25c:	031b      	lsls	r3, r3, #12
    e25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e262:	f003 0306 	and.w	r3, r3, #6
    e266:	2b04      	cmp	r3, #4
    e268:	d00c      	beq.n	e284 <am_hal_iom_power_ctrl+0x58>
    e26a:	2003      	movs	r0, #3
    e26c:	bd38      	pop	{r3, r4, r5, pc}
    e26e:	2006      	movs	r0, #6
    e270:	bd38      	pop	{r3, r4, r5, pc}
    e272:	2a00      	cmp	r2, #0
    e274:	f000 80cf 	beq.w	e416 <am_hal_iom_power_ctrl+0x1ea>
    e278:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    e27c:	2b00      	cmp	r3, #0
    e27e:	d146      	bne.n	e30e <am_hal_iom_power_ctrl+0xe2>
    e280:	2007      	movs	r0, #7
    e282:	bd38      	pop	{r3, r4, r5, pc}
    e284:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e286:	2b00      	cmp	r3, #0
    e288:	d1ef      	bne.n	e26a <am_hal_iom_power_ctrl+0x3e>
    e28a:	b3d5      	cbz	r5, e302 <am_hal_iom_power_ctrl+0xd6>
    e28c:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e290:	3304      	adds	r3, #4
    e292:	031b      	lsls	r3, r3, #12
    e294:	2201      	movs	r2, #1
    e296:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e29a:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    e29e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e2a2:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e2a6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e2aa:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    e2ae:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e2b2:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e2b6:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e2ba:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e2be:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e2c2:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e2c6:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e2ca:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e2ce:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e2d2:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e2d6:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e2da:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e2de:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e2e2:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e2e6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e2ea:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e2ee:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e2f2:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e2f6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e2fa:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    e2fe:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    e302:	3002      	adds	r0, #2
    e304:	b2c0      	uxtb	r0, r0
    e306:	f000 fc9d 	bl	ec44 <am_hal_pwrctrl_periph_disable>
    e30a:	2000      	movs	r0, #0
    e30c:	bd38      	pop	{r3, r4, r5, pc}
    e30e:	6843      	ldr	r3, [r0, #4]
    e310:	1c98      	adds	r0, r3, #2
    e312:	b2c0      	uxtb	r0, r0
    e314:	f000 fc6c 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    e318:	6863      	ldr	r3, [r4, #4]
    e31a:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    e31e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e322:	3304      	adds	r3, #4
    e324:	031b      	lsls	r3, r3, #12
    e326:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e32a:	6863      	ldr	r3, [r4, #4]
    e32c:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    e330:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e334:	3304      	adds	r3, #4
    e336:	031b      	lsls	r3, r3, #12
    e338:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e33c:	6863      	ldr	r3, [r4, #4]
    e33e:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    e342:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e346:	3304      	adds	r3, #4
    e348:	031b      	lsls	r3, r3, #12
    e34a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e34e:	6863      	ldr	r3, [r4, #4]
    e350:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    e354:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e358:	3304      	adds	r3, #4
    e35a:	031b      	lsls	r3, r3, #12
    e35c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    e360:	6863      	ldr	r3, [r4, #4]
    e362:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e366:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e36a:	3304      	adds	r3, #4
    e36c:	031b      	lsls	r3, r3, #12
    e36e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    e372:	6863      	ldr	r3, [r4, #4]
    e374:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    e378:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e37c:	3304      	adds	r3, #4
    e37e:	031b      	lsls	r3, r3, #12
    e380:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    e384:	6863      	ldr	r3, [r4, #4]
    e386:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    e38a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e38e:	3304      	adds	r3, #4
    e390:	031b      	lsls	r3, r3, #12
    e392:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    e396:	6863      	ldr	r3, [r4, #4]
    e398:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    e39c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3a0:	3304      	adds	r3, #4
    e3a2:	031b      	lsls	r3, r3, #12
    e3a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    e3a8:	6863      	ldr	r3, [r4, #4]
    e3aa:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    e3ae:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3b2:	3304      	adds	r3, #4
    e3b4:	031b      	lsls	r3, r3, #12
    e3b6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e3ba:	6863      	ldr	r3, [r4, #4]
    e3bc:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    e3c0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3c4:	3304      	adds	r3, #4
    e3c6:	031b      	lsls	r3, r3, #12
    e3c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e3cc:	6863      	ldr	r3, [r4, #4]
    e3ce:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    e3d2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3d6:	3304      	adds	r3, #4
    e3d8:	031b      	lsls	r3, r3, #12
    e3da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e3de:	6863      	ldr	r3, [r4, #4]
    e3e0:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    e3e4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3e8:	3304      	adds	r3, #4
    e3ea:	031b      	lsls	r3, r3, #12
    e3ec:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e3f0:	6863      	ldr	r3, [r4, #4]
    e3f2:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    e3f6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e3fa:	3304      	adds	r3, #4
    e3fc:	031b      	lsls	r3, r3, #12
    e3fe:	f022 0201 	bic.w	r2, r2, #1
    e402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    e406:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    e40a:	07db      	lsls	r3, r3, #31
    e40c:	d40a      	bmi.n	e424 <am_hal_iom_power_ctrl+0x1f8>
    e40e:	2000      	movs	r0, #0
    e410:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    e414:	bd38      	pop	{r3, r4, r5, pc}
    e416:	6840      	ldr	r0, [r0, #4]
    e418:	3002      	adds	r0, #2
    e41a:	b2c0      	uxtb	r0, r0
    e41c:	f000 fbe8 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    e420:	4628      	mov	r0, r5
    e422:	bd38      	pop	{r3, r4, r5, pc}
    e424:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e426:	b953      	cbnz	r3, e43e <am_hal_iom_power_ctrl+0x212>
    e428:	6863      	ldr	r3, [r4, #4]
    e42a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e42e:	3304      	adds	r3, #4
    e430:	031b      	lsls	r3, r3, #12
    e432:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e43a:	e883 000c 	stmia.w	r3, {r2, r3}
    e43e:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e442:	f001 f8cf 	bl	f5e4 <am_hal_cmdq_enable>
    e446:	e7e2      	b.n	e40e <am_hal_iom_power_ctrl+0x1e2>
    e448:	01123456 	.word	0x01123456

0000e44c <am_hal_iom_configure>:
    e44c:	b128      	cbz	r0, e45a <am_hal_iom_configure+0xe>
    e44e:	6803      	ldr	r3, [r0, #0]
    e450:	4a8b      	ldr	r2, [pc, #556]	; (e680 <am_hal_iom_configure+0x234>)
    e452:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e456:	4293      	cmp	r3, r2
    e458:	d001      	beq.n	e45e <am_hal_iom_configure+0x12>
    e45a:	2002      	movs	r0, #2
    e45c:	4770      	bx	lr
    e45e:	b111      	cbz	r1, e466 <am_hal_iom_configure+0x1a>
    e460:	6843      	ldr	r3, [r0, #4]
    e462:	2b05      	cmp	r3, #5
    e464:	d901      	bls.n	e46a <am_hal_iom_configure+0x1e>
    e466:	2006      	movs	r0, #6
    e468:	4770      	bx	lr
    e46a:	78c2      	ldrb	r2, [r0, #3]
    e46c:	0792      	lsls	r2, r2, #30
    e46e:	d501      	bpl.n	e474 <am_hal_iom_configure+0x28>
    e470:	2007      	movs	r0, #7
    e472:	4770      	bx	lr
    e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e47c:	3304      	adds	r3, #4
    e47e:	780a      	ldrb	r2, [r1, #0]
    e480:	7202      	strb	r2, [r0, #8]
    e482:	031b      	lsls	r3, r3, #12
    e484:	f241 0410 	movw	r4, #4112	; 0x1010
    e488:	b083      	sub	sp, #12
    e48a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e48e:	b942      	cbnz	r2, e4a2 <am_hal_iom_configure+0x56>
    e490:	f891 c008 	ldrb.w	ip, [r1, #8]
    e494:	f1bc 0f03 	cmp.w	ip, #3
    e498:	d908      	bls.n	e4ac <am_hal_iom_configure+0x60>
    e49a:	2006      	movs	r0, #6
    e49c:	b003      	add	sp, #12
    e49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4a2:	2a01      	cmp	r2, #1
    e4a4:	f000 80c3 	beq.w	e62e <am_hal_iom_configure+0x1e2>
    e4a8:	2005      	movs	r0, #5
    e4aa:	e7f7      	b.n	e49c <am_hal_iom_configure+0x50>
    e4ac:	684f      	ldr	r7, [r1, #4]
    e4ae:	2f00      	cmp	r7, #0
    e4b0:	f000 80bb 	beq.w	e62a <am_hal_iom_configure+0x1de>
    e4b4:	4e73      	ldr	r6, [pc, #460]	; (e684 <am_hal_iom_configure+0x238>)
    e4b6:	fbb6 f6f7 	udiv	r6, r6, r7
    e4ba:	fb07 f206 	mul.w	r2, r7, r6
    e4be:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    e4c2:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    e4c6:	2a00      	cmp	r2, #0
    e4c8:	bf18      	it	ne
    e4ca:	3601      	addne	r6, #1
    e4cc:	4274      	negs	r4, r6
    e4ce:	4034      	ands	r4, r6
    e4d0:	fab4 f484 	clz	r4, r4
    e4d4:	f1c4 041f 	rsb	r4, r4, #31
    e4d8:	2c06      	cmp	r4, #6
    e4da:	bfa8      	it	ge
    e4dc:	2406      	movge	r4, #6
    e4de:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    e4e2:	f240 80b7 	bls.w	e654 <am_hal_iom_configure+0x208>
    e4e6:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    e4ea:	4d67      	ldr	r5, [pc, #412]	; (e688 <am_hal_iom_configure+0x23c>)
    e4ec:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    e4f0:	42aa      	cmp	r2, r5
    e4f2:	bf8c      	ite	hi
    e4f4:	f04f 0e00 	movhi.w	lr, #0
    e4f8:	f04f 0e01 	movls.w	lr, #1
    e4fc:	ea4f 024e 	mov.w	r2, lr, lsl #1
    e500:	3201      	adds	r2, #1
    e502:	fa02 f804 	lsl.w	r8, r2, r4
    e506:	fbb6 f5f8 	udiv	r5, r6, r8
    e50a:	fb08 6815 	mls	r8, r8, r5, r6
    e50e:	f1b8 0f00 	cmp.w	r8, #0
    e512:	bf18      	it	ne
    e514:	3501      	addne	r5, #1
    e516:	fab5 f885 	clz	r8, r5
    e51a:	f1c8 081f 	rsb	r8, r8, #31
    e51e:	f1b8 0f07 	cmp.w	r8, #7
    e522:	f240 8094 	bls.w	e64e <am_hal_iom_configure+0x202>
    e526:	3c07      	subs	r4, #7
    e528:	4444      	add	r4, r8
    e52a:	f104 0901 	add.w	r9, r4, #1
    e52e:	f1b9 0f07 	cmp.w	r9, #7
    e532:	d87a      	bhi.n	e62a <am_hal_iom_configure+0x1de>
    e534:	f1a8 0807 	sub.w	r8, r8, #7
    e538:	f04f 0a01 	mov.w	sl, #1
    e53c:	fa0a fa08 	lsl.w	sl, sl, r8
    e540:	f10a 3aff 	add.w	sl, sl, #4294967295
    e544:	ea0a 0a05 	and.w	sl, sl, r5
    e548:	fa25 f508 	lsr.w	r5, r5, r8
    e54c:	f1ba 0f00 	cmp.w	sl, #0
    e550:	bf18      	it	ne
    e552:	3501      	addne	r5, #1
    e554:	f8df 8158 	ldr.w	r8, [pc, #344]	; e6b0 <am_hal_iom_configure+0x264>
    e558:	4547      	cmp	r7, r8
    e55a:	d87e      	bhi.n	e65a <am_hal_iom_configure+0x20e>
    e55c:	f04f 0801 	mov.w	r8, #1
    e560:	fa08 f804 	lsl.w	r8, r8, r4
    e564:	ebb8 0806 	subs.w	r8, r8, r6
    e568:	bf18      	it	ne
    e56a:	f04f 0801 	movne.w	r8, #1
    e56e:	ea4f 066c 	mov.w	r6, ip, asr #1
    e572:	2e01      	cmp	r6, #1
    e574:	d074      	beq.n	e660 <am_hal_iom_configure+0x214>
    e576:	3d01      	subs	r5, #1
    e578:	086e      	lsrs	r6, r5, #1
    e57a:	9600      	str	r6, [sp, #0]
    e57c:	fb05 fa08 	mul.w	sl, r5, r8
    e580:	40a2      	lsls	r2, r4
    e582:	fb0a 2202 	mla	r2, sl, r2, r2
    e586:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    e58a:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    e58e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e684 <am_hal_iom_configure+0x238>
    e592:	fbb9 fbf2 	udiv	fp, r9, r2
    e596:	fb02 fa0b 	mul.w	sl, r2, fp
    e59a:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    e59e:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    e5a2:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    e5a6:	9601      	str	r6, [sp, #4]
    e5a8:	0852      	lsrs	r2, r2, #1
    e5aa:	9e00      	ldr	r6, [sp, #0]
    e5ac:	4552      	cmp	r2, sl
    e5ae:	bf2c      	ite	cs
    e5b0:	465a      	movcs	r2, fp
    e5b2:	f10b 0201 	addcc.w	r2, fp, #1
    e5b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	; e6b4 <am_hal_iom_configure+0x268>
    e5ba:	fbb2 fafb 	udiv	sl, r2, fp
    e5be:	0436      	lsls	r6, r6, #16
    e5c0:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    e5c4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    e5c8:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    e5cc:	fb0b 2b1a 	mls	fp, fp, sl, r2
    e5d0:	432e      	orrs	r6, r5
    e5d2:	f1bb 0f00 	cmp.w	fp, #0
    e5d6:	d10a      	bne.n	e5ee <am_hal_iom_configure+0x1a2>
    e5d8:	f1ba 0f00 	cmp.w	sl, #0
    e5dc:	d007      	beq.n	e5ee <am_hal_iom_configure+0x1a2>
    e5de:	f10a 35ff 	add.w	r5, sl, #4294967295
    e5e2:	ea15 0f0a 	tst.w	r5, sl
    e5e6:	d102      	bne.n	e5ee <am_hal_iom_configure+0x1a2>
    e5e8:	9d01      	ldr	r5, [sp, #4]
    e5ea:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    e5ee:	2400      	movs	r4, #0
    e5f0:	4334      	orrs	r4, r6
    e5f2:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    e5f6:	f044 0401 	orr.w	r4, r4, #1
    e5fa:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    e5fe:	68cb      	ldr	r3, [r1, #12]
    e600:	690a      	ldr	r2, [r1, #16]
    e602:	60c3      	str	r3, [r0, #12]
    e604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e608:	2300      	movs	r3, #0
    e60a:	6102      	str	r2, [r0, #16]
    e60c:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    e610:	4a1c      	ldr	r2, [pc, #112]	; (e684 <am_hal_iom_configure+0x238>)
    e612:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    e616:	fbb2 f7f7 	udiv	r7, r2, r7
    e61a:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    e61e:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    e622:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    e626:	4618      	mov	r0, r3
    e628:	e738      	b.n	e49c <am_hal_iom_configure+0x50>
    e62a:	2400      	movs	r4, #0
    e62c:	e7e1      	b.n	e5f2 <am_hal_iom_configure+0x1a6>
    e62e:	684f      	ldr	r7, [r1, #4]
    e630:	4a16      	ldr	r2, [pc, #88]	; (e68c <am_hal_iom_configure+0x240>)
    e632:	4297      	cmp	r7, r2
    e634:	d01e      	beq.n	e674 <am_hal_iom_configure+0x228>
    e636:	4a16      	ldr	r2, [pc, #88]	; (e690 <am_hal_iom_configure+0x244>)
    e638:	4297      	cmp	r7, r2
    e63a:	d016      	beq.n	e66a <am_hal_iom_configure+0x21e>
    e63c:	4a15      	ldr	r2, [pc, #84]	; (e694 <am_hal_iom_configure+0x248>)
    e63e:	4297      	cmp	r7, r2
    e640:	f47f af2b 	bne.w	e49a <am_hal_iom_configure+0x4e>
    e644:	4a14      	ldr	r2, [pc, #80]	; (e698 <am_hal_iom_configure+0x24c>)
    e646:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e64a:	4c14      	ldr	r4, [pc, #80]	; (e69c <am_hal_iom_configure+0x250>)
    e64c:	e7d3      	b.n	e5f6 <am_hal_iom_configure+0x1aa>
    e64e:	f104 0901 	add.w	r9, r4, #1
    e652:	e77f      	b.n	e554 <am_hal_iom_configure+0x108>
    e654:	f04f 0e01 	mov.w	lr, #1
    e658:	e750      	b.n	e4fc <am_hal_iom_configure+0xb0>
    e65a:	f04f 0800 	mov.w	r8, #0
    e65e:	e786      	b.n	e56e <am_hal_iom_configure+0x122>
    e660:	1eae      	subs	r6, r5, #2
    e662:	0876      	lsrs	r6, r6, #1
    e664:	9600      	str	r6, [sp, #0]
    e666:	3d01      	subs	r5, #1
    e668:	e788      	b.n	e57c <am_hal_iom_configure+0x130>
    e66a:	4a0d      	ldr	r2, [pc, #52]	; (e6a0 <am_hal_iom_configure+0x254>)
    e66c:	4c0d      	ldr	r4, [pc, #52]	; (e6a4 <am_hal_iom_configure+0x258>)
    e66e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e672:	e7c0      	b.n	e5f6 <am_hal_iom_configure+0x1aa>
    e674:	4a0c      	ldr	r2, [pc, #48]	; (e6a8 <am_hal_iom_configure+0x25c>)
    e676:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e67a:	4c0c      	ldr	r4, [pc, #48]	; (e6ac <am_hal_iom_configure+0x260>)
    e67c:	e7bb      	b.n	e5f6 <am_hal_iom_configure+0x1aa>
    e67e:	bf00      	nop
    e680:	01123456 	.word	0x01123456
    e684:	02dc6c00 	.word	0x02dc6c00
    e688:	007a11ff 	.word	0x007a11ff
    e68c:	00061a80 	.word	0x00061a80
    e690:	000f4240 	.word	0x000f4240
    e694:	000186a0 	.word	0x000186a0
    e698:	0003f070 	.word	0x0003f070
    e69c:	773b1201 	.word	0x773b1201
    e6a0:	00213040 	.word	0x00213040
    e6a4:	06031301 	.word	0x06031301
    e6a8:	0003f270 	.word	0x0003f270
    e6ac:	1d0e1201 	.word	0x1d0e1201
    e6b0:	00b71aff 	.word	0x00b71aff
    e6b4:	0003d090 	.word	0x0003d090

0000e6b8 <am_hal_iom_blocking_transfer>:
    e6b8:	b128      	cbz	r0, e6c6 <am_hal_iom_blocking_transfer+0xe>
    e6ba:	6803      	ldr	r3, [r0, #0]
    e6bc:	4ac1      	ldr	r2, [pc, #772]	; (e9c4 <am_hal_iom_blocking_transfer+0x30c>)
    e6be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6c2:	4293      	cmp	r3, r2
    e6c4:	d001      	beq.n	e6ca <am_hal_iom_blocking_transfer+0x12>
    e6c6:	2002      	movs	r0, #2
    e6c8:	4770      	bx	lr
    e6ca:	b159      	cbz	r1, e6e4 <am_hal_iom_blocking_transfer+0x2c>
    e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6d0:	f891 8010 	ldrb.w	r8, [r1, #16]
    e6d4:	f1b8 0f01 	cmp.w	r8, #1
    e6d8:	b087      	sub	sp, #28
    e6da:	d905      	bls.n	e6e8 <am_hal_iom_blocking_transfer+0x30>
    e6dc:	2007      	movs	r0, #7
    e6de:	b007      	add	sp, #28
    e6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6e4:	2006      	movs	r0, #6
    e6e6:	4770      	bx	lr
    e6e8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    e6ec:	f1ba 0f00 	cmp.w	sl, #0
    e6f0:	d102      	bne.n	e6f8 <am_hal_iom_blocking_transfer+0x40>
    e6f2:	f881 a010 	strb.w	sl, [r1, #16]
    e6f6:	46d0      	mov	r8, sl
    e6f8:	f8d1 9004 	ldr.w	r9, [r1, #4]
    e6fc:	f1b9 0f03 	cmp.w	r9, #3
    e700:	d901      	bls.n	e706 <am_hal_iom_blocking_transfer+0x4e>
    e702:	2006      	movs	r0, #6
    e704:	e7eb      	b.n	e6de <am_hal_iom_blocking_transfer+0x26>
    e706:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    e70a:	f04f 33ff 	mov.w	r3, #4294967295
    e70e:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e712:	4093      	lsls	r3, r2
    e714:	ea13 0f0b 	tst.w	r3, fp
    e718:	d1f3      	bne.n	e702 <am_hal_iom_blocking_transfer+0x4a>
    e71a:	f1ba 0f00 	cmp.w	sl, #0
    e71e:	f000 80bb 	beq.w	e898 <am_hal_iom_blocking_transfer+0x1e0>
    e722:	f1b8 0f00 	cmp.w	r8, #0
    e726:	f000 80c7 	beq.w	e8b8 <am_hal_iom_blocking_transfer+0x200>
    e72a:	698b      	ldr	r3, [r1, #24]
    e72c:	2b00      	cmp	r3, #0
    e72e:	d0e8      	beq.n	e702 <am_hal_iom_blocking_transfer+0x4a>
    e730:	7a03      	ldrb	r3, [r0, #8]
    e732:	2b01      	cmp	r3, #1
    e734:	f040 80b4 	bne.w	e8a0 <am_hal_iom_blocking_transfer+0x1e8>
    e738:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    e73c:	d8e1      	bhi.n	e702 <am_hal_iom_blocking_transfer+0x4a>
    e73e:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    e742:	2b02      	cmp	r3, #2
    e744:	d0ca      	beq.n	e6dc <am_hal_iom_blocking_transfer+0x24>
    e746:	7f0b      	ldrb	r3, [r1, #28]
    e748:	694f      	ldr	r7, [r1, #20]
    e74a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    e74e:	9303      	str	r3, [sp, #12]
    e750:	4604      	mov	r4, r0
    e752:	2301      	movs	r3, #1
    e754:	460d      	mov	r5, r1
    e756:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    e75a:	6866      	ldr	r6, [r4, #4]
    e75c:	9300      	str	r3, [sp, #0]
    e75e:	f04f 32ff 	mov.w	r2, #4294967295
    e762:	2300      	movs	r3, #0
    e764:	f104 0124 	add.w	r1, r4, #36	; 0x24
    e768:	4598      	cmp	r8, r3
    e76a:	bf18      	it	ne
    e76c:	4677      	movne	r7, lr
    e76e:	f7ff fa8b 	bl	dc88 <am_hal_flash_delay_status_check>
    e772:	2800      	cmp	r0, #0
    e774:	d1b3      	bne.n	e6de <am_hal_iom_blocking_transfer+0x26>
    e776:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    e77a:	3604      	adds	r6, #4
    e77c:	2301      	movs	r3, #1
    e77e:	0336      	lsls	r6, r6, #12
    e780:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    e784:	9300      	str	r3, [sp, #0]
    e786:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    e78a:	9304      	str	r3, [sp, #16]
    e78c:	4619      	mov	r1, r3
    e78e:	2206      	movs	r2, #6
    e790:	2304      	movs	r3, #4
    e792:	f7ff fa79 	bl	dc88 <am_hal_flash_delay_status_check>
    e796:	2800      	cmp	r0, #0
    e798:	d1a1      	bne.n	e6de <am_hal_iom_blocking_transfer+0x26>
    e79a:	f04f 33ff 	mov.w	r3, #4294967295
    e79e:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    e7a2:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    e7a6:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    e7aa:	682b      	ldr	r3, [r5, #0]
    e7ac:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    e7b0:	682b      	ldr	r3, [r5, #0]
    e7b2:	9205      	str	r2, [sp, #20]
    e7b4:	4423      	add	r3, r4
    e7b6:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    e7ba:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    e7be:	7a23      	ldrb	r3, [r4, #8]
    e7c0:	b903      	cbnz	r3, e7c4 <am_hal_iom_blocking_transfer+0x10c>
    e7c2:	6828      	ldr	r0, [r5, #0]
    e7c4:	4a80      	ldr	r2, [pc, #512]	; (e9c8 <am_hal_iom_blocking_transfer+0x310>)
    e7c6:	0500      	lsls	r0, r0, #20
    e7c8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    e7cc:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    e7d0:	ea0a 0202 	and.w	r2, sl, r2
    e7d4:	f1b8 0f01 	cmp.w	r8, #1
    e7d8:	ea42 0203 	orr.w	r2, r2, r3
    e7dc:	d074      	beq.n	e8c8 <am_hal_iom_blocking_transfer+0x210>
    e7de:	f3cb 230f 	ubfx	r3, fp, #8, #16
    e7e2:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    e7e6:	ea4f 1149 	mov.w	r1, r9, lsl #5
    e7ea:	ea4f 600b 	mov.w	r0, fp, lsl #24
    e7ee:	f040 0001 	orr.w	r0, r0, #1
    e7f2:	f001 0160 	and.w	r1, r1, #96	; 0x60
    e7f6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e7fa:	f8d5 800c 	ldr.w	r8, [r5, #12]
    e7fe:	4301      	orrs	r1, r0
    e800:	9803      	ldr	r0, [sp, #12]
    e802:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e806:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    e80a:	2b03      	cmp	r3, #3
    e80c:	ea42 0201 	orr.w	r2, r2, r1
    e810:	f240 80b3 	bls.w	e97a <am_hal_iom_blocking_transfer+0x2c2>
    e814:	f1b8 0f00 	cmp.w	r8, #0
    e818:	d00a      	beq.n	e830 <am_hal_iom_blocking_transfer+0x178>
    e81a:	4641      	mov	r1, r8
    e81c:	f857 0b04 	ldr.w	r0, [r7], #4
    e820:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    e824:	2903      	cmp	r1, #3
    e826:	f1a3 0304 	sub.w	r3, r3, #4
    e82a:	f1a1 0104 	sub.w	r1, r1, #4
    e82e:	d82e      	bhi.n	e88e <am_hal_iom_blocking_transfer+0x1d6>
    e830:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e834:	f04f 0800 	mov.w	r8, #0
    e838:	2701      	movs	r7, #1
    e83a:	9904      	ldr	r1, [sp, #16]
    e83c:	9700      	str	r7, [sp, #0]
    e83e:	2304      	movs	r3, #4
    e840:	2206      	movs	r2, #6
    e842:	4862      	ldr	r0, [pc, #392]	; (e9cc <am_hal_iom_blocking_transfer+0x314>)
    e844:	f7ff fa20 	bl	dc88 <am_hal_flash_delay_status_check>
    e848:	4605      	mov	r5, r0
    e84a:	b970      	cbnz	r0, e86a <am_hal_iom_blocking_transfer+0x1b2>
    e84c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e850:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    e854:	d135      	bne.n	e8c2 <am_hal_iom_blocking_transfer+0x20a>
    e856:	0599      	lsls	r1, r3, #22
    e858:	f100 80cf 	bmi.w	e9fa <am_hal_iom_blocking_transfer+0x342>
    e85c:	06da      	lsls	r2, r3, #27
    e85e:	f100 80ce 	bmi.w	e9fe <am_hal_iom_blocking_transfer+0x346>
    e862:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    e866:	d00e      	beq.n	e886 <am_hal_iom_blocking_transfer+0x1ce>
    e868:	463d      	mov	r5, r7
    e86a:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    e86e:	4620      	mov	r0, r4
    e870:	f7ff fbcc 	bl	e00c <internal_iom_reset_on_error>
    e874:	f04f 33ff 	mov.w	r3, #4294967295
    e878:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    e87c:	9b05      	ldr	r3, [sp, #20]
    e87e:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    e882:	4628      	mov	r0, r5
    e884:	e72b      	b.n	e6de <am_hal_iom_blocking_transfer+0x26>
    e886:	f1b8 0f00 	cmp.w	r8, #0
    e88a:	d0f3      	beq.n	e874 <am_hal_iom_blocking_transfer+0x1bc>
    e88c:	e7ec      	b.n	e868 <am_hal_iom_blocking_transfer+0x1b0>
    e88e:	2b03      	cmp	r3, #3
    e890:	d972      	bls.n	e978 <am_hal_iom_blocking_transfer+0x2c0>
    e892:	2900      	cmp	r1, #0
    e894:	d1c2      	bne.n	e81c <am_hal_iom_blocking_transfer+0x164>
    e896:	e7cb      	b.n	e830 <am_hal_iom_blocking_transfer+0x178>
    e898:	7a03      	ldrb	r3, [r0, #8]
    e89a:	2b01      	cmp	r3, #1
    e89c:	f43f af4f 	beq.w	e73e <am_hal_iom_blocking_transfer+0x86>
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	f47f af4c 	bne.w	e73e <am_hal_iom_blocking_transfer+0x86>
    e8a6:	680b      	ldr	r3, [r1, #0]
    e8a8:	2b03      	cmp	r3, #3
    e8aa:	f63f af2a 	bhi.w	e702 <am_hal_iom_blocking_transfer+0x4a>
    e8ae:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    e8b2:	f4bf af26 	bcs.w	e702 <am_hal_iom_blocking_transfer+0x4a>
    e8b6:	e742      	b.n	e73e <am_hal_iom_blocking_transfer+0x86>
    e8b8:	694b      	ldr	r3, [r1, #20]
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	f47f af38 	bne.w	e730 <am_hal_iom_blocking_transfer+0x78>
    e8c0:	e71f      	b.n	e702 <am_hal_iom_blocking_transfer+0x4a>
    e8c2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e8c6:	e7d0      	b.n	e86a <am_hal_iom_blocking_transfer+0x1b2>
    e8c8:	ea4f 1349 	mov.w	r3, r9, lsl #5
    e8cc:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    e8d0:	ea4f 610b 	mov.w	r1, fp, lsl #24
    e8d4:	9b03      	ldr	r3, [sp, #12]
    e8d6:	f041 0102 	orr.w	r1, r1, #2
    e8da:	f3cb 200f 	ubfx	r0, fp, #8, #16
    e8de:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    e8e2:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    e8e6:	ea4e 0301 	orr.w	r3, lr, r1
    e8ea:	f8d5 800c 	ldr.w	r8, [r5, #12]
    e8ee:	431a      	orrs	r2, r3
    e8f0:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e8f4:	2200      	movs	r2, #0
    e8f6:	f1b8 0f00 	cmp.w	r8, #0
    e8fa:	d09b      	beq.n	e834 <am_hal_iom_blocking_transfer+0x17c>
    e8fc:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e900:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e904:	2b03      	cmp	r3, #3
    e906:	d81e      	bhi.n	e946 <am_hal_iom_blocking_transfer+0x28e>
    e908:	4d30      	ldr	r5, [pc, #192]	; (e9cc <am_hal_iom_blocking_transfer+0x314>)
    e90a:	e001      	b.n	e910 <am_hal_iom_blocking_transfer+0x258>
    e90c:	3d01      	subs	r5, #1
    e90e:	d093      	beq.n	e838 <am_hal_iom_blocking_transfer+0x180>
    e910:	2001      	movs	r0, #1
    e912:	b10a      	cbz	r2, e918 <am_hal_iom_blocking_transfer+0x260>
    e914:	4598      	cmp	r8, r3
    e916:	d88f      	bhi.n	e838 <am_hal_iom_blocking_transfer+0x180>
    e918:	f7ff f9b2 	bl	dc80 <am_hal_flash_delay>
    e91c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    e920:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e924:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e928:	2b03      	cmp	r3, #3
    e92a:	f002 0201 	and.w	r2, r2, #1
    e92e:	d9ed      	bls.n	e90c <am_hal_iom_blocking_transfer+0x254>
    e930:	e009      	b.n	e946 <am_hal_iom_blocking_transfer+0x28e>
    e932:	2b03      	cmp	r3, #3
    e934:	6039      	str	r1, [r7, #0]
    e936:	f1a8 0804 	sub.w	r8, r8, #4
    e93a:	d962      	bls.n	ea02 <am_hal_iom_blocking_transfer+0x34a>
    e93c:	f1b8 0f00 	cmp.w	r8, #0
    e940:	f43f af78 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e944:	4607      	mov	r7, r0
    e946:	f1b8 0f03 	cmp.w	r8, #3
    e94a:	f1a3 0304 	sub.w	r3, r3, #4
    e94e:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    e952:	f107 0004 	add.w	r0, r7, #4
    e956:	d8ec      	bhi.n	e932 <am_hal_iom_blocking_transfer+0x27a>
    e958:	f1b8 0f01 	cmp.w	r8, #1
    e95c:	7039      	strb	r1, [r7, #0]
    e95e:	ea4f 2311 	mov.w	r3, r1, lsr #8
    e962:	f43f af67 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e966:	f1b8 0f02 	cmp.w	r8, #2
    e96a:	707b      	strb	r3, [r7, #1]
    e96c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    e970:	f43f af60 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e974:	70b9      	strb	r1, [r7, #2]
    e976:	e75d      	b.n	e834 <am_hal_iom_blocking_transfer+0x17c>
    e978:	4688      	mov	r8, r1
    e97a:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e97e:	f1b8 0f00 	cmp.w	r8, #0
    e982:	f43f af57 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e986:	463b      	mov	r3, r7
    e988:	4647      	mov	r7, r8
    e98a:	4698      	mov	r8, r3
    e98c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e990:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e994:	2b03      	cmp	r3, #3
    e996:	d81e      	bhi.n	e9d6 <am_hal_iom_blocking_transfer+0x31e>
    e998:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e99c:	07d8      	lsls	r0, r3, #31
    e99e:	d42a      	bmi.n	e9f6 <am_hal_iom_blocking_transfer+0x33e>
    e9a0:	4d0a      	ldr	r5, [pc, #40]	; (e9cc <am_hal_iom_blocking_transfer+0x314>)
    e9a2:	e005      	b.n	e9b0 <am_hal_iom_blocking_transfer+0x2f8>
    e9a4:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e9a8:	07db      	lsls	r3, r3, #31
    e9aa:	d424      	bmi.n	e9f6 <am_hal_iom_blocking_transfer+0x33e>
    e9ac:	3d01      	subs	r5, #1
    e9ae:	d022      	beq.n	e9f6 <am_hal_iom_blocking_transfer+0x33e>
    e9b0:	2001      	movs	r0, #1
    e9b2:	f7ff f965 	bl	dc80 <am_hal_flash_delay>
    e9b6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e9ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e9be:	2b03      	cmp	r3, #3
    e9c0:	d9f0      	bls.n	e9a4 <am_hal_iom_blocking_transfer+0x2ec>
    e9c2:	e008      	b.n	e9d6 <am_hal_iom_blocking_transfer+0x31e>
    e9c4:	01123456 	.word	0x01123456
    e9c8:	000fff00 	.word	0x000fff00
    e9cc:	0007a120 	.word	0x0007a120
    e9d0:	2f00      	cmp	r7, #0
    e9d2:	f43f af2f 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e9d6:	f858 2b04 	ldr.w	r2, [r8], #4
    e9da:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    e9de:	2f03      	cmp	r7, #3
    e9e0:	f1a3 0304 	sub.w	r3, r3, #4
    e9e4:	f1a7 0704 	sub.w	r7, r7, #4
    e9e8:	f67f af24 	bls.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    e9ec:	2b03      	cmp	r3, #3
    e9ee:	d8ef      	bhi.n	e9d0 <am_hal_iom_blocking_transfer+0x318>
    e9f0:	2f00      	cmp	r7, #0
    e9f2:	d1cb      	bne.n	e98c <am_hal_iom_blocking_transfer+0x2d4>
    e9f4:	e71e      	b.n	e834 <am_hal_iom_blocking_transfer+0x17c>
    e9f6:	46b8      	mov	r8, r7
    e9f8:	e71e      	b.n	e838 <am_hal_iom_blocking_transfer+0x180>
    e9fa:	4d05      	ldr	r5, [pc, #20]	; (ea10 <am_hal_iom_blocking_transfer+0x358>)
    e9fc:	e735      	b.n	e86a <am_hal_iom_blocking_transfer+0x1b2>
    e9fe:	4d05      	ldr	r5, [pc, #20]	; (ea14 <am_hal_iom_blocking_transfer+0x35c>)
    ea00:	e733      	b.n	e86a <am_hal_iom_blocking_transfer+0x1b2>
    ea02:	f1b8 0f00 	cmp.w	r8, #0
    ea06:	f43f af15 	beq.w	e834 <am_hal_iom_blocking_transfer+0x17c>
    ea0a:	4607      	mov	r7, r0
    ea0c:	e776      	b.n	e8fc <am_hal_iom_blocking_transfer+0x244>
    ea0e:	bf00      	nop
    ea10:	08000001 	.word	0x08000001
    ea14:	08000002 	.word	0x08000002

0000ea18 <am_hal_itm_disable>:
    ea18:	b510      	push	{r4, lr}
    ea1a:	4b25      	ldr	r3, [pc, #148]	; (eab0 <am_hal_itm_disable+0x98>)
    ea1c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    ea20:	b9b3      	cbnz	r3, ea50 <am_hal_itm_disable+0x38>
    ea22:	4b24      	ldr	r3, [pc, #144]	; (eab4 <am_hal_itm_disable+0x9c>)
    ea24:	68da      	ldr	r2, [r3, #12]
    ea26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ea2a:	60da      	str	r2, [r3, #12]
    ea2c:	68da      	ldr	r2, [r3, #12]
    ea2e:	01d2      	lsls	r2, r2, #7
    ea30:	d5fc      	bpl.n	ea2c <am_hal_itm_disable+0x14>
    ea32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ea36:	4920      	ldr	r1, [pc, #128]	; (eab8 <am_hal_itm_disable+0xa0>)
    ea38:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ea3c:	4a1f      	ldr	r2, [pc, #124]	; (eabc <am_hal_itm_disable+0xa4>)
    ea3e:	200f      	movs	r0, #15
    ea40:	f04f 31ff 	mov.w	r1, #4294967295
    ea44:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ea48:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ea4c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ea50:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ea54:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ea58:	021b      	lsls	r3, r3, #8
    ea5a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ea5e:	d4f9      	bmi.n	ea54 <am_hal_itm_disable+0x3c>
    ea60:	f240 20f7 	movw	r0, #759	; 0x2f7
    ea64:	f7ff f90c 	bl	dc80 <am_hal_flash_delay>
    ea68:	4b13      	ldr	r3, [pc, #76]	; (eab8 <am_hal_itm_disable+0xa0>)
    ea6a:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ea6e:	4621      	mov	r1, r4
    ea70:	2064      	movs	r0, #100	; 0x64
    ea72:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ea76:	f023 0301 	bic.w	r3, r3, #1
    ea7a:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ea7e:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ea82:	4b0f      	ldr	r3, [pc, #60]	; (eac0 <am_hal_itm_disable+0xa8>)
    ea84:	4013      	ands	r3, r2
    ea86:	2b00      	cmp	r3, #0
    ea88:	d1f9      	bne.n	ea7e <am_hal_itm_disable+0x66>
    ea8a:	3801      	subs	r0, #1
    ea8c:	d1f1      	bne.n	ea72 <am_hal_itm_disable+0x5a>
    ea8e:	4a09      	ldr	r2, [pc, #36]	; (eab4 <am_hal_itm_disable+0x9c>)
    ea90:	68d3      	ldr	r3, [r2, #12]
    ea92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ea96:	60d3      	str	r3, [r2, #12]
    ea98:	68d3      	ldr	r3, [r2, #12]
    ea9a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ea9e:	d1fb      	bne.n	ea98 <am_hal_itm_disable+0x80>
    eaa0:	4a03      	ldr	r2, [pc, #12]	; (eab0 <am_hal_itm_disable+0x98>)
    eaa2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    eaa6:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d1fb      	bne.n	eaa6 <am_hal_itm_disable+0x8e>
    eaae:	bd10      	pop	{r4, pc}
    eab0:	40020000 	.word	0x40020000
    eab4:	e000edf0 	.word	0xe000edf0
    eab8:	c5acce55 	.word	0xc5acce55
    eabc:	00150511 	.word	0x00150511
    eac0:	00800001 	.word	0x00800001

0000eac4 <am_hal_mcuctrl_info_get>:
    eac4:	b4f0      	push	{r4, r5, r6, r7}
    eac6:	b121      	cbz	r1, ead2 <am_hal_mcuctrl_info_get+0xe>
    eac8:	2801      	cmp	r0, #1
    eaca:	d038      	beq.n	eb3e <am_hal_mcuctrl_info_get+0x7a>
    eacc:	d320      	bcc.n	eb10 <am_hal_mcuctrl_info_get+0x4c>
    eace:	2802      	cmp	r0, #2
    ead0:	d002      	beq.n	ead8 <am_hal_mcuctrl_info_get+0x14>
    ead2:	2006      	movs	r0, #6
    ead4:	bcf0      	pop	{r4, r5, r6, r7}
    ead6:	4770      	bx	lr
    ead8:	4a41      	ldr	r2, [pc, #260]	; (ebe0 <am_hal_mcuctrl_info_get+0x11c>)
    eada:	684d      	ldr	r5, [r1, #4]
    eadc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    eae0:	694c      	ldr	r4, [r1, #20]
    eae2:	f003 0601 	and.w	r6, r3, #1
    eae6:	f3c3 0040 	ubfx	r0, r3, #1, #1
    eaea:	f3c3 0380 	ubfx	r3, r3, #2, #1
    eaee:	700e      	strb	r6, [r1, #0]
    eaf0:	7208      	strb	r0, [r1, #8]
    eaf2:	740b      	strb	r3, [r1, #16]
    eaf4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    eaf8:	60cb      	str	r3, [r1, #12]
    eafa:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    eafe:	4328      	orrs	r0, r5
    eb00:	6048      	str	r0, [r1, #4]
    eb02:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    eb06:	4323      	orrs	r3, r4
    eb08:	2000      	movs	r0, #0
    eb0a:	614b      	str	r3, [r1, #20]
    eb0c:	bcf0      	pop	{r4, r5, r6, r7}
    eb0e:	4770      	bx	lr
    eb10:	4a33      	ldr	r2, [pc, #204]	; (ebe0 <am_hal_mcuctrl_info_get+0x11c>)
    eb12:	6993      	ldr	r3, [r2, #24]
    eb14:	f3c3 1080 	ubfx	r0, r3, #6, #1
    eb18:	f3c3 0380 	ubfx	r3, r3, #2, #1
    eb1c:	7008      	strb	r0, [r1, #0]
    eb1e:	704b      	strb	r3, [r1, #1]
    eb20:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    eb24:	f3c3 6381 	ubfx	r3, r3, #26, #2
    eb28:	710b      	strb	r3, [r1, #4]
    eb2a:	6953      	ldr	r3, [r2, #20]
    eb2c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    eb30:	f003 0301 	and.w	r3, r3, #1
    eb34:	2000      	movs	r0, #0
    eb36:	708a      	strb	r2, [r1, #2]
    eb38:	70cb      	strb	r3, [r1, #3]
    eb3a:	bcf0      	pop	{r4, r5, r6, r7}
    eb3c:	4770      	bx	lr
    eb3e:	4b28      	ldr	r3, [pc, #160]	; (ebe0 <am_hal_mcuctrl_info_get+0x11c>)
    eb40:	4c28      	ldr	r4, [pc, #160]	; (ebe4 <am_hal_mcuctrl_info_get+0x120>)
    eb42:	681a      	ldr	r2, [r3, #0]
    eb44:	600a      	str	r2, [r1, #0]
    eb46:	6858      	ldr	r0, [r3, #4]
    eb48:	6048      	str	r0, [r1, #4]
    eb4a:	6898      	ldr	r0, [r3, #8]
    eb4c:	6088      	str	r0, [r1, #8]
    eb4e:	68d8      	ldr	r0, [r3, #12]
    eb50:	60c8      	str	r0, [r1, #12]
    eb52:	691d      	ldr	r5, [r3, #16]
    eb54:	4824      	ldr	r0, [pc, #144]	; (ebe8 <am_hal_mcuctrl_info_get+0x124>)
    eb56:	610d      	str	r5, [r1, #16]
    eb58:	f3c2 5703 	ubfx	r7, r2, #20, #4
    eb5c:	f3c2 4603 	ubfx	r6, r2, #16, #4
    eb60:	695d      	ldr	r5, [r3, #20]
    eb62:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    eb66:	4b21      	ldr	r3, [pc, #132]	; (ebec <am_hal_mcuctrl_info_get+0x128>)
    eb68:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    eb6c:	6208      	str	r0, [r1, #32]
    eb6e:	f002 0201 	and.w	r2, r2, #1
    eb72:	614d      	str	r5, [r1, #20]
    eb74:	61cc      	str	r4, [r1, #28]
    eb76:	618a      	str	r2, [r1, #24]
    eb78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    eb7c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    eb80:	b2d0      	uxtb	r0, r2
    eb82:	f004 020f 	and.w	r2, r4, #15
    eb86:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    eb8a:	624a      	str	r2, [r1, #36]	; 0x24
    eb8c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    eb90:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    eb94:	f3c2 1003 	ubfx	r0, r2, #4, #4
    eb98:	f004 020f 	and.w	r2, r4, #15
    eb9c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    eba0:	628a      	str	r2, [r1, #40]	; 0x28
    eba2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    eba6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ebaa:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ebae:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ebb2:	4302      	orrs	r2, r0
    ebb4:	62ca      	str	r2, [r1, #44]	; 0x2c
    ebb6:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    ebba:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ebbe:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ebc2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ebc6:	b2c0      	uxtb	r0, r0
    ebc8:	0400      	lsls	r0, r0, #16
    ebca:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ebce:	b2d2      	uxtb	r2, r2
    ebd0:	431a      	orrs	r2, r3
    ebd2:	b2e3      	uxtb	r3, r4
    ebd4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ebd8:	630b      	str	r3, [r1, #48]	; 0x30
    ebda:	2000      	movs	r0, #0
    ebdc:	bcf0      	pop	{r4, r5, r6, r7}
    ebde:	4770      	bx	lr
    ebe0:	40020000 	.word	0x40020000
    ebe4:	0000fb80 	.word	0x0000fb80
    ebe8:	0000fbc0 	.word	0x0000fbc0
    ebec:	f0000f00 	.word	0xf0000f00

0000ebf0 <am_hal_pwrctrl_periph_enable>:
    ebf0:	b570      	push	{r4, r5, r6, lr}
    ebf2:	b082      	sub	sp, #8
    ebf4:	4604      	mov	r4, r0
    ebf6:	f7ff fa01 	bl	dffc <am_hal_interrupt_master_disable>
    ebfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ebfe:	4d0f      	ldr	r5, [pc, #60]	; (ec3c <am_hal_pwrctrl_periph_enable+0x4c>)
    ec00:	4e0f      	ldr	r6, [pc, #60]	; (ec40 <am_hal_pwrctrl_periph_enable+0x50>)
    ec02:	9001      	str	r0, [sp, #4]
    ec04:	00a4      	lsls	r4, r4, #2
    ec06:	68aa      	ldr	r2, [r5, #8]
    ec08:	5933      	ldr	r3, [r6, r4]
    ec0a:	4313      	orrs	r3, r2
    ec0c:	60ab      	str	r3, [r5, #8]
    ec0e:	9801      	ldr	r0, [sp, #4]
    ec10:	4434      	add	r4, r6
    ec12:	f7ff f9f7 	bl	e004 <am_hal_interrupt_master_set>
    ec16:	2077      	movs	r0, #119	; 0x77
    ec18:	f7ff f832 	bl	dc80 <am_hal_flash_delay>
    ec1c:	69ab      	ldr	r3, [r5, #24]
    ec1e:	6864      	ldr	r4, [r4, #4]
    ec20:	4223      	tst	r3, r4
    ec22:	d103      	bne.n	ec2c <am_hal_pwrctrl_periph_enable+0x3c>
    ec24:	2077      	movs	r0, #119	; 0x77
    ec26:	f7ff f82b 	bl	dc80 <am_hal_flash_delay>
    ec2a:	69ab      	ldr	r3, [r5, #24]
    ec2c:	4b03      	ldr	r3, [pc, #12]	; (ec3c <am_hal_pwrctrl_periph_enable+0x4c>)
    ec2e:	699b      	ldr	r3, [r3, #24]
    ec30:	4223      	tst	r3, r4
    ec32:	bf0c      	ite	eq
    ec34:	2001      	moveq	r0, #1
    ec36:	2000      	movne	r0, #0
    ec38:	b002      	add	sp, #8
    ec3a:	bd70      	pop	{r4, r5, r6, pc}
    ec3c:	40021000 	.word	0x40021000
    ec40:	0000fc00 	.word	0x0000fc00

0000ec44 <am_hal_pwrctrl_periph_disable>:
    ec44:	b570      	push	{r4, r5, r6, lr}
    ec46:	b082      	sub	sp, #8
    ec48:	4604      	mov	r4, r0
    ec4a:	f7ff f9d7 	bl	dffc <am_hal_interrupt_master_disable>
    ec4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ec52:	4d10      	ldr	r5, [pc, #64]	; (ec94 <am_hal_pwrctrl_periph_disable+0x50>)
    ec54:	4e10      	ldr	r6, [pc, #64]	; (ec98 <am_hal_pwrctrl_periph_disable+0x54>)
    ec56:	9001      	str	r0, [sp, #4]
    ec58:	00a4      	lsls	r4, r4, #2
    ec5a:	68ab      	ldr	r3, [r5, #8]
    ec5c:	5932      	ldr	r2, [r6, r4]
    ec5e:	ea23 0302 	bic.w	r3, r3, r2
    ec62:	60ab      	str	r3, [r5, #8]
    ec64:	9801      	ldr	r0, [sp, #4]
    ec66:	4434      	add	r4, r6
    ec68:	f7ff f9cc 	bl	e004 <am_hal_interrupt_master_set>
    ec6c:	2077      	movs	r0, #119	; 0x77
    ec6e:	f7ff f807 	bl	dc80 <am_hal_flash_delay>
    ec72:	69ab      	ldr	r3, [r5, #24]
    ec74:	6864      	ldr	r4, [r4, #4]
    ec76:	4223      	tst	r3, r4
    ec78:	d003      	beq.n	ec82 <am_hal_pwrctrl_periph_disable+0x3e>
    ec7a:	2077      	movs	r0, #119	; 0x77
    ec7c:	f7ff f800 	bl	dc80 <am_hal_flash_delay>
    ec80:	69ab      	ldr	r3, [r5, #24]
    ec82:	4b04      	ldr	r3, [pc, #16]	; (ec94 <am_hal_pwrctrl_periph_disable+0x50>)
    ec84:	699b      	ldr	r3, [r3, #24]
    ec86:	4223      	tst	r3, r4
    ec88:	bf14      	ite	ne
    ec8a:	2001      	movne	r0, #1
    ec8c:	2000      	moveq	r0, #0
    ec8e:	b002      	add	sp, #8
    ec90:	bd70      	pop	{r4, r5, r6, pc}
    ec92:	bf00      	nop
    ec94:	40021000 	.word	0x40021000
    ec98:	0000fc00 	.word	0x0000fc00

0000ec9c <am_hal_pwrctrl_low_power_init>:
    ec9c:	b530      	push	{r4, r5, lr}
    ec9e:	4b1f      	ldr	r3, [pc, #124]	; (ed1c <am_hal_pwrctrl_low_power_init+0x80>)
    eca0:	681a      	ldr	r2, [r3, #0]
    eca2:	b083      	sub	sp, #12
    eca4:	b912      	cbnz	r2, ecac <am_hal_pwrctrl_low_power_init+0x10>
    eca6:	4a1e      	ldr	r2, [pc, #120]	; (ed20 <am_hal_pwrctrl_low_power_init+0x84>)
    eca8:	6812      	ldr	r2, [r2, #0]
    ecaa:	601a      	str	r2, [r3, #0]
    ecac:	4c1d      	ldr	r4, [pc, #116]	; (ed24 <am_hal_pwrctrl_low_power_init+0x88>)
    ecae:	69a3      	ldr	r3, [r4, #24]
    ecb0:	05db      	lsls	r3, r3, #23
    ecb2:	d502      	bpl.n	ecba <am_hal_pwrctrl_low_power_init+0x1e>
    ecb4:	2000      	movs	r0, #0
    ecb6:	b003      	add	sp, #12
    ecb8:	bd30      	pop	{r4, r5, pc}
    ecba:	4d1b      	ldr	r5, [pc, #108]	; (ed28 <am_hal_pwrctrl_low_power_init+0x8c>)
    ecbc:	491b      	ldr	r1, [pc, #108]	; (ed2c <am_hal_pwrctrl_low_power_init+0x90>)
    ecbe:	7e2a      	ldrb	r2, [r5, #24]
    ecc0:	2001      	movs	r0, #1
    ecc2:	4302      	orrs	r2, r0
    ecc4:	2307      	movs	r3, #7
    ecc6:	762a      	strb	r2, [r5, #24]
    ecc8:	9000      	str	r0, [sp, #0]
    ecca:	461a      	mov	r2, r3
    eccc:	f242 7010 	movw	r0, #10000	; 0x2710
    ecd0:	f7fe ffda 	bl	dc88 <am_hal_flash_delay_status_check>
    ecd4:	b110      	cbz	r0, ecdc <am_hal_pwrctrl_low_power_init+0x40>
    ecd6:	2004      	movs	r0, #4
    ecd8:	b003      	add	sp, #12
    ecda:	bd30      	pop	{r4, r5, pc}
    ecdc:	6823      	ldr	r3, [r4, #0]
    ecde:	f043 0301 	orr.w	r3, r3, #1
    ece2:	6023      	str	r3, [r4, #0]
    ece4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ece6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecea:	6263      	str	r3, [r4, #36]	; 0x24
    ecec:	68eb      	ldr	r3, [r5, #12]
    ecee:	b2db      	uxtb	r3, r3
    ecf0:	2b11      	cmp	r3, #17
    ecf2:	d1df      	bne.n	ecb4 <am_hal_pwrctrl_low_power_init+0x18>
    ecf4:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    ecf8:	f360 5356 	bfi	r3, r0, #21, #2
    ecfc:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    ed00:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    ed04:	220f      	movs	r2, #15
    ed06:	f362 138b 	bfi	r3, r2, #6, #6
    ed0a:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    ed0e:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    ed12:	f362 0305 	bfi	r3, r2, #0, #6
    ed16:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    ed1a:	e7cc      	b.n	ecb6 <am_hal_pwrctrl_low_power_init+0x1a>
    ed1c:	10001140 	.word	0x10001140
    ed20:	4ffff000 	.word	0x4ffff000
    ed24:	40021000 	.word	0x40021000
    ed28:	40020000 	.word	0x40020000
    ed2c:	40020018 	.word	0x40020018

0000ed30 <am_hal_rtc_osc_select>:
    ed30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ed34:	2801      	cmp	r0, #1
    ed36:	68d3      	ldr	r3, [r2, #12]
    ed38:	bf0c      	ite	eq
    ed3a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    ed3e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    ed42:	60d3      	str	r3, [r2, #12]
    ed44:	4770      	bx	lr
    ed46:	bf00      	nop

0000ed48 <am_hal_rtc_osc_disable>:
    ed48:	4a03      	ldr	r2, [pc, #12]	; (ed58 <am_hal_rtc_osc_disable+0x10>)
    ed4a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    ed4e:	f043 0310 	orr.w	r3, r3, #16
    ed52:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    ed56:	4770      	bx	lr
    ed58:	40004200 	.word	0x40004200

0000ed5c <am_hal_uart_initialize>:
    ed5c:	2801      	cmp	r0, #1
    ed5e:	d901      	bls.n	ed64 <am_hal_uart_initialize+0x8>
    ed60:	2005      	movs	r0, #5
    ed62:	4770      	bx	lr
    ed64:	b169      	cbz	r1, ed82 <am_hal_uart_initialize+0x26>
    ed66:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed68:	2264      	movs	r2, #100	; 0x64
    ed6a:	4e0e      	ldr	r6, [pc, #56]	; (eda4 <am_hal_uart_initialize+0x48>)
    ed6c:	fb02 f200 	mul.w	r2, r2, r0
    ed70:	18b4      	adds	r4, r6, r2
    ed72:	4603      	mov	r3, r0
    ed74:	78e0      	ldrb	r0, [r4, #3]
    ed76:	f3c0 0700 	ubfx	r7, r0, #0, #1
    ed7a:	b2fd      	uxtb	r5, r7
    ed7c:	b11d      	cbz	r5, ed86 <am_hal_uart_initialize+0x2a>
    ed7e:	2007      	movs	r0, #7
    ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed82:	2006      	movs	r0, #6
    ed84:	4770      	bx	lr
    ed86:	f040 0001 	orr.w	r0, r0, #1
    ed8a:	70e0      	strb	r0, [r4, #3]
    ed8c:	58b0      	ldr	r0, [r6, r2]
    ed8e:	f8df e018 	ldr.w	lr, [pc, #24]	; eda8 <am_hal_uart_initialize+0x4c>
    ed92:	f36e 0017 	bfi	r0, lr, #0, #24
    ed96:	50b0      	str	r0, [r6, r2]
    ed98:	6263      	str	r3, [r4, #36]	; 0x24
    ed9a:	7127      	strb	r7, [r4, #4]
    ed9c:	6625      	str	r5, [r4, #96]	; 0x60
    ed9e:	4628      	mov	r0, r5
    eda0:	600c      	str	r4, [r1, #0]
    eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eda4:	10004694 	.word	0x10004694
    eda8:	00ea9e06 	.word	0x00ea9e06

0000edac <am_hal_uart_power_control>:
    edac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    edb0:	6804      	ldr	r4, [r0, #0]
    edb2:	4b36      	ldr	r3, [pc, #216]	; (ee8c <am_hal_uart_power_control+0xe0>)
    edb4:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    edb8:	429c      	cmp	r4, r3
    edba:	b083      	sub	sp, #12
    edbc:	d003      	beq.n	edc6 <am_hal_uart_power_control+0x1a>
    edbe:	2002      	movs	r0, #2
    edc0:	b003      	add	sp, #12
    edc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    edc6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    edc8:	4605      	mov	r5, r0
    edca:	f107 0008 	add.w	r0, r7, #8
    edce:	4691      	mov	r9, r2
    edd0:	460e      	mov	r6, r1
    edd2:	fa5f f880 	uxtb.w	r8, r0
    edd6:	b181      	cbz	r1, edfa <am_hal_uart_power_control+0x4e>
    edd8:	2902      	cmp	r1, #2
    edda:	d80c      	bhi.n	edf6 <am_hal_uart_power_control+0x4a>
    eddc:	b992      	cbnz	r2, ee04 <am_hal_uart_power_control+0x58>
    edde:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ede2:	371c      	adds	r7, #28
    ede4:	033f      	lsls	r7, r7, #12
    ede6:	f04f 33ff 	mov.w	r3, #4294967295
    edea:	647b      	str	r3, [r7, #68]	; 0x44
    edec:	4640      	mov	r0, r8
    edee:	f7ff ff29 	bl	ec44 <am_hal_pwrctrl_periph_disable>
    edf2:	2000      	movs	r0, #0
    edf4:	e7e4      	b.n	edc0 <am_hal_uart_power_control+0x14>
    edf6:	2006      	movs	r0, #6
    edf8:	e7e2      	b.n	edc0 <am_hal_uart_power_control+0x14>
    edfa:	b322      	cbz	r2, ee46 <am_hal_uart_power_control+0x9a>
    edfc:	792b      	ldrb	r3, [r5, #4]
    edfe:	bb3b      	cbnz	r3, ee50 <am_hal_uart_power_control+0xa4>
    ee00:	2007      	movs	r0, #7
    ee02:	e7dd      	b.n	edc0 <am_hal_uart_power_control+0x14>
    ee04:	f7ff f8fa 	bl	dffc <am_hal_interrupt_master_disable>
    ee08:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    ee0c:	331c      	adds	r3, #28
    ee0e:	031b      	lsls	r3, r3, #12
    ee10:	9001      	str	r0, [sp, #4]
    ee12:	6a1a      	ldr	r2, [r3, #32]
    ee14:	60aa      	str	r2, [r5, #8]
    ee16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ee18:	60ea      	str	r2, [r5, #12]
    ee1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ee1c:	612a      	str	r2, [r5, #16]
    ee1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ee20:	616a      	str	r2, [r5, #20]
    ee22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ee24:	61aa      	str	r2, [r5, #24]
    ee26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ee28:	61ea      	str	r2, [r5, #28]
    ee2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ee2c:	622b      	str	r3, [r5, #32]
    ee2e:	2301      	movs	r3, #1
    ee30:	712b      	strb	r3, [r5, #4]
    ee32:	9801      	ldr	r0, [sp, #4]
    ee34:	f7ff f8e6 	bl	e004 <am_hal_interrupt_master_set>
    ee38:	682b      	ldr	r3, [r5, #0]
    ee3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ee3e:	42a3      	cmp	r3, r4
    ee40:	d1d4      	bne.n	edec <am_hal_uart_power_control+0x40>
    ee42:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ee44:	e7cb      	b.n	edde <am_hal_uart_power_control+0x32>
    ee46:	4640      	mov	r0, r8
    ee48:	f7ff fed2 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    ee4c:	4648      	mov	r0, r9
    ee4e:	e7b7      	b.n	edc0 <am_hal_uart_power_control+0x14>
    ee50:	4640      	mov	r0, r8
    ee52:	f7ff fecd 	bl	ebf0 <am_hal_pwrctrl_periph_enable>
    ee56:	f7ff f8d1 	bl	dffc <am_hal_interrupt_master_disable>
    ee5a:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    ee5e:	331c      	adds	r3, #28
    ee60:	031b      	lsls	r3, r3, #12
    ee62:	68aa      	ldr	r2, [r5, #8]
    ee64:	9000      	str	r0, [sp, #0]
    ee66:	621a      	str	r2, [r3, #32]
    ee68:	68ea      	ldr	r2, [r5, #12]
    ee6a:	625a      	str	r2, [r3, #36]	; 0x24
    ee6c:	692a      	ldr	r2, [r5, #16]
    ee6e:	629a      	str	r2, [r3, #40]	; 0x28
    ee70:	696a      	ldr	r2, [r5, #20]
    ee72:	62da      	str	r2, [r3, #44]	; 0x2c
    ee74:	69aa      	ldr	r2, [r5, #24]
    ee76:	631a      	str	r2, [r3, #48]	; 0x30
    ee78:	69ea      	ldr	r2, [r5, #28]
    ee7a:	635a      	str	r2, [r3, #52]	; 0x34
    ee7c:	6a2a      	ldr	r2, [r5, #32]
    ee7e:	639a      	str	r2, [r3, #56]	; 0x38
    ee80:	9800      	ldr	r0, [sp, #0]
    ee82:	712e      	strb	r6, [r5, #4]
    ee84:	f7ff f8be 	bl	e004 <am_hal_interrupt_master_set>
    ee88:	4630      	mov	r0, r6
    ee8a:	e799      	b.n	edc0 <am_hal_uart_power_control+0x14>
    ee8c:	01ea9e06 	.word	0x01ea9e06

0000ee90 <am_hal_uart_configure>:
    ee90:	6803      	ldr	r3, [r0, #0]
    ee92:	4a7a      	ldr	r2, [pc, #488]	; (f07c <am_hal_uart_configure+0x1ec>)
    ee94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ee98:	4293      	cmp	r3, r2
    ee9a:	d001      	beq.n	eea0 <am_hal_uart_configure+0x10>
    ee9c:	2002      	movs	r0, #2
    ee9e:	4770      	bx	lr
    eea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eea4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    eea6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eeaa:	351c      	adds	r5, #28
    eeac:	032d      	lsls	r5, r5, #12
    eeae:	2700      	movs	r7, #0
    eeb0:	b084      	sub	sp, #16
    eeb2:	632f      	str	r7, [r5, #48]	; 0x30
    eeb4:	460e      	mov	r6, r1
    eeb6:	4604      	mov	r4, r0
    eeb8:	f7ff f8a0 	bl	dffc <am_hal_interrupt_master_disable>
    eebc:	9001      	str	r0, [sp, #4]
    eebe:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eec0:	f043 0308 	orr.w	r3, r3, #8
    eec4:	862b      	strh	r3, [r5, #48]	; 0x30
    eec6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eec8:	2201      	movs	r2, #1
    eeca:	f362 1306 	bfi	r3, r2, #4, #3
    eece:	862b      	strh	r3, [r5, #48]	; 0x30
    eed0:	9801      	ldr	r0, [sp, #4]
    eed2:	f7ff f897 	bl	e004 <am_hal_interrupt_master_set>
    eed6:	f7ff f891 	bl	dffc <am_hal_interrupt_master_disable>
    eeda:	9002      	str	r0, [sp, #8]
    eedc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eede:	f367 0300 	bfi	r3, r7, #0, #1
    eee2:	862b      	strh	r3, [r5, #48]	; 0x30
    eee4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eee6:	f367 2349 	bfi	r3, r7, #9, #1
    eeea:	862b      	strh	r3, [r5, #48]	; 0x30
    eeec:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    eeee:	f367 2308 	bfi	r3, r7, #8, #1
    eef2:	862b      	strh	r3, [r5, #48]	; 0x30
    eef4:	9802      	ldr	r0, [sp, #8]
    eef6:	f7ff f885 	bl	e004 <am_hal_interrupt_master_set>
    eefa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    eefc:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ef00:	3b01      	subs	r3, #1
    ef02:	2b03      	cmp	r3, #3
    ef04:	d854      	bhi.n	efb0 <am_hal_uart_configure+0x120>
    ef06:	e8df f003 	tbb	[pc, r3]
    ef0a:	020e      	.short	0x020e
    ef0c:	1114      	.short	0x1114
    ef0e:	495c      	ldr	r1, [pc, #368]	; (f080 <am_hal_uart_configure+0x1f0>)
    ef10:	485c      	ldr	r0, [pc, #368]	; (f084 <am_hal_uart_configure+0x1f4>)
    ef12:	6832      	ldr	r2, [r6, #0]
    ef14:	0112      	lsls	r2, r2, #4
    ef16:	fbb0 f3f2 	udiv	r3, r0, r2
    ef1a:	b96b      	cbnz	r3, ef38 <am_hal_uart_configure+0xa8>
    ef1c:	485a      	ldr	r0, [pc, #360]	; (f088 <am_hal_uart_configure+0x1f8>)
    ef1e:	6623      	str	r3, [r4, #96]	; 0x60
    ef20:	b004      	add	sp, #16
    ef22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef26:	4959      	ldr	r1, [pc, #356]	; (f08c <am_hal_uart_configure+0x1fc>)
    ef28:	4859      	ldr	r0, [pc, #356]	; (f090 <am_hal_uart_configure+0x200>)
    ef2a:	e7f2      	b.n	ef12 <am_hal_uart_configure+0x82>
    ef2c:	4959      	ldr	r1, [pc, #356]	; (f094 <am_hal_uart_configure+0x204>)
    ef2e:	485a      	ldr	r0, [pc, #360]	; (f098 <am_hal_uart_configure+0x208>)
    ef30:	e7ef      	b.n	ef12 <am_hal_uart_configure+0x82>
    ef32:	495a      	ldr	r1, [pc, #360]	; (f09c <am_hal_uart_configure+0x20c>)
    ef34:	485a      	ldr	r0, [pc, #360]	; (f0a0 <am_hal_uart_configure+0x210>)
    ef36:	e7ec      	b.n	ef12 <am_hal_uart_configure+0x82>
    ef38:	fbb1 f2f2 	udiv	r2, r1, r2
    ef3c:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    ef40:	626b      	str	r3, [r5, #36]	; 0x24
    ef42:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    ef46:	626b      	str	r3, [r5, #36]	; 0x24
    ef48:	fbb0 f0f1 	udiv	r0, r0, r1
    ef4c:	62aa      	str	r2, [r5, #40]	; 0x28
    ef4e:	6620      	str	r0, [r4, #96]	; 0x60
    ef50:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ef52:	f36f 338e 	bfc	r3, #14, #1
    ef56:	862b      	strh	r3, [r5, #48]	; 0x30
    ef58:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ef5a:	f36f 33cf 	bfc	r3, #15, #1
    ef5e:	862b      	strh	r3, [r5, #48]	; 0x30
    ef60:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    ef62:	6933      	ldr	r3, [r6, #16]
    ef64:	4313      	orrs	r3, r2
    ef66:	632b      	str	r3, [r5, #48]	; 0x30
    ef68:	6973      	ldr	r3, [r6, #20]
    ef6a:	636b      	str	r3, [r5, #52]	; 0x34
    ef6c:	6871      	ldr	r1, [r6, #4]
    ef6e:	68b3      	ldr	r3, [r6, #8]
    ef70:	68f2      	ldr	r2, [r6, #12]
    ef72:	430b      	orrs	r3, r1
    ef74:	f043 0310 	orr.w	r3, r3, #16
    ef78:	4313      	orrs	r3, r2
    ef7a:	62eb      	str	r3, [r5, #44]	; 0x2c
    ef7c:	f7ff f83e 	bl	dffc <am_hal_interrupt_master_disable>
    ef80:	9003      	str	r0, [sp, #12]
    ef82:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ef84:	f043 0301 	orr.w	r3, r3, #1
    ef88:	862b      	strh	r3, [r5, #48]	; 0x30
    ef8a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ef8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ef90:	862b      	strh	r3, [r5, #48]	; 0x30
    ef92:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ef94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ef98:	862b      	strh	r3, [r5, #48]	; 0x30
    ef9a:	9803      	ldr	r0, [sp, #12]
    ef9c:	f7ff f832 	bl	e004 <am_hal_interrupt_master_set>
    efa0:	6825      	ldr	r5, [r4, #0]
    efa2:	4b36      	ldr	r3, [pc, #216]	; (f07c <am_hal_uart_configure+0x1ec>)
    efa4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    efa8:	429d      	cmp	r5, r3
    efaa:	d005      	beq.n	efb8 <am_hal_uart_configure+0x128>
    efac:	2000      	movs	r0, #0
    efae:	e7b7      	b.n	ef20 <am_hal_uart_configure+0x90>
    efb0:	2300      	movs	r3, #0
    efb2:	6623      	str	r3, [r4, #96]	; 0x60
    efb4:	483b      	ldr	r0, [pc, #236]	; (f0a4 <am_hal_uart_configure+0x214>)
    efb6:	e7b3      	b.n	ef20 <am_hal_uart_configure+0x90>
    efb8:	69b1      	ldr	r1, [r6, #24]
    efba:	6a37      	ldr	r7, [r6, #32]
    efbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    efc0:	b109      	cbz	r1, efc6 <am_hal_uart_configure+0x136>
    efc2:	69f3      	ldr	r3, [r6, #28]
    efc4:	bb3b      	cbnz	r3, f016 <am_hal_uart_configure+0x186>
    efc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    efc8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    efcc:	f103 021c 	add.w	r2, r3, #28
    efd0:	0312      	lsls	r2, r2, #12
    efd2:	2100      	movs	r1, #0
    efd4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    efd8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    efda:	f021 0120 	bic.w	r1, r1, #32
    efde:	6391      	str	r1, [r2, #56]	; 0x38
    efe0:	b1b7      	cbz	r7, f010 <am_hal_uart_configure+0x180>
    efe2:	f1b8 0f00 	cmp.w	r8, #0
    efe6:	d12e      	bne.n	f046 <am_hal_uart_configure+0x1b6>
    efe8:	6823      	ldr	r3, [r4, #0]
    efea:	4a24      	ldr	r2, [pc, #144]	; (f07c <am_hal_uart_configure+0x1ec>)
    efec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eff0:	2100      	movs	r1, #0
    eff2:	4293      	cmp	r3, r2
    eff4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    eff8:	d1d8      	bne.n	efac <am_hal_uart_configure+0x11c>
    effa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    effc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f000:	331c      	adds	r3, #28
    f002:	031b      	lsls	r3, r3, #12
    f004:	2000      	movs	r0, #0
    f006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f008:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f00c:	639a      	str	r2, [r3, #56]	; 0x38
    f00e:	e787      	b.n	ef20 <am_hal_uart_configure+0x90>
    f010:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f014:	e7f4      	b.n	f000 <am_hal_uart_configure+0x170>
    f016:	2201      	movs	r2, #1
    f018:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f01c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f020:	f000 fb00 	bl	f624 <am_hal_queue_init>
    f024:	6823      	ldr	r3, [r4, #0]
    f026:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f02a:	42ab      	cmp	r3, r5
    f02c:	d1be      	bne.n	efac <am_hal_uart_configure+0x11c>
    f02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f030:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f034:	331c      	adds	r3, #28
    f036:	031b      	lsls	r3, r3, #12
    f038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f03a:	f042 0220 	orr.w	r2, r2, #32
    f03e:	639a      	str	r2, [r3, #56]	; 0x38
    f040:	2f00      	cmp	r7, #0
    f042:	d1ce      	bne.n	efe2 <am_hal_uart_configure+0x152>
    f044:	e7d0      	b.n	efe8 <am_hal_uart_configure+0x158>
    f046:	2201      	movs	r2, #1
    f048:	4643      	mov	r3, r8
    f04a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f04e:	4639      	mov	r1, r7
    f050:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f054:	f000 fae6 	bl	f624 <am_hal_queue_init>
    f058:	6823      	ldr	r3, [r4, #0]
    f05a:	4a08      	ldr	r2, [pc, #32]	; (f07c <am_hal_uart_configure+0x1ec>)
    f05c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f060:	4293      	cmp	r3, r2
    f062:	d1a3      	bne.n	efac <am_hal_uart_configure+0x11c>
    f064:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f066:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f06a:	331c      	adds	r3, #28
    f06c:	031b      	lsls	r3, r3, #12
    f06e:	2000      	movs	r0, #0
    f070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f072:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f076:	639a      	str	r2, [r3, #56]	; 0x38
    f078:	e752      	b.n	ef20 <am_hal_uart_configure+0x90>
    f07a:	bf00      	nop
    f07c:	01ea9e06 	.word	0x01ea9e06
    f080:	2dc6c000 	.word	0x2dc6c000
    f084:	00b71b00 	.word	0x00b71b00
    f088:	08000003 	.word	0x08000003
    f08c:	5b8d8000 	.word	0x5b8d8000
    f090:	016e3600 	.word	0x016e3600
    f094:	0b71b000 	.word	0x0b71b000
    f098:	002dc6c0 	.word	0x002dc6c0
    f09c:	16e36000 	.word	0x16e36000
    f0a0:	005b8d80 	.word	0x005b8d80
    f0a4:	08000002 	.word	0x08000002

0000f0a8 <am_hal_uart_transfer>:
    f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0ac:	680f      	ldr	r7, [r1, #0]
    f0ae:	b091      	sub	sp, #68	; 0x44
    f0b0:	4605      	mov	r5, r0
    f0b2:	b13f      	cbz	r7, f0c4 <am_hal_uart_transfer+0x1c>
    f0b4:	2f01      	cmp	r7, #1
    f0b6:	bf18      	it	ne
    f0b8:	2707      	movne	r7, #7
    f0ba:	d024      	beq.n	f106 <am_hal_uart_transfer+0x5e>
    f0bc:	4638      	mov	r0, r7
    f0be:	b011      	add	sp, #68	; 0x44
    f0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f0c8:	690b      	ldr	r3, [r1, #16]
    f0ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f0ce:	688e      	ldr	r6, [r1, #8]
    f0d0:	9300      	str	r3, [sp, #0]
    f0d2:	f1b9 0f00 	cmp.w	r9, #0
    f0d6:	d031      	beq.n	f13c <am_hal_uart_transfer+0x94>
    f0d8:	2e00      	cmp	r6, #0
    f0da:	f000 819c 	beq.w	f416 <am_hal_uart_transfer+0x36e>
    f0de:	2800      	cmp	r0, #0
    f0e0:	f000 8097 	beq.w	f212 <am_hal_uart_transfer+0x16a>
    f0e4:	6803      	ldr	r3, [r0, #0]
    f0e6:	4aa9      	ldr	r2, [pc, #676]	; (f38c <am_hal_uart_transfer+0x2e4>)
    f0e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f0ec:	4293      	cmp	r3, r2
    f0ee:	f000 8092 	beq.w	f216 <am_hal_uart_transfer+0x16e>
    f0f2:	46b8      	mov	r8, r7
    f0f4:	9b00      	ldr	r3, [sp, #0]
    f0f6:	b10b      	cbz	r3, f0fc <am_hal_uart_transfer+0x54>
    f0f8:	f8c3 8000 	str.w	r8, [r3]
    f0fc:	2702      	movs	r7, #2
    f0fe:	4638      	mov	r0, r7
    f100:	b011      	add	sp, #68	; 0x44
    f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f106:	1d0b      	adds	r3, r1, #4
    f108:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f10c:	f1b9 0f00 	cmp.w	r9, #0
    f110:	d043      	beq.n	f19a <am_hal_uart_transfer+0xf2>
    f112:	2f00      	cmp	r7, #0
    f114:	f000 8185 	beq.w	f422 <am_hal_uart_transfer+0x37a>
    f118:	2800      	cmp	r0, #0
    f11a:	f000 80eb 	beq.w	f2f4 <am_hal_uart_transfer+0x24c>
    f11e:	6802      	ldr	r2, [r0, #0]
    f120:	499a      	ldr	r1, [pc, #616]	; (f38c <am_hal_uart_transfer+0x2e4>)
    f122:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f126:	428a      	cmp	r2, r1
    f128:	f000 80e7 	beq.w	f2fa <am_hal_uart_transfer+0x252>
    f12c:	2600      	movs	r6, #0
    f12e:	2702      	movs	r7, #2
    f130:	f1bb 0f00 	cmp.w	fp, #0
    f134:	d0c2      	beq.n	f0bc <am_hal_uart_transfer+0x14>
    f136:	f8cb 6000 	str.w	r6, [fp]
    f13a:	e7bf      	b.n	f0bc <am_hal_uart_transfer+0x14>
    f13c:	2800      	cmp	r0, #0
    f13e:	d0dd      	beq.n	f0fc <am_hal_uart_transfer+0x54>
    f140:	6803      	ldr	r3, [r0, #0]
    f142:	4a92      	ldr	r2, [pc, #584]	; (f38c <am_hal_uart_transfer+0x2e4>)
    f144:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f148:	4293      	cmp	r3, r2
    f14a:	d1d7      	bne.n	f0fc <am_hal_uart_transfer+0x54>
    f14c:	9b00      	ldr	r3, [sp, #0]
    f14e:	b10b      	cbz	r3, f154 <am_hal_uart_transfer+0xac>
    f150:	f8c3 9000 	str.w	r9, [r3]
    f154:	b1fe      	cbz	r6, f196 <am_hal_uart_transfer+0xee>
    f156:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f15a:	2b00      	cmp	r3, #0
    f15c:	f040 8165 	bne.w	f42a <am_hal_uart_transfer+0x382>
    f160:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f162:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f166:	311c      	adds	r1, #28
    f168:	0309      	lsls	r1, r1, #12
    f16a:	698a      	ldr	r2, [r1, #24]
    f16c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f170:	2a00      	cmp	r2, #0
    f172:	f040 818d 	bne.w	f490 <am_hal_uart_transfer+0x3e8>
    f176:	f10a 33ff 	add.w	r3, sl, #4294967295
    f17a:	e003      	b.n	f184 <am_hal_uart_transfer+0xdc>
    f17c:	6988      	ldr	r0, [r1, #24]
    f17e:	0680      	lsls	r0, r0, #26
    f180:	f100 8151 	bmi.w	f426 <am_hal_uart_transfer+0x37e>
    f184:	3201      	adds	r2, #1
    f186:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f18a:	6008      	str	r0, [r1, #0]
    f18c:	4296      	cmp	r6, r2
    f18e:	d1f5      	bne.n	f17c <am_hal_uart_transfer+0xd4>
    f190:	9b00      	ldr	r3, [sp, #0]
    f192:	b103      	cbz	r3, f196 <am_hal_uart_transfer+0xee>
    f194:	601e      	str	r6, [r3, #0]
    f196:	2700      	movs	r7, #0
    f198:	e790      	b.n	f0bc <am_hal_uart_transfer+0x14>
    f19a:	2800      	cmp	r0, #0
    f19c:	d0ae      	beq.n	f0fc <am_hal_uart_transfer+0x54>
    f19e:	6802      	ldr	r2, [r0, #0]
    f1a0:	497a      	ldr	r1, [pc, #488]	; (f38c <am_hal_uart_transfer+0x2e4>)
    f1a2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f1a6:	428a      	cmp	r2, r1
    f1a8:	d1a8      	bne.n	f0fc <am_hal_uart_transfer+0x54>
    f1aa:	f1bb 0f00 	cmp.w	fp, #0
    f1ae:	d001      	beq.n	f1b4 <am_hal_uart_transfer+0x10c>
    f1b0:	f8cb 9000 	str.w	r9, [fp]
    f1b4:	2f00      	cmp	r7, #0
    f1b6:	d0ee      	beq.n	f196 <am_hal_uart_transfer+0xee>
    f1b8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    f1bc:	2c00      	cmp	r4, #0
    f1be:	f040 816c 	bne.w	f49a <am_hal_uart_transfer+0x3f2>
    f1c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f1c4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f1c8:	321c      	adds	r2, #28
    f1ca:	0312      	lsls	r2, r2, #12
    f1cc:	6990      	ldr	r0, [r2, #24]
    f1ce:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f1d2:	2800      	cmp	r0, #0
    f1d4:	f040 819d 	bne.w	f512 <am_hal_uart_transfer+0x46a>
    f1d8:	6811      	ldr	r1, [r2, #0]
    f1da:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    f1de:	bf08      	it	eq
    f1e0:	f103 33ff 	addeq.w	r3, r3, #4294967295
    f1e4:	d008      	beq.n	f1f8 <am_hal_uart_transfer+0x150>
    f1e6:	e190      	b.n	f50a <am_hal_uart_transfer+0x462>
    f1e8:	6991      	ldr	r1, [r2, #24]
    f1ea:	06c8      	lsls	r0, r1, #27
    f1ec:	d409      	bmi.n	f202 <am_hal_uart_transfer+0x15a>
    f1ee:	6811      	ldr	r1, [r2, #0]
    f1f0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f1f4:	f040 814e 	bne.w	f494 <am_hal_uart_transfer+0x3ec>
    f1f8:	3401      	adds	r4, #1
    f1fa:	42a7      	cmp	r7, r4
    f1fc:	f803 1f01 	strb.w	r1, [r3, #1]!
    f200:	d1f2      	bne.n	f1e8 <am_hal_uart_transfer+0x140>
    f202:	2700      	movs	r7, #0
    f204:	f1bb 0f00 	cmp.w	fp, #0
    f208:	f43f af58 	beq.w	f0bc <am_hal_uart_transfer+0x14>
    f20c:	f8cb 4000 	str.w	r4, [fp]
    f210:	e754      	b.n	f0bc <am_hal_uart_transfer+0x14>
    f212:	4680      	mov	r8, r0
    f214:	e76e      	b.n	f0f4 <am_hal_uart_transfer+0x4c>
    f216:	9301      	str	r3, [sp, #4]
    f218:	4651      	mov	r1, sl
    f21a:	46bb      	mov	fp, r7
    f21c:	46b8      	mov	r8, r7
    f21e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f222:	b9f2      	cbnz	r2, f262 <am_hal_uart_transfer+0x1ba>
    f224:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f226:	b19e      	cbz	r6, f250 <am_hal_uart_transfer+0x1a8>
    f228:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f22c:	321c      	adds	r2, #28
    f22e:	0312      	lsls	r2, r2, #12
    f230:	3901      	subs	r1, #1
    f232:	6994      	ldr	r4, [r2, #24]
    f234:	f3c4 1440 	ubfx	r4, r4, #5, #1
    f238:	b11c      	cbz	r4, f242 <am_hal_uart_transfer+0x19a>
    f23a:	e047      	b.n	f2cc <am_hal_uart_transfer+0x224>
    f23c:	6993      	ldr	r3, [r2, #24]
    f23e:	069b      	lsls	r3, r3, #26
    f240:	d441      	bmi.n	f2c6 <am_hal_uart_transfer+0x21e>
    f242:	3401      	adds	r4, #1
    f244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    f248:	6013      	str	r3, [r2, #0]
    f24a:	42b4      	cmp	r4, r6
    f24c:	d1f6      	bne.n	f23c <am_hal_uart_transfer+0x194>
    f24e:	44a0      	add	r8, r4
    f250:	9b00      	ldr	r3, [sp, #0]
    f252:	2b00      	cmp	r3, #0
    f254:	d09f      	beq.n	f196 <am_hal_uart_transfer+0xee>
    f256:	4638      	mov	r0, r7
    f258:	f8c3 8000 	str.w	r8, [r3]
    f25c:	b011      	add	sp, #68	; 0x44
    f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f262:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f264:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    f266:	1b14      	subs	r4, r2, r4
    f268:	42b4      	cmp	r4, r6
    f26a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    f26e:	bf28      	it	cs
    f270:	4634      	movcs	r4, r6
    f272:	4622      	mov	r2, r4
    f274:	4618      	mov	r0, r3
    f276:	9302      	str	r3, [sp, #8]
    f278:	f000 f9e0 	bl	f63c <am_hal_queue_item_add>
    f27c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f27e:	9303      	str	r3, [sp, #12]
    f280:	f7fe febc 	bl	dffc <am_hal_interrupt_master_disable>
    f284:	9b03      	ldr	r3, [sp, #12]
    f286:	9008      	str	r0, [sp, #32]
    f288:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f28c:	331c      	adds	r3, #28
    f28e:	031b      	lsls	r3, r3, #12
    f290:	9303      	str	r3, [sp, #12]
    f292:	e00d      	b.n	f2b0 <am_hal_uart_transfer+0x208>
    f294:	f000 fa0a 	bl	f6ac <am_hal_queue_item_get>
    f298:	b190      	cbz	r0, f2c0 <am_hal_uart_transfer+0x218>
    f29a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f29c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f2a0:	331c      	adds	r3, #28
    f2a2:	031b      	lsls	r3, r3, #12
    f2a4:	699a      	ldr	r2, [r3, #24]
    f2a6:	0692      	lsls	r2, r2, #26
    f2a8:	bf5c      	itt	pl
    f2aa:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    f2ae:	601a      	strpl	r2, [r3, #0]
    f2b0:	9b03      	ldr	r3, [sp, #12]
    f2b2:	9802      	ldr	r0, [sp, #8]
    f2b4:	699b      	ldr	r3, [r3, #24]
    f2b6:	069b      	lsls	r3, r3, #26
    f2b8:	f04f 0201 	mov.w	r2, #1
    f2bc:	a907      	add	r1, sp, #28
    f2be:	d5e9      	bpl.n	f294 <am_hal_uart_transfer+0x1ec>
    f2c0:	9808      	ldr	r0, [sp, #32]
    f2c2:	f7fe fe9f 	bl	e004 <am_hal_interrupt_master_set>
    f2c6:	1b36      	subs	r6, r6, r4
    f2c8:	44a0      	add	r8, r4
    f2ca:	d0c1      	beq.n	f250 <am_hal_uart_transfer+0x1a8>
    f2cc:	2001      	movs	r0, #1
    f2ce:	f7fe fcd7 	bl	dc80 <am_hal_flash_delay>
    f2d2:	f1b9 3fff 	cmp.w	r9, #4294967295
    f2d6:	d001      	beq.n	f2dc <am_hal_uart_transfer+0x234>
    f2d8:	f10b 0b01 	add.w	fp, fp, #1
    f2dc:	45d9      	cmp	r9, fp
    f2de:	d9b7      	bls.n	f250 <am_hal_uart_transfer+0x1a8>
    f2e0:	682a      	ldr	r2, [r5, #0]
    f2e2:	9b01      	ldr	r3, [sp, #4]
    f2e4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f2e8:	429a      	cmp	r2, r3
    f2ea:	eb0a 0108 	add.w	r1, sl, r8
    f2ee:	f47f af01 	bne.w	f0f4 <am_hal_uart_transfer+0x4c>
    f2f2:	e794      	b.n	f21e <am_hal_uart_transfer+0x176>
    f2f4:	4606      	mov	r6, r0
    f2f6:	2702      	movs	r7, #2
    f2f8:	e71a      	b.n	f130 <am_hal_uart_transfer+0x88>
    f2fa:	9200      	str	r2, [sp, #0]
    f2fc:	f100 0248 	add.w	r2, r0, #72	; 0x48
    f300:	f04f 0a00 	mov.w	sl, #0
    f304:	9202      	str	r2, [sp, #8]
    f306:	465a      	mov	r2, fp
    f308:	4698      	mov	r8, r3
    f30a:	469b      	mov	fp, r3
    f30c:	4656      	mov	r6, sl
    f30e:	4613      	mov	r3, r2
    f310:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    f314:	2a00      	cmp	r2, #0
    f316:	d152      	bne.n	f3be <am_hal_uart_transfer+0x316>
    f318:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f31a:	b3a7      	cbz	r7, f386 <am_hal_uart_transfer+0x2de>
    f31c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f320:	311c      	adds	r1, #28
    f322:	0309      	lsls	r1, r1, #12
    f324:	698a      	ldr	r2, [r1, #24]
    f326:	06d0      	lsls	r0, r2, #27
    f328:	d432      	bmi.n	f390 <am_hal_uart_transfer+0x2e8>
    f32a:	680a      	ldr	r2, [r1, #0]
    f32c:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    f330:	f040 80aa 	bne.w	f488 <am_hal_uart_transfer+0x3e0>
    f334:	f108 38ff 	add.w	r8, r8, #4294967295
    f338:	e006      	b.n	f348 <am_hal_uart_transfer+0x2a0>
    f33a:	698a      	ldr	r2, [r1, #24]
    f33c:	06d2      	lsls	r2, r2, #27
    f33e:	d41f      	bmi.n	f380 <am_hal_uart_transfer+0x2d8>
    f340:	680a      	ldr	r2, [r1, #0]
    f342:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f346:	d161      	bne.n	f40c <am_hal_uart_transfer+0x364>
    f348:	3401      	adds	r4, #1
    f34a:	42bc      	cmp	r4, r7
    f34c:	f808 2f01 	strb.w	r2, [r8, #1]!
    f350:	d1f3      	bne.n	f33a <am_hal_uart_transfer+0x292>
    f352:	469b      	mov	fp, r3
    f354:	4426      	add	r6, r4
    f356:	f1bb 0f00 	cmp.w	fp, #0
    f35a:	f43f af1c 	beq.w	f196 <am_hal_uart_transfer+0xee>
    f35e:	f8cb 6000 	str.w	r6, [fp]
    f362:	2700      	movs	r7, #0
    f364:	e6aa      	b.n	f0bc <am_hal_uart_transfer+0x14>
    f366:	9807      	ldr	r0, [sp, #28]
    f368:	f7fe fe4c 	bl	e004 <am_hal_interrupt_master_set>
    f36c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f36e:	9802      	ldr	r0, [sp, #8]
    f370:	42bc      	cmp	r4, r7
    f372:	bf28      	it	cs
    f374:	463c      	movcs	r4, r7
    f376:	4641      	mov	r1, r8
    f378:	4622      	mov	r2, r4
    f37a:	f000 f997 	bl	f6ac <am_hal_queue_item_get>
    f37e:	9b01      	ldr	r3, [sp, #4]
    f380:	1b3f      	subs	r7, r7, r4
    f382:	4426      	add	r6, r4
    f384:	d104      	bne.n	f390 <am_hal_uart_transfer+0x2e8>
    f386:	469b      	mov	fp, r3
    f388:	e7e5      	b.n	f356 <am_hal_uart_transfer+0x2ae>
    f38a:	bf00      	nop
    f38c:	01ea9e06 	.word	0x01ea9e06
    f390:	2001      	movs	r0, #1
    f392:	9301      	str	r3, [sp, #4]
    f394:	f7fe fc74 	bl	dc80 <am_hal_flash_delay>
    f398:	f1b9 3fff 	cmp.w	r9, #4294967295
    f39c:	9b01      	ldr	r3, [sp, #4]
    f39e:	d001      	beq.n	f3a4 <am_hal_uart_transfer+0x2fc>
    f3a0:	f10a 0a01 	add.w	sl, sl, #1
    f3a4:	45d1      	cmp	r9, sl
    f3a6:	d9ee      	bls.n	f386 <am_hal_uart_transfer+0x2de>
    f3a8:	682a      	ldr	r2, [r5, #0]
    f3aa:	9900      	ldr	r1, [sp, #0]
    f3ac:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f3b0:	428a      	cmp	r2, r1
    f3b2:	eb0b 0806 	add.w	r8, fp, r6
    f3b6:	d0ab      	beq.n	f310 <am_hal_uart_transfer+0x268>
    f3b8:	469b      	mov	fp, r3
    f3ba:	2702      	movs	r7, #2
    f3bc:	e6b8      	b.n	f130 <am_hal_uart_transfer+0x88>
    f3be:	9301      	str	r3, [sp, #4]
    f3c0:	f7fe fe1c 	bl	dffc <am_hal_interrupt_master_disable>
    f3c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f3c6:	9007      	str	r0, [sp, #28]
    f3c8:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    f3cc:	301c      	adds	r0, #28
    f3ce:	9b01      	ldr	r3, [sp, #4]
    f3d0:	0300      	lsls	r0, r0, #12
    f3d2:	ac08      	add	r4, sp, #32
    f3d4:	2200      	movs	r2, #0
    f3d6:	6981      	ldr	r1, [r0, #24]
    f3d8:	06c9      	lsls	r1, r1, #27
    f3da:	d409      	bmi.n	f3f0 <am_hal_uart_transfer+0x348>
    f3dc:	6801      	ldr	r1, [r0, #0]
    f3de:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f3e2:	f102 0201 	add.w	r2, r2, #1
    f3e6:	d118      	bne.n	f41a <am_hal_uart_transfer+0x372>
    f3e8:	2a20      	cmp	r2, #32
    f3ea:	f804 1b01 	strb.w	r1, [r4], #1
    f3ee:	d1f2      	bne.n	f3d6 <am_hal_uart_transfer+0x32e>
    f3f0:	a908      	add	r1, sp, #32
    f3f2:	9802      	ldr	r0, [sp, #8]
    f3f4:	9301      	str	r3, [sp, #4]
    f3f6:	f000 f921 	bl	f63c <am_hal_queue_item_add>
    f3fa:	9b01      	ldr	r3, [sp, #4]
    f3fc:	2800      	cmp	r0, #0
    f3fe:	d1b2      	bne.n	f366 <am_hal_uart_transfer+0x2be>
    f400:	4f45      	ldr	r7, [pc, #276]	; (f518 <am_hal_uart_transfer+0x470>)
    f402:	469b      	mov	fp, r3
    f404:	9807      	ldr	r0, [sp, #28]
    f406:	f7fe fdfd 	bl	e004 <am_hal_interrupt_master_set>
    f40a:	e691      	b.n	f130 <am_hal_uart_transfer+0x88>
    f40c:	469b      	mov	fp, r3
    f40e:	4426      	add	r6, r4
    f410:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f414:	e68c      	b.n	f130 <am_hal_uart_transfer+0x88>
    f416:	46b8      	mov	r8, r7
    f418:	e71a      	b.n	f250 <am_hal_uart_transfer+0x1a8>
    f41a:	469b      	mov	fp, r3
    f41c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f420:	e7f0      	b.n	f404 <am_hal_uart_transfer+0x35c>
    f422:	463e      	mov	r6, r7
    f424:	e797      	b.n	f356 <am_hal_uart_transfer+0x2ae>
    f426:	4616      	mov	r6, r2
    f428:	e6b2      	b.n	f190 <am_hal_uart_transfer+0xe8>
    f42a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f42c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f42e:	1a9b      	subs	r3, r3, r2
    f430:	429e      	cmp	r6, r3
    f432:	bf28      	it	cs
    f434:	461e      	movcs	r6, r3
    f436:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    f43a:	4651      	mov	r1, sl
    f43c:	4632      	mov	r2, r6
    f43e:	4620      	mov	r0, r4
    f440:	f000 f8fc 	bl	f63c <am_hal_queue_item_add>
    f444:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f446:	f7fe fdd9 	bl	dffc <am_hal_interrupt_master_disable>
    f44a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f44e:	371c      	adds	r7, #28
    f450:	033f      	lsls	r7, r7, #12
    f452:	9005      	str	r0, [sp, #20]
    f454:	e00d      	b.n	f472 <am_hal_uart_transfer+0x3ca>
    f456:	f000 f929 	bl	f6ac <am_hal_queue_item_get>
    f45a:	b188      	cbz	r0, f480 <am_hal_uart_transfer+0x3d8>
    f45c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f45e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f462:	331c      	adds	r3, #28
    f464:	031b      	lsls	r3, r3, #12
    f466:	699a      	ldr	r2, [r3, #24]
    f468:	0692      	lsls	r2, r2, #26
    f46a:	bf5c      	itt	pl
    f46c:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    f470:	601a      	strpl	r2, [r3, #0]
    f472:	69bb      	ldr	r3, [r7, #24]
    f474:	069b      	lsls	r3, r3, #26
    f476:	f04f 0201 	mov.w	r2, #1
    f47a:	a908      	add	r1, sp, #32
    f47c:	4620      	mov	r0, r4
    f47e:	d5ea      	bpl.n	f456 <am_hal_uart_transfer+0x3ae>
    f480:	9805      	ldr	r0, [sp, #20]
    f482:	f7fe fdbf 	bl	e004 <am_hal_interrupt_master_set>
    f486:	e683      	b.n	f190 <am_hal_uart_transfer+0xe8>
    f488:	469b      	mov	fp, r3
    f48a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f48e:	e64f      	b.n	f130 <am_hal_uart_transfer+0x88>
    f490:	461e      	mov	r6, r3
    f492:	e67d      	b.n	f190 <am_hal_uart_transfer+0xe8>
    f494:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f498:	e6b4      	b.n	f204 <am_hal_uart_transfer+0x15c>
    f49a:	9300      	str	r3, [sp, #0]
    f49c:	f7fe fdae 	bl	dffc <am_hal_interrupt_master_disable>
    f4a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f4a2:	9006      	str	r0, [sp, #24]
    f4a4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f4a8:	321c      	adds	r2, #28
    f4aa:	0311      	lsls	r1, r2, #12
    f4ac:	a808      	add	r0, sp, #32
    f4ae:	2200      	movs	r2, #0
    f4b0:	9b00      	ldr	r3, [sp, #0]
    f4b2:	e009      	b.n	f4c8 <am_hal_uart_transfer+0x420>
    f4b4:	680c      	ldr	r4, [r1, #0]
    f4b6:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    f4ba:	f102 0201 	add.w	r2, r2, #1
    f4be:	d121      	bne.n	f504 <am_hal_uart_transfer+0x45c>
    f4c0:	2a20      	cmp	r2, #32
    f4c2:	f800 4b01 	strb.w	r4, [r0], #1
    f4c6:	d002      	beq.n	f4ce <am_hal_uart_transfer+0x426>
    f4c8:	698c      	ldr	r4, [r1, #24]
    f4ca:	06e4      	lsls	r4, r4, #27
    f4cc:	d5f2      	bpl.n	f4b4 <am_hal_uart_transfer+0x40c>
    f4ce:	f105 0648 	add.w	r6, r5, #72	; 0x48
    f4d2:	a908      	add	r1, sp, #32
    f4d4:	4630      	mov	r0, r6
    f4d6:	9300      	str	r3, [sp, #0]
    f4d8:	f000 f8b0 	bl	f63c <am_hal_queue_item_add>
    f4dc:	b920      	cbnz	r0, f4e8 <am_hal_uart_transfer+0x440>
    f4de:	4f0e      	ldr	r7, [pc, #56]	; (f518 <am_hal_uart_transfer+0x470>)
    f4e0:	9806      	ldr	r0, [sp, #24]
    f4e2:	f7fe fd8f 	bl	e004 <am_hal_interrupt_master_set>
    f4e6:	e5e9      	b.n	f0bc <am_hal_uart_transfer+0x14>
    f4e8:	9806      	ldr	r0, [sp, #24]
    f4ea:	f7fe fd8b 	bl	e004 <am_hal_interrupt_master_set>
    f4ee:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f4f0:	9b00      	ldr	r3, [sp, #0]
    f4f2:	42bc      	cmp	r4, r7
    f4f4:	bf28      	it	cs
    f4f6:	463c      	movcs	r4, r7
    f4f8:	4619      	mov	r1, r3
    f4fa:	4630      	mov	r0, r6
    f4fc:	4622      	mov	r2, r4
    f4fe:	f000 f8d5 	bl	f6ac <am_hal_queue_item_get>
    f502:	e67e      	b.n	f202 <am_hal_uart_transfer+0x15a>
    f504:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f508:	e7ea      	b.n	f4e0 <am_hal_uart_transfer+0x438>
    f50a:	4604      	mov	r4, r0
    f50c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f510:	e678      	b.n	f204 <am_hal_uart_transfer+0x15c>
    f512:	4627      	mov	r7, r4
    f514:	e676      	b.n	f204 <am_hal_uart_transfer+0x15c>
    f516:	bf00      	nop
    f518:	08000001 	.word	0x08000001

0000f51c <am_hal_cmdq_init>:
    f51c:	2807      	cmp	r0, #7
    f51e:	d901      	bls.n	f524 <am_hal_cmdq_init+0x8>
    f520:	2005      	movs	r0, #5
    f522:	4770      	bx	lr
    f524:	b1c9      	cbz	r1, f55a <am_hal_cmdq_init+0x3e>
    f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f52a:	684c      	ldr	r4, [r1, #4]
    f52c:	b194      	cbz	r4, f554 <am_hal_cmdq_init+0x38>
    f52e:	b18a      	cbz	r2, f554 <am_hal_cmdq_init+0x38>
    f530:	680e      	ldr	r6, [r1, #0]
    f532:	2e01      	cmp	r6, #1
    f534:	d90e      	bls.n	f554 <am_hal_cmdq_init+0x38>
    f536:	272c      	movs	r7, #44	; 0x2c
    f538:	f8df c09c 	ldr.w	ip, [pc, #156]	; f5d8 <am_hal_cmdq_init+0xbc>
    f53c:	fb07 f700 	mul.w	r7, r7, r0
    f540:	eb0c 0507 	add.w	r5, ip, r7
    f544:	f895 e003 	ldrb.w	lr, [r5, #3]
    f548:	f01e 0301 	ands.w	r3, lr, #1
    f54c:	d007      	beq.n	f55e <am_hal_cmdq_init+0x42>
    f54e:	2007      	movs	r0, #7
    f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f554:	2006      	movs	r0, #6
    f556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f55a:	2006      	movs	r0, #6
    f55c:	4770      	bx	lr
    f55e:	f04e 0e01 	orr.w	lr, lr, #1
    f562:	00f6      	lsls	r6, r6, #3
    f564:	f363 0e41 	bfi	lr, r3, #1, #1
    f568:	f885 e003 	strb.w	lr, [r5, #3]
    f56c:	eb06 0804 	add.w	r8, r6, r4
    f570:	f8df e068 	ldr.w	lr, [pc, #104]	; f5dc <am_hal_cmdq_init+0xc0>
    f574:	f8c5 8008 	str.w	r8, [r5, #8]
    f578:	606c      	str	r4, [r5, #4]
    f57a:	60ec      	str	r4, [r5, #12]
    f57c:	616c      	str	r4, [r5, #20]
    f57e:	612c      	str	r4, [r5, #16]
    f580:	61ae      	str	r6, [r5, #24]
    f582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f586:	f85c 6007 	ldr.w	r6, [ip, r7]
    f58a:	f8df 8054 	ldr.w	r8, [pc, #84]	; f5e0 <am_hal_cmdq_init+0xc4>
    f58e:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    f592:	f368 0617 	bfi	r6, r8, #0, #24
    f596:	f8d0 e008 	ldr.w	lr, [r0, #8]
    f59a:	f84c 6007 	str.w	r6, [ip, r7]
    f59e:	6268      	str	r0, [r5, #36]	; 0x24
    f5a0:	61eb      	str	r3, [r5, #28]
    f5a2:	622b      	str	r3, [r5, #32]
    f5a4:	f8ce 3000 	str.w	r3, [lr]
    f5a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f5aa:	7a09      	ldrb	r1, [r1, #8]
    f5ac:	68c0      	ldr	r0, [r0, #12]
    f5ae:	6003      	str	r3, [r0, #0]
    f5b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f5b2:	6906      	ldr	r6, [r0, #16]
    f5b4:	6940      	ldr	r0, [r0, #20]
    f5b6:	6837      	ldr	r7, [r6, #0]
    f5b8:	4338      	orrs	r0, r7
    f5ba:	6030      	str	r0, [r6, #0]
    f5bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f5be:	6840      	ldr	r0, [r0, #4]
    f5c0:	6004      	str	r4, [r0, #0]
    f5c2:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f5c4:	0049      	lsls	r1, r1, #1
    f5c6:	6804      	ldr	r4, [r0, #0]
    f5c8:	f001 0102 	and.w	r1, r1, #2
    f5cc:	6021      	str	r1, [r4, #0]
    f5ce:	4618      	mov	r0, r3
    f5d0:	6015      	str	r5, [r2, #0]
    f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5d6:	bf00      	nop
    f5d8:	10001144 	.word	0x10001144
    f5dc:	0000fcb4 	.word	0x0000fcb4
    f5e0:	00cdcdcd 	.word	0x00cdcdcd

0000f5e4 <am_hal_cmdq_enable>:
    f5e4:	4603      	mov	r3, r0
    f5e6:	b128      	cbz	r0, f5f4 <am_hal_cmdq_enable+0x10>
    f5e8:	6802      	ldr	r2, [r0, #0]
    f5ea:	490d      	ldr	r1, [pc, #52]	; (f620 <am_hal_cmdq_enable+0x3c>)
    f5ec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f5f0:	428a      	cmp	r2, r1
    f5f2:	d001      	beq.n	f5f8 <am_hal_cmdq_enable+0x14>
    f5f4:	2002      	movs	r0, #2
    f5f6:	4770      	bx	lr
    f5f8:	78c2      	ldrb	r2, [r0, #3]
    f5fa:	f002 0202 	and.w	r2, r2, #2
    f5fe:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f602:	b952      	cbnz	r2, f61a <am_hal_cmdq_enable+0x36>
    f604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f606:	6811      	ldr	r1, [r2, #0]
    f608:	680a      	ldr	r2, [r1, #0]
    f60a:	f042 0201 	orr.w	r2, r2, #1
    f60e:	600a      	str	r2, [r1, #0]
    f610:	78da      	ldrb	r2, [r3, #3]
    f612:	f042 0202 	orr.w	r2, r2, #2
    f616:	70da      	strb	r2, [r3, #3]
    f618:	4770      	bx	lr
    f61a:	2000      	movs	r0, #0
    f61c:	4770      	bx	lr
    f61e:	bf00      	nop
    f620:	01cdcdcd 	.word	0x01cdcdcd

0000f624 <am_hal_queue_init>:
    f624:	b410      	push	{r4}
    f626:	2400      	movs	r4, #0
    f628:	6004      	str	r4, [r0, #0]
    f62a:	6044      	str	r4, [r0, #4]
    f62c:	6084      	str	r4, [r0, #8]
    f62e:	60c3      	str	r3, [r0, #12]
    f630:	6102      	str	r2, [r0, #16]
    f632:	6141      	str	r1, [r0, #20]
    f634:	f85d 4b04 	ldr.w	r4, [sp], #4
    f638:	4770      	bx	lr
    f63a:	bf00      	nop

0000f63c <am_hal_queue_item_add>:
    f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f63e:	4604      	mov	r4, r0
    f640:	6906      	ldr	r6, [r0, #16]
    f642:	b083      	sub	sp, #12
    f644:	fb06 f602 	mul.w	r6, r6, r2
    f648:	460d      	mov	r5, r1
    f64a:	f7fe fcd7 	bl	dffc <am_hal_interrupt_master_disable>
    f64e:	68e7      	ldr	r7, [r4, #12]
    f650:	68a2      	ldr	r2, [r4, #8]
    f652:	9001      	str	r0, [sp, #4]
    f654:	1abb      	subs	r3, r7, r2
    f656:	429e      	cmp	r6, r3
    f658:	d826      	bhi.n	f6a8 <am_hal_queue_item_add+0x6c>
    f65a:	b196      	cbz	r6, f682 <am_hal_queue_item_add+0x46>
    f65c:	6823      	ldr	r3, [r4, #0]
    f65e:	4629      	mov	r1, r5
    f660:	b1c5      	cbz	r5, f694 <am_hal_queue_item_add+0x58>
    f662:	19af      	adds	r7, r5, r6
    f664:	6962      	ldr	r2, [r4, #20]
    f666:	f811 0b01 	ldrb.w	r0, [r1], #1
    f66a:	54d0      	strb	r0, [r2, r3]
    f66c:	6823      	ldr	r3, [r4, #0]
    f66e:	68e5      	ldr	r5, [r4, #12]
    f670:	3301      	adds	r3, #1
    f672:	42b9      	cmp	r1, r7
    f674:	fbb3 f0f5 	udiv	r0, r3, r5
    f678:	fb05 3310 	mls	r3, r5, r0, r3
    f67c:	6023      	str	r3, [r4, #0]
    f67e:	d1f1      	bne.n	f664 <am_hal_queue_item_add+0x28>
    f680:	68a2      	ldr	r2, [r4, #8]
    f682:	4432      	add	r2, r6
    f684:	60a2      	str	r2, [r4, #8]
    f686:	2401      	movs	r4, #1
    f688:	9801      	ldr	r0, [sp, #4]
    f68a:	f7fe fcbb 	bl	e004 <am_hal_interrupt_master_set>
    f68e:	4620      	mov	r0, r4
    f690:	b003      	add	sp, #12
    f692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f694:	3101      	adds	r1, #1
    f696:	3301      	adds	r3, #1
    f698:	428e      	cmp	r6, r1
    f69a:	fbb3 f0f7 	udiv	r0, r3, r7
    f69e:	fb07 3310 	mls	r3, r7, r0, r3
    f6a2:	d1f7      	bne.n	f694 <am_hal_queue_item_add+0x58>
    f6a4:	6023      	str	r3, [r4, #0]
    f6a6:	e7ec      	b.n	f682 <am_hal_queue_item_add+0x46>
    f6a8:	2400      	movs	r4, #0
    f6aa:	e7ed      	b.n	f688 <am_hal_queue_item_add+0x4c>

0000f6ac <am_hal_queue_item_get>:
    f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ae:	4604      	mov	r4, r0
    f6b0:	6906      	ldr	r6, [r0, #16]
    f6b2:	b083      	sub	sp, #12
    f6b4:	fb06 f602 	mul.w	r6, r6, r2
    f6b8:	460d      	mov	r5, r1
    f6ba:	f7fe fc9f 	bl	dffc <am_hal_interrupt_master_disable>
    f6be:	68a2      	ldr	r2, [r4, #8]
    f6c0:	9001      	str	r0, [sp, #4]
    f6c2:	4296      	cmp	r6, r2
    f6c4:	d81c      	bhi.n	f700 <am_hal_queue_item_get+0x54>
    f6c6:	b196      	cbz	r6, f6ee <am_hal_queue_item_get+0x42>
    f6c8:	6863      	ldr	r3, [r4, #4]
    f6ca:	b1dd      	cbz	r5, f704 <am_hal_queue_item_get+0x58>
    f6cc:	4629      	mov	r1, r5
    f6ce:	19af      	adds	r7, r5, r6
    f6d0:	6962      	ldr	r2, [r4, #20]
    f6d2:	5cd3      	ldrb	r3, [r2, r3]
    f6d4:	f801 3b01 	strb.w	r3, [r1], #1
    f6d8:	6863      	ldr	r3, [r4, #4]
    f6da:	68e5      	ldr	r5, [r4, #12]
    f6dc:	3301      	adds	r3, #1
    f6de:	428f      	cmp	r7, r1
    f6e0:	fbb3 f0f5 	udiv	r0, r3, r5
    f6e4:	fb05 3310 	mls	r3, r5, r0, r3
    f6e8:	6063      	str	r3, [r4, #4]
    f6ea:	d1f1      	bne.n	f6d0 <am_hal_queue_item_get+0x24>
    f6ec:	68a2      	ldr	r2, [r4, #8]
    f6ee:	1b92      	subs	r2, r2, r6
    f6f0:	60a2      	str	r2, [r4, #8]
    f6f2:	2401      	movs	r4, #1
    f6f4:	9801      	ldr	r0, [sp, #4]
    f6f6:	f7fe fc85 	bl	e004 <am_hal_interrupt_master_set>
    f6fa:	4620      	mov	r0, r4
    f6fc:	b003      	add	sp, #12
    f6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f700:	2400      	movs	r4, #0
    f702:	e7f7      	b.n	f6f4 <am_hal_queue_item_get+0x48>
    f704:	68e0      	ldr	r0, [r4, #12]
    f706:	4629      	mov	r1, r5
    f708:	3101      	adds	r1, #1
    f70a:	3301      	adds	r3, #1
    f70c:	428e      	cmp	r6, r1
    f70e:	fbb3 f5f0 	udiv	r5, r3, r0
    f712:	fb00 3315 	mls	r3, r0, r5, r3
    f716:	d1f7      	bne.n	f708 <am_hal_queue_item_get+0x5c>
    f718:	6063      	str	r3, [r4, #4]
    f71a:	e7e8      	b.n	f6ee <am_hal_queue_item_get+0x42>
    f71c:	72617053 	.word	0x72617053
    f720:	6e75466b 	.word	0x6e75466b
    f724:	67644520 	.word	0x67644520
    f728:	6f422065 	.word	0x6f422065
    f72c:	20647261 	.word	0x20647261
    f730:	74736554 	.word	0x74736554
    f734:	0000000a 	.word	0x0000000a
    f738:	313a3631 	.word	0x313a3631
    f73c:	39343a31 	.word	0x39343a31
    f740:	00000000 	.word	0x00000000
    f744:	206e614a 	.word	0x206e614a
    f748:	32203832 	.word	0x32203832
    f74c:	00393130 	.word	0x00393130
    f750:	706d6f43 	.word	0x706d6f43
    f754:	64656c69 	.word	0x64656c69
    f758:	206e6f20 	.word	0x206e6f20
    f75c:	202c7325 	.word	0x202c7325
    f760:	0a0a7325 	.word	0x0a0a7325
    f764:	00000000 	.word	0x00000000
    f768:	72617053 	.word	0x72617053
    f76c:	6e75466b 	.word	0x6e75466b
    f770:	6e655420 	.word	0x6e655420
    f774:	66726f73 	.word	0x66726f73
    f778:	20776f6c 	.word	0x20776f6c
    f77c:	75626544 	.word	0x75626544
    f780:	754f2067 	.word	0x754f2067
    f784:	74757074 	.word	0x74757074
    f788:	57532820 	.word	0x57532820
    f78c:	0a0d294f 	.word	0x0a0d294f
    f790:	00000000 	.word	0x00000000
    f794:	6c6c6548 	.word	0x6c6c6548
    f798:	55202c6f 	.word	0x55202c6f
    f79c:	21545241 	.word	0x21545241
    f7a0:	00000a0d 	.word	0x00000a0d
    f7a4:	0a0a0a0a 	.word	0x0a0a0a0a
    f7a8:	0a0a0a0a 	.word	0x0a0a0a0a
    f7ac:	0a0a0a0a 	.word	0x0a0a0a0a
    f7b0:	0a0a0a0a 	.word	0x0a0a0a0a
    f7b4:	00000a0a 	.word	0x00000a0a
    f7b8:	6f727245 	.word	0x6f727245
    f7bc:	65722072 	.word	0x65722072
    f7c0:	6e696461 	.word	0x6e696461
    f7c4:	44412067 	.word	0x44412067
    f7c8:	6e692043 	.word	0x6e692043
    f7cc:	72726574 	.word	0x72726574
    f7d0:	20747075 	.word	0x20747075
    f7d4:	74617473 	.word	0x74617473
    f7d8:	000a7375 	.word	0x000a7375
    f7dc:	6f727245 	.word	0x6f727245
    f7e0:	6c632072 	.word	0x6c632072
    f7e4:	69726165 	.word	0x69726165
    f7e8:	4120676e 	.word	0x4120676e
    f7ec:	69204344 	.word	0x69204344
    f7f0:	7265746e 	.word	0x7265746e
    f7f4:	74707572 	.word	0x74707572
    f7f8:	61747320 	.word	0x61747320
    f7fc:	0a737574 	.word	0x0a737574
    f800:	00000000 	.word	0x00000000
    f804:	6f727245 	.word	0x6f727245
    f808:	202d2072 	.word	0x202d2072
    f80c:	20434441 	.word	0x20434441
    f810:	706d6173 	.word	0x706d6173
    f814:	7220656c 	.word	0x7220656c
    f818:	20646165 	.word	0x20646165
    f81c:	6d6f7266 	.word	0x6d6f7266
    f820:	46494620 	.word	0x46494620
    f824:	6166204f 	.word	0x6166204f
    f828:	64656c69 	.word	0x64656c69
    f82c:	00000a2e 	.word	0x00000a2e
    f830:	3a434441 	.word	0x3a434441
    f834:	20642520 	.word	0x20642520
    f838:	6425203d 	.word	0x6425203d
    f83c:	0000000a 	.word	0x0000000a
    f840:	6f727245 	.word	0x6f727245
    f844:	202d2072 	.word	0x202d2072
    f848:	61736964 	.word	0x61736964
    f84c:	20656c62 	.word	0x20656c62
    f850:	20434441 	.word	0x20434441
    f854:	6c696166 	.word	0x6c696166
    f858:	0a2e6465 	.word	0x0a2e6465
    f85c:	00000000 	.word	0x00000000
    f860:	6f727245 	.word	0x6f727245
    f864:	202d2072 	.word	0x202d2072
    f868:	61736964 	.word	0x61736964
    f86c:	6e696c62 	.word	0x6e696c62
    f870:	68742067 	.word	0x68742067
    f874:	44412065 	.word	0x44412065
    f878:	6f702043 	.word	0x6f702043
    f87c:	20726577 	.word	0x20726577
    f880:	616d6f64 	.word	0x616d6f64
    f884:	66206e69 	.word	0x66206e69
    f888:	656c6961 	.word	0x656c6961
    f88c:	000a2e64 	.word	0x000a2e64
    f890:	6f727245 	.word	0x6f727245
    f894:	202d2072 	.word	0x202d2072
    f898:	75746572 	.word	0x75746572
    f89c:	6f206e72 	.word	0x6f206e72
    f8a0:	68742066 	.word	0x68742066
    f8a4:	44412065 	.word	0x44412065
    f8a8:	6e692043 	.word	0x6e692043
    f8ac:	6e617473 	.word	0x6e617473
    f8b0:	66206563 	.word	0x66206563
    f8b4:	656c6961 	.word	0x656c6961
    f8b8:	000a2e64 	.word	0x000a2e64
    f8bc:	6f727245 	.word	0x6f727245
    f8c0:	202d2072 	.word	0x202d2072
    f8c4:	65736572 	.word	0x65736572
    f8c8:	74617672 	.word	0x74617672
    f8cc:	206e6f69 	.word	0x206e6f69
    f8d0:	7420666f 	.word	0x7420666f
    f8d4:	41206568 	.word	0x41206568
    f8d8:	69204344 	.word	0x69204344
    f8dc:	6174736e 	.word	0x6174736e
    f8e0:	2065636e 	.word	0x2065636e
    f8e4:	6c696166 	.word	0x6c696166
    f8e8:	0a2e6465 	.word	0x0a2e6465
    f8ec:	00000000 	.word	0x00000000
    f8f0:	6f727245 	.word	0x6f727245
    f8f4:	202d2072 	.word	0x202d2072
    f8f8:	20434441 	.word	0x20434441
    f8fc:	65776f70 	.word	0x65776f70
    f900:	6e6f2072 	.word	0x6e6f2072
    f904:	69616620 	.word	0x69616620
    f908:	2e64656c 	.word	0x2e64656c
    f90c:	0000000a 	.word	0x0000000a
    f910:	6f727245 	.word	0x6f727245
    f914:	202d2072 	.word	0x202d2072
    f918:	666e6f63 	.word	0x666e6f63
    f91c:	72756769 	.word	0x72756769
    f920:	20676e69 	.word	0x20676e69
    f924:	20434441 	.word	0x20434441
    f928:	6c696166 	.word	0x6c696166
    f92c:	0a2e6465 	.word	0x0a2e6465
    f930:	00000000 	.word	0x00000000
    f934:	6f727245 	.word	0x6f727245
    f938:	202d2072 	.word	0x202d2072
    f93c:	666e6f63 	.word	0x666e6f63
    f940:	72756769 	.word	0x72756769
    f944:	20676e69 	.word	0x20676e69
    f948:	20434441 	.word	0x20434441
    f94c:	746f6c53 	.word	0x746f6c53
    f950:	66203020 	.word	0x66203020
    f954:	656c6961 	.word	0x656c6961
    f958:	000a2e64 	.word	0x000a2e64
    f95c:	6f727245 	.word	0x6f727245
    f960:	202d2072 	.word	0x202d2072
    f964:	62616e65 	.word	0x62616e65
    f968:	676e696c 	.word	0x676e696c
    f96c:	43444120 	.word	0x43444120
    f970:	69616620 	.word	0x69616620
    f974:	2e64656c 	.word	0x2e64656c
    f978:	0000000a 	.word	0x0000000a

0000f97c <g_AM_PIN_29_ADCSE1>:
    f97c:	00000000 646e6553 72726520 6425203a     ....Send err: %d
    f98c:	0000000a 65636552 20657669 3a727265     ....Receive err:
    f99c:	0a642520 00000000 65636341 6f72656c      %d.....Accelero
    f9ac:	6574656d 48572072 4d415f4f 2820495f     meter WHO_AM_I (
    f9bc:	756f6873 6220646c 78302065 3a293333     should be 0x33):
    f9cc:	25783020 00000a78                        0x%x...

0000f9d4 <g_sBspUartConfig>:
    f9d4:	0001c200 00000060 00000000 00000000     ....`...........
    f9e4:	00000000 00000012 00000000 00000000     ................
	...

0000f9fc <g_AM_BSP_GPIO_COM_UART_RX>:
    f9fc:	00000000                                ....

0000fa00 <g_AM_BSP_GPIO_COM_UART_TX>:
    fa00:	00000000                                ....

0000fa04 <g_AM_BSP_GPIO_IOM4_SCL>:
    fa04:	00040b44                                D...

0000fa08 <g_AM_BSP_GPIO_IOM4_SDA>:
    fa08:	00040b44                                D...

0000fa0c <am_hal_cachectrl_defaults>:
    fa0c:	00000308                                ....

0000fa10 <g_ui8Bit76Capabilities>:
    fa10:	02800101 80010180 80800101 80808080     ................
    fa20:	80808080 80808008 01800180 80808080     ................
    fa30:	80808080 01800402 01010401 80808080     ................
    fa40:	00000101                                ....

0000fa44 <g_ui8NCEtable>:
    fa44:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    fa54:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    fa64:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    fa74:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    fa84:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    fa94:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    faa4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    fab4:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    fac4:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    fad4:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    fae4:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    faf4:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    fb04:	32221202 43231303                       .."2..#C

0000fb0c <g_ui8Inpen>:
    fb0c:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    fb1c:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    fb2c:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    fb3c:	00003130                                01..

0000fb40 <g_AM_HAL_GPIO_DISABLE>:
    fb40:	00000003                                ....

0000fb44 <g_AM_HAL_GPIO_OUTPUT>:
    fb44:	00000403                                ....

0000fb48 <g_ui8nCEpins>:
    fb48:	02070707 00080802 01020202 01010101     ................
    fb58:	01010101 01010101 01010101 01010101     ................
    fb68:	01010101 08010101 01010008 01010101     ................
    fb78:	00000101                                ....

0000fb7c <g_AM_HAL_GPIO_OUTPUT_12>:
    fb7c:	00000703                                ....

0000fb80 <g_am_hal_mcuctrl_flash_size>:
    fb80:	00004000 00008000 00010000 00020000     .@..............
    fb90:	00040000 00080000 00100000 00200000     .............. .
	...

0000fbc0 <g_am_hal_mcuctrl_sram_size>:
    fbc0:	00004000 00008000 00010000 00020000     .@..............
    fbd0:	00040000 00080000 00100000 00060000     ................
	...

0000fc00 <am_hal_pwrctrl_peripheral_control>:
	...
    fc0c:	00000001 00000004 00000004 00000002     ................
    fc1c:	00000008 00000008 00000004 00000008     ................
    fc2c:	00000008 00000008 00000008 00000008     ................
    fc3c:	00000010 00000010 00000010 00000020     ............ ...
    fc4c:	00000010 00000010 00000040 00000010     ........@.......
    fc5c:	00000010 00000080 00000004 00000004     ................
    fc6c:	00000100 00000004 00000004 00000200     ................
    fc7c:	00000020 00000020 00000400 00000004      ... ...........
    fc8c:	00000004 00000800 00000040 00000040     ........@...@...
    fc9c:	00001000 00000080 00000080 00002000     ............. ..
    fcac:	00000100 00000100                       ........

0000fcb4 <gAmHalCmdQReg>:
    fcb4:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
    fcc4:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
    fcd4:	00000004 00000002 50005294 50005298     .........R.P.R.P
    fce4:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
    fcf4:	5000529c 00000001 00000004 00000002     .R.P............
    fd04:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
    fd14:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
    fd24:	00000004 00000002 50007294 50007298     .........r.P.r.P
    fd34:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
    fd44:	5000729c 00000001 00000004 00000002     .r.P............
    fd54:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
    fd64:	500082a8 00008000 5000829c 00000001     ...P.......P....
    fd74:	00000004 00000002 50009294 50009298     ...........P...P
    fd84:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
    fd94:	5000929c 00000001 00000004 00000002     ...P............
    fda4:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
    fdb4:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
    fdc4:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
    fdd4:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
    fde4:	5000c250 00000001 00000004 00000002     P..P............
